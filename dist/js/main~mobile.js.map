{"version":3,"file":"dist/js/main~mobile.js","sources":["webpack:///./src/common/init.ts","webpack:///./src/utilities/models/people.ts","webpack:///./src/common/env.ts","webpack:///./src/routes/Paths.ts","webpack:///./src/utilities/DateTimeUtils.ts","webpack:///./src/utilities/history.ts","webpack:///./src/localization/index.ts","webpack:///./src/logger/types.ts","webpack:///./src/reactiveVariables/index.ts","webpack:///./src/utilities/isFirstPage.ts","webpack:///./src/utilities/models/index.ts","webpack:///./src/reactiveVariables/TemplateManagementVars.ts","webpack:///./src/utilities/index.ts","webpack:///./src/routes/history.ts","webpack:///./src/utilities/Utils.ts","webpack:///./src/views/containers/ErrorBoundary/index.ts","webpack:///./src/localization/i18n.ts","webpack:///./src/reactiveVariables/CommonVars.ts","webpack:///./src/localization/fallbackLng.ts","webpack:///./src/common/csp-inject.ts","webpack:///./src/utilities/UserRoleCheckUtils.ts","webpack:///./src/service/external/graph.ts","webpack:///./src/common/icons.tsx","webpack:///./src/common/Constants.ts","webpack:///./src/service/external/index.ts","webpack:///./src/views/containers/ErrorBoundary/ErrorBoundary.tsx","webpack:///./src/logger/index.ts","webpack:///./src/styles/global.css?d386","webpack:///./src/utilities/deep-link.ts","webpack:///./src/views/containers/ErrorBoundary/ErrorBoundaryContent.container.tsx","webpack:///./src/utilities/flags.ts","webpack:///./src/service/external/utils.ts"],"sourcesContent":["import {\r\n    EntryPoint,\r\n    InvokedContext,\r\n    IScenarioLogger,\r\n    PanelLaunchMethod,\r\n    PanelRegion,\r\n    PanelType,\r\n    TelemetryScenarioStatus,\r\n    ThreadType,\r\n} from '@addressbook/components-logger';\r\nimport {\r\n    app,\r\n    getTeamsContext,\r\n    HostClientType,\r\n    notifyAppInitializationFailure,\r\n    patchTeamsFallbackData,\r\n    registerBeforeUnloadHandler,\r\n} from '@addressbook/components-metaos-host';\r\nimport { version } from '../../package.json';\r\nimport { LogCategory, logger, ScenarioName, StepName } from '../logger';\r\nimport { detectGuest, dispatchDeepLink, isNewChat, restoreLastHistory, saveLastHistory } from '../utilities';\r\nimport { DESKTOP_ENTRY, MOBILE_ENTRYPAGE } from './Constants';\r\nimport {\r\n    DevTeamsContext,\r\n    DevTeamsIdToken,\r\n    initQuery,\r\n    isDevBrowser,\r\n    URIParam,\r\n    WORKREPORT_APP_AAD_ID,\r\n    WORKREPORT_BOT_ID,\r\n} from './env';\r\nimport { initIcons } from './icons';\r\n\r\nconst tenantId = initQuery.get(URIParam.TenantId);\r\nconst subEntityId = initQuery.get(URIParam.SubEntityId);\r\n\r\nfunction initFluentUI(): void {\r\n    initIcons();\r\n}\r\n\r\nfunction removeNoScript(): void {\r\n    const noscripts = document.querySelectorAll('noscript');\r\n    noscripts.forEach(noscript => {\r\n        noscript.remove();\r\n    });\r\n}\r\n\r\n/**\r\n * init teams context\r\n * and update logger and i18n config\r\n */\r\nasync function initHost(scenario: IScenarioLogger<StepName>, isMobile: boolean): Promise<void> {\r\n    // new version parameters\r\n    const parameterVersion = initQuery.get(URIParam.Version);\r\n    if (isDevBrowser) {\r\n        patchTeamsFallbackData({\r\n            getContext: DevTeamsContext,\r\n            getAuthToken: DevTeamsIdToken,\r\n        });\r\n    }\r\n\r\n    scenario.mark(StepName.AppBootStarted);\r\n    const context = await getTeamsContext();\r\n    scenario.mark(StepName.AppBootHostContextInitialized, TelemetryScenarioStatus.Success, {\r\n        dataBag: {\r\n            theme: context.app.theme,\r\n            parameterVersion,\r\n            locale: context.app.locale,\r\n        },\r\n    });\r\n\r\n    // set up common logger properties\r\n    logger.setCommonProperty({\r\n        'AppInfo.SessionId': context.app.host.sessionId,\r\n        'AppInfo.Locale': context.app.locale,\r\n        'UserInfo.LicenseType': context.user?.licenseType,\r\n        'UserInfo.Ring': context.app.host.ringId,\r\n        'UserInfo.Id': context.user?.id,\r\n        'UserInfo.TenantId': context.user?.tenant?.id,\r\n        'UserInfo.TenantRole': context.team?.userRole,\r\n        'TeamInfo.GroupId': context.team?.groupId,\r\n        ConversationId: context.chat?.id || context.channel?.id || 'N/A',\r\n        InvokedContext: context.chat?.id\r\n            ? InvokedContext.Chat\r\n            : context.channel?.id\r\n            ? InvokedContext.Team\r\n            : InvokedContext.Global,\r\n        EntryPoint: getEntryPoint(context),\r\n        'Thread.Type': getThreadType(context),\r\n    });\r\n\r\n    if (tenantId !== context.user?.tenant?.id && context.user?.tenant?.id) {\r\n        // fallback to context.tid\r\n        logger.setCompliantAriaClient(context.user.tenant.id).then(() => {\r\n            scenario.mark(StepName.AppBootLoggerInitialized, TelemetryScenarioStatus.Success);\r\n            logger.activeLogger();\r\n        });\r\n    } else {\r\n        logger.activeLogger();\r\n    }\r\n\r\n    ensureAppClientType(isMobile, context.app.host.clientType);\r\n\r\n    // at this time, do not have i18n config\r\n    // update locale\r\n    // await i18n.changeLanguage(context.app.locale);\r\n\r\n    // scenario.mark(StepName.AppBootLocaleInitialized, TelemetryScenarioStatus.Success, {\r\n    //     dataBag: {\r\n    //         locale: `${i18n.resolvedLanguage}(${context.app.locale})`,\r\n    //     },\r\n    // });\r\n    // logger.logTraceDebug(\r\n    //     LogCategory.AppBoot,\r\n    //     `Rendering App Host with locale: ${i18n.resolvedLanguage}(${context.app.locale}), dir: ${i18n.dir()}`\r\n    // );\r\n    if (!subEntityId && !parameterVersion && context.page.subPageId) {\r\n        // for old version, we need to dispatch deeplink from context\r\n        dispatchDeepLink(context.page.subPageId, isMobile);\r\n    }\r\n}\r\n\r\n/**\r\n * check Ensure current clientType matched current app type mobile or not\r\n *\r\n * @param isMobile\r\n */\r\nfunction ensureAppClientType(isMobile: boolean, hostClientType?: HostClientType): void {\r\n    if (!location.pathname.endsWith('/')) {\r\n        // only check the default index\r\n        return;\r\n    }\r\n    if (!hostClientType) {\r\n        logger.logTraceWarning(LogCategory.AppBoot, 'hostClientType is empty');\r\n        return;\r\n    }\r\n    const mobileClientType: HostClientType[] = [\r\n        HostClientType.ios,\r\n        HostClientType.android,\r\n        'ipados' as HostClientType, // https://domoreexp.visualstudio.com/Teamspace/_git/teams-verticals-businessprocesses/pullrequest/441761\r\n    ];\r\n    if (isMobile) {\r\n        if (!mobileClientType.includes(hostClientType)) {\r\n            // Desktop Client get mobile page\r\n            logger.logTraceError(\r\n                LogCategory.AppBoot,\r\n                `${hostClientType} mismatches Mobile entry, UA: ${navigator.userAgent}`\r\n            );\r\n            logger.failScenario(ScenarioName.AppBoot);\r\n            window.location.pathname = DESKTOP_ENTRY;\r\n        }\r\n    } else if (mobileClientType.includes(hostClientType)) {\r\n        // Mobile Client get desktop page\r\n        logger.logTraceError(\r\n            LogCategory.AppBoot,\r\n            `${hostClientType} mismatches Desktop entry, UA: ${navigator.userAgent}`\r\n        );\r\n        logger.failScenario(ScenarioName.AppBoot);\r\n        window.location.pathname = MOBILE_ENTRYPAGE;\r\n    }\r\n}\r\n\r\nfunction getEntryPoint(context: app.Context): EntryPoint {\r\n    if (context.chat?.id || context.channel?.id) {\r\n        const hash = window.location.hash;\r\n        if (hash.includes('workflow/commands')) {\r\n            return EntryPoint.Workflow;\r\n        }\r\n\r\n        const taskModuleHomePageHash = '#';\r\n        return hash === taskModuleHomePageHash ? EntryPoint.ComposeExtension : EntryPoint.AdaptiveCard;\r\n    }\r\n    return EntryPoint.PersonalApp;\r\n}\r\n\r\nasync function restoreLastHistoryPage(): Promise<void> {\r\n    const userId = initQuery.get(URIParam.UserId);\r\n\r\n    // Avoid restoring the history from a deeplink entry.\r\n    if (!subEntityId && userId) {\r\n        restoreLastHistory(userId);\r\n    }\r\n}\r\n\r\nasync function registerBeforeUnloadEvent(): Promise<void> {\r\n    const userId = initQuery.get(URIParam.UserId);\r\n\r\n    registerBeforeUnloadHandler(readyToUnload => {\r\n        logger.logUserBiAction(ScenarioName.AppBoot, StepName.AppExit, PanelType.WorkReport, undefined, true);\r\n        logger.flushLogs(readyToUnload);\r\n\r\n        // Avoid storing the history from a deeplink entry.\r\n        if (!subEntityId && userId) {\r\n            saveLastHistory(userId);\r\n        }\r\n\r\n        return true;\r\n    });\r\n}\r\n\r\nasync function initLogger(): Promise<void> {\r\n    const userId = initQuery.get(URIParam.UserId);\r\n    const ringId = initQuery.get(URIParam.RingId);\r\n    const locale = initQuery.get(URIParam.Locale);\r\n    const hostClientType = initQuery.get(URIParam.ClientType);\r\n    // set up logger properties\r\n    logger.setCommonProperty({\r\n        Source: 'Client',\r\n        'Bot.Id': WORKREPORT_BOT_ID,\r\n        'App.Id': WORKREPORT_APP_AAD_ID,\r\n        'App.Name': 'Updates',\r\n        'AppInfo.ClientType': hostClientType!,\r\n        'AppInfo.Locale': locale!,\r\n        'AppInfo.Version': version,\r\n        'UserInfo.Ring': ringId!,\r\n        'UserInfo.Id': userId!,\r\n        'UserInfo.TenantId': tenantId!,\r\n    });\r\n    if (tenantId) {\r\n        await logger.setCompliantAriaClient(tenantId);\r\n        logger.markScenario(ScenarioName.AppBoot, StepName.AppBootLoggerInitialized, TelemetryScenarioStatus.Success);\r\n    }\r\n}\r\n\r\nfunction initDeepLink(isMobile: boolean): void {\r\n    if (subEntityId) {\r\n        // remove subEntityId from url query, to fix the refreshing issue\r\n        const url = new URL(window.location.href);\r\n        url.searchParams.delete(URIParam.SubEntityId);\r\n        window.history.replaceState(null, '', url.toString());\r\n        dispatchDeepLink(subEntityId, isMobile);\r\n    }\r\n}\r\nexport async function init(isMobile: boolean): Promise<void> {\r\n    let scenario: IScenarioLogger<StepName> | undefined;\r\n    try {\r\n        restoreLastHistoryPage();\r\n\r\n        // detect Guest user\r\n        const detectGuestPromise = detectGuest();\r\n\r\n        // init from url params\r\n        const initloggerPromise = initLogger();\r\n        scenario = logger.createScenario(ScenarioName.AppBoot);\r\n        logger.logUserBiView(PanelLaunchMethod.AppNav, PanelRegion.Main, PanelType.WorkReport);\r\n        initDeepLink(isMobile);\r\n\r\n        // init Host with Teams Context\r\n        const initHostPromise = initHost(scenario, isMobile);\r\n\r\n        initFluentUI();\r\n\r\n        registerBeforeUnloadEvent();\r\n        removeNoScript();\r\n\r\n        await Promise.all([initloggerPromise, initHostPromise, detectGuestPromise]);\r\n        scenario.mark(StepName.AppBootSuccess, TelemetryScenarioStatus.Success);\r\n        scenario.stop();\r\n    } catch (error) {\r\n        logger.activeLogger();\r\n        logger.logTraceError(LogCategory.AppBoot, `${error}`);\r\n        scenario?.mark(StepName.AppBootFailedWithError, TelemetryScenarioStatus.Failure);\r\n        scenario?.fail();\r\n        notifyAppInitializationFailure({ reason: app.FailedReason.Other, message: logger.sessionId });\r\n    } finally {\r\n        // eslint-disable-next-line @typescript-eslint/no-empty-function\r\n        logger.flushLogs(() => {});\r\n    }\r\n}\r\n\r\nfunction getThreadType(context: app.Context): ThreadType {\r\n    if (context.chat?.id) {\r\n        if (isNewChat(context.chat.id, context.team?.groupId, context.channel?.id)) return ThreadType.NewChat;\r\n        if (context.chat.id === '48:notes') return ThreadType.SelfChat;\r\n        if (context.chat.id.includes('meeting')) return ThreadType.Meeting;\r\n        if (context.chat.id.includes('unq.gbl.spaces')) return ThreadType.OneOnOneChat;\r\n        return ThreadType.GroupChat;\r\n    }\r\n    if (context.channel?.id) {\r\n        return ThreadType.Channel;\r\n    }\r\n    return ThreadType.NA;\r\n}\r\n","import {\r\n    ManyPeopleSelection,\r\n    PeopleSelection,\r\n    PeopleSelectionType,\r\n    SinglePeopleSelection,\r\n} from '@addressbook/components-people';\r\nimport { uniqBy } from 'lodash-es';\r\nimport { DirectoryObject, DirectoryObjectType, User } from '../../service';\r\n\r\n/**\r\n * Maps a user to a single people selection.\r\n *\r\n * @param user The user to map.\r\n * @returns The single people selection.\r\n */\r\nexport function mapUserToSinglePeopleSelection(user: User): SinglePeopleSelection {\r\n    return {\r\n        type: PeopleSelectionType.User,\r\n        id: user.Id,\r\n        name: user.DisplayName ?? '',\r\n        mail: user.Mail,\r\n        icon: user.Thumbnail,\r\n    };\r\n}\r\n\r\n// /**\r\n//  * Maps a directory object to a people selection.\r\n//  *\r\n//  * @param object The directory object to map.\r\n//  * @returns The people selection.\r\n//  */\r\n// export function mapDirectoryObjectToPeopleSelection(object: DirectoryObject): PeopleSelection {\r\n//     switch (object.Type) {\r\n//         case DirectoryObjectType.User:\r\n//             return mapUserToSinglePeopleSelection(object as User);\r\n//         case DirectoryObjectType.Group:\r\n//             return populateGroupPeopleSelection({\r\n//                 type: PeopleSelectionType.Group,\r\n//                 id: object.Id,\r\n//                 name: object.DisplayName ?? '',\r\n//             });\r\n//         case DirectoryObjectType.TeamworkTag:\r\n//             return {\r\n//                 type: PeopleSelectionType.Tag,\r\n//                 id: object.Id,\r\n//                 name: object.DisplayName ?? '',\r\n//                 icon: IconName.Tag,\r\n//             };\r\n//     }\r\n// }\r\n\r\n// /**\r\n//  * Filters role assignments to people selections.\r\n//  *\r\n//  * @param assignments The role assignments to filter.\r\n//  * @param role The role as the criterion.\r\n//  * @returns The people selections.\r\n//  */\r\n// export function filterRoleAssignmentsToPeopleSelections(\r\n//     assignments: ReportDefinitionRoleAssignment[],\r\n//     role: ReportDefinitionRole\r\n// ): PeopleSelection[] {\r\n//     return assignments\r\n//         .filter(assignment => assignment.Role === role)\r\n//         .map(assignment => mapDirectoryObjectToPeopleSelection(assignment.DirectoryObject));\r\n// }\r\n\r\n// /**\r\n//  * Maps a team tag result to a many people selection.\r\n//  *\r\n//  * @param result The team tag result to map.\r\n//  * @returns The many people selection.\r\n//  */\r\n// export function mapTeamTagResultToManyPeopleSelection(result: TeamTagResult): ManyPeopleSelection {\r\n//     return {\r\n//         type: PeopleSelectionType.Tag,\r\n//         id: result.TagId,\r\n//         name: result.DisplayName ?? '',\r\n//         resolveItems: async () => {\r\n//             const members = await SERVICE_CLIENT.teamTagVersion_GetTeamTagMembers({\r\n//                 teamId: result.TeamId,\r\n//                 tagId: result.TagId,\r\n//                 expand: ExpandValue.Members,\r\n//             });\r\n//             return uniqueAndSortUsersToSinglePeopleSelections(members);\r\n//         },\r\n//         count: result.MemberCount,\r\n//         icon: IconName.Tag,\r\n//         expandable: true,\r\n//     };\r\n// }\r\n\r\n// /**\r\n//  * Adds resolveItems and expandable properties to the selection.\r\n//  *\r\n//  * @param selection The group selection to populate.\r\n//  * @returns The group people selection.\r\n//  */\r\n// export function populateGroupPeopleSelection(selection: ManyPeopleSelection): ManyPeopleSelection {\r\n//     return {\r\n//         ...selection,\r\n//         resolveItems: async () => {\r\n//             const members = await SERVICE_CLIENT.groupsVersion_GetGroupMembers({\r\n//                 groupId: selection.id,\r\n//             });\r\n//             return uniqueAndSortUsersToSinglePeopleSelections(members);\r\n//         },\r\n//         expandable: true,\r\n//     };\r\n// }\r\n\r\n/**\r\n * Maps a people selection to a directory object without type.\r\n *\r\n * @param selection The people selection to map.\r\n * @returns The directory object without type.\r\n */\r\nexport function mapPeopleSelectionToDirectoryObjectWithoutType(\r\n    selection: Omit<PeopleSelection, 'type'>\r\n): Omit<DirectoryObject, 'Type'> {\r\n    return { Id: selection.id, DisplayName: selection.name, Mail: selection.mail };\r\n}\r\n\r\n/**\r\n * Options for mapping a people selection to directory objects.\r\n *\r\n * @param expandGroup Whether to expand groups to their members.\r\n */\r\ninterface MapPeopleSelectionToDirectoryObjectsOptions {\r\n    expandGroup?: boolean;\r\n}\r\n\r\n/**\r\n * Maps a people selection to one or more directory objects.\r\n *\r\n * Groups are left as is.\r\n * Tags or unspecific are expanded to their members.\r\n *\r\n * @param selection The people selection to map.\r\n * @param options The options for mapping the people selection to directory objects.\r\n * @returns The directory objects.\r\n */\r\nexport async function mapPeopleSelectionToDirectoryObjects(\r\n    selection: PeopleSelection,\r\n    { expandGroup }: MapPeopleSelectionToDirectoryObjectsOptions = {}\r\n): Promise<DirectoryObject[]> {\r\n    switch (selection.type) {\r\n        case PeopleSelectionType.User:\r\n            return [{ Type: DirectoryObjectType.User, ...mapPeopleSelectionToDirectoryObjectWithoutType(selection) }];\r\n        case PeopleSelectionType.Group:\r\n            if (!expandGroup) {\r\n                return [\r\n                    { Type: DirectoryObjectType.Group, ...mapPeopleSelectionToDirectoryObjectWithoutType(selection) },\r\n                ];\r\n            }\r\n            const members = (await selection.items) ?? (await selection.resolveItems?.()) ?? [];\r\n            return members.map(item => ({\r\n                Type: DirectoryObjectType.User,\r\n                ...mapPeopleSelectionToDirectoryObjectWithoutType(item),\r\n            }));\r\n        case PeopleSelectionType.Tag:\r\n        case PeopleSelectionType.Unspecific:\r\n            const items = (await selection.items) ?? (await selection.resolveItems?.()) ?? [];\r\n            return items.map(item => ({\r\n                Type: DirectoryObjectType.User,\r\n                ...mapPeopleSelectionToDirectoryObjectWithoutType(item),\r\n            }));\r\n    }\r\n}\r\n\r\n/**\r\n * Maps people selections to directory objects.\r\n * This function is used to map people selections to directory objects before sending them to the backend.\r\n *\r\n * Tags are expanded to their members.\r\n * Groups are left as is.\r\n * Duplicate objects are removed.\r\n *\r\n * @param selections The people selections to map.\r\n * @param options The options for mapping the people selections to directory objects.\r\n * @returns The directory objects.\r\n */\r\nexport async function mapPeopleSelectionsToDirectoryObjects(\r\n    selections: PeopleSelection[],\r\n    options?: MapPeopleSelectionToDirectoryObjectsOptions\r\n): Promise<DirectoryObject[]> {\r\n    const objects = await Promise.all(\r\n        selections.map(selection => mapPeopleSelectionToDirectoryObjects(selection, options))\r\n    );\r\n    return uniqBy(objects.flat(), object => object.Id);\r\n}\r\n\r\n/**\r\n * Compares two people selections.\r\n *\r\n * @param a The first people selection.\r\n * @param b The second people selection.\r\n * @returns The comparison result. If the first people selection is less than the second people selection, the result is negative. If the first people selection is equal to the second people selection, the result is zero. If the first people selection is greater than the second people selection, the result is positive.\r\n */\r\nexport function comparePeopleSelections(a: PeopleSelection, b: PeopleSelection): number {\r\n    return a.name.localeCompare(b.name, undefined, { sensitivity: 'base' });\r\n}\r\n\r\n/**\r\n * Unique and sort people selections.\r\n *\r\n * @param selections The people selections.\r\n * @returns The unique sorted people selections.\r\n */\r\nexport function uniqueAndSortPeopleSelections(selections: SinglePeopleSelection[]): SinglePeopleSelection[];\r\nexport function uniqueAndSortPeopleSelections(selections: ManyPeopleSelection[]): ManyPeopleSelection[];\r\nexport function uniqueAndSortPeopleSelections(selections: PeopleSelection[]): PeopleSelection[];\r\nexport function uniqueAndSortPeopleSelections(selections: PeopleSelection[]): PeopleSelection[] {\r\n    return uniqBy(selections, suggestion => suggestion.id).sort(comparePeopleSelections);\r\n}\r\n\r\n/**\r\n * Maps users to single people selections and unique and sort them.\r\n *\r\n * @param users The users to map.\r\n * @returns The single people selections.\r\n */\r\nexport function uniqueAndSortUsersToSinglePeopleSelections(users: User[]): SinglePeopleSelection[] {\r\n    return uniqueAndSortPeopleSelections(users.map(mapUserToSinglePeopleSelection));\r\n}\r\n\r\n/**\r\n * Counts the users of a people selection.\r\n * If the people selection is a user, the result is 1.\r\n * Otherwise, the result is determined by the items or count property.\r\n * If both items and count are not set, the result is 0 by default.\r\n *\r\n * @param selection The people selection.\r\n * @returns The number of users.\r\n */\r\nexport function countUsersOfPeopleSelection(selection: PeopleSelection): number {\r\n    return selection.type === PeopleSelectionType.User\r\n        ? 1\r\n        : Array.isArray(selection.items)\r\n        ? selection.items.length\r\n        : selection.count ?? 0;\r\n}\r\n\r\n/**\r\n * Counts the users of an array of people selections.\r\n *\r\n * @param selections The people selections.\r\n * @returns The number of users.\r\n */\r\nexport function countUsersOfPeopleSelections(selections: PeopleSelection[]): number {\r\n    return selections.reduce((count, selection) => countUsersOfPeopleSelection(selection) + count, 0);\r\n}\r\n\r\n/**\r\n * Counts the groups of an array of people selections.\r\n *\r\n * @param selections The people selections.\r\n * @returns The number of groups.\r\n */\r\nexport function countGroupsOfPeopleSelections(selections: PeopleSelection[]): number {\r\n    return selections.reduce((count, selection) => count + (selection.type === PeopleSelectionType.Group ? 1 : 0), 0);\r\n}\r\n","/*\r\n *  Copyright © Microsoft Corporation. All rights reserved.\r\n *  WARNNING: this file must should not import any other files\r\n */\r\n\r\n/**\r\n * Predefined vars\r\n * inject from config files\r\n *\r\n * @todo enable inject form URL in dev/test environment\r\n */\r\n\r\nexport const enum URIParam {\r\n    Version = 'version',\r\n    ClientType = 'clientType',\r\n    Theme = 'theme',\r\n    Locale = 'lng',\r\n    UserId = 'userId',\r\n    TenantId = 'tenantId',\r\n    RingId = 'ringId',\r\n    /**\r\n     * for deep link\r\n     */\r\n    SubEntityId = 'subEntityId',\r\n    /**\r\n     * @private\r\n     * for dev only\r\n     */\r\n    IsBrowser = 'isBrowser',\r\n}\r\n\r\n/**\r\n * current environment\r\n */\r\nconst environment = ENVIRONMENT;\r\n\r\n/**\r\n * check is dev Environment\r\n */\r\nexport const isDev = environment === 'dev';\r\n\r\n/**\r\n * check is test Environment\r\n */\r\nexport const isTest = environment === 'test';\r\n\r\n/**\r\n * check is int Environment\r\n */\r\nexport const isInt = environment === 'int';\r\n\r\n/**\r\n * ADD APP ID\r\n */\r\nconst AadAppId = WORKREPORT_APP_AAD_ID;\r\n/**\r\n * Teams App Id\r\n */\r\nconst teamsAppId = WORKREPORT_APP_TEAMS_ID;\r\n/**\r\n * TEAMS BOT ID\r\n */\r\nconst botId = WORKREPORT_BOT_ID;\r\n\r\n/**\r\n * Token for aria log\r\n */\r\nconst ariaToken = ARIA_TOKEN;\r\n\r\n/**\r\n * nonce for dynamic style\r\n */\r\nconst styleNonce = STYLE_NONCE;\r\n\r\nexport {\r\n    resourceUrl as ADDRESSBOOK_APP_RESOURCE_URL,\r\n    ariaToken as ARIA_TOKEN,\r\n    environment as ENVIRONMENT,\r\n    styleNonce as STYLE_NONCE,\r\n    AadAppId as WORKREPORT_APP_AAD_ID,\r\n    teamsAppId as WORKREPORT_APP_TEAMS_ID,\r\n    botId as WORKREPORT_BOT_ID,\r\n};\r\n\r\n/**\r\n * BASE URL for this page and auth\r\n */\r\nconst resourceUrl = ADDRESSBOOK_APP_RESOURCE_URL;\r\n\r\nexport const initQuery = /* #__PURE__*/ new URLSearchParams(window.location.search);\r\n/**\r\n * teams context for dev/mock\r\n *\r\n * @todo merge form query string\r\n */\r\nexport const DevTeamsContext = REACT_APP?.teams?.context || {};\r\n/**\r\n * teams id token for dev/mock\r\n */\r\nexport const DevTeamsIdToken: string =\r\n    (isDev && /* # PURE */ initQuery.get('teams.idToken')) ?? REACT_APP?.teams?.idToken;\r\n\r\n/**\r\n * is dev mode with browser in query\r\n */\r\nexport const isDevBrowser = isDev && /* # PURE */ initQuery.has(URIParam.IsBrowser);\r\n\r\n// ==========\r\n// declare for webpack defined vars\r\n// ==========\r\ndeclare const ENVIRONMENT: 'dev' | 'prod' | 'ppe' | 'int' | 'test' | 'gcc' | 'gcch' | 'dod' | 'gallatin';\r\ndeclare const WORKREPORT_APP_AAD_ID: string;\r\ndeclare const ADDRESSBOOK_APP_RESOURCE_URL: string;\r\ndeclare const WORKREPORT_APP_TEAMS_ID: string;\r\ndeclare const WORKREPORT_BOT_ID: string;\r\ndeclare const ARIA_TOKEN: string;\r\ndeclare const REACT_APP: Record<string, any>;\r\ndeclare const STYLE_NONCE: string | undefined;\r\ndeclare const WORKREPORT_FEEDBACK_APP_ID: string;\r\ndeclare const WORKREPORT_FEEDBACK_OCPS_ENABLED: boolean;\r\n","/*\r\n *  Copyright © Microsoft Corporation. All rights reserved.\r\n */\r\n\r\nimport { generatePath } from 'react-router-dom';\r\nimport type { SpecialErrorType } from '../views/components/ErrorStatus';\r\n\r\n/**\r\n * Paths\r\n *\r\n * Paths for navigating to various React components for the different pages\r\n */\r\n\r\nexport enum Paths {\r\n    // App pages - desktop\r\n    HomePage = '/homePage',\r\n    DepartmentTeam = '/departmentTeam',\r\n    SearchResults = '/searchResults',\r\n}\r\n\r\nexport type ViewRole = 'Submitter' | 'Receiver';\r\n\r\nexport type ViewReportFrom =\r\n    | 'Feeds'\r\n    | 'ChannelCard'\r\n    | 'ChatCard'\r\n    | 'ReceivedReportList'\r\n    | 'SubmittedReportList'\r\n    | 'ReviewDashboard'\r\n    | 'AggregatedReportListView'\r\n    | 'AggregatedReportQuestionView'\r\n    | 'SubmitUpdateV2';\r\n\r\nexport type ViewReportType = 'Report' | 'Comment';\r\n\r\nexport interface SubmitReportParams {\r\n    definitionId: string;\r\n    occurrenceId?: string;\r\n}\r\n\r\nexport interface SubmitOOBEReportParams {\r\n    templateId: string;\r\n}\r\n\r\nexport interface SubmitUpdateParams {\r\n    occurrenceId?: string;\r\n}\r\n\r\nexport interface DepartmentTeamParams {\r\n    departmentFullId: string;\r\n    departmentName: string;\r\n}\r\n\r\nexport interface DepartmentTeamV2Params {\r\n    departmentFullName: string;\r\n    departmentId: string;\r\n}\r\n\r\nexport interface DepartmentTeamV3Params {\r\n    departmentFullName: string;\r\n    departmentFullId: string;\r\n}\r\n\r\nexport interface SearchResultsParams {\r\n    searchText: string;\r\n}\r\n\r\nexport interface SubmitOOBEUpdateV2Params {\r\n    reportId?: string;\r\n}\r\n\r\nexport interface ViewReportParams {\r\n    reportId?: string;\r\n    viewDefinitionId?: string;\r\n    viewRole?: ViewRole;\r\n    from?: ViewReportFrom;\r\n    selectedCommentId?: string;\r\n}\r\n\r\nexport interface AggregatedViewParams {\r\n    occurrenceIds?: string; // comma separated occurrence ids\r\n    submitterIds?: string; // comma separated submitter ids\r\n    reportId?: string;\r\n}\r\n\r\nexport enum CreateRequestSource {\r\n    DemoCard = 'DemoCard',\r\n}\r\n\r\nexport interface CreateRequestParams {\r\n    templateId?: string;\r\n    source?: CreateRequestSource;\r\n}\r\n\r\nexport enum SourceCardType {\r\n    Occurrence = 'Occurrence',\r\n    Report = 'Report',\r\n}\r\n\r\nexport enum HomePageModalType {\r\n    SuccessStoryModal = 'SuccessStoryModal',\r\n    TemplateStoreModal = 'TemplateStoreModal',\r\n    TemplatePreviewModal = 'TemplatePreviewModal',\r\n}\r\n\r\nexport enum OwnedListType {\r\n    Received = 'Received',\r\n    Submitted = 'Submitted',\r\n    Request = 'Request',\r\n}\r\n\r\nexport enum HomePageSectionType {\r\n    Write = 'Write',\r\n    View = 'View',\r\n    List = 'List',\r\n}\r\n\r\nexport interface AllPageParams {\r\n    [Paths.DepartmentTeam]: DepartmentTeamV3Params;\r\n    [Paths.SearchResults]: SearchResultsParams;\r\n}\r\n\r\nexport type PageParams<T> = T extends keyof AllPageParams ? AllPageParams[T] : never;\r\n\r\n/**\r\n * generate url Link with parameters\r\n *\r\n * @param path\r\n * @param param\r\n * @returns\r\n */\r\nexport function generateURL<T extends Paths>(path: T, param?: RouteParams<T>, searchParam?: PageParams<T>): string {\r\n    const urlWithParams = generatePath(path, param);\r\n    return searchParam ? `${urlWithParams}?${new URLSearchParams(searchParam as any).toString()}` : urlWithParams;\r\n}\r\n\r\nexport type RouteParams<T extends string, U = string> = string extends T\r\n    ? { [k in string]?: U }\r\n    : T extends `${string}:${infer Param}/${infer Rest}`\r\n    ? ExtractRouteParamType<Param, U> & RouteParams<Rest, U>\r\n    : T extends `${string}:${infer Param}`\r\n    ? ExtractRouteParamType<Param, U>\r\n    : // eslint-disable-next-line @typescript-eslint/ban-types\r\n      {};\r\n\r\ntype ExtractRouteParamType<T extends string, U = string> = T extends keyof StrongTypeFiled\r\n    ? { [k in T]: StrongTypeFiled[T] }\r\n    : { [k in T]: U };\r\n\r\n/**\r\n * Define the Strong type for fileds\r\n * {keyInPath}: type\r\n */\r\ninterface StrongTypeFiled {\r\n    viewRole: ViewRole;\r\n    errorType: SpecialErrorType;\r\n}\r\n","/*\r\n *  Copyright © Microsoft Corporation. All rights reserved.\r\n */\r\nimport { DayOfWeek } from '@fluentui/react';\r\nimport { i18n, Strings } from '../localization';\r\n\r\n/**\r\n * friendly datetime format function for i18n\r\n *\r\n * @param value datetime\r\n * @param lng language\r\n * @returns formatted datetime string\r\n */\r\nexport const friendlyDateFormatter = (value: Date, lng?: string): string => {\r\n    const referenceTimestamp = new Date(value).setHours(0, 0, 0, 0);\r\n    const currentTimestamp = new Date().setHours(0, 0, 0, 0);\r\n    const diffTime = referenceTimestamp - currentTimestamp;\r\n    const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));\r\n\r\n    const day =\r\n        Math.abs(diffDays) <= 1\r\n            ? new Intl.RelativeTimeFormat(lng, { numeric: 'auto' }).format(diffDays, 'day')\r\n            : undefined;\r\n\r\n    // @see https://stackoverflow.com/questions/1026069/how-do-i-make-the-first-letter-of-a-string-uppercase-in-javascript\r\n    return day\r\n        ? day.replace(/^\\p{CWU}/u, char => char.toLocaleUpperCase())\r\n        : new Intl.DateTimeFormat(lng, {\r\n              dateStyle: 'medium',\r\n          }).format(value);\r\n};\r\n\r\n/**\r\n * friendly relative time format function for i18n\r\n *\r\n * @param value datetime\r\n * @param lng language\r\n * @returns formatted datetime string\r\n */\r\nexport const friendlyRelativeTimeFormatter = (value: Date, lng?: string): string => {\r\n    const dateDiff = new Date().getTime() - value.getTime();\r\n    if (dateDiff > 0 && dateDiff < 60 * 1000) {\r\n        return i18n.t(Strings.justNow, { lng });\r\n    }\r\n\r\n    return i18n.t(Strings.friendlyDateAndTime, { lng, date: value });\r\n};\r\n\r\n/**\r\n * relative time format function for i18n\r\n *\r\n * @param value datetime string\r\n * @param lng language\r\n * @returns formatted datetime string\r\n */\r\nexport const relativeMinuteTimeFormatter = (value: string | number | Date, lng?: string): string => {\r\n    const currentDate = new Date();\r\n    const referenceDate = new Date(value);\r\n    const timeDifference = referenceDate.getTime() - currentDate.getTime();\r\n    const timeDifferenceInMinutes = Math.round(timeDifference / (60 * 1000));\r\n    const dateTimeDiff = new Intl.RelativeTimeFormat(lng, { numeric: 'auto' }).format(\r\n        timeDifferenceInMinutes,\r\n        'minute'\r\n    );\r\n\r\n    return dateTimeDiff;\r\n};\r\n\r\n/**\r\n * weekDay function for i18n\r\n *\r\n * @param value datetime string\r\n * @param lng language\r\n * @param options options\r\n * @returns formatted datetime string\r\n */\r\nexport const weekDayFormatter = (\r\n    value: DayOfWeek[],\r\n    lng?: string,\r\n    options?: { format?: Intl.DateTimeFormatOptions['weekday'] }\r\n): string => {\r\n    const format = new Intl.DateTimeFormat(lng, { weekday: options?.format || 'long' }).format;\r\n    const listFormatter = new Intl.ListFormat(lng, { style: 'long', type: 'conjunction' });\r\n    return listFormatter.format(value.map(day => format(new Date(1970, 0, day - 3))));\r\n};\r\n\r\n/**\r\n * day of month function for i18n\r\n *\r\n * @param value datetime string\r\n * @param lng language\r\n * @returns formatted datetime string\r\n */\r\nexport const dayFormatter = (value: number[], lng?: string): string => {\r\n    const format = new Intl.DateTimeFormat(lng, { day: 'numeric' }).format;\r\n    const listFormatter = new Intl.ListFormat(lng, { style: 'long', type: 'conjunction' });\r\n    return listFormatter.format(value.map(day => format(new Date(0, 0, day))));\r\n};\r\n\r\n/**\r\n * date time range function for i18n\r\n *\r\n * @param value start date and end date\r\n * @param lng language\r\n * @returns formatted datetime range string\r\n */\r\nexport const dateTimeRangeFormatter = (value: [Date, Date], lng?: string): string => {\r\n    const format = new Intl.DateTimeFormat(lng, { dateStyle: 'medium' });\r\n    return format.formatRange(...value);\r\n};\r\n","/*\r\n *  Copyright © Microsoft Corporation. All rights reserved.\r\n */\r\n\r\nimport { createPath, matchPath, parsePath, Path } from 'react-router-dom';\r\nimport { history } from '../routes/history';\r\nimport { Paths } from '../routes/Paths';\r\n\r\ninterface LastHistory {\r\n    pathString: string;\r\n    timestamp: number;\r\n}\r\n\r\nexport function saveLastHistory(userId?: string): void {\r\n    if (!canRestore(history.location)) return;\r\n\r\n    const key = generateLastPathKey(userId);\r\n    const pathString = createPath(history.location);\r\n    const item: LastHistory = {\r\n        pathString,\r\n        timestamp: Date.now(),\r\n    };\r\n    localStorage.setItem(key, JSON.stringify(item));\r\n}\r\n\r\nconst LAST_HISTORY_TTL_IN_SECONDS = 30 * 60 * 1000;\r\nexport function restoreLastHistory(userId?: string): void {\r\n    if (!isExactHomepage(history.location)) return;\r\n\r\n    const key = generateLastPathKey(userId);\r\n    const itemObject = localStorage.getItem(key);\r\n    if (!itemObject) return;\r\n\r\n    let item: LastHistory;\r\n    try {\r\n        item = JSON.parse(itemObject);\r\n    } catch {\r\n        return;\r\n    }\r\n\r\n    // If more than 30m has passed, remove the item\r\n    const currentTime = Date.now();\r\n    if (currentTime - item.timestamp > LAST_HISTORY_TTL_IN_SECONDS) {\r\n        localStorage.removeItem(key);\r\n        return;\r\n    }\r\n\r\n    const path = parsePath(item.pathString);\r\n    if (!canRestore(path)) return;\r\n    history.push(path);\r\n}\r\n\r\nconst lastPathKeyPrefix = 'LastPathV2';\r\nfunction generateLastPathKey(userId?: string): string {\r\n    return userId ? `${lastPathKeyPrefix}-UserId:${userId}` : lastPathKeyPrefix;\r\n}\r\n\r\nfunction isExactHomepage(path: Path): boolean {\r\n    // staticTabs[0].contentUrl in Teams manifest\r\n    if (path.pathname === '/') return true;\r\n\r\n    const match = matchPath(path.pathname, Paths.HomePage);\r\n    if (!match) return false;\r\n\r\n    return Object.keys(match.params).length === 0;\r\n}\r\n\r\nfunction canRestore(path: Partial<Path>): boolean {\r\n    const pathname = path.pathname;\r\n    if (!pathname) return false;\r\n\r\n    return [Paths.HomePage].some(pattern => matchPath(pattern, pathname));\r\n}\r\n","export * from '../locales/localeKeys';\r\nexport { default as i18n } from './i18n';\r\n","// For feature scenarios:\r\nexport enum ScenarioName {\r\n    AppBoot = 'AppBoot',\r\n    PeopleCard = 'PeopleCard',\r\n}\r\nexport enum ScenarioType {\r\n    OpenPeopleCard = 'OpenPeopleCard',\r\n}\r\n\r\nexport enum ModuleName {\r\n    HomePage = 'HomePage',\r\n    SearchResult = 'SearchResult',\r\n}\r\n\r\nexport enum StepName {\r\n    /**\r\n     * step indicating when the app initialization has started\r\n     */\r\n    AppBootStarted = 'AppBootStarted',\r\n\r\n    /**\r\n     * step indicating when the app exit\r\n     */\r\n    AppExit = 'AppExit',\r\n    AppBootHostContextInitialized = 'AppBootHostContextInitialized',\r\n    AppBootLoggerInitialized = 'AppBootLoggerInitialized',\r\n    AppBootSuccess = 'AppBootSuccess',\r\n    AppBootFailedWithError = 'AppBootFailedWithError',\r\n    AppBootFailedWithErrorBoundary = 'AppBootFailedWithErrorBoundary',\r\n    AppBootDispatchDeepLink = 'AppBootDispatchDeepLink',\r\n    FileBrowserNavigationEndedNotification = 'FileBrowserNavigationEndedNotification',\r\n    FileBrowserNavigationStartedNotification = 'FileBrowserNavigationStartedNotification',\r\n    FileBrowserPageLoadedNotification = 'FileBrowserPageLoadedNotification',\r\n    SharePointPickerPickLocalFiles = 'SharePointPickerPickLocalFiles',\r\n    SharePointPickerAuthenticate = 'SharePointPickerAuthenticate',\r\n    SharePointPickerClose = 'SharePointPickerClose',\r\n    SharePointPickerPick = 'SharePointPickerPick',\r\n    TeamsInitializationSuccess = 'TeamsInitializationSuccess',\r\n    AppBootReactRendered = 'AppBootReactRendered',\r\n}\r\n\r\n// Log Category Sources for scenarios\r\nexport enum LogCategory {\r\n    PersonalApp = 'PersonalApp',\r\n    AppBoot = 'AppBoot',\r\n    AuthHelper = 'AuthHelper',\r\n    FileUpload = 'FileUpload',\r\n    FileUploadAuth = 'FileUploadAuth',\r\n    APIRequest = 'APIRequest',\r\n    RetryOnNotProvisioned = 'RetryOnNotProvisioned',\r\n    CheckUserRole = 'CheckUserRole',\r\n    FormDesign = 'FormDesign',\r\n    DeepLink = 'DeepLink',\r\n    Navigate = 'Navigate',\r\n    ShareLink = 'ShareLink',\r\n    SharePointPicker = 'SharePointPicker',\r\n    LoadingTimeout = 'LoadingTimeout',\r\n    ECSRequest = 'ECSRequest',\r\n    ErrorStatus = 'ErrorStatus',\r\n    DuplicateFormQuestion = 'DuplicateFormQuestion',\r\n    NetworkError = 'NetworkError',\r\n    TimeoutExceeded = 'TimeoutExceeded',\r\n    RequestAborted = 'RequestAborted',\r\n    TeamsSDKError = 'TeamsSDKError',\r\n    RuntimeError = 'RuntimeError',\r\n    UnknownRequestError = 'UnknownRequestError',\r\n    FeedbackSDKError = 'FeedbackSDKError',\r\n    ReportResponse = 'ReportResponse',\r\n    ReactQuery = 'ReactQuery',\r\n    ResizeTaskModule = 'ResizeTaskModule',\r\n    ReportDraft = 'ReportDraft',\r\n    OCPSRequest = 'OCPSRequest',\r\n}\r\n","export * from './CommonVars';\r\nexport * from './TemplateManagementVars';\r\n","/**\r\n * check the current stack of the react-router is the first page or not\r\n */\r\nexport function isFirstPage(): boolean {\r\n    return window.history.state?.idx === 0;\r\n}\r\n","export * from './people';\r\n","/*\r\n *  Copyright © Microsoft Corporation. All rights reserved.\r\n */\r\nimport { makeVar } from 'react-reactive-var';\r\n\r\nexport type ChangeStatusDialogData = {\r\n    isOpen: boolean;\r\n    targetStatus?: boolean;\r\n    templateDefinitionId?: string;\r\n    templateDefinitionEtag?: string;\r\n    templateDefinitionTitle?: string;\r\n};\r\n\r\nexport const changeStatusDialogDataVar = makeVar<ChangeStatusDialogData>({ isOpen: false });\r\n\r\nexport type CopyTemplateRequestDialogData = {\r\n    isOpen: boolean;\r\n    templateDefinitionId?: string;\r\n    templateDefinitionTitle?: string;\r\n    templateAllowAnyoneSubmission?: boolean;\r\n    onCopyClick?: () => void;\r\n};\r\n\r\nexport const copyTemplateRequestDialogDataVar = makeVar<CopyTemplateRequestDialogData>({ isOpen: false });\r\n\r\nexport type CopyTemplateResponseDialogData = {\r\n    isOpen: boolean;\r\n    templateGeneratedShareableLink?: string;\r\n    templateDefinitionTitle?: string;\r\n    templateLinkPermissionSettingText?: string;\r\n};\r\n\r\nexport const copyTemplateResponseDialogDataVar = makeVar<CopyTemplateResponseDialogData>({ isOpen: false });\r\n\r\nexport type CreateTemplateSuccessDialogData = {\r\n    isOpen: boolean;\r\n    templateDefinitionId?: string;\r\n    templateDefinitionTitle?: string;\r\n    templateAllowAnyoneSubmission?: boolean;\r\n};\r\n\r\nexport const createTemplateSuccessDialogDataVar = makeVar<CreateTemplateSuccessDialogData>({ isOpen: false });\r\n\r\nexport type ReminderData =\r\n    | {\r\n          isOpen: false;\r\n      }\r\n    | {\r\n          isOpen: true;\r\n          definitionId: string;\r\n          occurrenceId: string;\r\n          statisticsUnsubmittedCount?: number;\r\n      };\r\nexport const reminderVar = makeVar<ReminderData>({ isOpen: false });\r\n","export * from './DateTimeUtils';\r\nexport * from './deep-link';\r\nexport * from './flags';\r\nexport * from './history';\r\nexport * from './isFirstPage';\r\nexport * from './models';\r\n// export * from './StatisticsUtils';\r\n// export * from './TelemetryUtils';\r\nexport * from './UserRoleCheckUtils';\r\nexport * from './Utils';\r\n","import { createHashHistory } from 'history';\r\n\r\nexport const history = createHashHistory();\r\n","/*\r\n *  Copyright © Microsoft Corporation. All rights reserved.\r\n */\r\nimport { submitTask } from '@addressbook/components-metaos-host';\r\nimport { AxiosResponseHeaders, RawAxiosResponseHeaders } from 'axios';\r\nimport { systemNotificationCodesVar } from '../reactiveVariables';\r\n\r\n/**\r\n * Try parse the AFD ref the headers\r\n *\r\n * @param headers the http headers objct\r\n * @returns the AFD ref string, empty string would be returned if not found.\r\n */\r\nexport const tryParseAfdRefFromHeaders = (headers?: RawAxiosResponseHeaders | AxiosResponseHeaders): string => {\r\n    const MsEdgeRefHeaderName = 'x-msedge-ref';\r\n    const MsRefHeaderName = 'x-ms-ref';\r\n\r\n    if (!headers) {\r\n        return '';\r\n    }\r\n\r\n    // headers.get() would return null if the header name is not found.\r\n    const refStr = headers[MsEdgeRefHeaderName] || headers[MsRefHeaderName];\r\n    return refStr ?? '';\r\n};\r\n\r\n/**\r\n * Handle the system notification codes from the headers\r\n *\r\n * @param headers the http headers object\r\n */\r\nexport const handleSystemNotificationHeader = (headers?: RawAxiosResponseHeaders | AxiosResponseHeaders): void => {\r\n    if (!headers) {\r\n        return;\r\n    }\r\n\r\n    const value = headers['x-ms-system-notification-codes'] as string;\r\n    const systemNotificationCodes = value ? value.split(',') : [];\r\n\r\n    if (systemNotificationCodes.length > 0) {\r\n        systemNotificationCodesVar(systemNotificationCodes);\r\n    }\r\n};\r\n\r\nexport const enum InputTaskType {\r\n    CreateSelfOwnedReportDefinitionInput = 'CreateSelfOwnedReportDefinitionInput',\r\n    SubmitReportInputOfUpdatesRuntime = 'SubmitReportInputOfUpdatesRuntime',\r\n    SubmitOOBEReportInputOfUpdatesRuntime = 'SubmitOOBEReportInputOfUpdatesRuntime',\r\n}\r\n\r\nexport function submitInputTask(inputType?: InputTaskType, input?: object): Promise<void> {\r\n    return submitTask({\r\n        type: inputType,\r\n        value: input,\r\n    });\r\n}\r\n\r\n/**\r\n * check is a new chat\r\n *\r\n * @param chatId\r\n * @param groupId\r\n * @param channelId\r\n * @returns\r\n */\r\nexport function isNewChat(chatId?: string, groupId?: string, channelId?: string): boolean {\r\n    // On Mobile platforms the chatId property does not contain the 'preview' label, so we cannot use that to identify\r\n    // new chats on Mobile. The chat id can also be a non-null empty string.\r\n    if (isInChannel(groupId, channelId)) {\r\n        return false;\r\n    }\r\n\r\n    if (!chatId) {\r\n        //  The new chat would not have a chatId\r\n        return true;\r\n    }\r\n    return chatId.includes('preview') || chatId.includes('newchat');\r\n}\r\n\r\n/**\r\n * check is in a channel, if groupId or channelId is truthy, it means in a channel\r\n *\r\n * @param groupId\r\n * @param channelId\r\n * @returns\r\n */\r\nfunction isInChannel(groupId?: string, channelId?: string): boolean {\r\n    return Boolean(groupId || channelId);\r\n}\r\n","/*\r\n *  Copyright © Microsoft Corporation. All rights reserved.\r\n */\r\n\r\nexport * from './ErrorBoundary';\r\n","import { TelemetryScenarioStatus } from '@addressbook/components-logger';\r\nimport { notifyAppInitializationSuccess } from '@addressbook/components-metaos-host';\r\nimport i18n, { ReadCallback } from 'i18next';\r\nimport resourcesToBackend from 'i18next-resources-to-backend';\r\nimport { initReactI18next } from 'react-i18next';\r\nimport { initQuery, isDev, isTest, URIParam } from '../common/env';\r\nimport { supportedLngs } from '../locales/supportedLngs';\r\nimport { logger, ScenarioName, StepName } from '../logger';\r\nimport {\r\n    dateTimeRangeFormatter,\r\n    dayFormatter,\r\n    friendlyDateFormatter,\r\n    friendlyRelativeTimeFormatter,\r\n    relativeMinuteTimeFormatter,\r\n    weekDayFormatter,\r\n} from '../utilities/DateTimeUtils';\r\nimport { defaultLng, fallbackLng } from './fallbackLng';\r\n\r\nif (isDev) {\r\n    // add dev for languages in DEV env\r\n    (supportedLngs as any as string[]).unshift('dev');\r\n}\r\ni18n.use(initReactI18next) // passes i18n down to react-i18next\r\n    .use(\r\n        resourcesToBackend((language: string, namespace: string, callback: ReadCallback): void => {\r\n            // Don't populate i18n resources when testing, to avoid translation shift from key to translated string.\r\n            if (isTest) return;\r\n            // https://v4.webpack.js.org/api/module-methods/#magic-comments\r\n            import(\r\n                `../locales/${language}/${namespace}.json`\r\n                /* webpackInclude: /strings\\.json$/ */\r\n                /* webpackExclude: /en\\-US\\.strings/ */\r\n                /* webpackChunkName: \"[request]\" */\r\n            )\r\n                .then((resources: any): void => {\r\n                    callback(null, resources);\r\n                })\r\n                .catch((error: Error): void => {\r\n                    callback(error, null);\r\n                });\r\n        })\r\n    )\r\n    .init(\r\n        {\r\n            debug: isDev,\r\n            ns: 'strings',\r\n            // localStorage key is the same with the'i18next-browser-languagedetector';\r\n            lng: initQuery.get(URIParam.Locale) || localStorage.getItem('i18nextLng') || defaultLng,\r\n            // lng: 'en', // language to use, more information here: https://www.i18next.com/overview/configuration-options#languages-namespaces-resources\r\n            // you can use the i18n.changeLanguage function to change the language manually: https://www.i18next.com/overview/api#changelanguage\r\n            // if you're using a language detector, do not define the lng option\r\n            interpolation: {\r\n                escapeValue: false, // react already safes from xss\r\n            },\r\n            supportedLngs,\r\n            fallbackLng,\r\n            load: 'currentOnly',\r\n        },\r\n        () => {\r\n            i18n.services.formatter?.add('friendlydate', friendlyDateFormatter);\r\n            i18n.services.formatter?.add('friendlyrelativetime', friendlyRelativeTimeFormatter);\r\n            i18n.services.formatter?.add('relativeminutetime', relativeMinuteTimeFormatter);\r\n            i18n.services.formatter?.add('weekday', weekDayFormatter);\r\n            i18n.services.formatter?.add('dayofmonth', dayFormatter);\r\n            i18n.services.formatter?.add('datetimerange', dateTimeRangeFormatter);\r\n        }\r\n    );\r\n\r\n// update html attribute on languageChanged\r\ni18n.on('languageChanged', (lng: string): void => {\r\n    document.documentElement.setAttribute('lang', lng);\r\n    document.documentElement.setAttribute('dir', i18n.dir());\r\n});\r\n\r\ni18n.on('initialized', () => {\r\n    notifyAppInitializationSuccess().then(() => {\r\n        logger.markScenario(ScenarioName.AppBoot, StepName.TeamsInitializationSuccess, TelemetryScenarioStatus.Success);\r\n    });\r\n});\r\n\r\nexport default i18n;\r\n","/*\r\n *  Copyright © Microsoft Corporation. All rights reserved.\r\n */\r\n\r\nimport { makeVar } from 'react-reactive-var';\r\n\r\n/**\r\n * modalShowingVar indicates whether there is a modal showing in HomePag,\r\n * including ReviewReportModal, SubmitReportModal, SubmitOOBEReportModal and TemplateManagementModal\r\n */\r\nexport const modalShowingVar = makeVar<boolean>(false);\r\n\r\nexport const systemNotificationCodesVar = makeVar<string[]>([]);\r\n\r\nexport const requestFeedbackShowingVar = makeVar<boolean>(false);\r\n","import { isDev } from '../common/env';\r\nimport { supportedLngs } from '../locales/supportedLngs';\r\nimport fallbackMap from './fallbackLngMap.json';\r\n\r\nexport const defaultLng = isDev ? 'dev' : 'en-US';\r\n/**\r\n * Fallback Language rules\r\n * https://www.i18next.com/principles/fallback#fallback-to-different-languages\r\n *\r\n * @param code\r\n * @returns\r\n */\r\nexport function fallbackLng(code: string): string | readonly string[] {\r\n    if (!code) {\r\n        return [defaultLng];\r\n    }\r\n\r\n    const fallbacks = [];\r\n    const parts = code.toLowerCase().split('-');\r\n    while (parts.length) {\r\n        const language = parts.join('-');\r\n        const lng = getExistingSupportedLanguage(language);\r\n        if (lng) {\r\n            fallbacks.push(lng);\r\n            // only return one fallback language.\r\n            break;\r\n        }\r\n        parts.pop();\r\n    }\r\n\r\n    // push defult for dev or no supported language file\r\n    if (isDev || !fallbacks.length) {\r\n        fallbacks.push(defaultLng);\r\n    }\r\n\r\n    return fallbacks;\r\n}\r\n\r\nfunction getExistingSupportedLanguage(language: string): string | undefined {\r\n    // check if the language has language file.\r\n    const existingLng = supportedLngs.find(lng => lng.toLowerCase() === language);\r\n    if (existingLng) {\r\n        return existingLng;\r\n    }\r\n\r\n    // check if the language has supported language files with same prefix, return if only one language is supported.\r\n    const samePrefixLngs = supportedLngs.filter(lng => lng.toLowerCase().startsWith(`${language}-`));\r\n    if (samePrefixLngs?.length === 1) {\r\n        return samePrefixLngs[0];\r\n    }\r\n\r\n    // https://microsoft.sharepoint.com/sites/globalreadiness/SitePages/Language-fallback.aspx\r\n    return fallbackMap[language];\r\n}\r\n","import { STYLE_NONCE } from './env';\r\n\r\n// import this file before all ts files to inject style nonce\r\n(window as any).CSPSettings = {\r\n    nonce: STYLE_NONCE,\r\n};\r\n\r\n(window as any).FabricConfig = {\r\n    mergeStyles: {\r\n        cspSettings: { nonce: STYLE_NONCE },\r\n    },\r\n};\r\n","import { getAuthToken } from '@addressbook/components-metaos-host';\r\nimport jwtDecode from 'jwt-decode';\r\nimport { ADDRESSBOOK_APP_RESOURCE_URL } from '../common/env';\r\nimport { LogCategory, logger } from '../logger';\r\nimport { generateURL, Paths } from '../routes/Paths';\r\nimport { history } from '../routes/history';\r\n\r\nexport interface UserPayload {\r\n    name?: string;\r\n    iss?: string;\r\n    sub?: string;\r\n    aud?: string[] | string;\r\n    exp?: number;\r\n    nbf?: number;\r\n    iat?: number;\r\n    oid?: string;\r\n    tid?: string;\r\n    upn?: string;\r\n    acct?: UserRole;\r\n}\r\n\r\n/**\r\n * Indicates the users account status in tenant.\r\n */\r\nexport enum UserRole {\r\n    Member = 0,\r\n    Guest = 1,\r\n}\r\n\r\n/**\r\n * check is guest and auto redirect to error page\r\n */\r\nexport async function detectGuest(): Promise<void> {\r\n    try {\r\n        const token = await getAuthToken(ADDRESSBOOK_APP_RESOURCE_URL);\r\n        const jwt = jwtDecode<UserPayload>(token);\r\n\r\n        if (jwt.acct !== UserRole.Guest) return;\r\n\r\n        const errorPath = generateURL(Paths.HomePage);\r\n        history.push(errorPath, { replace: true });\r\n    } catch (error) {\r\n        logger.logTraceError(LogCategory.CheckUserRole, `error when trying to check userRole, ${error}`);\r\n    }\r\n}\r\n","import {\r\n    createAuthorizationInterceptor,\r\n    createOnlineInterceptor,\r\n    createThrottlingInterceptor,\r\n    ServiceInterceptor,\r\n} from '@addressbook/services-core';\r\nimport { GraphServiceClient } from '@addressbook/services-graph';\r\nimport { GRAPH_BASE_URL } from '../../common/Constants';\r\nimport { ResourceType } from '../gen';\r\nimport { getResourceToken } from '../tokenCache';\r\nimport {\r\n    createCachingInterceptorInMemory,\r\n    createHeadersInterceptorWithIds,\r\n    createKeyedPoolingInterceptor,\r\n    createLoggingInterceptorByLogger,\r\n    createRetryInterceptorWithBackoff,\r\n} from './utils';\r\n\r\n/**\r\n * A global GraphServiceClient instance.\r\n */\r\nexport const graphServiceClient = createGraphServiceClient();\r\n\r\n/**\r\n * Create a GraphServiceClient instance, with interceptors for headers, authorization, cache and logging.\r\n *\r\n * @returns A GraphServiceClient instance.\r\n */\r\nfunction createGraphServiceClient(): GraphServiceClient {\r\n    return new GraphServiceClient({\r\n        baseUrl: GRAPH_BASE_URL,\r\n        interceptors: [\r\n            // Interceptors to remove redundant requests.\r\n            createKeyedPoolingInterceptor(),\r\n            createCachingInterceptorInMemory(),\r\n\r\n            // Interceptors to improve resilience.\r\n            createRetryInterceptorWithBackoff(),\r\n            createThrottlingInterceptor(),\r\n            createOnlineInterceptor(),\r\n\r\n            // Interceptors to add necessary headers.\r\n            createAuthorizationInterceptorForGraph(),\r\n            createHeadersInterceptorWithIds(),\r\n\r\n            // Interceptor to log raw requests and responses.\r\n            createLoggingInterceptorByLogger(),\r\n        ],\r\n    });\r\n}\r\n\r\n/**\r\n * Create an authorization interceptor for Graph API requests.\r\n *\r\n * @returns An interceptor.\r\n */\r\nfunction createAuthorizationInterceptorForGraph(): ServiceInterceptor {\r\n    return createAuthorizationInterceptor(async request =>\r\n        request.url.startsWith(GRAPH_BASE_URL) ? getResourceToken(ResourceType.Graph, GRAPH_BASE_URL) : ''\r\n    );\r\n}\r\n","import { IconName, initFluentuiIcons } from '@addressbook/components-fluentui-icons';\r\nimport { registerIcons } from '@fluentui/react';\r\nimport { initializeFileTypeIcons } from '@fluentui/react-file-type-icons';\r\n\r\nexport function initIcons(): void {\r\n    initFluentuiIcons();\r\n    initializeFileTypeIcons();\r\n    registerIcons({\r\n        icons: {},\r\n    });\r\n}\r\n\r\nexport const PRESENCE_ICONS_BACKGROUND_COLOR = {\r\n    Green: '#13a10e',\r\n    Red: '#d13438',\r\n    Yellow: '#eaa300',\r\n    Grey: '#707070',\r\n};\r\n\r\n// export const PRESENCE_ICONS = [\r\n//     { key: 'Available', name: IconName.PresenceAvailable, color: PRESENCE_ICONS_BACKGROUND_COLOR.Green },\r\n//     { key: 'AvailableIdle', name: IconName.PresenceAvailable },\r\n//     { key: 'Away', name: IconName.PresenceAway },\r\n//     { key: 'BeRightBack', name: IconName.PresenceAway },\r\n//     { key: 'Busy', name: IconName.PresenceBusy },\r\n//     { key: 'BusyIdle', name: IconName.PresenceBusy },\r\n//     { key: 'DoNotDisturb', name: IconName.PresenceDnd },\r\n//     { key: 'Offline', name: IconName.PresenceOffline },\r\n//     { key: 'PresenceUnknown', name: IconName.PresenceUnknown },\r\n// ];\r\ntype PresenceIcon = {\r\n    name: string;\r\n    color: string;\r\n};\r\n\r\nexport const PRESENCE_ICONS: { [key: string]: PresenceIcon } = {\r\n    Available: {\r\n        name: IconName.PresenceAvailable,\r\n        color: PRESENCE_ICONS_BACKGROUND_COLOR.Green,\r\n    },\r\n    AvailableIdle: {\r\n        name: IconName.PresenceAvailable,\r\n        color: PRESENCE_ICONS_BACKGROUND_COLOR.Green,\r\n    },\r\n    Away: {\r\n        name: IconName.PresenceAway,\r\n        color: PRESENCE_ICONS_BACKGROUND_COLOR.Yellow,\r\n    },\r\n    BeRightBack: {\r\n        name: IconName.PresenceAway,\r\n        color: PRESENCE_ICONS_BACKGROUND_COLOR.Yellow,\r\n    },\r\n    Busy: {\r\n        name: IconName.PresenceBusy,\r\n        color: PRESENCE_ICONS_BACKGROUND_COLOR.Red,\r\n    },\r\n    BusyIdle: {\r\n        name: IconName.PresenceBusy,\r\n        color: PRESENCE_ICONS_BACKGROUND_COLOR.Red,\r\n    },\r\n    Offline: {\r\n        name: IconName.PresenceOffline,\r\n        color: PRESENCE_ICONS_BACKGROUND_COLOR.Grey,\r\n    },\r\n    PresenceUnknown: {\r\n        name: IconName.PresenceUnknown,\r\n        color: PRESENCE_ICONS_BACKGROUND_COLOR.Grey,\r\n    },\r\n};\r\n","/*\r\n *  Copyright © Microsoft Corporation. All rights reserved.\r\n */\r\n\r\nimport { ENVIRONMENT } from './env';\r\n\r\nexport const MAX_DEFINITIONS = 100000;\r\nexport const MAX_DEFINITION_TITLE_LENGTH = 500;\r\nexport const MAX_DEFINITION_DESCRIPTION_LENGTH = 10000;\r\nexport const MAX_DEFINITION_QUESTIONS = 100;\r\nexport const MAX_DEFINITION_QUESTION_TITLE_LENGTH = 4000;\r\nexport const MAX_DEFINITION_QUESTION_SUBTITLE_LENGTH = 2000;\r\nexport const INITIAL_DEFINITION_QUESTION_CHOICES = 2;\r\nexport const MIN_DEFINITION_QUESTION_CHOICES = 1;\r\nexport const MAX_DEFINITION_QUESTION_CHOICES = 50;\r\nexport const MAX_DEFINITION_QUESTION_CHOICE_LENGTH = 500;\r\nexport const MAX_DEFINITION_GROUP_SUBMITTERS = 5;\r\nexport const MAX_DEFINITION_USER_SUBMITTERS = 2000;\r\nexport const MAX_DEFINITION_USER_OWNERS = 1;\r\nexport const MAX_DEFINITION_USER_COLLABORATORS = 5;\r\n\r\nexport const MAX_REPORT_TITLE_LENGTH = 1000;\r\nexport const MAX_REPORT_ANSWER_CONTENT_LENGTH = 10000;\r\nexport const MAX_REPORT_ANSWER_CONTENT_LENGTH_WITH_BUFFER = Math.round(MAX_REPORT_ANSWER_CONTENT_LENGTH * 0.99); // To mitigate the difference of DOM implementations between client and server\r\nexport const MAX_REPORT_USER_RECEIVERS = 500; // No group receivers for now\r\nexport const MAX_REPORT_COMMENTS = 1000;\r\nexport const MAX_REPORT_ATTACHMENTS = 10;\r\n\r\nexport const PEOPLE_SUGGESTIONS_RESOLVE_DELAY_TIME_MS = 800;\r\nexport const SERVER_STORAGE_DEBOUNCE_WAIT_TIME_MS = 500;\r\nexport const SERVER_STORAGE_DEBOUNCE_MAX_WAIT_TIME_MS = 3000;\r\nexport const LOCAL_STORAGE_DEBOUNCE_WAIT_TIME_MS = 500;\r\nexport const LOCAL_STORAGE_DEBOUNCE_MAX_WAIT_TIME_MS = 3000;\r\n\r\nexport const MAX_LINK_TARGET_TITLE_CHARACTER_LIMIT = 10; // Set character limit size of template title\r\n\r\nexport const REPORT_SLOT_PAGINATION_LIMIT = 5;\r\n\r\nexport const REPORT_SLOT_CACHE_TIME = 10 * 60 * 1000; // 10 min\r\n\r\n/**\r\n * Get all occurrences for data migration in chat/team\r\n */\r\nexport const MAX_TASKMODULE_OCCURRENCE_COUNT = 1000;\r\n\r\n/**\r\n * Icon Name for work report app\r\n */\r\nexport const APP_ICON_NAME = 'AppLogo';\r\n\r\n/**\r\n * background color for APP Icon (accent Color)\r\n * keep the same with manifest.json\r\n */\r\nexport const APP_ICON_COLOR = '#5B5FC7';\r\n\r\n/**\r\n * Icon Name for default Template\r\n */\r\nexport const DEFAULT_TEMPLATE_ICON_NAME = 'DefaultTemplateIcon';\r\n\r\n/**\r\n * Emoji background color\r\n */\r\nexport const EMOJI_BACKGROUND_COLOR = 'transparent';\r\n\r\n/**\r\n * Http Headers key in request header\r\n */\r\nexport const HEADER_CLIENT_REQUEST_ID = 'x-ms-client-request-id';\r\n\r\n/**\r\n * The tenant id key in http request header, it works as route key\r\n */\r\nexport const HEADER_ROUTE_KEY = 'x-ms-tenant-id';\r\n\r\n/**\r\n * http correlation key in response header\r\n */\r\nexport const HEADER_RESPONSE_CORRELATION_ID = 'mise-correlation-id';\r\n\r\n/**\r\n * the entry page for desktop\r\n * `/web/index.html` will auto detect mobile or desktop\r\n */\r\nexport const DESKTOP_ENTRY = '/web/desktop.html';\r\n/**\r\n * entry page for mobile\r\n * `/web/index.html` will auto detect mobile or desktop\r\n */\r\nexport const MOBILE_ENTRYPAGE = '/web/mobile.html';\r\n\r\n/**\r\n * The folder name for attachments\r\n */\r\nexport const ATTACHMENTS_FOLDER_NAME = 'Microsoft Teams Updates app Documents';\r\n\r\n/**\r\n * The base url for Microsoft Graph API\r\n */\r\nexport const GRAPH_BASE_URL =\r\n    ENVIRONMENT === 'gcch'\r\n        ? 'https://graph.microsoft.us'\r\n        : ENVIRONMENT === 'dod'\r\n        ? 'https://dod-graph.microsoft.us'\r\n        : ENVIRONMENT === 'gallatin'\r\n        ? 'https://microsoftgraph.chinacloudapi.cn'\r\n        : 'https://graph.microsoft.com';\r\n\r\n/**\r\n * When user try to use iphone camera to take photo, the photo name will be always `image.jpg`\r\n */\r\nexport const IOS_CAMERA_PHOTO_NAME = 'image.jpg';\r\n\r\n// SharePoint picker\r\nexport const SHAREPOINT_PICKER_APP = 'Teams';\r\nexport const SHAREPOINT_PICKER_SCENARIO = 'WorkReportFileUpload';\r\nexport const SHAREPOINT_IFRAME_PATH = '/_layouts/15/FilePicker.aspx';\r\nexport const SHAREPOINT_TEMPAUTH_KEY = 'tempauth';\r\nexport const SHAREPOINT_DOMAIN_REGEX =\r\n    ENVIRONMENT === 'gcch'\r\n        ? /sharepoint\\.us/\r\n        : ENVIRONMENT === 'dod'\r\n        ? /sharepoint-mil\\.us/\r\n        : ENVIRONMENT === 'gallatin'\r\n        ? /sharepoint\\.cn/\r\n        : /sharepoint(-df)?\\.com/; // sharepoint.com or sharepoint-df.com for dog food\r\n\r\n/**\r\n * Loading page timeout error threshold\r\n */\r\nexport const LOADING_TIMEOUT_IN_SECONDS = 30;\r\n\r\n/**\r\n * The base url for ECS host\r\n */\r\nexport const ECS_BASIC_URL =\r\n    ENVIRONMENT === 'gcch'\r\n        ? 'https://config.ecs.gov.teams.microsoft.us/config/v1/MicrosoftTeamsApps/1.0.0.0'\r\n        : ENVIRONMENT === 'dod'\r\n        ? 'https://config.ecs.dod.teams.microsoft.us/config/v1/MicrosoftTeamsApps/1.0.0.0'\r\n        : ENVIRONMENT === 'gallatin'\r\n        ? 'https://mooncake.config.teams.microsoft.com/config/v1/MicrosoftTeamsApps/1.0.0.0'\r\n        : 'https://config.teams.microsoft.com/config/v1/MicrosoftTeamsApps/1.0.0.0';\r\n\r\n/**\r\n * The base url for OCPS\r\n */\r\nexport const OCPS_BASIC_URL =\r\n    ENVIRONMENT === 'gcch' || ENVIRONMENT === 'dod' || ENVIRONMENT === 'gallatin'\r\n        ? ''\r\n        : 'https://clients.config.office.net/user/v1.0/web/policies';\r\n\r\n/**\r\n * Link copied info showing duration in mobile\r\n */\r\nexport const LINK_COPIED_INFO_SHOWING_DURATION_MILLISECONDS_IN_MOBILE = 3000;\r\n\r\n/**\r\n * Dot separator\r\n */\r\nexport const DOT_SEPARATOR = '•';\r\n\r\n/**\r\n * Template id for quick update\r\n */\r\nexport const QUICK_UPDATE_TEMPLATE_ID = 'QuickReport';\r\n\r\n/**\r\n * Data Export limitation\r\n */\r\nexport const MAX_REPORTS_CAN_EXPORT_LIMIT = 1000;\r\n\r\n/**\r\n * Data Export limitation of report definition can filter\r\n */\r\nexport const MAX_REPORTDEFINITIONS_FILTER_LIMIT = 1;\r\n\r\n/**\r\n * Data Export limitation of submitter can filter\r\n */\r\nexport const MAX_SUBMITTERS_FILTER_LIMIT = 1;\r\n\r\n/**\r\n * Receiver role\r\n */\r\nexport const ReceiverRole = 'Receiver';\r\n\r\n/**\r\n * Writer role\r\n */\r\nexport const WriterRole = 'Writer';\r\n\r\n/**\r\n * The time window for batched queries\r\n */\r\nexport const BATCHED_QUERIES_TIME_WINDOW_MS = 500;\r\n\r\n/**\r\n * The get help target link\r\n */\r\nexport const GetHelpLink =\r\n    'https://support.microsoft.com/office/get-started-in-updates-c03a079e-e660-42dc-817b-ca4cfd602e5a';\r\n\r\n/**\r\n * New feature keys\r\n */\r\nexport const NewFeatureKeys = ['InlinePicture', 'MentionInComments'];\r\n","export * from './graph';\r\n","/*\r\n *  Copyright © Microsoft Corporation. All rights reserved.\r\n */\r\n\r\nimport { app, notifyAppInitializationFailure } from '@addressbook/components-metaos-host';\r\nimport React from 'react';\r\nimport { isDev } from '../../../common/env';\r\nimport { LogCategory, logger, ScenarioName, StepName } from '../../../logger';\r\nimport { ErrorBoundaryContent } from './ErrorBoundaryContent.container';\r\n\r\ninterface ErrorBoundaryProps {\r\n    children?: React.ReactNode;\r\n}\r\n\r\ninterface ErrorBoundaryState {\r\n    hasError: boolean;\r\n    error?: Error;\r\n    errorInfo?: React.ErrorInfo;\r\n}\r\n\r\nexport class ErrorBoundary extends React.Component<ErrorBoundaryProps, ErrorBoundaryState> {\r\n    constructor(props: ErrorBoundaryProps) {\r\n        super(props);\r\n        this.state = { hasError: false };\r\n    }\r\n\r\n    public static getDerivedStateFromError(): ErrorBoundaryState {\r\n        return { hasError: true };\r\n    }\r\n\r\n    public componentDidCatch(error: Error, errorInfo: React.ErrorInfo): void {\r\n        const message = `App failed to boot: ${error.message}, stack:${error.stack}, componentStack: ${errorInfo.componentStack}`;\r\n        logger.logTraceError(LogCategory.AppBoot, message);\r\n        logger.markScenario(ScenarioName.AppBoot, StepName.AppBootFailedWithErrorBoundary);\r\n        logger.failScenario(ScenarioName.AppBoot);\r\n        if (isDev) {\r\n            this.setState(state => ({ ...state, error, errorInfo }));\r\n        } else {\r\n            // it only works before notify success to teams\r\n            notifyAppInitializationFailure({ reason: app.FailedReason.Other, message: logger.sessionId });\r\n        }\r\n    }\r\n\r\n    public render(): React.ReactNode {\r\n        if (this.state.hasError) {\r\n            return (\r\n                <ErrorBoundaryContent>\r\n                    {this.state.error && (\r\n                        <div role='log'>\r\n                            <details>\r\n                                <summary>Call Stack ({this.state.error.message})</summary>\r\n                                <pre>{this.state.error?.stack}</pre>\r\n                            </details>\r\n                            <hr />\r\n                            <details open>\r\n                                <summary>Component Stack</summary>\r\n                                <pre>{this.state.errorInfo?.componentStack}</pre>\r\n                            </details>\r\n                        </div>\r\n                    )}\r\n                </ErrorBoundaryContent>\r\n            );\r\n        }\r\n        return this.props.children;\r\n    }\r\n}\r\n","import { ILogger, OneDSLogger } from '@addressbook/components-logger';\r\nimport { ARIA_TOKEN, isDev, isInt } from '../common/env';\r\nimport { ScenarioName, StepName, LogCategory } from './types';\r\n/**\r\n * global logger for the APP\r\n */\r\nexport const logger: ILogger<ScenarioName, StepName, LogCategory> = /* #__PURE__ */ new OneDSLogger<\r\n    ScenarioName,\r\n    StepName,\r\n    LogCategory\r\n>({\r\n    ariaToken: ARIA_TOKEN,\r\n    isDevelopment: isDev || isInt,\r\n    delay: 10000,\r\n    logTraceTypes:\r\n        isDev || isInt\r\n            ? ['Debug', 'Info', 'Warning', 'Error', 'Exception', 'HTTPException']\r\n            : ['Warning', 'Error', 'Exception', 'HTTPException'],\r\n});\r\n\r\nexport * from './types';\r\n","// extracted by mini-css-extract-plugin\nexport {};","import { TelemetryScenarioStatus } from '@addressbook/components-logger';\r\nimport { WORKREPORT_APP_TEAMS_ID } from '../common/env';\r\nimport { LogCategory, ScenarioName, StepName, logger } from '../logger';\r\n\r\nexport enum DeepLinkType {\r\n    // Keep the value to lower case to make the switch more smoothly.\r\n    /**\r\n     * The assigned event of the definition.\r\n     */\r\n    DefinitionAssigned = 'definitionassigned',\r\n\r\n    /**\r\n     * The received event of the definition.\r\n     */\r\n    DefinitionReceived = 'definitionreceived',\r\n\r\n    /**\r\n     * The owner changed event of the definition.\r\n     */\r\n    DefinitionOwnerChanged = 'definitionownerchanged',\r\n\r\n    /**\r\n     * The collabortor changed event of the definition.\r\n     */\r\n    DefinitionCollaboratorChanged = 'definitioncollaboratorchanged',\r\n\r\n    /**\r\n     * The created event of the report.\r\n     */\r\n    ReportReceived = 'reportreceived',\r\n\r\n    /**\r\n     * The report liked event.\r\n     */\r\n    ReportLiked = 'reportliked',\r\n\r\n    /**\r\n     * The report edited event.\r\n     */\r\n    ReportEdited = 'reportedited',\r\n\r\n    /**\r\n     * The report commented event.\r\n     */\r\n    ReportCommented = 'reportcommented',\r\n\r\n    /**\r\n     * The Ending event of the occurrence.\r\n     */\r\n    OccurrenceEnding = 'occurrenceending',\r\n\r\n    /**\r\n     * generate DeepLink to manual reminder.\r\n     */\r\n    OccurrenceManualReminder = 'occurrencemanualreminder',\r\n\r\n    /**\r\n     * review the Occurrence Report (From Desktop Taskmodule)\r\n     */\r\n    ReviewOccurrenceReport = 'reviewoccurrencereport',\r\n\r\n    /**\r\n     * review the Occurrence Report (From Mobile Taskmodule)\r\n     */\r\n    ReviewOccurrence = 'reviewoccurrence',\r\n\r\n    /**\r\n     * generate DeepLink to remind submit.\r\n     */\r\n    RemindSubmit = 'remindsubmit',\r\n\r\n    /**\r\n     * generate DeepLink to edit definition.\r\n     */\r\n    EditDefinition = 'editdefinition',\r\n}\r\n\r\nexport enum DeepLinkSourceType {\r\n    TaskModule = 'TaskModule',\r\n    ActivityFeed = 'ActivityFeed',\r\n    GeneratedShareLink = 'GeneratedShareLink',\r\n    AdaptiveCard = 'AdaptiveCard',\r\n}\r\n\r\nexport interface SubEntity {\r\n    type: DeepLinkType;\r\n    source?: DeepLinkSourceType;\r\n    definitionId: string;\r\n    occurrenceId?: string;\r\n    reportId?: string;\r\n    shareUserId?: string;\r\n    timestamp?: number;\r\n    additionalProperties?: any;\r\n}\r\n\r\nexport function dispatchDeepLink(subEntityId: string, isMobile: boolean): void {\r\n    try {\r\n        const subEntity: SubEntity = JSON.parse(subEntityId);\r\n\r\n        const dataBag = {\r\n            type: subEntity?.type,\r\n            source: subEntity?.source,\r\n            definitionId: subEntity?.definitionId,\r\n            occurrenceId: subEntity?.occurrenceId,\r\n            reportId: subEntity?.reportId,\r\n        };\r\n\r\n        const deepLinkSource = subEntity?.source ?? DeepLinkSourceType.ActivityFeed;\r\n        logger.setCommonProperty({ 'Panel.DeepLinkSourceType': deepLinkSource, 'Panel.DeepLinkType': subEntity?.type });\r\n\r\n        logger.logUserBiAction(ScenarioName.AppBoot, StepName.AppBootDispatchDeepLink, deepLinkSource, dataBag);\r\n\r\n        logger.markScenario(ScenarioName.AppBoot, StepName.AppBootDispatchDeepLink, TelemetryScenarioStatus.Success, {\r\n            dataBag,\r\n        });\r\n\r\n        switch (subEntity?.type.toLowerCase()) {\r\n            default:\r\n                logger.logTraceError(LogCategory.DeepLink, subEntityId);\r\n                break;\r\n        }\r\n    } catch (err) {\r\n        logger.logTraceException(LogCategory.DeepLink, { error: err as Error });\r\n    }\r\n}\r\n\r\n/**\r\n * generate the deep link for the definition.\r\n *\r\n * @param subEntity\r\n * @param escapeEncode escape encodeURIComponent (for ios BUG: lost the context when execute the deepLink with encodeURIComponent)\r\n * @returns\r\n */\r\nexport function generateDeepLink(subEntity: SubEntity, escapeEncode: boolean = false): string {\r\n    const context = JSON.stringify({ subEntityId: JSON.stringify(subEntity) });\r\n    const deepLink = `https://teams.microsoft.com/l/entity/${WORKREPORT_APP_TEAMS_ID}/workreport/?context=${\r\n        escapeEncode ? context : encodeURIComponent(context)\r\n    }`;\r\n    return deepLink;\r\n}\r\n\r\n/**\r\n * generate the deep link to app homepage.\r\n *\r\n * @returns\r\n */\r\nexport function generateDeepLinkToAppHomePage(): string {\r\n    const deepLink = `https://teams.microsoft.com/l/entity/${WORKREPORT_APP_TEAMS_ID}/workreport`;\r\n    return deepLink;\r\n}\r\n","import { EmptyState } from '@addressbook/components-shared';\r\nimport React from 'react';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { Strings } from '../../../localization';\r\nimport { logger } from '../../../logger';\r\nimport { clearQueryClientPersistor } from '../../../service';\r\n\r\n// eslint-disable-next-line @typescript-eslint/ban-types\r\nexport const ErrorBoundaryContent: React.FC<React.PropsWithChildren<{}>> = ({ children }) => {\r\n    const { t } = useTranslation(undefined, { useSuspense: false });\r\n    return (\r\n        <EmptyState\r\n            title={t(Strings.errorTitle, { defaultValue: '' })}\r\n            message={`Session Id: ${logger?.sessionId}`}\r\n            height='100vh'\r\n            actionText={t(Strings.errorAction, { defaultValue: 'Refresh' })}\r\n            onAction={() =>\r\n                logger.flushLogs(() => {\r\n                    // remove page state back to home page\r\n                    const location = window.location;\r\n                    // taskModule Pages\r\n                    if (!location.pathname.includes('/taskModule')) {\r\n                        location.hash = '';\r\n                    }\r\n                    clearQueryClientPersistor();\r\n                    location.reload();\r\n                })\r\n            }\r\n            role='alert'>\r\n            {children}\r\n        </EmptyState>\r\n    );\r\n};\r\n","import React from 'react';\r\nimport { BehaviorSubject } from 'rxjs';\r\nimport { distinctUntilChanged, map } from 'rxjs/operators';\r\n\r\n/**\r\n * An enum of all the flags that can be stored in local storage.\r\n */\r\nexport enum LocalStorageFlag {\r\n    MobileReportLikedButton = 'MobileReportLikedButton',\r\n    AggregatedViewDemoCard = 'AggregatedViewDemoCard',\r\n    PersonalAppValidUsage = 'PersonalAppValidUsage',\r\n    TaskModuleValidUsage = 'TaskModuleValidUsage',\r\n    UserHasData = 'UserHasData',\r\n    DismissWelcomeUpdateSection = 'DismissWelcomeUpdateSection',\r\n    DismissWelcomeUpdateSectionWithCategory = 'DismissWelcomeUpdateSectionWithCategory',\r\n    FeedbackBubble = 'FeedbackBubble',\r\n}\r\n\r\n/**\r\n * Checks if the given flag is stored in local storage.\r\n *\r\n * @param flag The flag to check.\r\n * @returns A boolean indicating if the flag is stored in local storage.\r\n */\r\nexport function hasLocalStorageFlag(flag: LocalStorageFlag): boolean {\r\n    return localStorageFlagsSubject.value.includes(flag);\r\n}\r\n\r\n/**\r\n * Adds the given flag to local storage.\r\n *\r\n * @param flag The flag to add.\r\n */\r\nexport function addLocalStorageFlag(flag: LocalStorageFlag): void {\r\n    if (localStorageFlagsSubject.value.includes(flag)) return;\r\n    localStorageFlagsSubject.next([...localStorageFlagsSubject.value, flag]);\r\n}\r\n\r\n/**\r\n * Removes the given flag from local storage.\r\n *\r\n * @param flag The flag to remove.\r\n */\r\nexport function removeLocalStorageFlag(flag: LocalStorageFlag): void {\r\n    if (!localStorageFlagsSubject.value.includes(flag)) return;\r\n    localStorageFlagsSubject.next(localStorageFlagsSubject.value.filter(f => f !== flag));\r\n}\r\n\r\n/**\r\n * Clears all flags from local storage.\r\n */\r\nexport function clearLocalStorageFlags(): void {\r\n    localStorageFlagsSubject.next([]);\r\n}\r\n\r\n/**\r\n * A hook that returns a boolean indicating if the given flag is stored in local storage.\r\n *\r\n * @param flag The flag to check.\r\n * @returns A boolean indicating if the flag is stored in local storage.\r\n */\r\nexport function useLocalStorageFlag(flag: LocalStorageFlag): boolean {\r\n    const [state, setState] = React.useState(localStorageFlagsSubject.value.includes(flag));\r\n\r\n    React.useEffect(() => {\r\n        const subscription = localStorageFlagsSubject\r\n            .pipe(\r\n                map(flags => flags.includes(flag)),\r\n                distinctUntilChanged()\r\n            )\r\n            .subscribe(setState);\r\n        return () => subscription.unsubscribe();\r\n    }, [flag]);\r\n\r\n    return state;\r\n}\r\n\r\nconst localStorageFlagsSubject = createLocalStorageFlagsSubject('Flags');\r\n\r\nfunction createLocalStorageFlagsSubject(key: string): BehaviorSubject<LocalStorageFlag[]> {\r\n    const subject = new BehaviorSubject<LocalStorageFlag[]>(getLocalStorageFlags(key));\r\n    subject.subscribe(flags => setLocalStorageFlags(key, flags));\r\n    return subject;\r\n}\r\n\r\nfunction getLocalStorageFlags(key: string): LocalStorageFlag[] {\r\n    const flagsJson = localStorage.getItem(key);\r\n    return parseLocalStorageFlags(flagsJson);\r\n}\r\n\r\nfunction setLocalStorageFlags(key: string, flags: LocalStorageFlag[]): void {\r\n    if (flags.length) {\r\n        const flagsJson = JSON.stringify(flags);\r\n        localStorage.setItem(key, flagsJson);\r\n    } else {\r\n        localStorage.removeItem(key);\r\n    }\r\n}\r\n\r\nfunction parseLocalStorageFlags(json: string | null): LocalStorageFlag[] {\r\n    try {\r\n        if (!json) return [];\r\n\r\n        const flagsObject = JSON.parse(json) as unknown;\r\n        if (!Array.isArray(flagsObject)) return [];\r\n\r\n        const flagsArray = flagsObject.filter(\r\n            (flag: unknown): flag is LocalStorageFlag => typeof flag === 'string' && flag in LocalStorageFlag\r\n        );\r\n\r\n        return flagsArray;\r\n    } catch {\r\n        return [];\r\n    }\r\n}\r\n","import { IHttpInfo } from '@addressbook/components-logger';\r\nimport {\r\n    Backoff,\r\n    createCachingInterceptor,\r\n    createHeadersInterceptor,\r\n    createLoggingInterceptor,\r\n    createPoolingInterceptor,\r\n    createRetryInterceptor,\r\n    KeyedPromisePool,\r\n    MemoryServiceCache,\r\n    ServiceInterceptor,\r\n} from '@addressbook/services-core';\r\nimport { uuid } from '@addressbook/utilities-core';\r\nimport { SHAREPOINT_DOMAIN_REGEX, SHAREPOINT_TEMPAUTH_KEY } from '../../common/Constants';\r\nimport { LogCategory, logger } from '../../logger';\r\n\r\n/**\r\n * Creates a service interceptor that pools requests in a keyed promise pool.\r\n *\r\n * @returns An interceptor.\r\n */\r\nexport function createKeyedPoolingInterceptor(): ServiceInterceptor {\r\n    return createPoolingInterceptor({ pool });\r\n}\r\n\r\nconst pool = new KeyedPromisePool();\r\n\r\n/**\r\n * Creates a service interceptor that caches responses in a memory cache.\r\n *\r\n * @returns An interceptor.\r\n */\r\nexport function createCachingInterceptorInMemory(): ServiceInterceptor {\r\n    return createCachingInterceptor({ cache, test: isGetAndOkWithExceptions });\r\n}\r\n\r\nconst cache = new MemoryServiceCache();\r\nconst exceptions = [{ regex: /\\/photo(s\\/.*)?\\/\\$value$/, status: [404] }];\r\nfunction isGetAndOkWithExceptions(request: Request, response?: Response): boolean {\r\n    return (\r\n        request.method === 'GET' &&\r\n        (!response ||\r\n            response.ok ||\r\n            exceptions.some(({ regex, status }) => regex.test(request.url) && status.includes(response.status)))\r\n    );\r\n}\r\n\r\nconst CLIENT_REQUEST_ID = 'client-request-id';\r\nconst REQUEST_ID = 'request-id';\r\nconst RETRY_AFTER = 'retry-after';\r\n\r\n/**\r\n * Creates a service interceptor that retries requests with backoff according to the Retry-After header or exponentially.\r\n *\r\n * @returns An interceptor.\r\n * @see https://learn.microsoft.com/graph/best-practices-concept#reliability-and-support\r\n */\r\nexport function createRetryInterceptorWithBackoff(): ServiceInterceptor {\r\n    return createRetryInterceptor({ backoff });\r\n}\r\n\r\nconst backoff: Backoff = (attempts, response) => {\r\n    const retryAfterValue = response?.headers.get(RETRY_AFTER);\r\n    const retryAfterSeconds = retryAfterValue ? parseInt(retryAfterValue, 10) : NaN;\r\n    const resultSeconds = isFinite(retryAfterSeconds) ? retryAfterSeconds : 2 ** attempts;\r\n    return resultSeconds * 1000;\r\n};\r\n\r\n/**\r\n * Creates a service interceptor that adds a client-request-id header to the request.\r\n *\r\n * @returns An interceptor.\r\n * @see https://learn.microsoft.com/graph/best-practices-concept#reliability-and-support\r\n */\r\nexport function createHeadersInterceptorWithIds(): ServiceInterceptor {\r\n    return createHeadersInterceptor({ [CLIENT_REQUEST_ID]: uuid });\r\n}\r\n\r\n/**\r\n * Creates a service interceptor that logs requests and responses to logger.\r\n *\r\n * @returns An interceptor.\r\n * @see https://learn.microsoft.com/graph/best-practices-concept#reliability-and-support\r\n */\r\nexport function createLoggingInterceptorByLogger(): ServiceInterceptor {\r\n    return createLoggingInterceptor({ logRequest, logResponse, logError });\r\n}\r\n\r\ninterface LoggingContext {\r\n    start: number;\r\n    url: string;\r\n    method: string;\r\n    clientRequestId: string;\r\n}\r\n\r\nfunction logRequest(request: Request): LoggingContext {\r\n    return {\r\n        start: performance.now(),\r\n        url: request.url,\r\n        method: request.method,\r\n        clientRequestId: request.headers.get(CLIENT_REQUEST_ID) ?? '',\r\n    };\r\n}\r\n\r\nfunction logResponse(response: Response, context: LoggingContext): void {\r\n    const info: IHttpInfo = {\r\n        latency: performance.now() - context.start,\r\n        apiName: maskUrl(context.url, maskUrlOptionsForApiName),\r\n        url: maskUrl(context.url, maskUrlOptionsForUrl),\r\n        requestMethod: context.method,\r\n        clientRequestId: context.clientRequestId,\r\n        responseCode: response.status,\r\n        responseText: response.statusText,\r\n        correlationId: response.headers.get(REQUEST_ID) ?? '',\r\n    };\r\n\r\n    logger.logHttp(info);\r\n}\r\n\r\nfunction logError(error: unknown, context: LoggingContext): void {\r\n    if (!(error instanceof Error)) return;\r\n\r\n    logger.logTraceError(\r\n        LogCategory.NetworkError,\r\n        `NetworkError ${maskUrl(context.url, maskUrlOptionsForUrl)} ${error.message}`\r\n    );\r\n}\r\n\r\n/**\r\n * The mask URL options.\r\n *\r\n * @property user Mask users from Graph URLs.\r\n * @property group Mask groups from Graph URLs.\r\n * @property photo Mask photos from Graph URLs.\r\n * @property drive Mask drives from Graph URLs.\r\n * @property item Mask items from Graph URLs.\r\n * @property itemPath Mask paths from Graph URLs.\r\n * @property share Mask shares from Graph URLs.\r\n * @property thumbnail Mask thumbnails from Graph URLs.\r\n * @property sharepoint Mask the whole SharePoint URLs.\r\n * @property token Mask tempauth tokens from SharePoint URLs.\r\n */\r\ninterface MaskUrlOptions {\r\n    user?: boolean;\r\n    group?: boolean;\r\n    photo?: boolean;\r\n    drive?: boolean;\r\n    item?: boolean;\r\n    itemPath?: boolean;\r\n    share?: boolean;\r\n    thumbnail?: boolean;\r\n    sharepoint?: boolean;\r\n    token?: boolean;\r\n}\r\n\r\n/**\r\n * Masks a URL by replacing parts of it with placeholders.\r\n *\r\n * To avoid being escaped, the placeholders are enclosed in:\r\n * - square brackets if occurring in the path,\r\n * - angle brackets if occurring in the query string.\r\n *\r\n * @param url The URL to mask.\r\n * @param options The mask URL options.\r\n * @returns The masked URL.\r\n * @example maskUrl('https://example.com/users/42', { user: true }); // 'https://example.com/users/[user]'\r\n * @example maskUrl('https://example.com/groups/42', { group: true }); // 'https://example.com/groups/[group]'\r\n * @example maskUrl('https://example.com/me/photos/48x48/$value', { photo: true }); // 'https://example.com/me/photos/[photo]/$value'\r\n * @example maskUrl('https://example.com/drives/42', { drive: true }); // 'https://example.com/drives/[drive]'\r\n * @example maskUrl('https://example.com/me/drive/items/42:/Documents:', { item: true }); // 'https://example.com/me/drive/items/[item]:/Documents:'\r\n * @example maskUrl('https://example.com/me/drive/items/42:/Documents:', { itemPath: true }); // 'https://example.com/me/drive/items/42:[item-path]:'\r\n * @example maskUrl('https://example.com/shares/42', { share: true }); // 'https://example.com/shares/[share]'\r\n * @example maskUrl('https://example.com/shares/42/driveitem/thumbnails/0/medium', { thumbnail: true }); // 'https://example.com/shares/42/driveitem/thumbnails/[thumbnail]/medium'\r\n * @example maskUrl('https://contoso-my.sharepoint.com/path/to/entity', { sharepoint: true }); // 'https://sharepoint.com'\r\n * @example maskUrl('https://contoso-my.sharepoint.com/path/to/entity?tempauth=42', { token: true }); // 'https://contoso-my.sharepoint.com/path/to/entity?tempauth=<token>'\r\n */\r\nfunction maskUrl(url: string, options: MaskUrlOptions = {}): string {\r\n    const masked = new URL(url);\r\n\r\n    if (options.user) {\r\n        masked.pathname = masked.pathname.replace(/(?<=users\\/)\\S+?(?=\\/|$)/g, '[user]');\r\n    }\r\n\r\n    if (options.group) {\r\n        masked.pathname = masked.pathname.replace(/(?<=groups\\/)\\S+?(?=\\/|$)/g, '[group]');\r\n    }\r\n\r\n    if (options.photo) {\r\n        masked.pathname = masked.pathname.replace(/(?<=photos\\/)\\S+?(?=\\/|$)/g, '[photo]');\r\n    }\r\n\r\n    if (options.drive) {\r\n        masked.pathname = masked.pathname.replace(/(?<=drives\\/)\\S+?(?=\\/|$)/g, '[drive]');\r\n    }\r\n\r\n    if (options.item) {\r\n        masked.pathname = masked.pathname.replace(/(?<=items\\/)\\S+?(?=:|\\/|$)/g, '[item]');\r\n    }\r\n\r\n    if (options.itemPath) {\r\n        masked.pathname = masked.pathname.replace(/(?<=(items\\/\\S+|root):)\\S+?(?=:)/g, '[item-path]');\r\n    }\r\n\r\n    if (options.share) {\r\n        masked.pathname = masked.pathname.replace(/(?<=shares\\/)\\S+?(?=\\/|$)/g, '[share]');\r\n    }\r\n\r\n    if (options.thumbnail) {\r\n        masked.pathname = masked.pathname.replace(/(?<=thumbnails\\/)\\S+?(?=\\/|$)/g, '[thumbnail]');\r\n    }\r\n\r\n    if (options.sharepoint) {\r\n        const match = masked.hostname.match(SHAREPOINT_DOMAIN_REGEX);\r\n        if (match) {\r\n            masked.hostname = match[0];\r\n            masked.pathname = '';\r\n            masked.search = '';\r\n        }\r\n    }\r\n\r\n    if (options.token && masked.searchParams.has(SHAREPOINT_TEMPAUTH_KEY)) {\r\n        masked.searchParams.set(SHAREPOINT_TEMPAUTH_KEY, '<token>');\r\n    }\r\n\r\n    return masked.toString();\r\n}\r\n\r\n/**\r\n * The mask URL options for API names.\r\n */\r\nconst maskUrlOptionsForApiName: MaskUrlOptions = {\r\n    user: true,\r\n    group: true,\r\n    photo: true,\r\n    drive: true,\r\n    item: true,\r\n    itemPath: true,\r\n    share: true,\r\n    thumbnail: true,\r\n    sharepoint: true,\r\n};\r\n\r\n/**\r\n * The mask URL options for URLs.\r\n */\r\nconst maskUrlOptionsForUrl: MaskUrlOptions = {\r\n    itemPath: true,\r\n    token: true,\r\n};\r\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAUA;AAQA;AACA;AACA;AACA;AACA;AASA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;;;AAGA;AACA;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AAEA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AAAA;AACA;AACA;AAIA;AACA;AACA;AACA;AAEA;;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAEA;;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAEA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAEA;;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC1RA;AAMA;AACA;AAEA;;;;;AAKA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;AAKA;AACA;AAGA;AACA;AAWA;;;;;;;;;AASA;AACA;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AAIA;;AACA;AAEA;;;;;;;;;;;AAWA;AACA;;AAIA;AAGA;AACA;AAAA;AAEA;;;;;;AAMA;AACA;AACA;AACA;AAWA;AACA;AACA;AAEA;;;;;AAKA;AACA;AACA;AACA;AAEA;;;;;;;;AAQA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;AAKA;AACA;AACA;AACA;AAEA;;;;;AAKA;AACA;AACA;AACA;;;;;;;;;;;;;;ACrQA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAGA;;AAEA;;;;;AAKA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;AACA;AAEA;;AAEA;AACA;AAEA;;AAEA;AACA;AAEA;;AAEA;AACA;AAEA;;AAEA;AACA;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AAEA;;AAEA;AACA;AAEA;;AAEA;AACA;AAEA;AAUA;;AAEA;AACA;AAEA;AACA;;;;AAIA;AACA;AACA;;AAEA;AACA;AAGA;;AAEA;AACA;;;;;;;;;;;;;;ACzGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAEA;AAEA;AAGA;;;;AAIA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AAmEA;AAAA;AACA;AACA;AAOA;AAAA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AASA;;;;;;AAMA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;AClIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;;;;;;AAMA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;AAMA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;;;;;;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AAEA;;;;;;;AAOA;AACA;AAKA;AACA;AACA;AACA;AAEA;;;;;;AAMA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;AAMA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;AC7GA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAEA;AAEA;AACA;AACA;AAOA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAEA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAEA;AACA;AAAA;AAEA;AACA;AAEA;AACA;AACA;AAAA;AAEA;AACA;;;;;;;;;;;;;;ACxEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;;;;;;;;;;;;;ACDA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AAEA;AAAA;AACA;;AAEA;AACA;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;ACxEA;AAAA;AAAA;AAAA;AAAA;AACA;;;;;;;;;;;;;ACDA;AAAA;;AAEA;AACA;;AACA;AACA;;;;;;;;;;;;;;ACLA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;ACAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAEA;AACA;AAUA;AAUA;AASA;AASA;AAYA;;;;;;;;;;;;;;ACrDA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;ACTA;AAAA;AAAA;AAEA;;;;;;;;;;;;;;ACFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAEA;AACA;AAEA;AAEA;;;;;AAKA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;;;;AAIA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;AAMA;AACA;AACA;AACA;;;;;;;;;;;;;;ACxFA;AAAA;AAAA;AAAA;;AAEA;AAEA;;;;;;;;;;;;;;ACJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAQA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AACA,kEAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;;;;;;AChFA;AAAA;AAAA;AAAA;AAAA;;AAEA;AAEA;AAEA;;;AAGA;AACA;AAEA;AAEA;;;;;;;;;;;;;;ACdA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AACA;;;;;;AAMA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;;;;;;;;;;;;;ACrDA;AAAA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACXA;AACA;AACA;AACA;AACA;AACA;AAgBA;;AAEA;AACA;AAAA;AACA;AACA;AACA;AAEA;;AAEA;AACA;;AACA;AACA;AACA;AAEA;AAAA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC5CA;AAMA;AACA;AACA;AACA;AACA;AAQA;;AAEA;AACA;AAEA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;;;;AAIA;AACA;AACA;AAGA;;;;;;;;;;;;;;AC5DA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAkBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;ACpEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AAEA;;AAEA;AACA;AAEA;;AAEA;AACA;AAEA;;;AAGA;AACA;AAEA;;AAEA;AACA;AAEA;;AAEA;AACA;AAEA;;AAEA;AACA;AAEA;;AAEA;AACA;AAEA;;AAEA;AACA;AAEA;;;AAGA;AACA;AACA;;;AAGA;AACA;AAEA;;AAEA;AACA;AAEA;;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA;AACA;AAEA;;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA;AACA;AAEA;AACA;AAEA;;AAEA;AACA;AAEA;;AAEA;AACA;AAEA;;AAEA;AACA;AAEA;;AAEA;AACA;AAEA;;AAEA;AACA;AAEA;;AAEA;AACA;AAEA;;AAEA;AACA;AAEA;;AAEA;AACA;AAEA;;AAEA;AACA;AAEA;;AAEA;AACA;AAGA;;AAEA;AACA;;;;;;;;;;;;;;AC/MA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;ACAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAEA;AAEA;AACA;AACA;AACA;AACA;AAYA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;;AACA;AACA;AAIA;AACA;;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AAMA;AACA;AACA;AACA;;;;;;;;;;;;;;ACjEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;;AAEA;AACA;AAKA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;;;;;;;;;;;;;ACpBA;;;;;;;;;;;;;;ACAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AAAA;AACA;AACA;;AAEA;AACA;AAEA;;AAEA;AACA;AAEA;;AAEA;AACA;AAEA;;AAEA;AACA;AAEA;;AAEA;AACA;AAEA;;AAEA;AACA;AAEA;;AAEA;AACA;AAEA;;AAEA;AACA;AAEA;;AAEA;AACA;AAEA;;AAEA;AACA;AAEA;;AAEA;AACA;AAEA;;AAEA;AACA;AAEA;;AAEA;AACA;AAEA;;AAEA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AAaA;;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;;;;;;AAMA;AACA;AACA;AACA;AAGA;AACA;AAEA;;;;AAIA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;ACrJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;;;;;;;;;;;;;AChCA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;AAKA;AACA;AACA;AACA;AAEA;;;;AAIA;AACA;AACA;AAAA;AACA;AACA;AAEA;;;;AAIA;AACA;AACA;AAAA;AACA;AACA;AAEA;;AAEA;AACA;AACA;AACA;AAEA;;;;;AAKA;AACA;AACA;AAEA;AACA;AACA;AAIA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAEA;AACA;AAAA;AAEA;AAIA;AACA;AAAA;AACA;AACA;AACA;;;;;;;;;;;;;;ACjHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAWA;AACA;AACA;AAEA;;;;AAIA;AACA;AACA;AACA;AAEA;AAEA;;;;AAIA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;;;;;AAKA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;AAKA;AACA;AACA;AACA;AAEA;;;;;AAKA;AACA;AACA;AACA;AASA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAAA;AAEA;AAIA;AA6BA;;;;;;;;;;;;;;;;;;;;AAoBA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA;AACA;AACA;AACA;AACA;;;;;A","sourceRoot":""}