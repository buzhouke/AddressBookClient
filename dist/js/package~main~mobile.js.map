{"version":3,"file":"dist/js/package~main~mobile.js","sources":["webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-shared/src/index.ts","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-rich-text-tiptap/src/components/RichTextRibbon/RichTextRibbon.items.tsx","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-forms/src/implementations/index.ts","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-forms/src/implementations/utilities/designing.ts","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/utilities-core/src/signals.ts","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-shared/src/CommonLoadingIndicator/CommonLoadingIndicator.component.tsx","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/utilities-hooks/src/debounce.ts","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/utilities-core/src/miscs.ts","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-forms/src/implementations/feature/strings.ts","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-forms/src/implementations/feature/default.ts","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-shared/src/TaskModule/TaskModule.styles.ts","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-shared/src/CommonSlideDots/CommonSlideDots.tsx","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-rich-text-tiptap/src/components/RichTextRibbon/index.ts","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-metaos-host/src/index.ts","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-metaos-host/src/react/index.ts","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-shared/src/CommonPanel/CommonPanel.component.tsx","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-forms/src/implementations/components/DesigningDecorator/PrimarySettings/PrimarySettings.tsx","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-forms/src/implementations/components/RenderingField/RenderingField.tsx","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-fields/src/DecimalTextField/index.ts","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-forms/src/implementations/feature/descriptors/TextDescriptor.tsx","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/utilities-core/src/index.ts","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-forms/src/implementations/components/DesigningDecorator/DesigningDecorator.styles.ts","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-metaos-host/src/react/useTeamsContext.tsx","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-rich-text-tiptap/src/extensions/file/sessions.ts","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-forms/src/implementations/types/context.ts","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-forms/src/implementations/components/DesigningDecorator/SecondarySettings/index.ts","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-forms/src/implementations/feature/validators/RequiredValidator.ts","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-rich-text-tiptap/src/extensions/link.ts","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/utilities-core/src/dates.ts","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-forms/src/implementations/components/DesigningDecorator/SecondarySettings/SecondarySettings.styles.ts","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-shared/src/ConfirmationDialog/ConfirmationDialog.component.tsx","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-shared/src/AppHeader/AppHeader.styles.ts","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-forms/src/implementations/feature/descriptors/DropdownChoiceDescriptor.tsx","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-people/src/PeopleList/index.ts","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-shared/src/CommonCard/CommonCard.shimmer.tsx","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-shared/src/EmptyState/turtle.svg","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-forms/src/implementations/types/entries/text.ts","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-forms/src/facade/index.ts","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-metaos-host/src/react/useTeamsTaskModuleSize.ts","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-shared/src/EmptyState/EmptyState.styles.ts","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-forms/src/facade/FormFacade.styles.ts","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-fluentui-icons/src/Icons.tsx","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-rich-text-tiptap/src/extensions/background-color.ts","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/services-graph/src/resources/drive.ts","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/services-core/src/interceptors/online.ts","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-metaos-host/src/fallback.ts","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/utilities-core/src/jsons.ts","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-metaos-host/src/themes.ts","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-forms/src/implementations/components/DesigningDecorator/DesigningDecorator.active.tsx","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-forms/src/abstractions/index.ts","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/services-graph/src/resources/profile-photo.ts","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-shared/src/CommonModal/index.ts","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/services-graph/src/resources/index.ts","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-shared/src/CommonPanel/CommonPanel.styles.ts","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/services-core/src/interceptors/authorization.ts","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-forms/src/implementations/components/DesigningTrailingActions/DesigningTrailingActions.styles.ts","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/utilities-hooks/src/drop.ts","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-rich-text-tiptap/src/extensions/hack.ts","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-forms/src/implementations/components/DesigningDecorator/MockedField/index.ts","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-forms/src/implementations/components/DesigningDecorator/ChoiceSettings/ChoiceSettings.tsx","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-forms/src/implementations/components/DesigningDecorator/RestrictionSettings/RestrictionSettings.styles.ts","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/services-graph/src/resources/thumbnail.ts","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-shared/src/CollapsingArea/CollapsingArea.component.tsx","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-forms/src/implementations/utilities/hooks.ts","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-shared/src/ContentCopyRequestModal/index.ts","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-forms/src/abstractions/FormFragment.tsx","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-rich-text-tiptap/src/extensions/file/index.ts","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-forms/src/implementations/utilities/index.ts","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-forms/src/implementations/components/DesigningDecorator/SecondarySettings/SecondarySettings.tsx","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-rich-text-tiptap/src/extensions/file/utils.tsx","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-shared/src/ContentCopyRequestModal/ContentCopyRequestModal.styles.ts","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/services-core/src/error.ts","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-people/src/types.ts","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-fields/src/index.ts","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-forms/src/implementations/feature/descriptors/DateTimeDescriptor.tsx","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-shared/src/CommonCard/CommonCard.component.tsx","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/utilities-hooks/src/blob.ts","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-people/src/PeopleCoin/PeopleCoin.tsx","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-people/src/PeopleView/PeopleView.tsx","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-forms/src/implementations/components/PreviewingDecorator/PreviewingDecorator.styles.ts","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-forms/src/implementations/components/DesigningDecorator/PrimarySettings/PrimarySettings.styles.ts","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-shared/src/AppHeader/index.ts","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-shared/src/CommonModal/CommonModal.component.tsx","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-shared/src/CommonCard/CommonCard.styles.ts","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-logger/src/common/interfaces.ts","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-shared/src/ContentCopyResponseModal/ContentCopyResponseModal.styles.ts","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-people/src/PeopleSelect/PeopleSelect.utils.tsx","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-rich-text-tiptap/src/extensions/defaults.ts","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-shared/src/CommonLoadingIndicator/index.ts","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-forms/src/implementations/feature/keyExtractors.ts","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-metaos-host/src/wrappers.ts","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-forms/src/index.ts","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-shared/src/EmptyState/EmptyState.tsx","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-shared/src/TaskModuleV2/index.ts","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-rich-text-tiptap/src/extensions/index.ts","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-forms/src/implementations/components/DesigningDecorator/DesigningActions.tsx","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-people/src/PeopleList/PeopleList.tsx","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-rich-text-tiptap/src/components/InsertLink/InsertLink.styles.ts","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/services-core/src/interceptors/pooling.ts","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-people/src/PeopleCoin/index.ts","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-rich-text-tiptap/src/components/InsertLink/InsertLink.tsx","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-forms/src/implementations/components/DesigningDecorator/RestrictionSettings/index.ts","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-shared/src/CommonIcon/CommonIcon.component.tsx","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-shared/src/ConfirmationDialog/ConfirmationDialog.styles.ts","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-forms/src/implementations/feature/idGenerators.ts","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-shared/src/CommonIcon/index.ts","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-forms/src/implementations/components/RenderingField/index.ts","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-forms/src/implementations/feature/index.ts","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-fluentui-teams-theme/src/teams/teams-colors.ts","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/utilities-interceptors/src/utils.ts","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-rich-text-tiptap/src/extensions/customized-mention.ts","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/services-graph/src/resources/drive-item.ts","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-people/src/PeopleCoin/PeopleCoin.utils.tsx","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-logger/src/common/types.ts","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-people/src/PeopleSelect/PeopleSelect.strings.ts","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-forms/src/implementations/feature/descriptors/RichTextDescriptor.tsx","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-rich-text-tiptap/src/types.ts","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-forms/src/implementations/feature/comparators.ts","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-shared/src/CommonCard/index.ts","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-shared/src/TaskModule/index.ts","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-rich-text-tiptap/src/extensions/file/view.image.tsx","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-shared/src/Spinner/index.ts","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-rich-text-tiptap/src/utils.ts","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-shared/src/ConfirmationDialog/index.ts","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-fields/src/CollapsibleTextField/CollapsibleTextField.styles.ts","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-forms/src/implementations/components/DesigningDecorator/RestrictionSettings/RestrictionSettings.tsx","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/services-graph/src/index.ts","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-shared/src/TaskModuleV2/TaskModuleV2.styles.ts","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-forms/src/implementations/types/entries/index.ts","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/utilities-hooks/src/keyboard.ts","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-people/src/PeoplePile/PeoplePile.tsx","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/utilities-core/src/clipboards.ts","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-shared/src/PillPivot/PillPivot.component.tsx","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/utilities-hooks/src/update.ts","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-metaos-host/src/error.ts","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-forms/src/implementations/utilities/choice.ts","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-forms/src/implementations/feature/descriptors/index.ts","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-fields/src/CollapsibleTextField/CollapsibleTextField.tsx","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-shared/src/PillPivot/index.ts","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-shared/src/TaskModule/TaskModule.component.tsx","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-shared/src/PillPivot/PillPivot.styles.ts","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-people/src/PeopleCoin/PeopleCoin.styles.ts","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/services-core/src/locator.ts","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-rich-text-tiptap/src/index.ts","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-rich-text-tiptap/src/extensions/font-size.ts","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-rich-text-tiptap/src/components/ColorMenuItem/ColorMenuItem.styles.ts","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-rich-text-tiptap/src/components/InsertLink/index.ts","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-rich-text-tiptap/src/components/RichTextField/index.ts","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-rich-text-tiptap/src/components/RichTextRibbon/RichTextRibbon.styles.ts","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-people/src/PeopleView/PeopleView.styles.ts","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-shared/src/ContentCopyResponseModal/index.ts","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-rich-text-tiptap/src/extensions/file/extension.ts","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/services-core/src/interceptors/throttling.ts","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/services-core/src/interceptors/utilities.ts","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/services-graph/src/resources/group.ts","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-forms/src/implementations/feature/descriptors/RadioChoiceDescriptor.tsx","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/utilities-core/src/data-transfers.ts","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/utilities-core/src/urls.ts","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-fluentui-icons/src/index.ts","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/utilities-hooks/src/deep.ts","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-shared/src/CollapsingArea/index.ts","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-forms/src/implementations/feature/validators/index.ts","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-fluentui-teams-theme/src/teams/teams-sizes.ts","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/utilities-hooks/src/renderings.ts","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/utilities-core/src/promises.ts","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-rich-text-tiptap/src/extensions/file/view.fallback.tsx","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/utilities-core/src/semaphores.ts","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-forms/src/implementations/feature/validators/default.ts","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-people/src/PeopleList/PeopleList.styles.ts","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-rich-text-tiptap/src/extensions/utils.ts","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-people/src/index.ts","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/services-graph/src/resources/root.ts","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-shared/src/styles/ellipsisStyles.ts","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-forms/src/implementations/components/PreviewingDecorator/index.ts","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-forms/src/implementations/components/DesigningDecorator/DesigningDecorator.tsx","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-shared/src/EmptyState/index.ts","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-shared/src/MobileSheet/index.ts","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/utilities-hooks/src/long-press.ts","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-forms/src/implementations/feature/validators/RichTextValidator.ts","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-shared/src/CommonIcon/CommonIcon.styles.ts","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/services-core/src/interceptors/headers.ts","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-rich-text-tiptap/src/components/index.ts","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-people/src/PeoplePile/index.ts","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-forms/src/implementations/feature/descriptors/default.ts","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-shared/src/CommonPanel/index.ts","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-shared/src/Spinner/Spinner.styles.ts","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-forms/src/facade/FormFacade.tsx","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-rich-text-tiptap/src/components/ColorMenuItem/ColorMenuItem.tsx","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/utilities-core/src/files.ts","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-forms/src/implementations/components/DesigningDecorator/index.ts","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-forms/src/implementations/components/DesigningDecorator/PrimarySettings/index.ts","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-rich-text-tiptap/src/components/InsertLink/InsertLink.dialog.tsx","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-forms/src/implementations/components/DesigningDecorator/ChoiceSettings/ChoiceSettings.styles.ts","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/services-core/src/interceptors/index.ts","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-rich-text-tiptap/src/extensions/file/styles.ts","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/utilities-core/src/data-urls.ts","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/services-core/src/interceptors/caching.ts","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-rich-text-tiptap/src/components/RichTextRibbon/RichTextRibbon.tsx","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/utilities-hooks/src/index.ts","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/services-graph/src/resources/share.ts","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/services-core/src/index.ts","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-shared/src/ContentCopyResponseModal/ContentCopyResponseModal.component.tsx","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-forms/src/implementations/components/RenderingField/RenderingField.styles.ts","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-rich-text-tiptap/src/extensions/misc.ts","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-forms/src/implementations/components/DesigningDecorator/ChoiceSettings/index.ts","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-forms/src/implementations/feature/descriptors/BaseDescriptor.tsx","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/utilities-hooks/src/visibility.ts","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-forms/src/implementations/feature/validators/LengthValidator.ts","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-rich-text-tiptap/src/components/InsertTable/index.ts","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-forms/src/implementations/components/index.ts","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-forms/src/implementations/feature/descriptors/FallbackViewingDescriptor.tsx","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-shared/src/CommonSlideDots/CommonSlideDots.styles.ts","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-forms/src/implementations/components/DesigningDecorator/MockedField/MockedField.styles.ts","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-forms/src/implementations/types/entries/base.ts","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/services-core/src/interceptors/logging.ts","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-logger/src/OneDSLogger.ts","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-people/src/PeoplePile/PeoplePile.styles.ts","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-rich-text-tiptap/src/components/RichTextField/RichTextField.tsx","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-shared/src/ContentCopyRequestModal/ContentCopyRequestModal.component.tsx","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-forms/src/implementations/utilities/validation.ts","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-fluentui-teams-theme/index.ts","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-people/src/PeopleView/index.ts","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-forms/src/implementations/components/DesigningDecorator/MockedField/MockedField.tsx","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-forms/src/implementations/feature/sanitizers.ts","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-rich-text-tiptap/src/components/RichTextField/RichTextField.styles.ts","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/services-core/src/operation.ts","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-rich-text-tiptap/src/extensions/file/view.tsx","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/services-core/src/interceptors/retry.ts","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-shared/src/CollapsingArea/CollapsingArea.styles.ts","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-shared/src/TaskModuleV2/TaskModuleV2.component.tsx","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-forms/src/implementations/components/PreviewingDecorator/PreviewingDecorator.tsx","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-shared/src/styles/makeStyles.ts","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-metaos-host/src/utils.ts","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-forms/src/implementations/feature/descriptors/CheckboxChoiceDescriptor.tsx","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-shared/src/AppHeader/AppHeader.component.tsx","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-forms/src/implementations/types/index.ts","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-rich-text-tiptap/src/components/RichTextRibbon/RichTextRibbon.utils.ts","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-metaos-host/src/react/useTeamsNavBarMenu.ts","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-shared/src/CommonLoadingIndicator/CommonLoadingIndicator.styles.ts","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-forms/src/implementations/utilities/styles.ts","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-shared/src/ContentCopyRequestModal/ContentCopyRequestModalContent.tsx","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-forms/src/implementations/feature/constants.ts","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/services-graph/src/client.ts","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-rich-text-tiptap/src/components/InsertTable/InsertTable.styles.ts","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-forms/src/abstractions/Form.tsx","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/services-graph/src/resources/user.ts","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-forms/src/implementations/types/feature.ts","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-fields/src/DecimalTextField/DecimalTextField.tsx","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/utilities-core/src/images.ts","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-shared/src/MobileSheet/MobileSheet.styles.ts","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/utilities-core/src/mimes.ts","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-shared/src/CommonModal/CommonModal.styles.ts","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-rich-text-tiptap/src/components/RichTextField/RichTextField.types.ts","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-fluentui-teams-theme/src/teams/teams-theme.ts","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-shared/src/Spinner/Spinner.tsx","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-shared/src/CommonModal/ModalContent.tsx","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-fields/src/CollapsibleTextField/index.ts","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-forms/src/implementations/feature/validators/NumberValidator.ts","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-forms/src/implementations/components/DesigningTrailingActions/index.ts","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-shared/src/MobileSheet/MobileSheet.component.tsx","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-rich-text-tiptap/src/components/InsertTable/InsertTable.tsx","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/utilities-interceptors/src/index.ts","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-rich-text-tiptap/src/components/ColorMenuItem/index.ts","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-forms/src/implementations/feature/orderGenerators.ts","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-forms/src/implementations/components/DesigningTrailingActions/DesigningTrailingActions.tsx","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-shared/src/CommonSlideDots/index.ts","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-people/src/PeopleSelect/index.ts","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-shared/src/ContentCopyResponseModal/ContentCopyResponseModalContent.tsx","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-forms/src/implementations/feature/trailingRenders.tsx","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-people/src/PeopleSelect/PeopleSelect.tsx","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/utilities-core/src/numbers.ts","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-forms/src/implementations/types/entries/choice.ts","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-logger/src/index.ts","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-logger/src/ScenarioLogger.ts","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-people/src/PeopleSelect/PeopleSelect.styles.ts","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/utilities-core/src/ids.ts","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-rich-text-tiptap/src/components/InsertLink/InsertLink.menu.tsx"],"sourcesContent":["export * from './AppHeader';\r\nexport * from './CollapsingArea';\r\nexport * from './CommonCard';\r\nexport * from './CommonIcon';\r\nexport * from './CommonModal';\r\nexport * from './CommonPanel';\r\nexport * from './CommonSlideDots';\r\nexport * from './ConfirmationDialog';\r\nexport * from './ContentCopyRequestModal';\r\nexport * from './ContentCopyResponseModal';\r\nexport * from './EmptyState';\r\nexport * from './MobileSheet';\r\nexport * from './PillPivot';\r\nexport * from './Spinner';\r\nexport * from './styles/ellipsisStyles';\r\nexport * from './TaskModule';\r\nexport * from './TaskModuleV2';\r\n","import { ICommandBarItemProps } from '@fluentui/react';\r\nimport { Editor } from '@tiptap/core';\r\nimport Blockquote from '@tiptap/extension-blockquote';\r\nimport Bold from '@tiptap/extension-bold';\r\nimport BulletList from '@tiptap/extension-bullet-list';\r\nimport CodeBlock from '@tiptap/extension-code-block';\r\nimport Color from '@tiptap/extension-color';\r\nimport Italic from '@tiptap/extension-italic';\r\nimport ListItem from '@tiptap/extension-list-item';\r\nimport OrderedList from '@tiptap/extension-ordered-list';\r\nimport Strike from '@tiptap/extension-strike';\r\nimport Table from '@tiptap/extension-table';\r\nimport Underline from '@tiptap/extension-underline';\r\nimport { selectFile } from '@addressbook/utilities-core';\r\nimport { UseRenderingsResult } from '@addressbook/utilities-hooks';\r\nimport React from 'react';\r\nimport { BackgroundColor, File, FontSize, Link } from '../../extensions';\r\nimport {\r\n    RichTextFieldBackgroundColor,\r\n    RichTextFieldButton,\r\n    RichTextFieldFontSize,\r\n    RichTextFieldStrings,\r\n    RichTextFieldTextColor,\r\n} from '../../types';\r\nimport { backgroundColorValues, fontSizeValues, textColorValues } from '../../utils';\r\nimport { ColorMenuItem } from '../ColorMenuItem';\r\nimport { InsertLinkDialog, InsertLinkMenu } from '../InsertLink';\r\nimport { InsertTable } from '../InsertTable';\r\nimport { RichTextFieldRibbonCallbacks } from './RichTextRibbon.types';\r\nimport {\r\n    colorMenuCalloutClassName,\r\n    getCurrentLink,\r\n    hasExtensionByName,\r\n    maxTableSize,\r\n    menuCalloutClassName,\r\n} from './RichTextRibbon.utils';\r\n\r\nexport interface RibbonItemParams extends Pick<UseRenderingsResult, 'render' | 'unrender'> {\r\n    editor: Editor;\r\n    compact?: boolean;\r\n    callbacks: RichTextFieldRibbonCallbacks;\r\n    strings: Pick<\r\n        RichTextFieldStrings,\r\n        | 'button'\r\n        | 'backgroundColor'\r\n        | 'fontSize'\r\n        | 'textColor'\r\n        | 'insertLinkTitle'\r\n        | 'insertLinkDisplayAs'\r\n        | 'insertLinkUrl'\r\n        | 'insertTableTitle'\r\n    >;\r\n}\r\n\r\nexport interface RibbonItemDescriptor {\r\n    key: string;\r\n    text: (params: RibbonItemParams) => string;\r\n    icon: string;\r\n    supported: (params: RibbonItemParams) => boolean;\r\n    checked?: (params: RibbonItemParams) => boolean;\r\n    disabled?: (params: RibbonItemParams) => boolean;\r\n    onClick?: (params: RibbonItemParams) => void;\r\n    props?: (params: RibbonItemParams) => Partial<ICommandBarItemProps>;\r\n}\r\n\r\nexport function getItemProps(\r\n    { key, text, icon, supported, checked, disabled, onClick, props }: RibbonItemDescriptor,\r\n    params: RibbonItemParams\r\n): ICommandBarItemProps | undefined {\r\n    if (!supported(params)) return;\r\n\r\n    const patch = props?.(params);\r\n\r\n    const subMenuProps = patch?.subMenuProps;\r\n    if (subMenuProps) {\r\n        // If customized menu list is provided, we restore the default focus zone behavior and set focus on mount.\r\n        if (subMenuProps.onRenderMenuList) {\r\n            subMenuProps.shouldFocusOnMount = false;\r\n            subMenuProps.focusZoneProps = { shouldFocusOnMount: true };\r\n        }\r\n    }\r\n\r\n    const textResult = text(params);\r\n    const result: ICommandBarItemProps = {\r\n        key,\r\n        text: textResult,\r\n        ariaLabel: textResult,\r\n        iconProps: { iconName: icon },\r\n        iconOnly: true,\r\n        ...(checked && {\r\n            role: 'menuitemcheckbox',\r\n            canCheck: true,\r\n            checked: checked(params),\r\n        }),\r\n        disabled: disabled?.(params),\r\n        onClick: () => {\r\n            onClick?.(params);\r\n            params.callbacks.onRibbonButtonClicked?.(key);\r\n        },\r\n        ...patch,\r\n    };\r\n\r\n    return result;\r\n}\r\n\r\nconst bold: RibbonItemDescriptor = {\r\n    key: 'bold',\r\n    text: params => params.strings.button(RichTextFieldButton.Bold),\r\n    icon: 'Bold',\r\n    supported: ({ editor }) => hasExtensionByName(editor, Bold.name),\r\n    checked: params => params.editor.isActive(Bold.name),\r\n    disabled: params => !params.editor.can().toggleBold(),\r\n    onClick: params => params.editor.chain().focus().toggleBold().run(),\r\n};\r\n\r\nconst italic: RibbonItemDescriptor = {\r\n    key: 'italic',\r\n    text: params => params.strings.button(RichTextFieldButton.Italic),\r\n    icon: 'Italic',\r\n    supported: ({ editor }) => hasExtensionByName(editor, Italic.name),\r\n    checked: params => params.editor.isActive(Italic.name),\r\n    disabled: params => !params.editor.can().toggleItalic(),\r\n    onClick: params => params.editor.chain().focus().toggleItalic().run(),\r\n};\r\n\r\nconst underline: RibbonItemDescriptor = {\r\n    key: 'underline',\r\n    text: params => params.strings.button(RichTextFieldButton.Underline),\r\n    icon: 'Underline',\r\n    supported: ({ editor }) => hasExtensionByName(editor, Underline.name),\r\n    checked: params => params.editor.isActive(Underline.name),\r\n    disabled: params => !params.editor.can().toggleUnderline(),\r\n    onClick: params => params.editor.chain().focus().toggleUnderline().run(),\r\n};\r\n\r\nconst strikethrough: RibbonItemDescriptor = {\r\n    key: 'strikethrough',\r\n    text: params => params.strings.button(RichTextFieldButton.Strikethrough),\r\n    icon: 'Strikethrough',\r\n    supported: ({ editor }) => hasExtensionByName(editor, Strike.name),\r\n    checked: params => params.editor.isActive(Strike.name),\r\n    disabled: params => !params.editor.can().toggleStrike(),\r\n    onClick: params => params.editor.chain().focus().toggleStrike().run(),\r\n};\r\n\r\nconst backgroundColor: RibbonItemDescriptor = {\r\n    key: 'background-color',\r\n    text: params => params.strings.button(RichTextFieldButton.BackgroundColor),\r\n    icon: 'FabricTextHighlight',\r\n    supported: ({ editor }) => hasExtensionByName(editor, BackgroundColor.name),\r\n    props: ({ editor, strings }) => ({\r\n        subMenuProps: {\r\n            calloutProps: { className: colorMenuCalloutClassName, calloutWidth: 120 },\r\n            items: backgroundColorValues.map(([key, value]) => ({\r\n                key: RichTextFieldBackgroundColor[key],\r\n                onRender: () => (\r\n                    <ColorMenuItem\r\n                        text={strings.backgroundColor(key)}\r\n                        color={value}\r\n                        onClick={() =>\r\n                            // The first focus is to close the callout. The second focus is to focus back.\r\n                            value\r\n                                ? editor.chain().focus().focusLater(2).setBackgroundColor(value).run()\r\n                                : editor.chain().focus().focusLater(2).unsetBackgroundColor().run()\r\n                        }\r\n                    />\r\n                ),\r\n            })),\r\n        },\r\n    }),\r\n};\r\n\r\nconst textColor: RibbonItemDescriptor = {\r\n    key: 'text-color',\r\n    text: params => params.strings.button(RichTextFieldButton.TextColor),\r\n    icon: 'FontColor',\r\n    supported: ({ editor }) => hasExtensionByName(editor, Color.name),\r\n    props: ({ editor, strings }) => ({\r\n        subMenuProps: {\r\n            calloutProps: { className: colorMenuCalloutClassName, calloutWidth: 120 },\r\n            items: textColorValues.map(([key, value]) => ({\r\n                key: RichTextFieldTextColor[key],\r\n                onRender: () => (\r\n                    <ColorMenuItem\r\n                        text={strings.textColor(key)}\r\n                        color={value}\r\n                        onClick={() =>\r\n                            // The first focus is to close the callout. The second focus is to focus back.\r\n                            value\r\n                                ? editor.chain().focus().focusLater(2).setColor(value).run()\r\n                                : editor.chain().focus().focusLater(2).unsetColor().run()\r\n                        }\r\n                    />\r\n                ),\r\n            })),\r\n        },\r\n    }),\r\n};\r\n\r\nconst fontSize: RibbonItemDescriptor = {\r\n    key: 'font-size',\r\n    text: params => params.strings.button(RichTextFieldButton.FontSize),\r\n    icon: 'FontSize',\r\n    supported: ({ editor }) => hasExtensionByName(editor, FontSize.name),\r\n    props: ({ editor, strings }) => ({\r\n        subMenuProps: {\r\n            calloutProps: { calloutWidth: 120 },\r\n            items: fontSizeValues.map(([key, value]) => ({\r\n                key: RichTextFieldFontSize[key],\r\n                text: strings.fontSize(key),\r\n                onClick: () =>\r\n                    // The first focus is to close the callout. The second focus is to focus back.\r\n                    value\r\n                        ? editor.chain().focus().focusLater(2).setFontSize(value).run()\r\n                        : editor.chain().focus().focusLater(3).unsetFontSize().run(),\r\n            })),\r\n        },\r\n    }),\r\n};\r\n\r\nconst bulletedList: RibbonItemDescriptor = {\r\n    key: 'bulleted-list',\r\n    text: params => params.strings.button(RichTextFieldButton.BulletedList),\r\n    icon: 'BulletedList',\r\n    supported: ({ editor }) => hasExtensionByName(editor, BulletList.name),\r\n    checked: params => params.editor.isActive(BulletList.name),\r\n    onClick: params => params.editor.chain().focus().toggleBulletList().run(),\r\n};\r\n\r\nconst numberedList: RibbonItemDescriptor = {\r\n    key: 'numbered-list',\r\n    text: params => params.strings.button(RichTextFieldButton.NumberedList),\r\n    icon: 'NumberedList',\r\n    supported: ({ editor }) => hasExtensionByName(editor, OrderedList.name),\r\n    checked: params => params.editor.isActive(OrderedList.name),\r\n    onClick: params => params.editor.chain().focus().toggleOrderedList().run(),\r\n};\r\n\r\nconst decreaseIndent: RibbonItemDescriptor = {\r\n    key: 'decrease-indent',\r\n    text: params => params.strings.button(RichTextFieldButton.DecreaseIndent),\r\n    icon: 'DecreaseIndentLegacy',\r\n    supported: ({ editor }) => hasExtensionByName(editor, ListItem.name) && hasExtensionByName(editor, Blockquote.name),\r\n    disabled: params =>\r\n        !params.editor\r\n            .can()\r\n            .chain()\r\n            .first([({ commands }) => commands.liftListItem('listItem'), ({ commands }) => commands.unsetBlockquote()])\r\n            .run(),\r\n    onClick: params =>\r\n        params.editor\r\n            .chain()\r\n            .focus()\r\n            .first([({ commands }) => commands.liftListItem('listItem'), ({ commands }) => commands.unsetBlockquote()])\r\n            .run(),\r\n};\r\n\r\nconst increaseIndent: RibbonItemDescriptor = {\r\n    key: 'increase-indent',\r\n    text: params => params.strings.button(RichTextFieldButton.IncreaseIndent),\r\n    icon: 'IncreaseIndentLegacy',\r\n    supported: ({ editor }) => hasExtensionByName(editor, ListItem.name) && hasExtensionByName(editor, Blockquote.name),\r\n    disabled: params =>\r\n        !params.editor\r\n            .can()\r\n            .chain()\r\n            .first([({ commands }) => commands.sinkListItem('listItem'), ({ commands }) => commands.setBlockquote()])\r\n            .run(),\r\n    onClick: params =>\r\n        params.editor\r\n            .chain()\r\n            .focus()\r\n            .first([({ commands }) => commands.sinkListItem('listItem'), ({ commands }) => commands.setBlockquote()])\r\n            .run(),\r\n};\r\n\r\nconst clearFormat: RibbonItemDescriptor = {\r\n    key: 'clear-format',\r\n    text: params => params.strings.button(RichTextFieldButton.ClearFormat),\r\n    icon: 'ClearFormatting',\r\n    supported: () => true,\r\n    onClick: params => params.editor.chain().focus().clearNodes().unsetAllMarks().run(),\r\n};\r\n\r\nconst insertLinkKey = 'insert-link';\r\nconst insertLink: RibbonItemDescriptor = {\r\n    key: insertLinkKey,\r\n    text: params => params.strings.button(RichTextFieldButton.InsertLink),\r\n    icon: 'Link',\r\n    supported: ({ editor }) => hasExtensionByName(editor, Link.name),\r\n    props: ({ editor, compact, strings, callbacks, render, unrender }) => {\r\n        if (compact) {\r\n            return {\r\n                onClick: () => {\r\n                    render(\r\n                        insertLinkKey,\r\n                        <InsertLinkDialog\r\n                            initialLink={getCurrentLink(editor)}\r\n                            onConfirm={link => {\r\n                                // The first focus is to close the callout. The second focus is to focus back.\r\n                                editor\r\n                                    .chain()\r\n                                    .focus()\r\n                                    .focusLater(2)\r\n                                    .insertLink(link.displayText, { href: link.url })\r\n                                    .run();\r\n                                unrender(insertLinkKey);\r\n                            }}\r\n                            onCancel={() => {\r\n                                editor.chain().focus().run();\r\n                                unrender(insertLinkKey);\r\n                            }}\r\n                            normalizeUrl={callbacks.normalizeUrl}\r\n                            strings={strings}\r\n                        />\r\n                    );\r\n                },\r\n            };\r\n        }\r\n\r\n        return {\r\n            subMenuProps: {\r\n                calloutProps: { className: menuCalloutClassName, calloutWidth: 320 },\r\n                items: [{ key: insertLinkKey }],\r\n                onRenderMenuList: () => (\r\n                    <InsertLinkMenu\r\n                        strings={strings}\r\n                        initialLink={getCurrentLink(editor)}\r\n                        onConfirm={link =>\r\n                            // The first focus is to close the callout. The second focus is to focus back.\r\n                            editor.chain().focus().focusLater(2).insertLink(link.displayText, { href: link.url }).run()\r\n                        }\r\n                        onCancel={() => editor.chain().focus().run()}\r\n                        normalizeUrl={callbacks.normalizeUrl}\r\n                    />\r\n                ),\r\n            },\r\n        };\r\n    },\r\n};\r\n\r\nconst insertImage: RibbonItemDescriptor = {\r\n    key: 'insert-image',\r\n    text: params => params.strings.button(RichTextFieldButton.InsertImage),\r\n    icon: 'Image',\r\n    supported: ({ editor }) => hasExtensionByName(editor, File.name),\r\n    props: ({ editor }) => ({\r\n        onClick: () => {\r\n            selectFile({ accept: 'image/*' }).then(\r\n                file => editor.chain().focus().insertFile(file).run(),\r\n                () => editor.chain().focus().run()\r\n            );\r\n        },\r\n    }),\r\n};\r\n\r\nconst insertFile: RibbonItemDescriptor = {\r\n    key: 'insert-file',\r\n    text: params => params.strings.button(RichTextFieldButton.InsertFile),\r\n    icon: 'Attach',\r\n    supported: ({ editor }) => hasExtensionByName(editor, File.name),\r\n    props: ({ editor }) => ({\r\n        onClick: () => {\r\n            selectFile().then(\r\n                file => editor.chain().focus().insertFile(file).run(),\r\n                () => editor.chain().focus().run()\r\n            );\r\n        },\r\n    }),\r\n};\r\n\r\nconst insertTable: RibbonItemDescriptor = {\r\n    key: 'insert-table',\r\n    text: params => params.strings.button(RichTextFieldButton.InsertTable),\r\n    icon: 'Table',\r\n    supported: ({ editor }) => hasExtensionByName(editor, Table.name),\r\n    props: ({ editor, strings }) => ({\r\n        subMenuProps: {\r\n            calloutProps: { className: menuCalloutClassName },\r\n            items: [{ key: 'insert-table' }],\r\n            onRenderMenuList: () => (\r\n                <InsertTable\r\n                    maxTableSize={maxTableSize}\r\n                    strings={strings}\r\n                    onConfirm={tableSize =>\r\n                        // The first focus is to close the callout. The second focus is to focus back.\r\n                        editor\r\n                            .chain()\r\n                            .focus()\r\n                            .focusLater(2)\r\n                            .insertTable({ ...tableSize, withHeaderRow: false })\r\n                            .run()\r\n                    }\r\n                />\r\n            ),\r\n        },\r\n    }),\r\n};\r\n\r\nconst code: RibbonItemDescriptor = {\r\n    key: 'code',\r\n    text: params => params.strings.button(RichTextFieldButton.Code),\r\n    icon: 'Code',\r\n    supported: ({ editor }) => hasExtensionByName(editor, CodeBlock.name),\r\n    checked: params => params.editor.isActive(CodeBlock.name),\r\n    onClick: params => params.editor.chain().focus().toggleCodeBlock().run(),\r\n};\r\n\r\nexport const defaultRibbonItemGroups: RibbonItemDescriptor[][] = [\r\n    [bold, italic, underline, strikethrough],\r\n    [backgroundColor, textColor, fontSize],\r\n    [bulletedList, numberedList, decreaseIndent, increaseIndent],\r\n    [insertLink, insertImage, insertFile, insertTable, code, clearFormat],\r\n];\r\n\r\nexport const compactRibbonItemGroups: RibbonItemDescriptor[][] = [\r\n    [bold, italic, underline],\r\n    [bulletedList, numberedList],\r\n    [insertLink, clearFormat],\r\n];\r\n","export * from './components';\r\nexport * from './feature';\r\nexport * from './types';\r\nexport * from './utilities';\r\n","import { IDropdownOption } from '@fluentui/react';\r\nimport {\r\n    BaseFormQuestion,\r\n    ChoiceAppearance,\r\n    FormConstants,\r\n    FormEntry,\r\n    FormFeature,\r\n    FormQuestion,\r\n    FormQuestionType,\r\n    FormStrings,\r\n    QuestionDisplayType,\r\n    TextNumberRestriction,\r\n    TextNumberRestrictionType,\r\n} from '../types';\r\n\r\n/**\r\n * Gets the display type options for a form question.\r\n *\r\n * @param strings The strings to use for the options.\r\n * @returns The display type options.\r\n */\r\nexport function getDisplayTypeOptions(strings: FormStrings): IDropdownOption[] {\r\n    return [\r\n        {\r\n            key: QuestionDisplayType.ShortText,\r\n            text: strings.questionDisplayTypeOption(QuestionDisplayType.ShortText),\r\n            data: 'TextField',\r\n        },\r\n        {\r\n            key: QuestionDisplayType.MultilineText,\r\n            text: strings.questionDisplayTypeOption(QuestionDisplayType.MultilineText),\r\n            data: 'Textbox',\r\n            hidden: true,\r\n            disabled: true,\r\n        },\r\n        {\r\n            key: QuestionDisplayType.RichText,\r\n            text: strings.questionDisplayTypeOption(QuestionDisplayType.RichText),\r\n            data: 'TextParagraph',\r\n        },\r\n        {\r\n            key: QuestionDisplayType.Number,\r\n            text: strings.questionDisplayTypeOption(QuestionDisplayType.Number),\r\n            data: 'NumberSymbol',\r\n        },\r\n        {\r\n            key: QuestionDisplayType.MultipleChoice,\r\n            text: strings.questionDisplayTypeOption(QuestionDisplayType.MultipleChoice),\r\n            data: 'CheckboxChecked',\r\n        },\r\n        {\r\n            key: QuestionDisplayType.SingleChoice,\r\n            text: strings.questionDisplayTypeOption(QuestionDisplayType.SingleChoice),\r\n            data: 'RadioButton',\r\n        },\r\n        {\r\n            key: QuestionDisplayType.Dropdown,\r\n            text: strings.questionDisplayTypeOption(QuestionDisplayType.Dropdown),\r\n            data: 'ChevronCircleDown',\r\n        },\r\n        {\r\n            key: QuestionDisplayType.Date,\r\n            text: strings.questionDisplayTypeOption(QuestionDisplayType.Date),\r\n            data: 'Calendar',\r\n        },\r\n    ];\r\n}\r\n\r\n/**\r\n * Gets the display type for a form question.\r\n *\r\n * @param question The form question.\r\n * @returns The display type.\r\n */\r\nexport function getDisplayType(question: FormQuestion): QuestionDisplayType {\r\n    switch (question.type) {\r\n        case FormQuestionType.Text:\r\n            return question.number\r\n                ? QuestionDisplayType.Number\r\n                : question.multiline\r\n                ? QuestionDisplayType.MultilineText\r\n                : QuestionDisplayType.ShortText;\r\n        case FormQuestionType.RichText:\r\n            return QuestionDisplayType.RichText;\r\n        case FormQuestionType.Choice:\r\n            switch (question.appearance) {\r\n                case ChoiceAppearance.Radio:\r\n                    return QuestionDisplayType.SingleChoice;\r\n                case ChoiceAppearance.Dropdown:\r\n                    return QuestionDisplayType.Dropdown;\r\n                case ChoiceAppearance.Checkbox:\r\n                    return QuestionDisplayType.MultipleChoice;\r\n            }\r\n        case FormQuestionType.DateTime:\r\n            return QuestionDisplayType.Date;\r\n    }\r\n}\r\n\r\nexport type NewFormEntryProps = Pick<FormQuestion, 'order'> & Pick<FormFeature, 'idGenerator' | 'strings'>;\r\n\r\n/**\r\n * Add a new form entry to existing form entries and return the new form entries.\r\n * This function will deactivate all existing form entries and activate the new form entry.\r\n *\r\n * @param entries The form entries to add the new form entry to.\r\n * @param props.order The order of the new form entry.\r\n * @param props.idGenerator The id generator to use for the new form entry.\r\n * @param props.strings The strings to use for the new form entry.\r\n * @returns The new form entries with the new form entry added.\r\n */\r\nexport function addNewFormEntry(entries: FormEntry[], { order, idGenerator, strings }: NewFormEntryProps): FormEntry[] {\r\n    const newEntries = entries.map(entry => {\r\n        if (!entry.active) return entry;\r\n        const newEntry = { ...entry };\r\n        delete newEntry.active;\r\n        return newEntry;\r\n    });\r\n\r\n    newEntries.push({\r\n        question: {\r\n            type: FormQuestionType.Text,\r\n            id: idGenerator(),\r\n            order,\r\n            title: strings.questionNewTitle,\r\n        },\r\n        answer: {},\r\n        active: true,\r\n    });\r\n\r\n    return newEntries;\r\n}\r\n\r\nfunction deriveBaseFormQuestion(question: FormQuestion): BaseFormQuestion<FormQuestionType> {\r\n    const base: BaseFormQuestion<FormQuestionType> = {\r\n        type: question.type,\r\n        id: question.id,\r\n        familyId: question.familyId,\r\n        eTag: question.eTag,\r\n        order: question.order,\r\n        title: question.title,\r\n        rtTitle: question.rtTitle,\r\n        subtitle: question.subtitle,\r\n        rtSubtitle: question.rtSubtitle,\r\n        required: question.required,\r\n        tooltip: question.tooltip,\r\n        placeholder: question.placeholder,\r\n    };\r\n\r\n    Object.keys(base).forEach(key => {\r\n        if (base[key] === undefined) delete base[key];\r\n    });\r\n\r\n    return base;\r\n}\r\n\r\nfunction getFormQuestionTypeFromDisplayType(displayType: QuestionDisplayType): FormQuestionType {\r\n    switch (displayType) {\r\n        case QuestionDisplayType.ShortText:\r\n        case QuestionDisplayType.MultilineText:\r\n        case QuestionDisplayType.Number:\r\n            return FormQuestionType.Text;\r\n        case QuestionDisplayType.RichText:\r\n            return FormQuestionType.RichText;\r\n        case QuestionDisplayType.MultipleChoice:\r\n        case QuestionDisplayType.SingleChoice:\r\n        case QuestionDisplayType.Dropdown:\r\n            return FormQuestionType.Choice;\r\n        case QuestionDisplayType.Date:\r\n            return FormQuestionType.DateTime;\r\n    }\r\n}\r\n\r\n/**\r\n * Gets a new choice that is not already in the list of choices.\r\n *\r\n * @param strings The strings to use for the new choice.\r\n * @param choices The list of choices to check against.\r\n * @returns A new choice.\r\n */\r\nexport function getNewChoice(strings: FormStrings, choices: string[]): string {\r\n    let index = 0;\r\n    while (true) {\r\n        const newChoice = strings.choiceNew(index);\r\n        if (!choices.includes(newChoice)) return newChoice;\r\n        index++;\r\n    }\r\n}\r\n\r\n/**\r\n * Derives a new form question by a display type from an existing question.\r\n * If the display type is the same as the question's display type, the question is returned.\r\n * Otherwise, a new question is returned with the any common properties copied from the original question.\r\n *\r\n * @param displayType The display type to derive by.\r\n * @param question The question to derive from.\r\n * @param strings The strings to use for the new question.\r\n * @param constants The constants to use for the new question.\r\n * @returns A new form question.\r\n */\r\nexport function deriveFormQuestion(\r\n    displayType: QuestionDisplayType,\r\n    question: FormQuestion,\r\n    strings: FormStrings,\r\n    constants: FormConstants\r\n): FormQuestion {\r\n    if (displayType === getDisplayType(question)) return question;\r\n\r\n    const base = deriveBaseFormQuestion(question);\r\n    base.type = getFormQuestionTypeFromDisplayType(displayType);\r\n    switch (base.type) {\r\n        case FormQuestionType.Text:\r\n            return {\r\n                ...(base as BaseFormQuestion<FormQuestionType.Text>),\r\n                ...(displayType === QuestionDisplayType.Number && { number: true }),\r\n                ...(displayType === QuestionDisplayType.MultilineText && { multiline: true }),\r\n            };\r\n        case FormQuestionType.RichText:\r\n            return base as BaseFormQuestion<FormQuestionType.RichText>;\r\n        case FormQuestionType.Choice:\r\n            return {\r\n                ...(base as BaseFormQuestion<FormQuestionType.Choice>),\r\n                appearance:\r\n                    displayType === QuestionDisplayType.SingleChoice\r\n                        ? ChoiceAppearance.Radio\r\n                        : displayType === QuestionDisplayType.Dropdown\r\n                        ? ChoiceAppearance.Dropdown\r\n                        : ChoiceAppearance.Checkbox,\r\n                choices:\r\n                    question.type === FormQuestionType.Choice\r\n                        ? question.choices\r\n                        : Array.from({ length: constants.initialChoices }, (_, i) => strings.choiceNew(i)),\r\n                ...(question.type === FormQuestionType.Choice && question.allowOther && { allowOther: true }),\r\n                ...(question.type === FormQuestionType.Choice && question.shuffle && { shuffle: true }),\r\n            };\r\n        case FormQuestionType.DateTime:\r\n            return base as BaseFormQuestion<FormQuestionType.DateTime>;\r\n    }\r\n}\r\n\r\n/**\r\n * Gets the options for the text number restriction dropdown.\r\n *\r\n * @param strings The strings to use for the options.\r\n * @returns The options for the text number restriction dropdown.\r\n */\r\nexport function getTextNumberRestrictionOptions(strings: FormStrings): IDropdownOption[] {\r\n    return [\r\n        {\r\n            key: TextNumberRestrictionType.GreaterThan,\r\n            text: strings.restrictionOption(TextNumberRestrictionType.GreaterThan),\r\n        },\r\n        {\r\n            key: TextNumberRestrictionType.GreaterThanOrEqualTo,\r\n            text: strings.restrictionOption(TextNumberRestrictionType.GreaterThanOrEqualTo),\r\n        },\r\n        {\r\n            key: TextNumberRestrictionType.LessThan,\r\n            text: strings.restrictionOption(TextNumberRestrictionType.LessThan),\r\n        },\r\n        {\r\n            key: TextNumberRestrictionType.LessThanOrEqualTo,\r\n            text: strings.restrictionOption(TextNumberRestrictionType.LessThanOrEqualTo),\r\n        },\r\n        {\r\n            key: TextNumberRestrictionType.EqualTo,\r\n            text: strings.restrictionOption(TextNumberRestrictionType.EqualTo),\r\n        },\r\n        {\r\n            key: TextNumberRestrictionType.NotEqualTo,\r\n            text: strings.restrictionOption(TextNumberRestrictionType.NotEqualTo),\r\n        },\r\n        {\r\n            key: TextNumberRestrictionType.Between,\r\n            text: strings.restrictionOption(TextNumberRestrictionType.Between),\r\n        },\r\n        {\r\n            key: TextNumberRestrictionType.NotBetween,\r\n            text: strings.restrictionOption(TextNumberRestrictionType.NotBetween),\r\n        },\r\n    ];\r\n}\r\n\r\n/**\r\n * Derives a text number restriction from a type and an optional restriction.\r\n * If the restriction is provided, a new restriction is returned with any compatible properties copied from the original\r\n * restriction. Otherwise, a new restriction is returned with default values.\r\n *\r\n * @param type The type to derive by.\r\n * @param restriction The restriction to derive from.\r\n * @returns A new text number restriction.\r\n */\r\n// Justification: This function contains a switch statement and many fallbacks.\r\n// eslint-disable-next-line complexity\r\nexport function deriveTextNumberRestriction(\r\n    type: TextNumberRestrictionType,\r\n    restriction?: TextNumberRestriction\r\n): TextNumberRestriction {\r\n    const value = restriction && 'value' in restriction ? restriction.value : undefined;\r\n    const min = restriction && 'min' in restriction ? restriction.min : undefined;\r\n    const max = restriction && 'max' in restriction ? restriction.max : undefined;\r\n\r\n    switch (type) {\r\n        case TextNumberRestrictionType.GreaterThan:\r\n        case TextNumberRestrictionType.GreaterThanOrEqualTo:\r\n            return { type, min: min ?? max ?? value ?? 0 };\r\n        case TextNumberRestrictionType.LessThan:\r\n        case TextNumberRestrictionType.LessThanOrEqualTo:\r\n            return { type, max: max ?? min ?? value ?? 100 };\r\n        case TextNumberRestrictionType.EqualTo:\r\n        case TextNumberRestrictionType.NotEqualTo:\r\n            return { type, value: value ?? min ?? max ?? 0 };\r\n        case TextNumberRestrictionType.Between:\r\n        case TextNumberRestrictionType.NotBetween:\r\n            return { type, min: min ?? 0, max: max ?? 100 };\r\n    }\r\n}\r\n","/**\r\n * A function that returns a promise that will resolve when the given signal aborts.\r\n *\r\n * @param signal The given signal.\r\n * @returns The promise that will resolve when the given signal aborts.\r\n */\r\nexport function signalAsPromise(signal: AbortSignal): Promise<void> {\r\n    return new Promise(resolve => signal.addEventListener('abort', () => resolve()));\r\n}\r\n\r\n/**\r\n * A function that returns a signal that will abort when all of the given signals abort.\r\n *\r\n * @param signals The given signals.\r\n * @returns The abort signal that will abort when all of the given signals abort.\r\n */\r\nexport function allSignalsAsSignal(signals: AbortSignal[]): AbortSignal {\r\n    const controller = new AbortController();\r\n    Promise.all(signals.map(signalAsPromise)).then(() => controller.abort());\r\n    return controller.signal;\r\n}\r\n\r\n/**\r\n * A function that returns a signal that will abort when any of the given signals abort.\r\n *\r\n * @param signals The given signals.\r\n * @returns The abort signal that will abort when any of the given signals abort.\r\n */\r\nexport function raceSignalsAsSignal(signals: AbortSignal[]): AbortSignal {\r\n    const controller = new AbortController();\r\n    Promise.race(signals.map(signalAsPromise)).then(() => controller.abort());\r\n    return controller.signal;\r\n}\r\n","/*\r\n *  Copyright © Microsoft Corporation. All rights reserved.\r\n */\r\n\r\nimport { ProgressIndicator } from '@fluentui/react';\r\nimport React from 'react';\r\nimport { useLoadingIndicatorStyles } from './CommonLoadingIndicator.styles';\r\n\r\nexport interface CommonLoadingIndicatorProps {\r\n    isFetching?: boolean;\r\n}\r\n\r\nexport const CommonLoadingIndicator: React.FC<CommonLoadingIndicatorProps> = ({ isFetching }): JSX.Element => {\r\n    const styles = useLoadingIndicatorStyles();\r\n\r\n    return <ProgressIndicator progressHidden={!isFetching} styles={styles} />;\r\n};\r\n","import { DebounceSettings, DebouncedFunc, debounce } from 'lodash-es';\r\nimport { DependencyList, useCallback, useEffect } from 'react';\r\n\r\n/**\r\n * A hook to debounce a function, which will be flushed on unmount.\r\n *\r\n * @param func The function to debounce\r\n * @param deps The deps which will make the return func change\r\n * @param wait The number of milliseconds to delay.\r\n * @param options The options object.\r\n * @returns The debounced function.\r\n */\r\nexport function useDebounced<T extends (...args: never[]) => unknown>(\r\n    func: T,\r\n    deps: DependencyList,\r\n    wait?: number,\r\n    options?: DebounceSettings\r\n): DebouncedFunc<T> {\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    const callback = useCallback(debounce(func, wait, options), deps);\r\n    useEffect(() => callback.flush, [callback]);\r\n    return callback;\r\n}\r\n","/**\r\n * Check if the value is defined or not with type narrowing.\r\n *\r\n * @param value The value to check.\r\n * @returns `true` if the value is defined, `false` otherwise.\r\n */\r\nexport function isDefined<T>(value: T | undefined): value is T {\r\n    return value !== undefined;\r\n}\r\n\r\n/**\r\n * Extracts the continuous range from the numbers, represented as a tuple of the start and end of the range.\r\n *\r\n * @param numbers The numbers to extract the continuous range.\r\n * @returns The continuous range, if the numbers are continuous, otherwise undefined.\r\n * @example extractContinuousRange([1]) // [1, 1]\r\n * @example extractContinuousRange([1, 2, 3, 4, 5]) // [1, 5]\r\n * @example extractContinuousRange([1, 2, 3, 5]) // undefined\r\n */\r\nexport function extractContinuousRange(numbers: number[]): [number, number] | undefined {\r\n    if (numbers.length === 0) return;\r\n\r\n    const uniqueSorted = [...new Set(numbers)].sort();\r\n    const isContinuous = uniqueSorted[uniqueSorted.length - 1] - uniqueSorted[0] === uniqueSorted.length - 1;\r\n    if (!isContinuous) return;\r\n\r\n    return [uniqueSorted[0], uniqueSorted[uniqueSorted.length - 1]];\r\n}\r\n","import {\r\n    ChoiceAction,\r\n    FormStrings,\r\n    QuestionAction,\r\n    QuestionDisplayType,\r\n    TextNumberRestrictionType,\r\n    TextNumberRestrictionValueKey,\r\n} from '../types';\r\n\r\nexport const defaultFormStrings: FormStrings = {\r\n    questionHint: (question, active) =>\r\n        active\r\n            ? `Editing question \"${question.title}\". Press Tab and Shift+Tab to navigate between questions and option sections. Press arrow keys to navigate between options. Press Escape or Space to exit editing.`\r\n            : `Question \"${question.title}\". Press Tab and Shift+Tab to navigate between questions. Press Enter or Space to edit.`,\r\n    questionAction: action => defaultQuestionActionStrings[action],\r\n    questionMockedFieldDefaultPlaceholder: type =>\r\n        type === QuestionDisplayType.Dropdown ? 'Select your response' : 'Enter your response',\r\n    questionDisplayTypeOption: type => defaultQuestionDisplayTypeOptionStrings[type],\r\n    questionNewTitle: 'Question',\r\n    questionTitle: 'Title',\r\n    questionSubtitle: 'Subtitle (optional)',\r\n    questionRequired: 'Required',\r\n    questionRestriction: 'Restriction',\r\n    questionShuffle: 'Shuffle',\r\n    choiceAction: action => defaultChoiceActionStrings[action],\r\n    choiceNew: index => `Option ${index + 1}`,\r\n    choiceOther: 'Other',\r\n    choicePlaceholder: 'Option',\r\n    restrictionOption: type => defaultRestrictionOptionStrings[type],\r\n    restrictionValuePlaceholder: key => defaultRestrictionValuePlaceholderStrings[key],\r\n};\r\n\r\nconst defaultQuestionActionStrings: Record<QuestionAction, string> = {\r\n    [QuestionAction.Add]: 'Add question',\r\n    [QuestionAction.Copy]: 'Copy question',\r\n    [QuestionAction.Delete]: 'Delete question',\r\n    [QuestionAction.MoveUp]: 'Move question up',\r\n    [QuestionAction.MoveDown]: 'Move question down',\r\n};\r\n\r\nconst defaultQuestionDisplayTypeOptionStrings: Record<QuestionDisplayType, string> = {\r\n    [QuestionDisplayType.ShortText]: 'Short text',\r\n    [QuestionDisplayType.MultilineText]: 'Long text',\r\n    [QuestionDisplayType.RichText]: 'Rich text',\r\n    [QuestionDisplayType.Number]: 'Number',\r\n    [QuestionDisplayType.MultipleChoice]: 'Multiple choice',\r\n    [QuestionDisplayType.SingleChoice]: 'Single choice',\r\n    [QuestionDisplayType.Dropdown]: 'Dropdown',\r\n    [QuestionDisplayType.Date]: 'Date',\r\n};\r\n\r\nconst defaultChoiceActionStrings: Record<ChoiceAction, string> = {\r\n    [ChoiceAction.Add]: 'Add option',\r\n    [ChoiceAction.AddOther]: 'Add \"other\" option',\r\n    [ChoiceAction.Delete]: 'Delete option',\r\n    [ChoiceAction.MoveUp]: 'Move option up',\r\n    [ChoiceAction.MoveDown]: 'Move option down',\r\n};\r\n\r\nconst defaultRestrictionOptionStrings: Record<TextNumberRestrictionType, string> = {\r\n    [TextNumberRestrictionType.GreaterThan]: 'Greater than',\r\n    [TextNumberRestrictionType.GreaterThanOrEqualTo]: 'Greater than or equal to',\r\n    [TextNumberRestrictionType.LessThan]: 'Less than',\r\n    [TextNumberRestrictionType.LessThanOrEqualTo]: 'Less than or equal to',\r\n    [TextNumberRestrictionType.EqualTo]: 'Equal to',\r\n    [TextNumberRestrictionType.NotEqualTo]: 'Not equal to',\r\n    [TextNumberRestrictionType.Between]: 'Between',\r\n    [TextNumberRestrictionType.NotBetween]: 'Not between',\r\n};\r\n\r\nconst defaultRestrictionValuePlaceholderStrings: Record<TextNumberRestrictionValueKey, string> = {\r\n    min: 'Min',\r\n    max: 'Max',\r\n    value: 'Value',\r\n};\r\n","import { FormFeature } from '../types';\r\nimport { orderComparator } from './comparators';\r\nimport { defaultFormConstants } from './constants';\r\nimport { defaultDescriptors } from './descriptors';\r\nimport { uuidIdGenerator } from './idGenerators';\r\nimport { idKeyExtractor } from './keyExtractors';\r\nimport { halfOrderGenerator } from './orderGenerators';\r\nimport { identitySanitizer } from './sanitizers';\r\nimport { defaultFormStrings } from './strings';\r\nimport { defaultTrailingRender } from './trailingRenders';\r\nimport { defaultValidators } from './validators';\r\n\r\nexport const defaultFormFeature: FormFeature = {\r\n    comparator: orderComparator,\r\n    keyExtractor: idKeyExtractor,\r\n    trailingRender: defaultTrailingRender,\r\n    descriptors: defaultDescriptors,\r\n    validators: defaultValidators,\r\n    sanitizer: identitySanitizer,\r\n    idGenerator: uuidIdGenerator,\r\n    orderGenerator: halfOrderGenerator,\r\n    constants: defaultFormConstants,\r\n    strings: defaultFormStrings,\r\n};\r\n","import { DarkV2Colors, isDarkTheme } from '@addressbook/components-fluentui-teams-theme';\r\nimport { makeStyles } from '../styles/makeStyles';\r\n\r\nexport const useTaskModuleStyles = /* #__PURE__*/ makeStyles(theme => ({\r\n    root: {\r\n        width: '100%',\r\n        height: '100%',\r\n        maxHeight: '100vh',\r\n        overflow: 'hidden',\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        gap: '0.5rem',\r\n        boxSizing: 'border-box',\r\n\r\n        // Since the styles for task module container on Teams Desktop does not include a bottom padding, we need to\r\n        // add some spacing, though the styles without this padding are approperiate for Teams Web.\r\n        paddingBottom: '0.75rem',\r\n        backgroundColor: isDarkTheme(theme.name) ? DarkV2Colors.appWhite : theme.palette.white,\r\n    },\r\n}));\r\n","import { IStyle, mergeStyles } from '@fluentui/react';\r\nimport React from 'react';\r\nimport { userSlideDotsStyles } from './CommonSlideDots.styles';\r\n\r\nexport interface CommonSlideDotsProps {\r\n    amount: number;\r\n    activeIndex: number;\r\n    isClickable?: boolean;\r\n    slideDotsStyles?: SlideDotsStyles;\r\n    onClick?: (x: number) => void;\r\n}\r\n\r\nexport interface SlideDotsStyles {\r\n    selectOption?: IStyle | string;\r\n}\r\n\r\nexport const CommonSlideDots = ({\r\n    amount,\r\n    activeIndex,\r\n    isClickable = false,\r\n    slideDotsStyles,\r\n    onClick,\r\n}: CommonSlideDotsProps): JSX.Element => {\r\n    const styles = userSlideDotsStyles();\r\n\r\n    return (\r\n        <div className={styles.stepper}>\r\n            {Array(amount)\r\n                .fill(0)\r\n                .map((_item, index) => (\r\n                    <i\r\n                        className={mergeStyles(\r\n                            styles.selectOption,\r\n                            slideDotsStyles?.selectOption,\r\n                            isClickable && 'is-clickable',\r\n                            index === activeIndex ? 'is-active' : ''\r\n                        )}\r\n                        key={index}\r\n                        onClick={isClickable ? () => onClick?.(index) : undefined}\r\n                        data-testid='option'\r\n                    />\r\n                ))}\r\n        </div>\r\n    );\r\n};\r\n","export * from './RichTextRibbon';\r\nexport * from './RichTextRibbon.types';\r\n","export { app, HostClientType } from '@microsoft/teams-js';\r\nexport * from './error';\r\nexport { patchTeamsFallbackData } from './fallback';\r\nexport * from './react';\r\nexport * from './themes';\r\nexport * from './wrappers';\r\n","export * from './useTeamsContext';\r\nexport * from './useTeamsNavBarMenu';\r\nexport * from './useTeamsTaskModuleSize';\r\n","/*\r\n *  Copyright © Microsoft Corporation. All rights reserved.\r\n */\r\n\r\nimport React, { MutableRefObject } from 'react';\r\nimport { IPanelProps, IPanelStyles, IRenderFunction, Panel, PanelType } from '@fluentui/react';\r\nimport { usePanelStyles } from './CommonPanel.styles';\r\n\r\nexport type PanelContentProps = React.PropsWithChildren<{\r\n    /**\r\n     * props for render navigation content\r\n     */\r\n    onRenderNavigationContent?: IRenderFunction<IPanelProps>;\r\n    /**\r\n     * Ref for content element\r\n     */\r\n    contentRef?: MutableRefObject<HTMLDivElement | null>;\r\n    onDismiss?: () => void;\r\n    linkCopiedInfoItem?: JSX.Element;\r\n}>;\r\n\r\nexport type CommonPanelProps = PanelContentProps & {\r\n    isOpen: boolean;\r\n};\r\n\r\nexport const CommonPanel: React.FC<CommonPanelProps> = ({\r\n    isOpen,\r\n    onRenderNavigationContent,\r\n    onDismiss,\r\n    contentRef,\r\n    children,\r\n    linkCopiedInfoItem,\r\n}: CommonPanelProps): JSX.Element => {\r\n    const panelStyles = usePanelStyles();\r\n\r\n    return (\r\n        <Panel\r\n            styles={panelStyles as any as IPanelStyles}\r\n            onRenderNavigationContent={onRenderNavigationContent}\r\n            isOpen={isOpen}\r\n            onDismiss={onDismiss}\r\n            onOuterClick={(ev?: React.MouseEvent<HTMLDivElement>): void => {\r\n                ev?.preventDefault();\r\n            }}\r\n            type={PanelType.custom}\r\n            allowTouchBodyScroll\r\n            hasCloseButton={!onRenderNavigationContent}>\r\n            <div ref={contentRef} className={panelStyles.contentInner}>\r\n                {children}\r\n            </div>\r\n            {linkCopiedInfoItem}\r\n        </Panel>\r\n    );\r\n};\r\n","import { Dropdown, Icon, ResponsiveMode, TextField } from '@fluentui/react';\r\nimport React from 'react';\r\nimport { QuestionDisplayType } from '../../../types';\r\nimport {\r\n    deriveFormQuestion,\r\n    getDisplayType,\r\n    getDisplayTypeOptions,\r\n    useDropdownStyles,\r\n    useTextFieldStyles,\r\n} from '../../../utilities';\r\nimport { QuestionSettingsProps } from '../types';\r\nimport { usePrimarySettingsStyles } from './PrimarySettings.styles';\r\n\r\nexport function PrimarySettings({\r\n    question,\r\n    onQuestionChange,\r\n    constants,\r\n    strings,\r\n}: QuestionSettingsProps): JSX.Element {\r\n    const styles = usePrimarySettingsStyles();\r\n    const textFieldStyles = useTextFieldStyles();\r\n    const dropdownStyles = useDropdownStyles();\r\n\r\n    const selectedDisplayType = getDisplayType(question);\r\n    const displayTypeOptions = getDisplayTypeOptions(strings);\r\n\r\n    return (\r\n        <>\r\n            <div className={styles.row}>\r\n                <TextField\r\n                    value={question.title ?? ''}\r\n                    onChange={(_, value) => onQuestionChange({ ...question, rtTitle: '', title: value })}\r\n                    maxLength={constants.maxTitleLength}\r\n                    placeholder={strings.questionTitle}\r\n                    styles={textFieldStyles}\r\n                />\r\n                <Dropdown\r\n                    selectedKey={selectedDisplayType}\r\n                    onChange={(_, option) =>\r\n                        option &&\r\n                        onQuestionChange(\r\n                            deriveFormQuestion(option.key as QuestionDisplayType, question, strings, constants)\r\n                        )\r\n                    }\r\n                    options={displayTypeOptions}\r\n                    onRenderTitle={(options, defaultRender) => (\r\n                        <div className={styles.optionRow}>\r\n                            <Icon\r\n                                className={styles.optionIcon}\r\n                                iconName={options?.find(({ key }) => key === selectedDisplayType)?.data}\r\n                            />\r\n                            {defaultRender?.(options)}\r\n                        </div>\r\n                    )}\r\n                    onRenderOption={(option, defaultRender) => (\r\n                        <div className={styles.optionRow}>\r\n                            <Icon className={styles.optionIcon} iconName={option?.data} />\r\n                            {defaultRender?.(option)}\r\n                        </div>\r\n                    )}\r\n                    responsiveMode={ResponsiveMode.unknown}\r\n                    styles={dropdownStyles}\r\n                />\r\n            </div>\r\n            <TextField\r\n                value={question.subtitle ?? ''}\r\n                onChange={(_, value) => onQuestionChange({ ...question, rtSubtitle: '', subtitle: value })}\r\n                maxLength={constants.maxSubtitleLength}\r\n                placeholder={strings.questionSubtitle}\r\n                styles={textFieldStyles}\r\n            />\r\n        </>\r\n    );\r\n}\r\n","import { DirectionalHint, Icon, mergeStyles, TooltipHost } from '@fluentui/react';\r\nimport { useId } from '@fluentui/react-hooks';\r\nimport React from 'react';\r\nimport { FieldProps } from '../../../abstractions';\r\nimport { FormContext, FormEntry, FormFeature, FormMode } from '../../types';\r\nimport { mergeValidations } from '../../utilities';\r\nimport { DesigningDecorator } from '../DesigningDecorator';\r\nimport { PreviewingDecorator } from '../PreviewingDecorator';\r\nimport { useRenderingFieldStyles } from './RenderingField.styles';\r\n\r\ntype DelegatedAriaAttributes = Pick<\r\n    React.AriaAttributes,\r\n    'aria-labelledby' | 'aria-describedby' | 'aria-required' | 'aria-readonly' | 'aria-errormessage' | 'aria-invalid'\r\n>;\r\n\r\ninterface DelegatedFieldComponentProps extends DelegatedAriaAttributes {\r\n    readOnly?: boolean;\r\n    invalid?: boolean;\r\n}\r\n\r\ninterface FieldComponentProps<CoercedEntry extends FormEntry>\r\n    extends FieldProps<FormEntry, FormContext, FormFeature, CoercedEntry> {\r\n    delegatedProps: DelegatedFieldComponentProps;\r\n    showPlaceholder?: boolean;\r\n}\r\n\r\nexport type FieldComponentType<CoercedEntry extends FormEntry> = React.ComponentType<FieldComponentProps<CoercedEntry>>;\r\n\r\nexport interface RenderingComponentProps<CoercedEntry extends FormEntry>\r\n    extends FieldProps<FormEntry, FormContext, FormFeature, CoercedEntry> {\r\n    Component: FieldComponentType<CoercedEntry>;\r\n}\r\n\r\n/**\r\n * This component renders the provided field component with some delegated props, and handles validation.\r\n */\r\nexport function RenderingField<CoercedEntry extends FormEntry>({\r\n    Component,\r\n    onEntryChange,\r\n    ...props\r\n}: RenderingComponentProps<CoercedEntry>): JSX.Element {\r\n    const { entry, context, feature } = props;\r\n    const { mode } = context;\r\n    const { validators, sanitizer } = feature;\r\n    const { question, answer, errorMessage } = entry;\r\n    const { title, rtTitle, subtitle, rtSubtitle, required, tooltip } = question;\r\n\r\n    const styles = useRenderingFieldStyles();\r\n\r\n    const labelId = useId('label');\r\n    const descriptionId = useId('description');\r\n    const errorMessageId = useId('errormessage');\r\n\r\n    const safeRtTitle = React.useMemo(\r\n        () => (rtTitle ? { __html: sanitizer(rtTitle) } : undefined),\r\n        [rtTitle, sanitizer]\r\n    );\r\n    const safeRtSubtitle = React.useMemo(\r\n        () => (rtSubtitle ? { __html: sanitizer(rtSubtitle) } : undefined),\r\n        [rtSubtitle, sanitizer]\r\n    );\r\n\r\n    const readOnly = mode !== FormMode.Filling;\r\n    const invalid = mode === FormMode.Filling && Boolean(errorMessage);\r\n\r\n    const showPlaceholder = mode !== FormMode.Viewing;\r\n    const delegatedProps: DelegatedFieldComponentProps = React.useMemo(\r\n        () => ({\r\n            ...(readOnly && { readOnly: true, 'aria-readonly': true }),\r\n            ...((title || safeRtTitle) && { 'aria-labelledby': labelId }),\r\n            ...(required && { 'aria-required': true }),\r\n            ...((subtitle || safeRtSubtitle) && { 'aria-describedby': descriptionId }),\r\n            ...(invalid && { invalid: true, 'aria-invalid': true, 'aria-errormessage': errorMessageId }),\r\n        }),\r\n        [\r\n            readOnly,\r\n            title,\r\n            safeRtTitle,\r\n            labelId,\r\n            required,\r\n            subtitle,\r\n            safeRtSubtitle,\r\n            descriptionId,\r\n            invalid,\r\n            errorMessageId,\r\n        ]\r\n    );\r\n\r\n    const handleEntryChange = React.useMemo(\r\n        () =>\r\n            onEntryChange &&\r\n            ((newEntry: FormEntry): void => {\r\n                // Use the validators to validate the new entry.\r\n                const validation = mergeValidations(validators.map(validator => validator.validate(newEntry)));\r\n\r\n                // Set the entry's validity based on the failures.\r\n                newEntry.invalid = !validation.valid;\r\n\r\n                // If any validator fails and filling the form, set the error message and prevent change if necessary.\r\n                delete newEntry.errorMessage;\r\n                if (mode === FormMode.Filling && !validation.valid) {\r\n                    newEntry.errorMessage = validation.errorMessage;\r\n                    if (validation.preventChange) newEntry.answer = answer;\r\n                }\r\n\r\n                onEntryChange(newEntry);\r\n            }),\r\n        [onEntryChange, answer, validators, mode]\r\n    );\r\n\r\n    const field = (\r\n        <div>\r\n            <div className={styles.headerContainer}>\r\n                <div className={styles.labelContainer}>\r\n                    <label\r\n                        id={labelId}\r\n                        className={mergeStyles(styles.label, required && styles.requiredLabel)}\r\n                        // Justification: The label is sanitized before being rendered.\r\n                        // eslint-disable-next-line react/no-danger\r\n                        dangerouslySetInnerHTML={safeRtTitle}>\r\n                        {safeRtTitle ? undefined : title}\r\n                    </label>\r\n                    {tooltip && (\r\n                        <TooltipHost\r\n                            content={tooltip}\r\n                            directionalHint={DirectionalHint.rightCenter}\r\n                            directionalHintForRTL={DirectionalHint.leftCenter}>\r\n                            <Icon tabIndex={0} aria-hidden={false} iconName='Info' />\r\n                        </TooltipHost>\r\n                    )}\r\n                </div>\r\n                {(subtitle || safeRtSubtitle) && (\r\n                    <div\r\n                        id={descriptionId}\r\n                        className={styles.description}\r\n                        // Justification: The subtitle is sanitized before being rendered.\r\n                        // eslint-disable-next-line react/no-danger\r\n                        dangerouslySetInnerHTML={safeRtSubtitle}>\r\n                        {safeRtSubtitle ? undefined : subtitle}\r\n                    </div>\r\n                )}\r\n            </div>\r\n            <Component\r\n                {...props}\r\n                onEntryChange={handleEntryChange}\r\n                showPlaceholder={showPlaceholder}\r\n                delegatedProps={delegatedProps}\r\n            />\r\n            {invalid && (\r\n                <div id={errorMessageId} className={styles.errorMessage} role='alert'>\r\n                    {errorMessage}\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n\r\n    const Decorator =\r\n        mode === FormMode.Previewing\r\n            ? PreviewingDecorator\r\n            : mode === FormMode.Designing\r\n            ? DesigningDecorator\r\n            : undefined;\r\n\r\n    return Decorator ? (\r\n        <Decorator {...props} onEntryChange={handleEntryChange}>\r\n            {field}\r\n        </Decorator>\r\n    ) : (\r\n        field\r\n    );\r\n}\r\n","export * from './DecimalTextField';\r\n","import { TextField } from '@fluentui/react';\r\nimport React from 'react';\r\nimport { FormContext, FormEntry, FormMode, FormQuestionType, TextEntry } from '../../types';\r\nimport { useTextFieldStyles } from '../../utilities';\r\nimport { BaseDescriptor, FieldComponentTypeFactory } from './BaseDescriptor';\r\n\r\nconst defaultOptions = {\r\n    defaultPlaceholder: 'Enter your response',\r\n};\r\n\r\nexport type TextDescriptorOptions = Partial<typeof defaultOptions>;\r\n\r\nconst makeFieldComponent: FieldComponentTypeFactory<TextDescriptorOptions & typeof defaultOptions, TextEntry> =\r\n    ({ defaultPlaceholder }) =>\r\n    ({ entry, onEntryChange, showPlaceholder, delegatedProps }) => {\r\n        const { question, answer } = entry;\r\n        const { multiline, number } = question;\r\n\r\n        const value = answer.content ?? '';\r\n        const onChange = React.useCallback(\r\n            (_: unknown, value?: string) => {\r\n                if (number) value = value?.trim();\r\n                const newAnswer = { ...entry.answer };\r\n                newAnswer.content = value;\r\n                if (!newAnswer.content) delete newAnswer.content;\r\n\r\n                onEntryChange?.({ ...entry, answer: newAnswer });\r\n            },\r\n            [entry, number, onEntryChange]\r\n        );\r\n        const placeholder = showPlaceholder ? question.placeholder || defaultPlaceholder : undefined;\r\n\r\n        const textFieldStyles = useTextFieldStyles();\r\n\r\n        return (\r\n            <TextField\r\n                {...delegatedProps}\r\n                value={value}\r\n                onChange={onChange}\r\n                placeholder={placeholder}\r\n                multiline={multiline}\r\n                inputMode={number ? 'decimal' : 'text'}\r\n                resizable={false}\r\n                styles={textFieldStyles}\r\n            />\r\n        );\r\n    };\r\n\r\n/**\r\n * The descriptor that renders a text field for text entries.\r\n * It supports both single-line and multi-line text fields, either with or without number restrictions.\r\n */\r\nexport class TextDescriptor extends BaseDescriptor<TextEntry> {\r\n    protected readonly FieldComponent;\r\n\r\n    constructor(options?: TextDescriptorOptions) {\r\n        super();\r\n        this.FieldComponent = makeFieldComponent({ ...defaultOptions, ...options });\r\n    }\r\n\r\n    /**\r\n     * Tests whether the entry is a text entry, and the form is not in viewing mode.\r\n     *\r\n     * @param entry The entry to test.\r\n     * @param context The context.\r\n     * @returns Passes the test or not.\r\n     */\r\n    test(entry: FormEntry, context: FormContext): entry is TextEntry {\r\n        return entry.question.type === FormQuestionType.Text && context.mode !== FormMode.Viewing;\r\n    }\r\n}\r\n","export * from './clipboards';\r\nexport * from './data-transfers';\r\nexport * from './data-urls';\r\nexport * from './dates';\r\nexport * from './files';\r\nexport * from './ids';\r\nexport * from './images';\r\nexport * from './jsons';\r\nexport * from './mimes';\r\nexport * from './miscs';\r\nexport * from './numbers';\r\nexport * from './promises';\r\nexport * from './semaphores';\r\nexport * from './signals';\r\nexport * from './urls';\r\n","import { isContrastTheme, makeStyles } from '@addressbook/components-fluentui-teams-theme';\r\nimport { fieldClassNames } from '../../utilities';\r\n\r\nconst actionsWidth = 48;\r\nconst horizontalExtendingMargin = 6;\r\nconst verticalExtendingMargin = 16;\r\n\r\nexport const useDesigningDecoratorStyles = makeStyles(theme => ({\r\n    root: {\r\n        margin: `-${horizontalExtendingMargin}px -${verticalExtendingMargin}px `,\r\n    },\r\n    inactive: {\r\n        marginInlineEnd: `${actionsWidth - horizontalExtendingMargin}px`,\r\n        padding: '15px',\r\n        border: '1px solid transparent',\r\n        ':hover, :focus': {\r\n            backgroundColor: isContrastTheme(theme.name) ? theme.palette.white : theme.palette.neutralLighter,\r\n            borderColor: isContrastTheme(theme.name) ? theme.palette.black : 'transparent',\r\n            [fieldClassNames]: {\r\n                backgroundColor: `${theme.palette.white} !important`,\r\n            },\r\n        },\r\n        borderRadius: '8px',\r\n        cursor: 'pointer',\r\n    },\r\n}));\r\n\r\nexport const useActiveDesigningDecoratorStyles = makeStyles(theme => ({\r\n    root: {\r\n        display: 'flex',\r\n        flexDirection: 'row',\r\n\r\n        overflow: 'hidden',\r\n        borderRadius: '8px',\r\n\r\n        borderWidth: '1px',\r\n        borderStyle: 'solid',\r\n        borderColor: isContrastTheme(theme.name) ? theme.palette.black : 'transparent',\r\n\r\n        borderInlineStartWidth: '4px',\r\n        borderInlineStartStyle: 'solid',\r\n        borderInlineStartColor: theme.palette.themePrimary,\r\n\r\n        [fieldClassNames]: {\r\n            backgroundColor: `${theme.palette.white} !important`,\r\n        },\r\n    },\r\n    settings: {\r\n        flexGrow: 1,\r\n\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        padding: '15px', // 16px - 1px (parent border)\r\n        paddingInlineStart: '12px', // 16px - 4px (parent border)\r\n        gap: '12px',\r\n        backgroundColor: isContrastTheme(theme.name) ? theme.palette.white : theme.palette.neutralLighter,\r\n\r\n        borderInlineEndWidth: '1px',\r\n        borderInlineEndStyle: 'solid',\r\n        borderInlineEndColor: isContrastTheme(theme.name) ? theme.palette.black : 'transparent',\r\n    },\r\n    separator: {\r\n        height: '1px',\r\n        marginBlock: '7.5px',\r\n        backgroundColor: theme.palette.neutralTertiaryAlt,\r\n    },\r\n    actions: {\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        alignItems: 'center',\r\n        gap: '8px',\r\n\r\n        padding: '7px', // 8px - 1px (parent border)\r\n        paddingInlineStart: '8px',\r\n\r\n        backgroundColor: theme.palette.neutralLighterAlt,\r\n        '.ms-Button-menuIcon': {\r\n            display: 'none',\r\n        },\r\n    },\r\n}));\r\n","import type { app } from '@microsoft/teams-js';\r\nimport React, { useCallback, useContext, useEffect, useState } from 'react';\r\nimport { coerceTeamsTheme, TeamsContextTheme } from '../themes';\r\nimport { getTeamsContext, registerOnThemeChangeHandler } from '../wrappers';\r\n\r\ninterface LoadingTeamsHostValue {\r\n    loading: true;\r\n}\r\n\r\ninterface LoadedTeamsHostValue {\r\n    loading: false;\r\n    context: app.Context;\r\n}\r\n\r\nexport type TeamsHostValue = LoadingTeamsHostValue | LoadedTeamsHostValue;\r\n\r\nconst defaultTeamsHostValue: TeamsHostValue = { loading: true };\r\nconst TeamsReactContext = React.createContext<TeamsHostValue>(defaultTeamsHostValue);\r\n\r\nexport interface TeamsHostProviderProps {\r\n    value?: TeamsHostValue;\r\n    defaultValue?: TeamsHostValue;\r\n}\r\n\r\n/**\r\n * The component that provides the Teams host access to its children.\r\n *\r\n * @property value The controlled value to provide to its children.\r\n * @property defaultValue The default value to provide to its children.\r\n */\r\nexport const TeamsHostProvider: React.FC<TeamsHostProviderProps> = ({\r\n    value,\r\n    defaultValue = defaultTeamsHostValue,\r\n    children,\r\n}) => {\r\n    const [providingValue, setProvidingValue] = useState<TeamsHostValue>(value ?? defaultValue);\r\n\r\n    const update = useCallback(async () => setProvidingValue({ loading: false, context: await getTeamsContext() }), []);\r\n    const watch = useCallback(async () => {\r\n        try {\r\n            await update();\r\n            await registerOnThemeChangeHandler(() => {\r\n                update();\r\n            });\r\n        } catch {\r\n            // No-op\r\n        }\r\n    }, [update]);\r\n\r\n    // Only update the context if the controlled value is not provided.\r\n    const controlled = Boolean(value);\r\n    useEffect(() => {\r\n        if (controlled) return;\r\n        watch();\r\n    }, [controlled, watch]);\r\n\r\n    return <TeamsReactContext.Provider value={providingValue}>{children}</TeamsReactContext.Provider>;\r\n};\r\n\r\n/**\r\n * A hook to get the Teams context.\r\n *\r\n * @returns The Teams context, or `undefined` if the host is not ready yet.\r\n */\r\nexport function useTeamsContext(): app.Context | undefined {\r\n    const value = useContext(TeamsReactContext);\r\n    if (value.loading) return;\r\n\r\n    return value.context;\r\n}\r\n\r\n/**\r\n * A hook to get the Teams theme.\r\n *\r\n * @returns The Teams theme, or `undefined` if the host is not ready yet.\r\n */\r\nexport function useTeamsTheme(): TeamsContextTheme | undefined {\r\n    const value = useContext(TeamsReactContext);\r\n    if (value.loading) return;\r\n\r\n    return coerceTeamsTheme(value.context.app.theme);\r\n}\r\n","import { ImageSize, isDefined, isImageMime, measureImage } from '@addressbook/utilities-core';\r\nimport { BehaviorSubject } from 'rxjs';\r\nimport { distinctUntilChanged, filter, map } from 'rxjs/operators';\r\nimport { RichTextFileStorageService } from '../../types';\r\n\r\n/**\r\n * A key to identify a file session.\r\n */\r\nexport type FileSessionKey = string;\r\n\r\n/**\r\n * A file session that contains the file URL, blob, thumbnail, image size, loading status, error, and retry function.\r\n */\r\nexport interface FileSession {\r\n    url?: string;\r\n    blob?: Blob;\r\n    thumbnail?: Blob;\r\n    imageSize?: ImageSize;\r\n    loading?: boolean;\r\n    error?: Error;\r\n    retry?: () => void;\r\n}\r\n\r\nexport const defaultFileSession: FileSession = {};\r\n\r\n/**\r\n * A class to manage file sessions.\r\n */\r\nexport class FileSessions {\r\n    private sessions$ = new BehaviorSubject<Record<FileSessionKey, FileSession>>({});\r\n\r\n    constructor(private service: RichTextFileStorageService) {}\r\n\r\n    /**\r\n     * Get the file session by the key.\r\n     *\r\n     * @param key The key to identify the file session.\r\n     * @returns The file session.\r\n     */\r\n    get(key: FileSessionKey): FileSession | undefined {\r\n        return this.sessions$.value[key];\r\n    }\r\n\r\n    /**\r\n     * Subscribe to the file session changes.\r\n     *\r\n     * @param key The key to identify the file session.\r\n     * @param onChange The callback to be called when the file session changes.\r\n     * @returns A function to unsubscribe the changes.\r\n     */\r\n    subscribe(key: FileSessionKey, onChange: (session: FileSession) => void): () => void {\r\n        const subscription = this.sessions$\r\n            .pipe(\r\n                map(sessions => sessions[key]),\r\n                filter(isDefined),\r\n                distinctUntilChanged()\r\n            )\r\n            .subscribe({ next: onChange });\r\n\r\n        return () => subscription.unsubscribe();\r\n    }\r\n\r\n    /**\r\n     * Manage an upload file session.\r\n     *\r\n     * @param key The key to identify the file session.\r\n     * @param file The file to be uploaded.\r\n     */\r\n    upload(key: FileSessionKey, file: File): void {\r\n        if (this.get(key)) return;\r\n\r\n        this.put(key, { blob: file });\r\n        this.performUpload(key, file);\r\n    }\r\n\r\n    /**\r\n     * Manage a download file session.\r\n     *\r\n     * @param key The key to identify the file session.\r\n     * @param url The URL to download the file.\r\n     */\r\n    download(key: FileSessionKey, url: string): void {\r\n        if (this.get(key)) return;\r\n\r\n        this.put(key, { url });\r\n        this.performDownload(key, url);\r\n        this.performThumbnail(key, url);\r\n    }\r\n\r\n    /**\r\n     * Manage a thumbnail file session.\r\n     *\r\n     * @param key The key to identify the file session.\r\n     * @param url The URL to thumbnail the file.\r\n     */\r\n    thumbnail(key: FileSessionKey, url: string): void {\r\n        if (this.get(key)) return;\r\n\r\n        this.put(key, { url });\r\n        this.performThumbnail(key, url);\r\n    }\r\n\r\n    private put(key: FileSessionKey, session: FileSession): void {\r\n        this.sessions$.next({ ...this.sessions$.value, [key]: session });\r\n    }\r\n\r\n    private update(key: FileSessionKey, callback: (session: FileSession) => FileSession, preventClean?: boolean): void {\r\n        const session = this.sessions$.value[key];\r\n        const newSession = callback(preventClean ? session : cleanFileSession(session));\r\n        this.put(key, newSession);\r\n    }\r\n\r\n    private async performUpload(key: FileSessionKey, file: File): Promise<void> {\r\n        try {\r\n            const imageSize = await this.measureImageInternal(key, file);\r\n            const url = await this.uploadInternal(key, file);\r\n\r\n            const thumbnail = await this.thumbnailInternal(key, url);\r\n            if (thumbnail && !imageSize) await this.measureImageInternal(key, file);\r\n        } catch {\r\n            // Ignore any error intentionally\r\n        }\r\n    }\r\n\r\n    private async performDownload(key: FileSessionKey, url: string): Promise<void> {\r\n        try {\r\n            const blob = await this.downloadInternal(key, url);\r\n            await this.measureImageInternal(key, blob);\r\n        } catch {\r\n            // Ignore any error intentionally\r\n        }\r\n    }\r\n\r\n    private async performThumbnail(key: FileSessionKey, url: string): Promise<void> {\r\n        try {\r\n            const thumbnail = await this.thumbnailInternal(key, url);\r\n            if (thumbnail) await this.measureImageInternal(key, thumbnail, true);\r\n        } catch {\r\n            // Ignore any error intentionally\r\n        }\r\n    }\r\n\r\n    private handleError(key: FileSessionKey, error: Error): Promise<void> {\r\n        return new Promise<void>(resolve => this.update(key, session => ({ ...session, error, retry: resolve })));\r\n    }\r\n\r\n    private async uploadInternal(key: FileSessionKey, file: File): Promise<string> {\r\n        while (true) {\r\n            try {\r\n                this.update(key, session => ({ ...session, loading: true }));\r\n                const url = await this.service.upload(file);\r\n                this.update(key, session => ({ ...session, url }));\r\n                return url;\r\n            } catch (e) {\r\n                await this.handleError(key, coerceError(e));\r\n            }\r\n        }\r\n    }\r\n\r\n    private async downloadInternal(key: FileSessionKey, url: string): Promise<Blob> {\r\n        while (true) {\r\n            try {\r\n                this.update(key, session => ({ ...session, loading: true }));\r\n                const blob = await this.service.download(url);\r\n                this.update(key, session => ({ ...session, blob }));\r\n                return blob;\r\n            } catch (error) {\r\n                await this.handleError(key, coerceError(error));\r\n            }\r\n        }\r\n    }\r\n\r\n    private async thumbnailInternal(key: FileSessionKey, url: string): Promise<Blob | undefined> {\r\n        if (!this.service.thumbnail) return;\r\n\r\n        // The thumbnail is optional, so we don't manage loading and error states here\r\n        try {\r\n            const thumbnail = await this.service.thumbnail(url);\r\n            this.update(key, session => ({ ...session, thumbnail }), true);\r\n            return thumbnail;\r\n        } catch {\r\n            // Ignore any error intentionally\r\n        }\r\n    }\r\n\r\n    private async measureImageInternal(\r\n        key: FileSessionKey,\r\n        blob: Blob,\r\n        preventOverride?: boolean\r\n    ): Promise<ImageSize | undefined> {\r\n        if (!isImageMime(blob.type)) return;\r\n\r\n        try {\r\n            const imageSize = await measureImage(blob);\r\n            this.update(\r\n                key,\r\n                session => (preventOverride && session.imageSize ? session : { ...session, imageSize }),\r\n                true\r\n            );\r\n            return imageSize;\r\n        } catch {\r\n            // Ignore any error intentionally\r\n        }\r\n    }\r\n}\r\n\r\nfunction coerceError(error: unknown): Error {\r\n    return error instanceof Error ? error : new Error('Unknown error');\r\n}\r\n\r\nfunction cleanFileSession(session: FileSession): FileSession {\r\n    const newSession = { ...session };\r\n    delete newSession.loading;\r\n    delete newSession.error;\r\n    delete newSession.retry;\r\n    return newSession;\r\n}\r\n\r\n/**\r\n * Check if the file session is valid. A session is considered invalid if it does not have a URL or a blob, which means\r\n * the file cannot be uploaded or downloaded.\r\n *\r\n * @param session The file session.\r\n * @returns `true` if the file session is valid, otherwise `false`.\r\n */\r\nexport function isValidFileSession(session: FileSession): boolean {\r\n    return Boolean(session.blob || session.url);\r\n}\r\n","import { BaseFormContext } from '../../abstractions';\r\nimport { FormEntry } from './entries';\r\n\r\nexport enum FormMode {\r\n    Previewing,\r\n    Designing,\r\n    Filling,\r\n    Viewing,\r\n}\r\n\r\n/**\r\n * The context of a form, which is mutable during the lifecycle of the form.\r\n *\r\n * @property mode The mode of the form.\r\n */\r\nexport interface FormContext extends BaseFormContext<FormEntry> {\r\n    mode: FormMode;\r\n}\r\n","export * from './SecondarySettings';\r\n","import { FormEntry, Validation, ValidationFailure, Validator } from '../../types';\r\nimport { createValidationSuccess } from '../../utilities';\r\n\r\nexport interface RequiredValidatorOptions {\r\n    errorMessage?: string;\r\n}\r\n\r\nconst defaultErrorMessage = 'This field is required';\r\n\r\n/**\r\n * A validator that checks if the answer is empty.\r\n * If the question is not required, this validator will always pass.\r\n * Otherwise, this validator will fail if the answer is empty.\r\n */\r\nexport class RequiredValidator implements Validator<FormEntry> {\r\n    private errorMessage: string;\r\n\r\n    /**\r\n     * Creates a required validator.\r\n     *\r\n     * @param options.errorMessage The error message if the answer is empty.\r\n     * @returns A required validator.\r\n     */\r\n    constructor({ errorMessage = defaultErrorMessage }: RequiredValidatorOptions = {}) {\r\n        this.errorMessage = errorMessage;\r\n    }\r\n\r\n    validate({ question, answer }: FormEntry): Validation {\r\n        if (!question.required) {\r\n            return createValidationSuccess();\r\n        }\r\n\r\n        const content = answer.content;\r\n\r\n        // Check for undefined.\r\n        if (content === undefined) {\r\n            return this.createValidationFailure();\r\n        }\r\n\r\n        // Check for string.\r\n        if (typeof content === 'string') {\r\n            return content ? createValidationSuccess() : this.createValidationFailure();\r\n        }\r\n\r\n        // Check for choice answer.\r\n        if (typeof content === 'object' && 'chosen' in content) {\r\n            return content.chosen.length || content.other ? createValidationSuccess() : this.createValidationFailure();\r\n        }\r\n\r\n        return createValidationSuccess();\r\n    }\r\n\r\n    private createValidationFailure(): ValidationFailure {\r\n        return { valid: false, errorMessage: this.errorMessage };\r\n    }\r\n}\r\n","import { Mark, mergeAttributes } from '@tiptap/core';\r\nimport { DOMOutputSpec } from '@tiptap/pm/model';\r\nimport { MarkRenderHTMLProps } from './types';\r\n\r\ndeclare module '@tiptap/core' {\r\n    interface Commands<ReturnType> {\r\n        link: {\r\n            /**\r\n             * Set a link\r\n             */\r\n            setLink: (attributes: { href: string; target?: string | null; rel?: string | null }) => ReturnType;\r\n\r\n            /**\r\n             * Toggle a link\r\n             */\r\n            toggleLink: (attributes: { href: string; target?: string | null; rel?: string | null }) => ReturnType;\r\n\r\n            /**\r\n             * Unset a link\r\n             */\r\n            unsetLink: () => ReturnType;\r\n\r\n            /**\r\n             * Insert a link\r\n             */\r\n            insertLink: (\r\n                text: string,\r\n                attributes: { href: string; target?: string | null; rel?: string | null }\r\n            ) => ReturnType;\r\n        };\r\n    }\r\n}\r\n\r\nexport interface LinkOptions {\r\n    HTMLAttributes: Record<string, any>;\r\n}\r\n\r\nexport const Link = Mark.create<LinkOptions>({\r\n    name: 'link',\r\n    priority: 1000,\r\n    keepOnSplit: false,\r\n    inclusive: false,\r\n\r\n    addOptions() {\r\n        return {\r\n            HTMLAttributes: {\r\n                target: '_blank',\r\n                rel: 'noopener noreferrer',\r\n            },\r\n        };\r\n    },\r\n\r\n    addAttributes() {\r\n        return {\r\n            href: {\r\n                default: null,\r\n            },\r\n            target: {\r\n                default: this.options.HTMLAttributes.target,\r\n            },\r\n            rel: {\r\n                default: this.options.HTMLAttributes.rel,\r\n            },\r\n        };\r\n    },\r\n\r\n    parseHTML() {\r\n        return [{ tag: 'a:not([href^=\"javascript:\"])' }];\r\n    },\r\n\r\n    renderHTML({ HTMLAttributes }: MarkRenderHTMLProps): DOMOutputSpec {\r\n        return ['a', mergeAttributes(this.options.HTMLAttributes, HTMLAttributes), 0];\r\n    },\r\n\r\n    addCommands() {\r\n        return {\r\n            setLink:\r\n                attributes =>\r\n                ({ chain }) =>\r\n                    chain().setMark(this.name, attributes).run(),\r\n            toggleLink:\r\n                attributes =>\r\n                ({ chain }) =>\r\n                    chain().toggleMark(this.name, attributes, { extendEmptyMarkRange: true }).run(),\r\n            unsetLink:\r\n                () =>\r\n                ({ chain }) =>\r\n                    chain().unsetMark(this.name, { extendEmptyMarkRange: true }).run(),\r\n            insertLink:\r\n                (text, attributes) =>\r\n                ({ tr, dispatch, state }) => {\r\n                    const { selection } = tr;\r\n                    const { from, to } = selection;\r\n\r\n                    const mark = state.schema.marks.link.create(attributes);\r\n                    tr.insertText(text, from, to).addMark(from, from + text.length, mark);\r\n\r\n                    dispatch?.(tr);\r\n                    return true;\r\n                },\r\n        };\r\n    },\r\n});\r\n","/**\r\n * The value of DateTimeOffset.MaxValue in DotNet, which is 12/31/9999 11:59:59 PM +00:00.\r\n *\r\n * @remarks node -e \"console.log(new Date('12/31/9999 11:59:59 PM +00:00').getTime())\"\r\n * @see https://docs.microsoft.com/dotnet/api/system.datetimeoffset.maxvalue\r\n */\r\nconst DATE_TIME_OFFSET_MAX_VALUE = new Date(253402300799000);\r\n\r\n/**\r\n * Normalizes a date. A date is considered normalized if it is less than DateTimeOffset.MaxValue.\r\n *\r\n * @param date The date to normalize.\r\n * @returns The normalized date.\r\n */\r\nexport function normalizeDate(date: Date): Date | undefined {\r\n    return date < DATE_TIME_OFFSET_MAX_VALUE ? date : undefined;\r\n}\r\n\r\n/**\r\n * Converts a date to a zoned ISO string, e.g. 2021-01-01T00:00:00.000+08:00.\r\n *\r\n * @param date The date to convert.\r\n * @returns The zoned ISO date string.\r\n */\r\nexport function toZonedISOString(date: Date): string {\r\n    const offset = date.getTimezoneOffset();\r\n    const offsetHours = Math.floor(Math.abs(offset) / 60);\r\n    const offsetMinutes = Math.abs(offset) % 60;\r\n    const offsetSign = offset <= 0 ? '+' : '-';\r\n    const offsetHoursString = offsetHours.toString().padStart(2, '0');\r\n    const offsetMinutesString = offsetMinutes.toString().padStart(2, '0');\r\n    const offsetString = `${offsetSign}${offsetHoursString}:${offsetMinutesString}`;\r\n\r\n    const year = date.getFullYear().toString().padStart(4, '0');\r\n    const month = (date.getMonth() + 1).toString().padStart(2, '0');\r\n    const day = date.getDate().toString().padStart(2, '0');\r\n    const hours = date.getHours().toString().padStart(2, '0');\r\n    const minutes = date.getMinutes().toString().padStart(2, '0');\r\n    const seconds = date.getSeconds().toString().padStart(2, '0');\r\n    const milliseconds = date.getMilliseconds().toString().padStart(3, '0');\r\n\r\n    return `${year}-${month}-${day}T${hours}:${minutes}:${seconds}.${milliseconds}${offsetString}`;\r\n}\r\n\r\n/**\r\n * Parses a date string by the Date constructor.\r\n *\r\n * @param dateString The date string to parse.\r\n * @returns The parsed date, or undefined if the date string is invalid.\r\n */\r\nexport function parseDate(dateString: string): Date | undefined {\r\n    const date = new Date(dateString);\r\n    return isFinite(date.getTime()) ? date : undefined;\r\n}\r\n\r\n/**\r\n * Parses a local date string strictly, which is in the format of \"yyyy-MM-dd\".\r\n *\r\n * @param dateString The date string to parse.\r\n * @returns The parsed date, or undefined if the date string is invalid.\r\n */\r\nexport function parseLocalDateStrictly(dateString: string): Date | undefined {\r\n    const matches = dateString.match(/^(\\d{1,4})-(\\d{1,2})-(\\d{1,2})$/);\r\n    if (!matches) return;\r\n\r\n    const [year, month, day] = matches.slice(1).map(n => parseInt(n, 10));\r\n    return new Date(year, month - 1, day);\r\n}\r\n\r\n/**\r\n * Parses a local date string.\r\n *\r\n * @param dateString The date string to parse.\r\n * @returns The parsed date, or undefined if the date string is invalid.\r\n */\r\nexport function parseLocalDate(dateString: string): Date | undefined {\r\n    return parseLocalDateStrictly(dateString) ?? parseDate(dateString);\r\n}\r\n\r\n/**\r\n * Formats date as local date string. (yyyy-MM-dd)\r\n *\r\n * @param date The date to format.\r\n * @returns The formatted date string.\r\n */\r\nexport function formatLocalDate(date: Date): string {\r\n    const year = date.getFullYear();\r\n    const month = String(date.getMonth() + 1).padStart(2, '0');\r\n    const day = String(date.getDate()).padStart(2, '0');\r\n    return [year, month, day].join('-');\r\n}\r\n\r\n/**\r\n * A date range with a start and end date.\r\n *\r\n * @property start The start date.\r\n * @property end The end date.\r\n */\r\nexport interface DateRange {\r\n    start: Date;\r\n    end: Date;\r\n}\r\n\r\n/**\r\n * Parses a local date range string into a tuple of start and end dates. Either date is fully inclusive. The date range\r\n * string must be in the format of \"yyyy-MM-dd/yyyy-MM-dd\".\r\n *\r\n * @param rangeString The date range string to parse.\r\n * @returns A tuple of start and end dates, or undefined if the date range string is invalid.\r\n */\r\nexport function parseLocalDateRange(rangeString: string): DateRange | undefined {\r\n    const matches = rangeString.match(/^(\\d{1,4})-(\\d{1,2})-(\\d{1,2})\\/(\\d{1,4})-(\\d{1,2})-(\\d{1,2})$/);\r\n    if (!matches) return;\r\n\r\n    const [startYear, startMonth, startDay, endYear, endMonth, endDay] = matches.slice(1).map(n => parseInt(n, 10));\r\n    const start = new Date(startYear, startMonth - 1, startDay, 0, 0, 0, 0);\r\n    const end = new Date(endYear, endMonth - 1, endDay, 23, 59, 59, 999);\r\n    return { start, end };\r\n}\r\n\r\n/**\r\n * Erases the time part of a date.\r\n *\r\n * @param date The date to erase the time part.\r\n * @returns The date with the time part erased.\r\n */\r\nexport function eraseTime(date: Date): Date {\r\n    return new Date(date.getFullYear(), date.getMonth(), date.getDate());\r\n}\r\n\r\n/**\r\n * The number of milliseconds in one day.\r\n */\r\nconst MILLISECONDS_IN_ONE_DAY = 24 * 60 * 60 * 1000;\r\n\r\n/**\r\n * Compares two dates without considering time parts.\r\n *\r\n * @param a The first date.\r\n * @param b The second date.\r\n * @returns The comparison result, which is the difference between the two dates in days. A positive value means a is\r\n * later than b, a negative value means a is earlier than b, and zero means a is the same as b.\r\n */\r\nexport function compareDatesWithoutTime(a: Date, b: Date): number {\r\n    return (eraseTime(a).getTime() - eraseTime(b).getTime()) / MILLISECONDS_IN_ONE_DAY;\r\n}\r\n","import { makeStyles } from '@addressbook/components-fluentui-teams-theme';\r\n\r\nexport const useSecondarySettingsStyles = makeStyles({\r\n    row: {\r\n        display: 'flex',\r\n        flexDirection: 'row',\r\n        alignItems: 'center',\r\n        gap: '12px 24px',\r\n        flexWrap: 'wrap',\r\n        '> .ms-Dropdown-container': { flexBasis: '200px' },\r\n    },\r\n});\r\n","/*\r\n *  Copyright © Microsoft Corporation. All rights reserved.\r\n */\r\n\r\nimport {\r\n    DefaultButton,\r\n    IButtonProps,\r\n    PrimaryButton,\r\n    Dialog,\r\n    DialogFooter,\r\n    DialogType,\r\n    IDialogProps,\r\n    mergeStyles,\r\n} from '@fluentui/react';\r\nimport * as React from 'react';\r\nimport { useDialogStyles, useContentStyles } from './ConfirmationDialog.styles';\r\n\r\nexport interface ConfirmationDialogProps {\r\n    isOpen: boolean;\r\n    title: string | JSX.Element;\r\n    subText?: string;\r\n    // Custom content\r\n    content?: JSX.Element;\r\n    // Method used to dismiss the dialog\r\n    dismiss?: () => void;\r\n    // Possible actions for selection\r\n    actions: IButtonProps[];\r\n    showDarkOverlay?: boolean;\r\n    showCloseButton?: boolean;\r\n}\r\n\r\nexport const ConfirmationDialog: React.FC<ConfirmationDialogProps> = ({\r\n    title,\r\n    subText,\r\n    isOpen,\r\n    content,\r\n    dismiss,\r\n    actions,\r\n    showDarkOverlay,\r\n    showCloseButton = true,\r\n}: ConfirmationDialogProps): JSX.Element => {\r\n    const contentStyles = useContentStyles();\r\n    const buttons =\r\n        actions &&\r\n        actions.map((buttonProps: IButtonProps, index: number): JSX.Element => {\r\n            return buttonProps.primary ? (\r\n                <PrimaryButton\r\n                    className={mergeStyles(contentStyles.button, contentStyles.primaryButton)}\r\n                    {...buttonProps}\r\n                    key={index}\r\n                />\r\n            ) : (\r\n                <DefaultButton className={contentStyles.button} {...buttonProps} key={index} />\r\n            );\r\n        });\r\n\r\n    const dialogProps: IDialogProps = {\r\n        hidden: !isOpen,\r\n        onDismiss: dismiss,\r\n        styles: useDialogStyles(),\r\n        dialogContentProps: {\r\n            type: DialogType.normal,\r\n            title,\r\n            subText,\r\n            showCloseButton,\r\n        },\r\n        modalProps: {\r\n            isDarkOverlay: !!showDarkOverlay,\r\n            overlay:\r\n                !showDarkOverlay &&\r\n                ({\r\n                    isDarkThemed: false,\r\n                    styles: {\r\n                        root: {\r\n                            background: 'none',\r\n                        },\r\n                    },\r\n                } as any),\r\n            isBlocking: true,\r\n        },\r\n    };\r\n\r\n    return (\r\n        <Dialog {...dialogProps}>\r\n            {content}\r\n            <DialogFooter className={contentStyles.footerButtons}>{buttons}</DialogFooter>\r\n        </Dialog>\r\n    );\r\n};\r\n","/*\r\n *  Copyright © Microsoft Corporation. All rights reserved.\r\n */\r\n\r\nimport { FontWeights } from '@fluentui/react';\r\nimport { makeStyles } from '../styles/makeStyles';\r\n\r\nexport const useAppHeaderStyles = makeStyles(theme => ({\r\n    root: {\r\n        backgroundColor: theme.palette.neutralLight,\r\n        padding: '0 1.25rem',\r\n        height: '3.75rem',\r\n    },\r\n    text: [\r\n        theme.fonts.large,\r\n        {\r\n            fontWeight: FontWeights.bold,\r\n            marginRight: '5px',\r\n        },\r\n    ],\r\n}));\r\n","import { Dropdown, ResponsiveMode, TextField, mergeStyles } from '@fluentui/react';\r\nimport React from 'react';\r\nimport { ChoiceAppearance, ChoiceEntry, FormContext, FormEntry, FormMode, FormQuestionType } from '../../types';\r\nimport {\r\n    useDropdownStyles,\r\n    useTextFieldStyles,\r\n    useChoiceChange,\r\n    useChosenAndOther,\r\n    useShuffled,\r\n} from '../../utilities';\r\nimport { BaseDescriptor, FieldComponentTypeFactory } from './BaseDescriptor';\r\n\r\nconst containerClassName = mergeStyles({\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    gap: '8px',\r\n});\r\n\r\nconst defaultOptions = {\r\n    defaultPlaceholder: 'Select your response',\r\n    otherText: 'Other',\r\n    otherPlaceholder: 'Enter your response',\r\n};\r\n\r\nexport type DropdownChoiceDescriptorOptions = Partial<typeof defaultOptions>;\r\n\r\nconst makeFieldComponent: FieldComponentTypeFactory<\r\n    DropdownChoiceDescriptorOptions & typeof defaultOptions,\r\n    ChoiceEntry\r\n> =\r\n    ({ defaultPlaceholder, otherText, otherPlaceholder }) =>\r\n    ({ entry, onEntryChange, showPlaceholder, delegatedProps }) => {\r\n        const { question, answer } = entry;\r\n        const { choices, shuffle, allowOther } = question;\r\n\r\n        const shuffledChoices = useShuffled({ array: choices, enabled: shuffle && !delegatedProps.readOnly });\r\n        const onChange = useChoiceChange(entry, onEntryChange);\r\n        const { chosen, otherKey, otherValue, otherSelected } = useChosenAndOther(choices, answer.content);\r\n\r\n        const options = shuffledChoices.map(choice => ({ key: choice, text: choice }));\r\n        if (allowOther) options.push({ key: otherKey, text: otherText });\r\n\r\n        const placeholder = showPlaceholder ? question.placeholder || defaultPlaceholder : undefined;\r\n\r\n        const dropdownStyles = useDropdownStyles();\r\n        const textFieldStyles = useTextFieldStyles();\r\n\r\n        return (\r\n            <div className={containerClassName}>\r\n                <Dropdown\r\n                    {...delegatedProps}\r\n                    selectedKey={otherSelected ? otherKey : chosen[0] ?? null}\r\n                    options={options}\r\n                    onChange={\r\n                        onChange &&\r\n                        ((_, option) =>\r\n                            option && (option.key === otherKey ? onChange([], '') : onChange([option.key as string])))\r\n                    }\r\n                    placeholder={placeholder}\r\n                    // Disable responsive mode to prevent the dropdown from being rendered as a panel.\r\n                    responsiveMode={ResponsiveMode.unknown}\r\n                    styles={dropdownStyles}\r\n                />\r\n                {otherSelected && (\r\n                    <TextField\r\n                        {...delegatedProps}\r\n                        value={otherValue}\r\n                        onChange={onChange && ((_, newValue) => onChange([], newValue))}\r\n                        placeholder={showPlaceholder ? otherPlaceholder : undefined}\r\n                        styles={textFieldStyles}\r\n                    />\r\n                )}\r\n            </div>\r\n        );\r\n    };\r\n\r\n/**\r\n * The descriptor that renders a dropdown for choice entries with dropdown appearance.\r\n */\r\nexport class DropdownChoiceDescriptor extends BaseDescriptor<ChoiceEntry> {\r\n    protected readonly FieldComponent;\r\n\r\n    constructor(options?: DropdownChoiceDescriptorOptions) {\r\n        super();\r\n        this.FieldComponent = makeFieldComponent({ ...defaultOptions, ...options });\r\n    }\r\n\r\n    /**\r\n     * Tests whether the entry is a choice entry with dropdown appearance, and the form is not in viewing mode.\r\n     *\r\n     * @param entry The entry to test.\r\n     * @param context The context.\r\n     * @returns Passes the test or not.\r\n     */\r\n    test(entry: FormEntry, context: FormContext): entry is ChoiceEntry {\r\n        return (\r\n            entry.question.type === FormQuestionType.Choice &&\r\n            entry.question.appearance === ChoiceAppearance.Dropdown &&\r\n            context.mode !== FormMode.Viewing\r\n        );\r\n    }\r\n}\r\n","export * from './PeopleList';\r\n","import React from 'react';\r\nimport { mergeStyles, Shimmer, ShimmerElementType, Stack } from '@fluentui/react';\r\nimport { useCommonCardStyles } from './CommonCard.styles';\r\n\r\nconst LARGE_ICON_SIZE = 64;\r\nconst SMALL_ICON_SIZE = 32;\r\n\r\nconst LARGE_GAP_WIDTH = 18;\r\nconst SMALL_GAP_WIDTH = 12;\r\n\r\nconst LARGE_TEXT_HEIGHT = 64;\r\nconst SMALL_TEXT_HEIGHT = 20;\r\n\r\nexport const CommonCardShimmer = ({\r\n    isMobile,\r\n    isLowHeight,\r\n    expanded,\r\n}: {\r\n    isMobile?: boolean;\r\n    isLowHeight?: boolean;\r\n    expanded?: boolean;\r\n}): JSX.Element => {\r\n    const cardStyles = useCommonCardStyles();\r\n    const singleLine = (isMobile && isLowHeight) || expanded;\r\n\r\n    const iconSize = expanded ? LARGE_ICON_SIZE : SMALL_ICON_SIZE;\r\n    const gapWidth = expanded ? LARGE_GAP_WIDTH : SMALL_GAP_WIDTH;\r\n    const textHeight = expanded ? LARGE_TEXT_HEIGHT : SMALL_TEXT_HEIGHT;\r\n\r\n    return (\r\n        <Stack\r\n            className={mergeStyles(\r\n                cardStyles.root,\r\n                expanded && cardStyles.expandedRoot,\r\n                isMobile && cardStyles.mobileRoot,\r\n                isMobile && isLowHeight && cardStyles.mobileRootWithoutReminder\r\n            )}\r\n            verticalAlign='space-between'>\r\n            <Shimmer\r\n                width={singleLine ? undefined : iconSize}\r\n                shimmerElements={[\r\n                    { type: ShimmerElementType.line, height: iconSize, width: iconSize },\r\n                    { type: ShimmerElementType.gap, width: gapWidth },\r\n                    { type: ShimmerElementType.line, height: textHeight },\r\n                ]}\r\n            />\r\n            {!singleLine && <Shimmer shimmerElements={[{ type: ShimmerElementType.line, height: textHeight }]} />}\r\n        </Stack>\r\n    );\r\n};\r\n","var _path, _path2, _path3, _path4, _path5, _path6, _path7, _path8, _path9, _path10, _g, _path11, _path12, _path13, _path14, _path15, _path16, _defs;\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nimport * as React from \"react\";\nfunction SvgTurtle(props) {\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    width: 195,\n    height: 104,\n    viewBox: \"0 0 195 104\",\n    fill: \"none\",\n    xmlns: \"http://www.w3.org/2000/svg\"\n  }, props), _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M88.232 103.855c48.729 0 88.232-4.052 88.232-9.05 0-4.998-39.503-9.05-88.232-9.05C39.502 85.755 0 89.807 0 94.805c0 4.998 39.503 9.05 88.232 9.05z\",\n    fill: \"#E1DFDD\"\n  })), _path2 || (_path2 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M169.026 13.113l-15.05-5.668c-4.664-1.757-9.821.728-11.52 5.55l-7.051 20.015 9.738 3.667c7.598 2.862 16-1.187 18.768-9.043l5.115-14.52z\",\n    fill: \"url(#turtle_svg__paint0_linear_41_85734)\"\n  })), _path3 || (_path3 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M172.244 14.324l-18.268-6.88c-4.664-1.757-9.821.728-11.52 5.55l-1.07 3.036 17.846 6.721c5.591 2.106 11.774-.873 13.811-6.654.253-.718-.105-1.512-.799-1.773z\",\n    fill: \"url(#turtle_svg__paint1_linear_41_85734)\"\n  })), _path4 || (_path4 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M91.442 2.544l-19.5-.252c-4.962-.064-9.036 4.044-9.098 9.175l-.257 21.3 28.485.368.37-30.591z\",\n    fill: \"#AEB0D6\"\n  })), _path5 || (_path5 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M110.635 15.77H52.506c-9.208 0-16.672 7.718-16.672 17.239h107.295c0-9.521-16.572-17.24-32.494-17.24z\",\n    fill: \"#FFD590\"\n  })), _path6 || (_path6 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M39.313.873c-.382-.71-1.167-1.042-1.865-.788L14.796 8.313c-4.75 1.725-2.448 14.162 3.58 11.973l15.94-5.79c5.695-2.069 7.932-8.168 4.997-13.623z\",\n    fill: \"#C3C3E1\"\n  })), _path7 || (_path7 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M96.115 3.8c-.133-.802-.767-1.384-1.507-1.384H70.6c-5.035 0-6.85 12.523-.461 12.523h16.895c6.036 0 10.102-4.987 9.082-11.14z\",\n    fill: \"#AEB0D6\"\n  })), _path8 || (_path8 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M33.091 1.668L14.693 8.351c-6.68 2.427-5.649 9.081-1.355 12.833 10.77 9.412 8.903 17.021 8.903 17.021l13.334-4.843c7.48-2.718 11.018-10.551.92-19.745L33.092 1.668z\",\n    fill: \"#C3C3E1\"\n  })), _path9 || (_path9 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M140.865 33.009H74.128c-1.706 0-3.089 1.43-3.089 3.193v24.529c0 1.764 1.383 3.193 3.089 3.193h50.752c10.534 0 19.073-8.83 19.073-19.721v-8c0-1.764-1.383-3.194-3.088-3.194z\",\n    fill: \"url(#turtle_svg__paint2_linear_41_85734)\"\n  })), /*#__PURE__*/React.createElement(\"mask\", {\n    id: \"turtle_svg__a\",\n    style: {\n      maskType: \"alpha\"\n    },\n    maskUnits: \"userSpaceOnUse\",\n    x: 19,\n    y: 33,\n    width: 123,\n    height: 59\n  }, _path10 || (_path10 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M88.17 33.009H19.493v7.756c0 28.129 22.053 50.931 49.257 50.931h25.122c22.557 0 38.363-15.708 47.414-30.57-22.528-4.908-24.405-28.117-53.116-28.117z\",\n    fill: \"#C3C3E1\"\n  }))), _g || (_g = /*#__PURE__*/React.createElement(\"g\", {\n    mask: \"url(#turtle_svg__a)\",\n    fill: \"#6E6FAC\",\n    stroke: \"#8B8CC4\",\n    strokeWidth: 7.067,\n    strokeMiterlimit: 10\n  }, /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M87.786 120.106H62.067l-12.86-23.03 12.86-23.03h25.719l12.859 23.03-12.86 23.03zM49.136 97.075H23.417l-12.86-23.03 12.86-23.03h25.719l12.86 23.03-12.86 23.03zM126.388 97.075h-25.719l-12.86-23.03 12.86-23.03h25.719l12.859 23.03-12.859 23.03z\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M164.866 74.014h-25.719l-12.859-23.03 12.859-23.03h25.719l12.86 23.03-12.86 23.03zM87.797 74.046h-25.72l-12.859-23.03 12.86-23.03h25.719l12.859 23.03-12.86 23.03zM10.351 74.046h-25.719l-12.86-23.03 12.86-23.03h25.719l12.86 23.03-12.86 23.03z\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M126.388 51.017h-25.719l-12.86-23.03 12.86-23.03h25.719l12.859 23.03-12.859 23.03zM49.147 51.017h-25.72l-12.859-23.03 12.86-23.03h25.719l12.86 23.03-12.86 23.03z\"\n  }))), _path11 || (_path11 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M141.286 61.127c-22.528-4.909-24.405-28.118-53.116-28.118M88.17 33.009H19.493\",\n    stroke: \"#8B8CC4\",\n    strokeWidth: 11.221,\n    strokeMiterlimit: 10,\n    strokeLinecap: \"round\"\n  })), _path12 || (_path12 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M148.301 60.901c0-7.625-2.424-8.745-4.504-8.188-2.113.566-4.111 3.922-4.111 3.922l-15.521-23.217s18.836-7.918 29.417-2.743c11.318 5.535 14.229 15.992 14.229 28.313l-19.51 1.913z\",\n    fill: \"#C3C3E1\"\n  })), _path13 || (_path13 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M128.651 19.896c2.714-5.518-19.548-6.039-20.555-4.355-2.561 4.28-1.142 8.848-7.886 8.754-6.326-.088-7.82 4.911-7.82 4.911s4.264 2.06 7.32 9.32c5.184 12.31 23.631 10.66 24.455-5.11.236-4.508 2.308-9.091 4.486-13.52z\",\n    fill: \"#C3C3E1\"\n  })), _path14 || (_path14 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M129.489 11.718l-13.561-.436c-4.961-.16-9.108 3.87-9.262 8.999l-.098 3.229 17.108.55c4.844.156 8.893-3.778 9.044-8.787.057-1.904-1.389-3.495-3.231-3.555zM168.596 38.62h-.92c-10.701 0-19.375 8.968-19.375 20.032s8.674 20.033 19.375 20.033h14.055c7.014 0 12.7-5.879 12.7-13.13v-.223c0-14.753-11.567-26.713-25.835-26.713z\",\n    fill: \"#C3C3E1\"\n  })), _path15 || (_path15 = /*#__PURE__*/React.createElement(\"path\", {\n    opacity: 0.5,\n    d: \"M177.543 49.48c1.832 1.107 10.811-1.428 10.811-1.428l-2.411-2.545s-5.319 2.039-8.168 2.908a.567.567 0 00-.504.62.58.58 0 00.272.446z\",\n    fill: \"#8B8CC4\"\n  })), _path16 || (_path16 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M180.326 65.642c.781-2.215.408-4.39-.833-4.857-1.24-.467-2.878.95-3.659 3.166-.78 2.215-.408 4.39.833 4.857 1.24.467 2.878-.95 3.659-3.166z\",\n    fill: \"#605D5A\"\n  })), _defs || (_defs = /*#__PURE__*/React.createElement(\"defs\", null, /*#__PURE__*/React.createElement(\"linearGradient\", {\n    id: \"turtle_svg__paint0_linear_41_85734\",\n    x1: 162.909,\n    y1: 12.121,\n    x2: 123.674,\n    y2: 44.411,\n    gradientUnits: \"userSpaceOnUse\"\n  }, /*#__PURE__*/React.createElement(\"stop\", {\n    stopColor: \"#C3C3E1\"\n  }), /*#__PURE__*/React.createElement(\"stop\", {\n    offset: 1,\n    stopColor: \"#8B8CC4\"\n  })), /*#__PURE__*/React.createElement(\"linearGradient\", {\n    id: \"turtle_svg__paint1_linear_41_85734\",\n    x1: 161.899,\n    y1: 10.916,\n    x2: 124.026,\n    y2: 42.086,\n    gradientUnits: \"userSpaceOnUse\"\n  }, /*#__PURE__*/React.createElement(\"stop\", {\n    stopColor: \"#C3C3E1\"\n  }), /*#__PURE__*/React.createElement(\"stop\", {\n    offset: 1,\n    stopColor: \"#8B8CC4\"\n  })), /*#__PURE__*/React.createElement(\"linearGradient\", {\n    id: \"turtle_svg__paint2_linear_41_85734\",\n    x1: 131.819,\n    y1: 35.848,\n    x2: 101.956,\n    y2: 47.298,\n    gradientUnits: \"userSpaceOnUse\"\n  }, /*#__PURE__*/React.createElement(\"stop\", {\n    stopColor: \"#C3C3E1\"\n  }), /*#__PURE__*/React.createElement(\"stop\", {\n    offset: 1,\n    stopColor: \"#8B8CC4\"\n  })))));\n}\nexport default __webpack_public_path__ + \"dist/turtle.63d050.svg\";\nexport { SvgTurtle as ReactComponent };","import { BaseFormAnswer, BaseFormEntry, BaseFormQuestion, FormQuestionType } from './base';\r\n\r\nexport enum TextNumberRestrictionType {\r\n    GreaterThan,\r\n    GreaterThanOrEqualTo,\r\n    LessThan,\r\n    LessThanOrEqualTo,\r\n    EqualTo,\r\n    NotEqualTo,\r\n    Between,\r\n    NotBetween,\r\n}\r\n\r\nexport interface TextNumberRestrictionWithMin {\r\n    type: TextNumberRestrictionType.GreaterThan | TextNumberRestrictionType.GreaterThanOrEqualTo;\r\n    min: number;\r\n}\r\n\r\nexport interface TextNumberRestrictionWithMax {\r\n    type: TextNumberRestrictionType.LessThan | TextNumberRestrictionType.LessThanOrEqualTo;\r\n    max: number;\r\n}\r\n\r\nexport interface TextNumberRestrictionWithValue {\r\n    type: TextNumberRestrictionType.EqualTo | TextNumberRestrictionType.NotEqualTo;\r\n    value: number;\r\n}\r\n\r\nexport interface TextNumberRestrictionWithMinAndMax {\r\n    type: TextNumberRestrictionType.Between | TextNumberRestrictionType.NotBetween;\r\n    min: number;\r\n    max: number;\r\n}\r\n\r\nexport type TextNumberRestriction =\r\n    | TextNumberRestrictionWithMin\r\n    | TextNumberRestrictionWithMax\r\n    | TextNumberRestrictionWithValue\r\n    | TextNumberRestrictionWithMinAndMax;\r\n\r\nexport type TextNumberRestrictionValueKey = 'min' | 'max' | 'value';\r\n\r\n/**\r\n * A text question.\r\n *\r\n * @property multiline Whether the question is a multiline text.\r\n * @property number Whether the question is a number.\r\n * @property restriction The restriction of the field.\r\n */\r\nexport interface TextQuestion extends BaseFormQuestion<FormQuestionType.Text> {\r\n    multiline?: boolean;\r\n    number?: boolean;\r\n    restriction?: TextNumberRestriction;\r\n}\r\n\r\nexport type TextAnswer = BaseFormAnswer<string>;\r\n\r\nexport type TextEntry = BaseFormEntry<TextQuestion, TextAnswer>;\r\n","export * from './FormFacade';\r\n","import { resizeTaskModule } from '@addressbook/components-metaos-host';\r\nimport { useEffect } from 'react';\r\nimport { noop } from '../utils';\r\n\r\nexport interface TeamsTaskModuleSize {\r\n    width: number;\r\n    height: number;\r\n}\r\n\r\n/**\r\n * Default size of teams dialog.\r\n *\r\n * @see /Source/Clients/web-apps/WorkReport/manifests/teams.template.json\r\n */\r\nexport const defaultSize: TeamsTaskModuleSize = { width: 1000, height: 700 };\r\n\r\nexport function useTeamsTaskModuleSize(size: TeamsTaskModuleSize = defaultSize): void {\r\n    useEffect(() => update({ width: size.width, height: size.height }), [size.width, size.height]);\r\n    useEffect(() => () => update(defaultSize), []);\r\n}\r\n\r\nfunction update(size: TeamsTaskModuleSize): void {\r\n    resizeTaskModule(size).catch(noop);\r\n}\r\n","export const styles = {\r\n    root: {\r\n        maxHeight: '100%',\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        justifyContent: 'center',\r\n        alignItems: 'center',\r\n        gap: '2rem',\r\n    },\r\n    info: {\r\n        textAlign: 'center',\r\n    },\r\n    btn: {\r\n        border: '1px solid',\r\n        display: 'block',\r\n        borderRadius: '4px',\r\n        height: '2rem',\r\n        padding: '.25rem 1.5rem',\r\n        fontWeight: 'bold',\r\n    },\r\n    message: {\r\n        fontFamily: 'unset',\r\n        whiteSpace: 'pre-wrap',\r\n    },\r\n} as const;\r\n","import { makeStyles } from '@addressbook/components-fluentui-teams-theme';\r\n\r\nexport const useFormFacadeStyles = makeStyles({\r\n    root: {\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        gap: '16px',\r\n    },\r\n});\r\n","import { mergeStyles, registerIcons } from '@fluentui/react';\r\nimport React from 'react';\r\n\r\nimport {\r\n    ArrowDownRegular,\r\n    CalendarLtrRegular,\r\n    CallRegular,\r\n    ChatRegular,\r\n    ChevronDownRegular,\r\n    ChevronLeftRegular,\r\n    ChevronRightRegular,\r\n    ContactCardRegular,\r\n    DeskRegular,\r\n    DismissRegular,\r\n    HomeRegular,\r\n    LocationRegular,\r\n    MailRegular,\r\n    OrganizationRegular,\r\n    PresenceAvailableFilled,\r\n    PresenceAwayFilled,\r\n    PresenceBlockedRegular,\r\n    PresenceBusyFilled,\r\n    PresenceDndFilled,\r\n    PresenceOfflineRegular,\r\n    PresenceOofRegular,\r\n    PresenceUnknownRegular,\r\n    SearchRegular,\r\n    TagRegular,\r\n    VideoRegular,\r\n} from '@fluentui/react-icons';\r\nexport const iconStyle = /* #__PURE__ */ mergeStyles({\r\n    display: 'block',\r\n    width: '100%',\r\n    height: '100%',\r\n    lineHeight: '100%',\r\n    fill: 'currentColor',\r\n});\r\n\r\nexport const customIconStyle = /* #__PURE__ */ mergeStyles({\r\n    display: 'block',\r\n    width: '100%',\r\n    height: '100%',\r\n    lineHeight: '100%',\r\n});\r\n\r\nexport const emojiStyle = /* #__PURE__ */ mergeStyles({\r\n    display: 'block',\r\n    width: '100%',\r\n    height: '100%',\r\n    lineHeight: '100%',\r\n});\r\n\r\nexport const icons = /* #__PURE__ */ {\r\n    ContactCard: <ContactCardRegular className={iconStyle} />,\r\n    Mail: <MailRegular className={iconStyle} />,\r\n    Chat: <ChatRegular className={iconStyle} />,\r\n    Call: <CallRegular className={iconStyle} />,\r\n    Location: <LocationRegular className={iconStyle} />,\r\n    Desk: <DeskRegular className={iconStyle} />,\r\n    Search: <SearchRegular className={iconStyle} />,\r\n    Cancel: <DismissRegular className={iconStyle} />,\r\n    ChevronRight: <ChevronRightRegular className={iconStyle} />,\r\n    ChevronLeft: <ChevronLeftRegular className={iconStyle} />,\r\n    Home: <HomeRegular className={iconStyle} />,\r\n    Calendar: <CalendarLtrRegular className={iconStyle} />,\r\n    // Airplane: <AirplaneRegular className={iconStyle} />,\r\n    ChevronDown: <ChevronDownRegular className={iconStyle} />,\r\n    Tag: <TagRegular className={iconStyle} />,\r\n    // Up: <ArrowUpRegular className={iconStyle} />,\r\n    Down: <ArrowDownRegular className={iconStyle} />,\r\n    Organization: <OrganizationRegular className={iconStyle} />,\r\n    Video: <VideoRegular className={iconStyle} />,\r\n\r\n    // Presence:\r\n    PresenceAvailable: <PresenceAvailableFilled className={iconStyle} />,\r\n    PresenceAway: <PresenceAwayFilled className={iconStyle} />,\r\n    PresenceBlocked: <PresenceBlockedRegular className={iconStyle} />,\r\n    PresenceBusy: <PresenceBusyFilled className={iconStyle} />,\r\n    PresenceDnd: <PresenceDndFilled className={iconStyle} />,\r\n    PresenceOof: <PresenceOofRegular className={iconStyle} />,\r\n    PresenceOffline: <PresenceOfflineRegular className={iconStyle} />,\r\n    PresenceUnknown: <PresenceUnknownRegular className={iconStyle} />,\r\n\r\n    // CheckMark: <CheckmarkRegular className={iconStyle} />,\r\n    // SortDown: <ArrowSortDownRegular className={iconStyle} />,\r\n    // SortUp: <ArrowSortUpRegular className={iconStyle} />,\r\n    // RingerSolid: <AlertFilled className={iconStyle} />,\r\n    // Contact: <PersonFilled className={iconStyle} />,\r\n    // Info: <InfoRegular className={iconStyle} />,\r\n    // Add: <AddRegular className={iconStyle} />,\r\n    // AddFilled: <AddFilled className={iconStyle} />,\r\n    // GlobalNavButton: <NavigationRegular className={iconStyle} />,\r\n    // Filter: <FilterRegular className={iconStyle} />,\r\n    // Settings: <SettingsRegular className={iconStyle} />,\r\n    // More: <MoreHorizontalRegular className={iconStyle} />,\r\n    // Edit: <EditRegular className={iconStyle} />,\r\n    // Cancel: <DismissRegular className={iconStyle} />,\r\n    // ChevronRight: <ChevronRightRegular className={iconStyle} />,\r\n    // ChevronLeft: <ChevronLeftRegular className={iconStyle} />,\r\n    // Home: <HomeRegular className={iconStyle} />,\r\n    // Calendar: <CalendarLtrRegular className={iconStyle} />,\r\n    // Airplane: <AirplaneRegular className={iconStyle} />,\r\n    // ChevronDown: <ChevronDownRegular className={iconStyle} />,\r\n    // Up: <ArrowUpRegular className={iconStyle} />,\r\n    // Down: <ArrowDownRegular className={iconStyle} />,\r\n    // CheckMark: <CheckmarkRegular className={iconStyle} />,\r\n    // SortDown: <ArrowSortDownRegular className={iconStyle} />,\r\n    // SortUp: <ArrowSortUpRegular className={iconStyle} />,\r\n    // Ringer: <AlertRegular className={iconStyle} />,\r\n    // RingerSolid: <AlertFilled className={iconStyle} />,\r\n    // Contact: <PersonFilled className={iconStyle} />,\r\n    // Info: <InfoRegular className={iconStyle} />,\r\n    // CaretRight: <CaretRightFilled className={iconStyle} />,\r\n    // CaretDown: <CaretDownFilled className={iconStyle} />,\r\n    // ProjectCollection: <CollectionsRegular className={iconStyle} />,\r\n    // AlertUrgentFilled: <AlertUrgentFilled className={iconStyle} />,\r\n    // NotepadPerson: <NotepadPersonFilled className={iconStyle} />,\r\n    // ClipboardTaskList: <ClipboardTaskListLtrFilled className={iconStyle} />,\r\n    // TextBulletList: <TextBulletListSquareEditFilled className={iconStyle} />,\r\n    // DocumentRibbon: <DocumentRibbonFilled className={iconStyle} />,\r\n    // ClipboardError: <ClipboardErrorFilled className={iconStyle} />,\r\n    // DataArea: <DataAreaFilled className={iconStyle} />,\r\n    // WrenchScrewdriver: <WrenchScrewdriverFilled className={iconStyle} />,\r\n    // CalendarDay: <CalendarDayFilled className={iconStyle} />,\r\n    // CalendarWorkWeek: <CalendarWorkWeekFilled className={iconStyle} />,\r\n    // CalendarMonth: <CalendarMonthFilled className={iconStyle} />,\r\n    // ClipboardTextEdit: <ClipboardTextEditRegular className={iconStyle} />,\r\n    // ClipboardTextEditFilled: <ClipboardTextEditFilled className={iconStyle} />,\r\n    // BranchCompare: <BranchCompareFilled className={iconStyle} />,\r\n    // LeafThree: <LeafThreeFilled className={iconStyle} />,\r\n    // ClipboardText: <ClipboardTextLtrFilled className={iconStyle} />,\r\n    // BuildingRetail: <BuildingRetailFilled className={iconStyle} />,\r\n    // ClipboardDay: <ClipboardDayFilled className={iconStyle} />,\r\n    // Clipboard3Day: <Clipboard3DayFilled className={iconStyle} />,\r\n    // ClipboardMonth: <ClipboardMonthFilled className={iconStyle} />,\r\n    // BuildingShop: <BuildingShopFilled className={iconStyle} />,\r\n    // BuildingRetailToolbox: <BuildingRetailToolboxFilled className={iconStyle} />,\r\n    // VehicleTruck: <VehicleTruckFilled className={iconStyle} />,\r\n    // VehicleTruckProfile: <VehicleTruckProfileFilled className={iconStyle} />,\r\n    // Broom: <BroomFilled className={iconStyle} />,\r\n    // Backpack: <BackpackFilled className={iconStyle} />,\r\n    // Megaphone: <MegaphoneFilled className={iconStyle} />,\r\n    // Cart: <CartFilled className={iconStyle} />,\r\n    // ClockAlarm: <ClockAlarmFilled className={iconStyle} />,\r\n    // Pulse: <PulseFilled className={iconStyle} />,\r\n    // Production: <ProductionFilled className={iconStyle} />,\r\n    // Steps: <StepsFilled className={iconStyle} />,\r\n    // BookTemplate: <BookTemplateRegular className={iconStyle} />,\r\n    // Tag: <TagRegular className={iconStyle} />,\r\n    // LinkSquare: <LinkSquareRegular className={iconStyle} />,\r\n    // LinkRegular: <LinkRegular className={iconStyle} />,\r\n    // ThumbLikeRegular: <ThumbLikeRegular className={iconStyle} />,\r\n    // ThumbLikeFilled: <ThumbLikeFilled className={iconStyle} />,\r\n    // PersonFeedbackRegular: <PersonFeedbackRegular className={iconStyle} />,\r\n    // Attach: <AttachRegular className={iconStyle} />,\r\n    // Image: <ImageRegular className={iconStyle} />,\r\n    // ImageOff: <ImageOffRegular className={iconStyle} />,\r\n    // Open: <OpenRegular className={iconStyle} />,\r\n    // ArrowClockwise: <ArrowClockwiseRegular className={iconStyle} />,\r\n    // ArrowUpload: <ArrowUploadFilled className={iconStyle} />,\r\n    // ArrowDownload: <ArrowDownload className={iconStyle} />,\r\n    // ArrowRepeatAllRegular: <ArrowRepeatAllRegular className={iconStyle} />,\r\n    // ArrowExport: <ArrowExportRegular className={iconStyle} />,\r\n    // CheckMarkCircle: <CheckmarkCircleRegular className={iconStyle} />,\r\n    // PeopleTeam: <PeopleTeamRegular className={iconStyle} />,\r\n    // PersonRegular: <PersonRegular className={iconStyle} />,\r\n    // BoardSplitRegular: <BoardSplitRegular className={iconStyle} />,\r\n    // ListRegular: <ListRegular className={iconStyle} />,\r\n    // ArrowRight: <ArrowRight className={iconStyle} />,\r\n    // People: <PeopleFilled className={iconStyle} />,\r\n    // PeopleRegular: <PeopleRegular className={iconStyle} />,\r\n    // QuestionCircle: <QuestionCircle className={iconStyle} />,\r\n\r\n    // to consume @addressbook/components-rich-text\r\n\r\n    // // Emoji for default template icon\r\n    // SunWithFaceEmoji: <SunWithFace {...emojiProps} />,\r\n    // RocketEmoji: <Rocket {...emojiProps} />,\r\n    // SixOclockEmoji: <SixOclock {...emojiProps} />,\r\n    // DizzyEmoji: <Dizzy {...emojiProps} />,\r\n    // PoliceCarLightEmoji: <PoliceCarLight {...emojiProps} />,\r\n    // MemoEmoji: <Memo {...emojiProps} />,\r\n    // StarEmoji: <Star {...emojiProps} />,\r\n    // ScrollEmoji: <Scroll {...emojiProps} />,\r\n\r\n    // // Emoji for user pick\r\n    // SoftIceCreamEmoji: <SoftIceCream {...emojiProps} />,\r\n    // ShortCakeEmoji: <ShortCake {...emojiProps} />,\r\n    // GreenAppleEmoji: <GreenApple {...emojiProps} />,\r\n    // AppleEmoji: <Apple {...emojiProps} />,\r\n    // CherriesEmoji: <Cherries {...emojiProps} />,\r\n    // BurgerEmoji: <Burger {...emojiProps} />,\r\n    // CakeEmoji: <Cake {...emojiProps} />,\r\n    // SwanEmoji: <Swan {...emojiProps} />,\r\n    // CatFaceEmoji: <CatFace {...emojiProps} />,\r\n    // PottedPlantEmoji: <PottedPlant {...emojiProps} />,\r\n    // BellEmoji: <Bell {...emojiProps} />,\r\n    // MilitaryMedalEmoji: <MilitaryMedal {...emojiProps} />,\r\n    // TelephoneEmoji: <Telephone {...emojiProps} />,\r\n    // TelephoneReceiverEmoji: <TelephoneReceiver {...emojiProps} />,\r\n    // PartyPopperEmoji: <PartyPopper {...emojiProps} />,\r\n    // BalloonEmoji: <Balloon {...emojiProps} />,\r\n    // PushpinEmoji: <Pushpin {...emojiProps} />,\r\n    // ArtistPaletteEmoji: <ArtistPalette {...emojiProps} />,\r\n    // RingedPlanetEmoji: <RingedPlanet {...emojiProps} />,\r\n    // SnowflakeEmoji: <Snowflake {...emojiProps} />,\r\n    // GlobeWithMeridiansEmoji: <GlobeWithMeridians {...emojiProps} />,\r\n    // HighSpeedTrainEmoji: <HighSpeedTrain {...emojiProps} />,\r\n    // GrinningFaceEmoji: <GrinningFace {...emojiProps} />,\r\n\r\n    // PencilEmoji: <Pencile {...emojiProps} />,\r\n    // FaceWithDiagonalMouth: <FaceWithDiagonalMouth {...emojiProps} />,\r\n    // FaceWithRaisedEyebrow: <FaceWithRaisedEyebrow {...emojiProps} />,\r\n    // SlightlyFrowningFace: <SlightlyFrowningFace {...emojiProps} />,\r\n\r\n    // // Emoji for default template icon, do not delete it even no reference\r\n    // BullseyeEmoji: <Bullseye {...emojiProps} />,\r\n    // ShieldEmoji: <Shield {...emojiProps} />,\r\n    // SmilingFaceWithSmilingEyesEmoji: <SmilingFaceWithSmilingEyes {...emojiProps} />,\r\n    // SpiralNotepadEmoji: <SpiralNotepad {...emojiProps} />,\r\n    // TeddyBearEmoji: <TeddyBear {...emojiProps} />,\r\n    // NineOclockEmoji: <NineOclock {...emojiProps} />,\r\n    // BooksEmoji: <BooksEmoji {...emojiProps} />,\r\n    // ChartIncreasingEmoji: <ChartIncreasingEmoji {...emojiProps} />,\r\n    // ReceiptEmoji: <ReceiptEmoji {...emojiProps} />,\r\n    // CalendarEmoji: <CalendarEmoji {...emojiProps} />,\r\n    // PartyingFaceEmoji: <PartyingFaceEmoji {...emojiProps} />,\r\n    // PageFacingUpEmoji: <PageFacingUpEmoji {...emojiProps} />,\r\n    // NecktieEmoji: <NecktieEmoji {...emojiProps} />,\r\n    // ManSuperheroEmoji: <ManSuperheroEmoji {...emojiProps} />,\r\n    // PersonRowingBoatEmoji: <PersonRowingBoatEmoji {...emojiProps} />,\r\n    // FourLeafCloverEmoji: <FourLeafCloverEmoji {...emojiProps} />,\r\n    // ThinkingFaceEmoji: <ThinkingFaceEmoji {...emojiProps} />,\r\n    // BriefcaseEmoji: <BriefcaseEmoji {...emojiProps} />,\r\n    // SlightlySmilingFaceEmoji: <SlightlySmilingFaceEmoji {...emojiProps} />,\r\n    // CardIndexEmoji: <CardIndexEmoji {...emojiProps} />,\r\n    // HuggingFaceEmoji: <HuggingFaceEmoji {...emojiProps} />,\r\n    // TelescopeEmoji: <TelescopeEmoji {...emojiProps} />,\r\n    // SunriseEmoji: <SunriseEmoji {...emojiProps} />,\r\n    // SparklerEmoji: <SparklerEmoji {...emojiProps} />,\r\n    // LadyBeetleEmoji: <LadyBeetleEmoji {...emojiProps} />,\r\n    // NotebookEmoji: <NotebookEmoji {...emojiProps} />,\r\n    // FireExtinguisherEmoji: <FireExtinguisherEmoji {...emojiProps} />,\r\n    // BookmarkTabsEmoji: <BookmarkTabsEmoji {...emojiProps} />,\r\n    // FireEmoji: <FireEmoji {...emojiProps} />,\r\n} as const;\r\n\r\nexport function initFluentuiIcons(): void {\r\n    registerIcons({ icons });\r\n}\r\n\r\nexport type IconNameKey = keyof typeof icons;\r\n\r\nexport const IconName: {\r\n    [key in IconNameKey]: key;\r\n} = /* #__PURE__ */ Object.fromEntries(Object.keys(icons).map((k: string): [string, string] => [k, k])) as any;\r\n","import { Extension } from '@tiptap/core';\r\n\r\ndeclare module '@tiptap/core' {\r\n    interface Commands<ReturnType> {\r\n        backgroundColor: {\r\n            /**\r\n             * Set the backgroundColor\r\n             */\r\n            setBackgroundColor: (backgroundColor: string) => ReturnType;\r\n\r\n            /**\r\n             * Unset the backgroundColor\r\n             */\r\n            unsetBackgroundColor: () => ReturnType;\r\n        };\r\n    }\r\n}\r\n\r\nexport interface BackgroundColorOptions {\r\n    types: string[];\r\n}\r\n\r\nexport const BackgroundColor = Extension.create<BackgroundColorOptions>({\r\n    name: 'backgroundColor',\r\n\r\n    addOptions() {\r\n        return {\r\n            types: ['textStyle'],\r\n        };\r\n    },\r\n\r\n    addGlobalAttributes() {\r\n        return [\r\n            {\r\n                types: this.options.types,\r\n                attributes: {\r\n                    backgroundColor: {\r\n                        default: null,\r\n                        parseHTML: element => element.style.backgroundColor?.replace(/['\"]+/g, ''),\r\n                        renderHTML: attributes => {\r\n                            if (!attributes.backgroundColor) return {};\r\n                            return { style: `background-color: ${attributes.backgroundColor}` };\r\n                        },\r\n                    },\r\n                },\r\n            },\r\n        ];\r\n    },\r\n\r\n    addCommands() {\r\n        return {\r\n            setBackgroundColor:\r\n                backgroundColor =>\r\n                ({ chain }) =>\r\n                    chain().setMark('textStyle', { backgroundColor }).run(),\r\n            unsetBackgroundColor:\r\n                () =>\r\n                ({ chain }) =>\r\n                    chain().setMark('textStyle', { backgroundColor: null }).removeEmptyTextStyle().run(),\r\n        };\r\n    },\r\n});\r\n","import { ServiceOperation, ServiceResourceLocator } from '@addressbook/services-core';\r\nimport { GraphDriveItemResource } from './drive-item';\r\n\r\n/**\r\n * The drive resource.\r\n *\r\n * @see https://learn.microsoft.com/graph/api/resources/drive\r\n */\r\nexport class GraphDriveResource {\r\n    constructor(private operation: ServiceOperation, private locator: ServiceResourceLocator) {}\r\n\r\n    /**\r\n     * Navigates to the root drive item resource, with optional path.\r\n     *\r\n     * @param path The item path.\r\n     * @returns The item resource.\r\n     * @see https://learn.microsoft.com/graph/api/driveitem-get\r\n     */\r\n    root(path?: string): GraphDriveItemResource {\r\n        return new GraphDriveItemResource(this.operation, this.locator.extend(describeItem('root', path)));\r\n    }\r\n\r\n    /**\r\n     * Navigates to the drive item resource by id, with optional path.\r\n     *\r\n     * @param id The item id.\r\n     * @param path The item path.\r\n     * @returns The item resource.\r\n     * @see https://learn.microsoft.com/graph/api/driveitem-get\r\n     */\r\n    items(id: string, path?: string): GraphDriveItemResource {\r\n        return new GraphDriveItemResource(this.operation, this.locator.extend('items', describeItem(id, path)));\r\n    }\r\n}\r\n\r\n/**\r\n * Describes an item by id and optional path.\r\n *\r\n * @param id The item id.\r\n * @param path The item path.\r\n * @returns The item descriptor.\r\n * @see https://learn.microsoft.com/graph/api/driveitem-get\r\n */\r\nfunction describeItem(id: string, path?: string): string {\r\n    return `${id}${path ? `:/${encodePath(path)}:` : ''}`;\r\n}\r\n\r\n/**\r\n * Encodes a path. Each segment of the path must be encoded separately.\r\n *\r\n * @param path The file path.\r\n * @returns The encoded file path.\r\n * @see https://learn.microsoft.com/graph/onedrive-addressing-driveitems#path-encoding\r\n *\r\n * @example encodePath('foo/bar') // 'foo/bar'\r\n * @example encodePath('foo bar') // 'foo%20bar'\r\n */\r\nfunction encodePath(path: string): string {\r\n    return path.split('/').map(encodeURIComponent).join('/');\r\n}\r\n","import { ServiceInterceptor } from '../types';\r\n\r\nexport interface OnlineInterceptorOptions {\r\n    target?: Window;\r\n}\r\n\r\n/**\r\n * Create a service interceptor that waits until the target is online.\r\n *\r\n * @property target The target to check online status.\r\n * @returns An interceptor.\r\n */\r\nexport function createOnlineInterceptor({ target = window }: OnlineInterceptorOptions = {}): ServiceInterceptor {\r\n    return async (request, proceed) => {\r\n        await untilOnline(target);\r\n        return proceed(request);\r\n    };\r\n}\r\n\r\n/**\r\n * Wait until the target is online.\r\n *\r\n * @param target The target to check online status.\r\n * @returns A promise that resolves when the target is online.\r\n */\r\nasync function untilOnline(target: Window): Promise<void> {\r\n    if (target.navigator.onLine) return;\r\n    return new Promise(resolve => target.addEventListener('online', () => resolve(), { once: true }));\r\n}\r\n","import { app } from '@microsoft/teams-js';\r\n\r\ntype DeepPartial<T> = {\r\n    [P in keyof T]?: DeepPartial<T[P]>;\r\n};\r\n\r\ninterface FallbackData {\r\n    getContext: app.Context;\r\n    getAuthToken: string;\r\n}\r\n\r\n/**\r\n * Fallback data about Teams host.\r\n *\r\n * @remarks The runtime value may not obey the type definition strictly, since it's for testing or local development only.\r\n */\r\nconst fallbackData: FallbackData = {} as FallbackData;\r\n\r\n/**\r\n * Patch the fallback data about Teams host, which will be used when the Teams initialization fails.\r\n *\r\n * @param patchData The data to patch.\r\n * @remarks This function is for testing or local development only.\r\n */\r\nexport function patchTeamsFallbackData(patchData: DeepPartial<FallbackData>): void {\r\n    Object.assign(fallbackData, patchData);\r\n}\r\n\r\n/**\r\n * Fallback the promise by the selector of the fallback data.\r\n *\r\n * @param promise The promise that may fail.\r\n * @param selector The selector to get the fallback data.\r\n * @returns A promise resolved with the result of the promise or the fallback data if possible.\r\n */\r\nexport async function fallbackBySelector<T>(\r\n    promise: Promise<T>,\r\n    selector: (data: FallbackData) => T | undefined\r\n): Promise<T> {\r\n    try {\r\n        return await promise;\r\n    } catch (error) {\r\n        const fallbackValue = selector(fallbackData);\r\n        if (fallbackValue !== undefined) return fallbackValue;\r\n\r\n        throw error;\r\n    }\r\n}\r\n","/**\r\n * Parses json as object.\r\n *\r\n * @param json The json string to parse.\r\n * @returns The parsed object if the json string is valid. Otherwise, return undefined.\r\n */\r\nexport function parseJson(json?: string): unknown {\r\n    if (json === undefined) return;\r\n\r\n    try {\r\n        return JSON.parse(json);\r\n    } catch {\r\n        // Ignore the error.\r\n    }\r\n}\r\n\r\n/**\r\n * Parses json as string set.\r\n * If the json string is undefined, it will return an empty array.\r\n * If the json string is of an array, it will return an array with only string elements.\r\n * If the json string is of a string, it will return an array with the string as the only element.\r\n * Otherwise, it will return an array with the json string as the only element.\r\n *\r\n * @param json The json string to parse.\r\n * @returns The parsed string set array.\r\n *\r\n * @example parseJsonAsStringSet('') // []\r\n * @example parseJsonAsStringSet('[\"\", 1, true, \"Another\", \"Another\", \"Yet\"]') // ['Another', 'Yet']\r\n * @example parseJsonAsStringSet('42') // ['42']\r\n */\r\nexport function parseJsonAsStringSet(json?: string): string[] {\r\n    const parsed = parseJson(json);\r\n    const array = Array.isArray(parsed) ? parsed : typeof parsed === 'string' ? [parsed] : json ? [json] : [];\r\n    return normalizeStringSet(array);\r\n}\r\n\r\n/**\r\n * Normalizes string set, retaining only non-empty unique strings.\r\n *\r\n * @param array The string set array to normalize.\r\n * @returns The normalized string set array.\r\n *\r\n * @example normalizeStringSet(['', 1, true, undefined, null, 'Another', 'Another', 'Yet']) // ['Another', 'Yet']\r\n */\r\nexport function normalizeStringSet(array: unknown[]): string[] {\r\n    return [...new Set(array.filter((o): o is string => typeof o === 'string' && Boolean(o)))];\r\n}\r\n","export type TeamsContextTheme = 'default' | 'dark' | 'contrast';\r\n\r\nconst knownThemes: TeamsContextTheme[] = ['default', 'dark', 'contrast'];\r\nconst fallbackTheme: TeamsContextTheme = 'default';\r\n\r\n/**\r\n * Coerce the theme to a known value.\r\n *\r\n * @param theme The theme to coerce.\r\n * @returns The coerced theme.\r\n */\r\nexport function coerceTeamsTheme(theme: string): TeamsContextTheme {\r\n    return knownThemes.find(knownTheme => knownTheme === theme) ?? fallbackTheme;\r\n}\r\n","import { FocusZone } from '@fluentui/react';\r\nimport React from 'react';\r\nimport { FieldProps } from '../../../abstractions';\r\nimport { FormContext, FormEntry, FormFeature, FormQuestion } from '../../types';\r\nimport { ChoiceSettings } from './ChoiceSettings';\r\nimport { DesigningActions } from './DesigningActions';\r\nimport { useActiveDesigningDecoratorStyles } from './DesigningDecorator.styles';\r\nimport { MockedField } from './MockedField';\r\nimport { PrimarySettings } from './PrimarySettings';\r\nimport { RestrictionSettings } from './RestrictionSettings';\r\nimport { SecondarySettings } from './SecondarySettings';\r\nimport { QuestionSettingsProps } from './types';\r\n\r\nexport function ActiveDesigningDecorator(props: FieldProps<FormEntry, FormContext, FormFeature>): JSX.Element {\r\n    const { entry, feature, onEntryChange } = props;\r\n    const { question } = entry;\r\n    const { constants, strings } = feature;\r\n\r\n    const onQuestionChange = React.useCallback(\r\n        (newQuestion: FormQuestion) => {\r\n            // Delete answer content when question changes\r\n            const newEntry = { ...entry };\r\n            newEntry.question = newQuestion;\r\n            delete newEntry.answer.content;\r\n            onEntryChange?.(newEntry);\r\n        },\r\n        [entry, onEntryChange]\r\n    );\r\n\r\n    const styles = useActiveDesigningDecoratorStyles();\r\n    const settingsProps: QuestionSettingsProps = { question, onQuestionChange, constants, strings };\r\n\r\n    return (\r\n        <div className={styles.root}>\r\n            <FocusZone className={styles.settings}>\r\n                <PrimarySettings {...settingsProps} />\r\n                <MockedField {...settingsProps} />\r\n                <ChoiceSettings {...settingsProps} />\r\n                <div className={styles.separator} role='separator' />\r\n                <SecondarySettings {...settingsProps} />\r\n                <RestrictionSettings {...settingsProps} />\r\n            </FocusZone>\r\n            <FocusZone className={styles.actions}>\r\n                <DesigningActions {...props} />\r\n            </FocusZone>\r\n        </div>\r\n    );\r\n}\r\n","export * from './Form';\r\nexport * from './FormFragment';\r\nexport * from './types';\r\n","import { ServiceOperation, ServiceResourceLocator } from '@addressbook/services-core';\r\n\r\n/**\r\n * The profile photo resource.\r\n *\r\n * @see https://learn.microsoft.com/graph/api/resources/profilephoto\r\n */\r\nexport class GraphProfilePhotoResource {\r\n    constructor(private operation: ServiceOperation, private locator: ServiceResourceLocator) {}\r\n\r\n    /**\r\n     * Gets the profile photo content.\r\n     *\r\n     * @param signal The abort signal.\r\n     * @returns The profile photo content.\r\n     * @see https://learn.microsoft.com/graph/api/profilephoto-get\r\n     */\r\n    download(signal?: AbortSignal): Promise<Blob> {\r\n        const url = `/v1.0/${this.locator.path}/$value`;\r\n        return this.operation.requestBlob(url, { signal });\r\n    }\r\n}\r\n","/*\r\n *  Copyright © Microsoft Corporation. All rights reserved.\r\n */\r\n\r\nexport * from './CommonModal.component';\r\nexport * from './CommonModal.styles';\r\nexport * from './ModalContent';\r\n","export * from './drive';\r\nexport * from './drive-item';\r\nexport * from './group';\r\nexport * from './profile-photo';\r\nexport * from './root';\r\nexport * from './share';\r\nexport * from './thumbnail';\r\nexport * from './user';\r\n","/*\r\n *  Copyright © Microsoft Corporation. All rights reserved.\r\n */\r\n\r\nimport { IPanelStyles } from '@fluentui/react';\r\nimport { isDarkTheme } from '@addressbook/components-fluentui-teams-theme';\r\nimport { makeStyles } from '../styles/makeStyles';\r\n\r\nexport const usePanelStyles = /* #__PURE__*/ makeStyles<Partial<IPanelStyles>>(theme => ({\r\n    main: {\r\n        animation: 'none',\r\n        backgroundColor: isDarkTheme(theme.name) ? theme.palette.neutralLight : undefined,\r\n    },\r\n    scrollableContent: {\r\n        flexDirection: 'column',\r\n        width: '100%',\r\n        height: '100%',\r\n        display: 'flex',\r\n    },\r\n    commands: {\r\n        padding: 0,\r\n        borderBottom: `1px solid ${theme.palette.neutralTertiaryAlt}`,\r\n        alignItems: 'center',\r\n        justifyContent: 'flex-start',\r\n    },\r\n    navigation: {\r\n        height: 'auto',\r\n    },\r\n    content: {\r\n        padding: '24px 4px',\r\n        flex: '1 1 auto',\r\n        overflowY: 'auto', // fallback for FireFox\r\n        'overflow-y': 'overlay', // make scrollbar float over content\r\n    },\r\n    contentInner: {\r\n        height: '100%',\r\n    },\r\n}));\r\n","import { ServiceInterceptor } from '../types';\r\n\r\n/**\r\n * A authenticate function to be called when a request is made, to allocate an access token.\r\n *\r\n * @param request The request to allocate the token for.\r\n * @returns An access token to be attached to the request, or an empty string if no token is available.\r\n */\r\nexport type Authenticate = (request: Request) => Promise<string>;\r\n\r\n/**\r\n * Create a service interceptor to authorize requests.\r\n *\r\n * @param authenticate The authenticate function.\r\n * @returns An interceptor.\r\n */\r\nexport function createAuthorizationInterceptor(authenticate: Authenticate): ServiceInterceptor {\r\n    return async (request, proceed) => {\r\n        const token = await authenticate(request);\r\n        const authorizedRequest = token ? authorize(request, token) : request;\r\n        return proceed(authorizedRequest);\r\n    };\r\n}\r\n\r\nfunction authorize(request: Request, token: string): Request {\r\n    const authorizedRequest = new Request(request);\r\n    authorizedRequest.headers.set('Authorization', `Bearer ${token}`);\r\n    return authorizedRequest;\r\n}\r\n","import { makeStyles } from '@addressbook/components-fluentui-teams-theme';\r\n\r\nexport const useDesigningTrailingActionsStyles = makeStyles({\r\n    root: {\r\n        display: 'flex',\r\n        flexDirection: 'row',\r\n        alignItems: 'center',\r\n    },\r\n});\r\n","import React from 'react';\r\n\r\nexport interface UseDropOptions {\r\n    accept: (data: DataTransfer) => boolean;\r\n    consume?: (data: DataTransfer) => void;\r\n    disabled?: boolean;\r\n}\r\n\r\n/**\r\n * A Hook to handle drag and drop events as a drop target.\r\n *\r\n * @property accept A function to determine if the data is accepted.\r\n * @property consume A function to consume the data.\r\n * @property disabled A flag to disable the drop target.\r\n * @returns a tuple of dragging state and a ref to the drop target element.\r\n */\r\nexport function useDrop<Element extends HTMLElement>({\r\n    accept,\r\n    consume,\r\n    disabled,\r\n}: UseDropOptions): [boolean, React.Ref<Element>] {\r\n    const elementRef = React.useRef<Element>(null);\r\n    const [dragging, setDragging] = React.useState(false);\r\n\r\n    const guard = React.useCallback(\r\n        (handler: (data: DataTransfer) => void, prevent?: boolean) => (event: DragEvent) => {\r\n            if (event.relatedTarget) return;\r\n\r\n            const data = event.dataTransfer;\r\n            if (!data || !accept(data)) return;\r\n\r\n            if (prevent) event.preventDefault();\r\n            handler(data);\r\n        },\r\n        [accept]\r\n    );\r\n\r\n    React.useEffect(() => {\r\n        if (disabled) return;\r\n\r\n        const element = elementRef.current;\r\n        if (!element) return;\r\n\r\n        const enter = guard(() => setDragging(true));\r\n        // eslint-disable-next-line @typescript-eslint/no-empty-function\r\n        const over = guard(() => {}, true);\r\n        const leave = guard(() => setDragging(false));\r\n        const drop = guard(data => consume?.(data), true);\r\n\r\n        const controller = new AbortController();\r\n        element.ownerDocument.addEventListener('dragenter', enter, { signal: controller.signal, capture: true });\r\n        element.ownerDocument.addEventListener('dragover', over, { signal: controller.signal, capture: true });\r\n        element.ownerDocument.addEventListener('dragleave', leave, { signal: controller.signal, capture: true });\r\n        element.ownerDocument.addEventListener('drop', leave, { signal: controller.signal, capture: true });\r\n        element.addEventListener('drop', drop, { signal: controller.signal });\r\n        return () => controller.abort();\r\n    }, [consume, disabled, elementRef, guard]);\r\n\r\n    return [dragging, elementRef];\r\n}\r\n","import { Extension } from '@tiptap/core';\r\nimport { Plugin } from '@tiptap/pm/state';\r\n\r\nexport interface HackOptions {\r\n    disableScrolledIntoView?: boolean;\r\n}\r\n\r\nexport const Hack = Extension.create<HackOptions>({\r\n    name: 'hack',\r\n\r\n    addProseMirrorPlugins() {\r\n        const plugins: Plugin[] = [];\r\n\r\n        /**\r\n         * To take control of the `scrolledIntoView` property of the transaction, and force it to be `false`.\r\n         * This is a workaround for the issue that auto scrolling (when typing) not working well with relative\r\n         * positioning with overflow mechanism.\r\n         *\r\n         * For example, in the `CommentsViewingsItem` component, when `dockedPostComment` is enabled.\r\n         *\r\n         * @see https://github.com/ProseMirror/prosemirror-state/blob/88e2a24104481098f0f660e74240c0f846e7fd6e/src/state.ts#L39\r\n         * @see https://github.com/ProseMirror/prosemirror-view/blob/2da3ae39492a2d74206c98fb6acc178277cfd7f2/src/index.ts#L180\r\n         * @see https://github.com/ProseMirror/prosemirror-view/blob/2da3ae39492a2d74206c98fb6acc178277cfd7f2/src/index.ts#L237\r\n         * @see https://github.com/ProseMirror/prosemirror-view/blob/2da3ae39492a2d74206c98fb6acc178277cfd7f2/src/domcoords.ts#L32\r\n         */\r\n        if (this.options.disableScrolledIntoView) {\r\n            plugins.push(\r\n                new Plugin({\r\n                    filterTransaction: tr => {\r\n                        Object.defineProperty(tr, 'scrolledIntoView', { value: false });\r\n                        return true;\r\n                    },\r\n                })\r\n            );\r\n        }\r\n\r\n        return plugins;\r\n    },\r\n});\r\n","export * from './MockedField';\r\n","import { ActionButton, IconButton, mergeStyles, TextField } from '@fluentui/react';\r\nimport React from 'react';\r\nimport { ChoiceAction, ChoiceAppearance, FormQuestionType } from '../../../types';\r\nimport { getNewChoice, useTextFieldStyles } from '../../../utilities';\r\nimport { QuestionSettingsProps } from '../types';\r\nimport { useChoiceSettingsStyles } from './ChoiceSettings.styles';\r\n\r\nexport function ChoiceSettings({\r\n    question,\r\n    onQuestionChange,\r\n    constants,\r\n    strings,\r\n}: QuestionSettingsProps): JSX.Element | null {\r\n    const styles = useChoiceSettingsStyles();\r\n    const textFieldStyles = useTextFieldStyles();\r\n\r\n    if (question.type !== FormQuestionType.Choice) return null;\r\n\r\n    const reachMinChoices = question.choices.length <= constants.minChoices;\r\n    const reachMaxChoices = question.choices.length >= constants.maxChoices;\r\n\r\n    const decoratorClassName =\r\n        question.appearance === ChoiceAppearance.Checkbox\r\n            ? mergeStyles(styles.decorator, styles.checkbox)\r\n            : question.appearance === ChoiceAppearance.Radio\r\n            ? mergeStyles(styles.decorator, styles.radio)\r\n            : undefined;\r\n\r\n    const decorator = decoratorClassName && <div className={decoratorClassName} />;\r\n\r\n    return (\r\n        <div className={styles.root}>\r\n            {question.choices.map((choice, index) => (\r\n                <div className={styles.choiceRow} key={index}>\r\n                    {decorator}\r\n                    <TextField\r\n                        value={choice}\r\n                        onChange={(_, value) => {\r\n                            const newChoices = [...question.choices];\r\n                            newChoices[index] = value ?? '';\r\n                            onQuestionChange({ ...question, choices: newChoices });\r\n                        }}\r\n                        maxLength={constants.maxChoiceLength}\r\n                        placeholder={strings.choicePlaceholder}\r\n                        styles={textFieldStyles}\r\n                    />\r\n                    <IconButton\r\n                        iconProps={{ iconName: 'Delete' }}\r\n                        title={strings.choiceAction(ChoiceAction.Delete)}\r\n                        disabled={reachMinChoices}\r\n                        onClick={() => {\r\n                            const newChoices = [...question.choices];\r\n                            newChoices.splice(index, 1);\r\n                            onQuestionChange({ ...question, choices: newChoices });\r\n                        }}\r\n                    />\r\n                    <IconButton\r\n                        iconProps={{ iconName: 'Up' }}\r\n                        title={strings.choiceAction(ChoiceAction.MoveUp)}\r\n                        disabled={index === 0}\r\n                        onClick={() => {\r\n                            const newChoices = [...question.choices];\r\n                            [newChoices[index - 1], newChoices[index]] = [newChoices[index], newChoices[index - 1]];\r\n                            onQuestionChange({ ...question, choices: newChoices });\r\n                        }}\r\n                    />\r\n                    <IconButton\r\n                        iconProps={{ iconName: 'Down' }}\r\n                        title={strings.choiceAction(ChoiceAction.MoveDown)}\r\n                        disabled={index === question.choices.length - 1}\r\n                        onClick={() => {\r\n                            const newChoices = [...question.choices];\r\n                            [newChoices[index + 1], newChoices[index]] = [newChoices[index], newChoices[index + 1]];\r\n                            onQuestionChange({ ...question, choices: newChoices });\r\n                        }}\r\n                    />\r\n                </div>\r\n            ))}\r\n            {question.allowOther && (\r\n                <div className={styles.choiceRow}>\r\n                    {decorator}\r\n                    <TextField placeholder={strings.choiceOther} disabled styles={textFieldStyles} />\r\n                    <IconButton\r\n                        iconProps={{ iconName: 'Delete' }}\r\n                        title={strings.choiceAction(ChoiceAction.Delete)}\r\n                        onClick={() => {\r\n                            const newQuestion = { ...question };\r\n                            delete newQuestion.allowOther;\r\n                            onQuestionChange(newQuestion);\r\n                        }}\r\n                    />\r\n                    <IconButton\r\n                        className={styles.hidden}\r\n                        iconProps={{ iconName: 'Up' }}\r\n                        title={strings.choiceAction(ChoiceAction.MoveUp)}\r\n                        disabled\r\n                    />\r\n                    <IconButton\r\n                        className={styles.hidden}\r\n                        iconProps={{ iconName: 'Down' }}\r\n                        title={strings.choiceAction(ChoiceAction.MoveDown)}\r\n                        disabled\r\n                    />\r\n                </div>\r\n            )}\r\n            <div className={styles.actionRow}>\r\n                <ActionButton\r\n                    iconProps={{ iconName: 'Add' }}\r\n                    text={strings.choiceAction(ChoiceAction.Add)}\r\n                    disabled={reachMaxChoices}\r\n                    onClick={() => {\r\n                        const newChoices = [...question.choices, getNewChoice(strings, question.choices)];\r\n                        onQuestionChange({ ...question, choices: newChoices });\r\n                    }}\r\n                />\r\n                {!question.allowOther && (\r\n                    <ActionButton\r\n                        text={strings.choiceAction(ChoiceAction.AddOther)}\r\n                        onClick={() => onQuestionChange({ ...question, allowOther: true })}\r\n                    />\r\n                )}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n","import { makeStyles } from '@addressbook/components-fluentui-teams-theme';\r\n\r\nexport const useRestrictionSettingsStyles = makeStyles(theme => ({\r\n    row: {\r\n        display: 'flex',\r\n        flexDirection: 'row',\r\n        alignItems: 'center',\r\n        gap: '8px',\r\n        flexWrap: 'wrap',\r\n        maxWidth: '400px',\r\n        '> .ms-Dropdown-container': {\r\n            flexGrow: 3,\r\n            flexBasis: '160px',\r\n        },\r\n    },\r\n    values: {\r\n        flex: '1 0 min-content',\r\n\r\n        display: 'flex',\r\n        flexDirection: 'row',\r\n        alignItems: 'center',\r\n        gap: '8px',\r\n\r\n        '> .ms-TextField': {\r\n            flexGrow: 1,\r\n            minWidth: '64px',\r\n        },\r\n    },\r\n    between: {\r\n        gap: '20px',\r\n\r\n        position: 'relative',\r\n        ':before': {\r\n            content: '\"\"',\r\n            position: 'absolute',\r\n            insetBlock: 'calc((100% - 1px) / 2)',\r\n            insetInline: 'calc((100% - 4px) / 2)',\r\n            backgroundColor: theme.palette.black,\r\n        },\r\n    },\r\n}));\r\n","import { ServiceOperation, ServiceResourceLocator } from '@addressbook/services-core';\r\nimport { AccessSharingLinkOptions } from '../types';\r\n\r\n/**\r\n * The thumbnail resource.\r\n *\r\n * @see https://learn.microsoft.com/graph/api/resources/thumbnail\r\n */\r\nexport class GraphThumbnailResource {\r\n    constructor(private operation: ServiceOperation, private locator: ServiceResourceLocator) {}\r\n\r\n    /**\r\n     * Downloads the thumbnail content.\r\n     *\r\n     * @param options The download options.\r\n     * @param signal The abort signal.\r\n     * @returns The thumbnail content.\r\n     * @see https://learn.microsoft.com/graph/api/driveitem-list-thumbnails#retrieve-thumbnail-binary-content\r\n     */\r\n    async download({ prefer }: AccessSharingLinkOptions = {}, signal?: AbortSignal): Promise<Blob> {\r\n        const url = `/v1.0/${this.locator.path}/content`;\r\n        return this.operation.requestBlob(url, { headers: prefer ? { Prefer: prefer } : {}, signal });\r\n    }\r\n}\r\n","/*\r\n *  Copyright © Microsoft Corporation. All rights reserved.\r\n */\r\nimport React from 'react';\r\nimport { useBoolean, useId } from '@fluentui/react-hooks';\r\nimport { Icon, IStyle, mergeStyles } from '@fluentui/react';\r\nimport { CollapsedClassName, useCollapsingAreaStyles } from './CollapsingArea.styles';\r\n\r\nexport interface ICollapsingAreaProps {\r\n    title: string | JSX.Element;\r\n    farItems?: JSX.Element;\r\n    collapseIcon: string;\r\n    expandIcon: string;\r\n    collapse?: boolean;\r\n    titleClassName?: string;\r\n    styles?: CollapsingAreaStyles;\r\n}\r\n\r\nexport interface CollapsingAreaStyles {\r\n    button?: IStyle | string;\r\n    icon?: IStyle | string;\r\n    text?: IStyle | string;\r\n    collapsibleRegion?: IStyle | string;\r\n}\r\n\r\nexport const CollapsingArea: React.FC<ICollapsingAreaProps> = ({\r\n    title,\r\n    collapse,\r\n    collapseIcon,\r\n    expandIcon,\r\n    children,\r\n    titleClassName,\r\n    farItems,\r\n    styles,\r\n}: React.PropsWithChildren<ICollapsingAreaProps>): JSX.Element => {\r\n    const [collapsedState, { toggle }] = useBoolean(collapse ?? false);\r\n    const collapsingAreaStyles = useCollapsingAreaStyles();\r\n    const ariaControlsId = useId('collapsible-region-');\r\n\r\n    return (\r\n        <div className={collapsedState ? CollapsedClassName : 'is-expanded'}>\r\n            <div className={mergeStyles(collapsingAreaStyles.title, titleClassName)}>\r\n                <button\r\n                    className={mergeStyles(collapsingAreaStyles.button, styles?.button)}\r\n                    onClick={toggle}\r\n                    aria-expanded={!collapsedState}\r\n                    aria-controls={ariaControlsId}>\r\n                    <Icon\r\n                        className={mergeStyles(collapsingAreaStyles.icon, styles?.icon)}\r\n                        iconName={collapsedState ? collapseIcon : expandIcon}\r\n                    />\r\n                    <div className={mergeStyles(collapsingAreaStyles.text, styles?.text)}>{title}</div>\r\n                </button>\r\n                {farItems}\r\n            </div>\r\n\r\n            <div\r\n                id={ariaControlsId}\r\n                className={mergeStyles(collapsingAreaStyles.collapsibleRegion, styles?.collapsibleRegion)}>\r\n                {children}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n","import React from 'react';\r\n\r\nconst pointerEventName = 'pointerdown';\r\nconst keyboardEventName = 'keydown';\r\n\r\nconst layerHostId = 'fluent-default-layer-host';\r\n\r\nexport interface UseActiveParams {\r\n    active: boolean;\r\n    setActive: (active: boolean) => void;\r\n}\r\n\r\n/**\r\n * A hook that manages the active state of an element.\r\n * - The element is activated or deactivated when pointer events and keyboard events happen.\r\n * - The active element is ensured to be visible when some mutation happens in the parent element.\r\n *\r\n * @property active The current active state.\r\n * @property setActive A function that sets the active state.\r\n * @returns A ref that should be attached to the element that should be managed.\r\n */\r\nexport function useActive<Element extends HTMLElement>({ active, setActive }: UseActiveParams): React.Ref<Element> {\r\n    const elementRef = React.useRef<Element>(null);\r\n\r\n    const activeRef = React.useRef(active);\r\n    activeRef.current = active;\r\n\r\n    const setActiveRef = React.useRef(setActive);\r\n    setActiveRef.current = setActive;\r\n\r\n    React.useEffect(() => {\r\n        const element = elementRef.current;\r\n        if (!element) return;\r\n\r\n        const pointerHandler = (event: PointerEvent): void => {\r\n            if (happensInDifferentLayers(element, event)) return;\r\n\r\n            const nextActive = happensInElement(element, event);\r\n            if (nextActive === activeRef.current) return;\r\n            setActiveRef.current(nextActive);\r\n\r\n            if (nextActive) element.focus();\r\n        };\r\n\r\n        const keyHandler = (event: KeyboardEvent): void => {\r\n            if (happensInDifferentLayers(element, event)) return;\r\n\r\n            const inElement = happensInElement(element, event);\r\n            const onElement = event.target === element;\r\n\r\n            const nextActive = getNextActiveOnKeyboardEvent(activeRef.current, event.key, inElement, onElement);\r\n            if (nextActive === activeRef.current) return;\r\n            setActiveRef.current(nextActive);\r\n\r\n            if (onElement) {\r\n                element.focus();\r\n                event.preventDefault();\r\n            }\r\n        };\r\n\r\n        const document = element.ownerDocument;\r\n        const controller = new AbortController();\r\n        document.addEventListener(pointerEventName, pointerHandler, { signal: controller.signal, capture: true });\r\n        document.addEventListener(keyboardEventName, keyHandler, { signal: controller.signal, capture: true });\r\n        return () => controller.abort();\r\n    }, []);\r\n\r\n    React.useEffect(() => {\r\n        if (!active) return;\r\n\r\n        const element = elementRef.current;\r\n        if (!element) return;\r\n\r\n        const parentElement = element.parentElement;\r\n        if (!parentElement) return;\r\n\r\n        ensureElementVisible(element);\r\n        const observer = new MutationObserver(() => ensureElementVisible(element));\r\n\r\n        observer.observe(parentElement, { childList: true });\r\n        return () => observer.disconnect();\r\n    }, [active]);\r\n\r\n    return elementRef;\r\n}\r\n\r\n/**\r\n * Determines if the event happens in the element.\r\n *\r\n * @param element The element.\r\n * @param event The event.\r\n * @returns Whether the event happens in the element.\r\n */\r\nfunction happensInElement(element: Element, event: Event): boolean {\r\n    return event.target instanceof Node && element.contains(event.target);\r\n}\r\n\r\n/**\r\n * Determines if the event happens in different layers. Layer is a concept in Fluent UI.\r\n *\r\n * @param element The element.\r\n * @param event The event.\r\n * @returns Whether the event happens in different layers.\r\n */\r\nfunction happensInDifferentLayers(element: Element, event: Event): boolean {\r\n    const layerHost = document.getElementById(layerHostId);\r\n    if (!layerHost) return false;\r\n\r\n    const targetLayer = Array.from(layerHost.children).find(layer => happensInElement(layer, event));\r\n    if (!targetLayer) return false;\r\n\r\n    return !targetLayer.contains(element);\r\n}\r\n\r\n/**\r\n * Determines the next active state based on the keyboard event.\r\n *\r\n * - Enter: Activates the element if the event happens in the element; deactivates the element otherwise.\r\n * - Escape: Deactivates the element if the event happens in the element; leaves the active state unchanged otherwise.\r\n * - Space: Deactivates the element if the event happens on but not in the element; activates the element if the event happens on the element.\r\n * - Other keys: Leaves the active state unchanged.\r\n *\r\n * @param current The current active state.\r\n * @param key The key of the keyboard event.\r\n * @param inElement Indicates if the event happens in the element.\r\n * @param onElement Indicates if the event happens on the element.\r\n * @returns The next active state.\r\n */\r\nfunction getNextActiveOnKeyboardEvent(current: boolean, key: string, inElement: boolean, onElement: boolean): boolean {\r\n    switch (key) {\r\n        case 'Enter':\r\n            return inElement;\r\n        case 'Escape':\r\n            return current && !inElement;\r\n        case ' ':\r\n            return current ? inElement && !onElement : onElement;\r\n        default:\r\n            return current;\r\n    }\r\n}\r\n\r\n/**\r\n * Ensures the element is visible in the viewport by scrolling it into view.\r\n *\r\n * @param element The element.\r\n */\r\nfunction ensureElementVisible(element: Element): void {\r\n    element.scrollIntoView({ block: 'nearest', behavior: 'smooth' });\r\n}\r\n","/*\r\n *  Copyright © Microsoft Corporation. All rights reserved.\r\n */\r\n\r\nexport * from './ContentCopyRequestModal.component';\r\nexport type { ContentCopyRequestProps } from './ContentCopyRequestModalContent';\r\n","import React from 'react';\r\nimport { BaseFormContext, BaseFormFeature, FormFragmentProps } from './types';\r\n\r\n/**\r\n * A form fragment is responsible for rendering a single form entry with the given context and feature.\r\n *\r\n * It makes onEntryChange's reference stable so that the entry component can memoize depending on it.\r\n */\r\nexport function FormFragment<\r\n    Entry,\r\n    Context extends BaseFormContext<Entry>,\r\n    Feature extends BaseFormFeature<Entry, Context, Feature>\r\n>(props: FormFragmentProps<Context, Feature>): JSX.Element | null {\r\n    const { context, feature, onContextChange, index } = props;\r\n    const { entries } = context;\r\n    const { descriptors } = feature;\r\n\r\n    const contextRef = React.useRef(context);\r\n    contextRef.current = context;\r\n    const onContextChangeRef = React.useRef(onContextChange);\r\n    onContextChangeRef.current = onContextChange;\r\n\r\n    const entry = entries[index];\r\n    const onEntryChange = React.useCallback(\r\n        (entry: Entry): void => {\r\n            const context = contextRef.current;\r\n            const onContextChange = onContextChangeRef.current;\r\n            if (!onContextChange) return;\r\n\r\n            const newEntries = [...context.entries];\r\n            newEntries[index] = entry;\r\n            onContextChangeRef.current?.({ ...context, entries: newEntries });\r\n        },\r\n        [index]\r\n    );\r\n\r\n    // Find the first descriptor that matches the entry.\r\n    const descriptor = descriptors.find(descriptor => descriptor.test(entry, context, feature));\r\n    if (!descriptor) return null;\r\n\r\n    return descriptor.render({ entry, onEntryChange, ...props });\r\n}\r\n","export * from './extension';\r\n","export * from './choice';\r\nexport * from './designing';\r\nexport * from './hooks';\r\nexport * from './styles';\r\nexport * from './types';\r\nexport * from './validation';\r\n","import { Toggle } from '@fluentui/react';\r\nimport React from 'react';\r\nimport { FormQuestionType, TextNumberRestrictionType } from '../../../types';\r\nimport { deriveTextNumberRestriction, useToggleStyles } from '../../../utilities';\r\nimport { QuestionSettingsProps } from '../types';\r\nimport { useSecondarySettingsStyles } from './SecondarySettings.styles';\r\n\r\nexport function SecondarySettings({ question, onQuestionChange, strings }: QuestionSettingsProps): JSX.Element {\r\n    const styles = useSecondarySettingsStyles();\r\n    const toggleStyles = useToggleStyles();\r\n\r\n    return (\r\n        <div className={styles.row}>\r\n            <Toggle\r\n                checked={question.required}\r\n                onChange={(_, checked) => {\r\n                    const newQuestion = { ...question };\r\n                    if (checked) {\r\n                        newQuestion.required = true;\r\n                    } else {\r\n                        delete newQuestion.required;\r\n                    }\r\n                    onQuestionChange(newQuestion);\r\n                }}\r\n                label={strings.questionRequired}\r\n                inlineLabel\r\n                styles={toggleStyles}\r\n            />\r\n            {question.type === FormQuestionType.Choice && (\r\n                <Toggle\r\n                    checked={question.shuffle}\r\n                    onChange={(_, checked) => {\r\n                        const newQuestion = { ...question };\r\n                        if (checked) {\r\n                            newQuestion.shuffle = true;\r\n                        } else {\r\n                            delete newQuestion.shuffle;\r\n                        }\r\n                        onQuestionChange(newQuestion);\r\n                    }}\r\n                    label={strings.questionShuffle}\r\n                    inlineLabel\r\n                    styles={toggleStyles}\r\n                />\r\n            )}\r\n            {question.type === FormQuestionType.Text && question.number && (\r\n                <Toggle\r\n                    checked={Boolean(question.restriction)}\r\n                    onChange={(_, checked) => {\r\n                        const newQuestion = { ...question };\r\n                        if (checked) {\r\n                            newQuestion.restriction = deriveTextNumberRestriction(\r\n                                TextNumberRestrictionType.GreaterThan\r\n                            );\r\n                        } else {\r\n                            delete newQuestion.restriction;\r\n                        }\r\n                        onQuestionChange(newQuestion);\r\n                    }}\r\n                    label={strings.questionRestriction}\r\n                    inlineLabel\r\n                    styles={toggleStyles}\r\n                />\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n","import { NodeViewProps } from '@tiptap/core';\r\nimport { Attrs } from '@tiptap/pm/model';\r\nimport React from 'react';\r\nimport { FileSessionKey } from './sessions';\r\n\r\ninterface UseFileNodeOperationOptions {\r\n    editor: NodeViewProps['editor'];\r\n    key: FileSessionKey;\r\n}\r\n\r\ntype UpdateAttributes<Attributes> = (attrs: Partial<Attributes>, withoutHistory?: boolean) => void;\r\n\r\n/**\r\n * A hook to make a function to update attributes.\r\n *\r\n * @property editor The editor.\r\n * @property key The key of the file session.\r\n * @returns The function to update attributes.\r\n */\r\nexport function useUpdateAttributes<Attributes extends Attrs>({\r\n    editor,\r\n    key,\r\n}: UseFileNodeOperationOptions): UpdateAttributes<Attributes> {\r\n    return React.useCallback(\r\n        (attrs, withoutHistory) => {\r\n            const tr = editor.state.tr;\r\n            tr.doc.descendants((node, pos) => {\r\n                if (node.attrs.key !== key) return;\r\n\r\n                tr.setNodeMarkup(pos, undefined, { ...node.attrs, ...attrs });\r\n                return false;\r\n            });\r\n            if (withoutHistory) tr.setMeta('addToHistory', false);\r\n            editor.view.dispatch(tr);\r\n        },\r\n        [editor, key]\r\n    );\r\n}\r\n\r\ntype DeleteNode = (withoutHistory?: boolean) => void;\r\n\r\n/**\r\n * A hook to make a function to delete a node.\r\n *\r\n * @property editor The editor.\r\n * @property key The key of the file session.\r\n * @returns The function to delete a node.\r\n */\r\nexport function useDeleteNode({ editor, key }: UseFileNodeOperationOptions): DeleteNode {\r\n    return React.useCallback(\r\n        withoutHistory => {\r\n            const tr = editor.state.tr;\r\n            tr.doc.descendants((node, pos) => {\r\n                if (node.attrs.key !== key) return;\r\n\r\n                tr.delete(pos, pos + node.nodeSize);\r\n                return false;\r\n            });\r\n            if (withoutHistory) tr.setMeta('addToHistory', false);\r\n            editor.view.dispatch(tr);\r\n        },\r\n        [editor, key]\r\n    );\r\n}\r\n\r\n/**\r\n * Accomodate policy for an image.\r\n *\r\n * @property Width Scale the width equal to the container.\r\n * @property Height Scale the height equal to the container.\r\n * @property Contain Scale the image within the container, maintaining aspect ratio.\r\n * @property ScaleDown Similar to contain, but only scale down.\r\n * @property Cover Scale the image to cover the container, maintaining aspect ratio.\r\n */\r\nexport enum AccomodatePolicy {\r\n    Width,\r\n    Height,\r\n    Contain,\r\n    ScaleDown,\r\n    Cover,\r\n}\r\n\r\nexport interface AccomodateImageOptions {\r\n    selector: string;\r\n    policy: AccomodatePolicy;\r\n}\r\n\r\n/**\r\n * Accommodate an image in a container, scaling it to fit the container while maintaining aspect ratio.\r\n *\r\n * @param image The image.\r\n * @property selector The selector of the container.\r\n * @property policy The policy to accommodate the image.\r\n */\r\nexport function accommodateImage(image: HTMLImageElement, { selector, policy }: AccomodateImageOptions): void {\r\n    const container = image.closest(selector);\r\n    if (!container) return;\r\n\r\n    const containerWidth = container.clientWidth;\r\n    const containerHeight = container.clientHeight;\r\n\r\n    const imageWidth = image.naturalWidth;\r\n    const imageHeight = image.naturalHeight;\r\n\r\n    const scale =\r\n        policy === AccomodatePolicy.Width\r\n            ? containerWidth / imageWidth\r\n            : policy === AccomodatePolicy.Height\r\n            ? containerHeight / imageHeight\r\n            : policy === AccomodatePolicy.Contain\r\n            ? Math.min(containerWidth / imageWidth, containerHeight / imageHeight)\r\n            : policy === AccomodatePolicy.ScaleDown\r\n            ? Math.min(containerWidth / imageWidth, containerHeight / imageHeight, 1)\r\n            : policy === AccomodatePolicy.Cover\r\n            ? Math.max(containerWidth / imageWidth, containerHeight / imageHeight)\r\n            : 1;\r\n\r\n    image.width = imageWidth * scale;\r\n    image.height = imageHeight * scale;\r\n}\r\n","/*\r\n *  Copyright © Microsoft Corporation. All rights reserved.\r\n */\r\n\r\nimport { IModalStyles } from '@fluentui/react';\r\nimport { makeStyles } from '../styles/makeStyles';\r\n\r\nconst horizontalPaddingGap = '1.875rem';\r\nexport const useCopyRequestModalStyles = /* #__PURE__*/ makeStyles<Partial<IModalStyles>>({\r\n    main: {\r\n        width: '29.25rem',\r\n        height: '9.5rem',\r\n        maxHeight: '100%',\r\n    },\r\n    scrollableContent: {\r\n        height: '100%',\r\n        width: '100%',\r\n        overflow: 'hidden',\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        paddingTop: '1.875rem',\r\n        paddingBottom: '1.25rem',\r\n        gap: '0.625rem',\r\n        boxSizing: 'border-box',\r\n    },\r\n});\r\n\r\nexport const useContentStyles = /* #__PURE__*/ makeStyles(() => ({\r\n    header: {\r\n        width: '100%',\r\n        maxWidth: '100%',\r\n        padding: `0 ${horizontalPaddingGap}`,\r\n        flex: '0 0 auto',\r\n        h1: {\r\n            fontSize: '18px',\r\n        },\r\n    },\r\n    headerProperty: {\r\n        maxWidth: 'calc( 100% - 2rem )',\r\n    },\r\n    footer: {\r\n        padding: `0 ${horizontalPaddingGap}`,\r\n        display: 'flex',\r\n        justifyContent: 'flex-end',\r\n        alignItems: 'center',\r\n        '>.ms-Button--command': {\r\n            marginRight: 'auto',\r\n        },\r\n    },\r\n    linkPermissionSetting: {\r\n        width: '21rem',\r\n        height: '3rem',\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n    },\r\n    linkPermissionSettingIcon: {\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n        width: '2rem',\r\n        height: '2rem',\r\n        margin: '0 0.5rem',\r\n    },\r\n    linkPermissionSettingTextStyles: [\r\n        {\r\n            width: '15rem',\r\n            maxWidth: '15rem',\r\n        },\r\n    ],\r\n}));\r\n","export interface ServiceOperationErrorInit {\r\n    message?: string;\r\n    request: Request;\r\n    response: Response;\r\n}\r\n\r\nexport class ServiceOperationError extends Error {\r\n    request: Request;\r\n    response: Response;\r\n\r\n    constructor({ message, request, response }: ServiceOperationErrorInit) {\r\n        super(message ?? response.statusText);\r\n        this.name = this.constructor.name;\r\n        this.request = request;\r\n        this.response = response;\r\n    }\r\n}\r\n","export enum PeopleSelectionType {\r\n    User,\r\n    Group,\r\n    Tag,\r\n    Unspecific,\r\n}\r\n\r\nexport interface BasePeopleSelection {\r\n    id: string;\r\n    name: string;\r\n    mail?: string;\r\n    icon?: string;\r\n    unremovable?: boolean;\r\n}\r\n\r\nexport interface SinglePeopleSelection extends BasePeopleSelection {\r\n    type: PeopleSelectionType.User;\r\n}\r\n\r\nexport interface ManyPeopleSelection extends BasePeopleSelection {\r\n    type: PeopleSelectionType.Group | PeopleSelectionType.Tag | PeopleSelectionType.Unspecific;\r\n    items?: OrPromise<SinglePeopleSelection[]>;\r\n    resolveItems?: () => OrPromise<SinglePeopleSelection[]>;\r\n    count?: number;\r\n    expandable?: boolean;\r\n}\r\n\r\nexport type PeopleSelection = SinglePeopleSelection | ManyPeopleSelection;\r\n\r\nexport type RetrieveIcon = (selection: PeopleSelection) => OrPromise<PeopleSelection['icon'] | Blob>;\r\n\r\nexport type WithSelection<T> = T & { selection: PeopleSelection };\r\n\r\ntype OrPromise<T> = T | Promise<T>;\r\n\r\nexport type FormatOptionalStringBySelection = (selection: PeopleSelection) => string | undefined;\r\n","export * from './CollapsibleTextField';\r\nexport * from './DecimalTextField';\r\n","import { DatePicker, IDatePicker, IDatePickerProps } from '@fluentui/react';\r\nimport React from 'react';\r\nimport { DateTimeEntry, FormContext, FormEntry, FormMode, FormQuestionType } from '../../types';\r\nimport { useDatePickerStyles } from '../../utilities';\r\nimport { BaseDescriptor, FieldComponentTypeFactory } from './BaseDescriptor';\r\n\r\nconst defaultOptions = {\r\n    defaultPlaceholder: 'Select a date',\r\n};\r\n\r\n/**\r\n * The options for the date time descriptor to customize the date time field.\r\n * `strings` and `formatDate` are supported for localization purposes, and `allowTextInput` indicates whether to allow\r\n * input text directly.\r\n */\r\nexport type DateTimeDescriptorOptions = Partial<typeof defaultOptions> &\r\n    Pick<IDatePickerProps, 'strings' | 'formatDate' | 'allowTextInput'>;\r\n\r\nconst makeFieldComponent: FieldComponentTypeFactory<DateTimeDescriptorOptions & typeof defaultOptions, DateTimeEntry> =\r\n    ({ defaultPlaceholder, ...options }) =>\r\n    ({ entry, onEntryChange, showPlaceholder, delegatedProps }) => {\r\n        const { question, answer } = entry;\r\n\r\n        const value = answer.content;\r\n        const onChange = React.useCallback(\r\n            (value?: Date | null) => {\r\n                const newAnswer = { ...entry.answer };\r\n                newAnswer.content = value ?? undefined;\r\n                if (!newAnswer.content) delete newAnswer.content;\r\n\r\n                onEntryChange?.({ ...entry, answer: newAnswer });\r\n            },\r\n            [entry, onEntryChange]\r\n        );\r\n        const placeholder = showPlaceholder ? question.placeholder || defaultPlaceholder : undefined;\r\n        const datePickerRef = React.useRef<IDatePicker>(null);\r\n\r\n        // Workaround for read only (previewing mode), since the DatePicker is uncontrollable component and does not\r\n        // support read only. When read only and no value, the picker will be reset after selected any date.\r\n        const hasValue = value !== undefined;\r\n        const calendarProps = React.useMemo(() => {\r\n            if (!delegatedProps.readOnly || hasValue) return;\r\n            return {\r\n                onSelectDate: () => {\r\n                    const reset = datePickerRef.current?.reset;\r\n                    if (reset) requestAnimationFrame(reset);\r\n                },\r\n            };\r\n        }, [delegatedProps.readOnly, hasValue]);\r\n\r\n        const datePickerStyles = useDatePickerStyles();\r\n\r\n        return (\r\n            <DatePicker\r\n                {...delegatedProps}\r\n                componentRef={datePickerRef}\r\n                value={value}\r\n                onSelectDate={onChange}\r\n                placeholder={placeholder}\r\n                showGoToToday={false}\r\n                calendarProps={calendarProps}\r\n                textField={delegatedProps}\r\n                styles={datePickerStyles}\r\n                {...options}\r\n            />\r\n        );\r\n    };\r\n\r\n/**\r\n * The descriptor that renders a date time field for date time entries.\r\n */\r\nexport class DateTimeDescriptor extends BaseDescriptor<DateTimeEntry> {\r\n    protected readonly FieldComponent;\r\n\r\n    constructor(options?: DateTimeDescriptorOptions) {\r\n        super();\r\n        this.FieldComponent = makeFieldComponent({ ...defaultOptions, ...options });\r\n    }\r\n\r\n    /**\r\n     * Tests whether the entry is a date time entry, and the form is not in viewing mode.\r\n     *\r\n     * @param entry The entry to test.\r\n     * @param context The context.\r\n     * @returns Passes the test or not.\r\n     */\r\n    test(entry: FormEntry, context: FormContext): entry is DateTimeEntry {\r\n        return entry.question.type === FormQuestionType.DateTime && context.mode !== FormMode.Viewing;\r\n    }\r\n}\r\n","import React from 'react';\r\nimport { mergeStyles } from '@fluentui/react';\r\nimport { CommonIcon, CommonIconSize } from '../CommonIcon';\r\nimport { useCommonCardStyles } from './CommonCard.styles';\r\n\r\nexport interface CommonCardProps {\r\n    accentColor: string;\r\n    iconName: string;\r\n    title: string;\r\n    description?: React.ReactNode;\r\n    highlightDescription?: boolean;\r\n    reminder?: JSX.Element;\r\n    isMobile?: boolean;\r\n    farItem?: React.ReactNode;\r\n\r\n    // If expandable, not mobile, and there's no reminder, the icon will be larger and centerized\r\n    // vertically, and the description is able to wrap.\r\n    expandable?: boolean;\r\n    focusable?: boolean;\r\n    id?: string;\r\n    role?: React.AriaRole;\r\n    onCardClick?: () => void;\r\n}\r\n\r\nexport const CommonCard: React.FC<CommonCardProps> = (props: CommonCardProps): JSX.Element => {\r\n    const {\r\n        accentColor,\r\n        iconName,\r\n        title,\r\n        description,\r\n        highlightDescription,\r\n        reminder,\r\n        isMobile,\r\n        expandable,\r\n        id,\r\n        role,\r\n        farItem,\r\n        onCardClick,\r\n    } = props;\r\n    const cardStyles = useCommonCardStyles();\r\n    const expanded = expandable && !isMobile && !reminder;\r\n\r\n    return (\r\n        <div role={role}>\r\n            <button\r\n                id={id}\r\n                className={mergeStyles(\r\n                    cardStyles.root,\r\n                    expanded && cardStyles.expandedRoot,\r\n                    isMobile && cardStyles.mobileRoot,\r\n                    isMobile && !reminder && cardStyles.mobileRootWithoutReminder\r\n                )}\r\n                onClick={onCardClick}>\r\n                <CommonIcon\r\n                    icon={iconName}\r\n                    size={expanded ? CommonIconSize.Size64 : CommonIconSize.Size32}\r\n                    iconBackgroundColor={accentColor}\r\n                    title={title}\r\n                    description={description}\r\n                    rightItem={farItem}\r\n                    styles={{\r\n                        root: expanded && cardStyles.expandedIconRoot,\r\n                        description: mergeStyles([\r\n                            highlightDescription && cardStyles.hightlightedDescription,\r\n                            expanded && cardStyles.expandedDescription,\r\n                        ]),\r\n                    }}\r\n                />\r\n                {reminder}\r\n            </button>\r\n        </div>\r\n    );\r\n};\r\n","import { useEffect, useRef } from 'react';\r\n\r\n/**\r\n * A Hook to create an object URL for a blob.\r\n * This will revoke the previous object URL when the blob changes or the component unmounts.\r\n *\r\n * @param blob The Blob to create an object URL for.\r\n * @returns The object URL for the Blob.\r\n */\r\nexport function useBlobObjectUrl(blob: Blob): string;\r\nexport function useBlobObjectUrl(blob: undefined): undefined;\r\nexport function useBlobObjectUrl(blob: Blob | undefined): string | undefined;\r\nexport function useBlobObjectUrl(blob: Blob | undefined): string | undefined {\r\n    const blobRef = useRef<Blob>();\r\n    const objectUrlRef = useRef<string>();\r\n\r\n    const updateObjectUrlRef = useRef((objectUrl?: string) => {\r\n        const previousObjectUrl = objectUrlRef.current;\r\n        if (previousObjectUrl) URL.revokeObjectURL(previousObjectUrl);\r\n        objectUrlRef.current = objectUrl;\r\n    });\r\n\r\n    if (blob !== blobRef.current) {\r\n        blobRef.current = blob;\r\n        updateObjectUrlRef.current(blob ? URL.createObjectURL(blob) : undefined);\r\n    }\r\n\r\n    useEffect(() => updateObjectUrlRef.current, []);\r\n    return objectUrlRef.current;\r\n}\r\n","import {\r\n    Icon,\r\n    IIconProps,\r\n    ImageFit,\r\n    IPersonaCoinProps,\r\n    IPersonaSharedProps,\r\n    PersonaCoin,\r\n    useTheme,\r\n} from '@fluentui/react';\r\nimport { isAbsoluteUrl } from '@addressbook/utilities-core';\r\nimport React from 'react';\r\nimport { RetrieveIcon, WithSelection } from '../types';\r\nimport { usePeopleCoinStyles } from './PeopleCoin.styles';\r\nimport { useIcon } from './PeopleCoin.utils';\r\n\r\n/**\r\n * The props for the PeopleCoin component, which renders a person as a coin.\r\n *\r\n * @property selection The person to display.\r\n * @property onRetrieveIcon A function to retrieve the icon for the person.\r\n */\r\nexport interface PeopleCoinProps extends WithSelection<IPersonaSharedProps> {\r\n    onRetrieveIcon?: RetrieveIcon;\r\n    preventNameAsTitle?: boolean;\r\n}\r\n\r\nexport const PeopleCoin: React.FC<PeopleCoinProps> = ({ selection, onRetrieveIcon, preventNameAsTitle, ...props }) => {\r\n    const theme = useTheme();\r\n    const styles = usePeopleCoinStyles();\r\n\r\n    const icon = useIcon(selection, onRetrieveIcon);\r\n\r\n    const propsInternal = React.useMemo<IPersonaCoinProps>(() => {\r\n        const baseProps = { text: selection.name, title: preventNameAsTitle ? undefined : selection.name, ...props };\r\n        if (!icon) return baseProps;\r\n\r\n        const iconProps: IIconProps = isAbsoluteUrl(icon)\r\n            ? {\r\n                  imageProps: { src: icon, imageFit: ImageFit.cover },\r\n                  style: props.coinSize\r\n                      ? { boxSizing: 'border-box', width: props.coinSize, height: props.coinSize }\r\n                      : {},\r\n              }\r\n            : {\r\n                  iconName: icon,\r\n                  style: props.coinSize\r\n                      ? { boxSizing: 'border-box', fontSize: props.coinSize, padding: props.coinSize * 0.1875 }\r\n                      : {},\r\n              };\r\n\r\n        return {\r\n            ...baseProps,\r\n            onRenderInitials: props => <Icon className={styles.icon} title={props?.title} {...iconProps} />,\r\n            initialsColor: theme.palette.themeLight,\r\n            initialsTextColor: theme.palette.themeDark,\r\n        };\r\n    }, [\r\n        icon,\r\n        preventNameAsTitle,\r\n        props,\r\n        selection.name,\r\n        styles.icon,\r\n        theme.palette.themeDark,\r\n        theme.palette.themeLight,\r\n    ]);\r\n\r\n    return <PersonaCoin {...props} {...propsInternal} />;\r\n};\r\n","import { mergeStyles } from '@fluentui/react';\r\nimport { useId } from '@fluentui/react-hooks';\r\nimport React from 'react';\r\nimport { PeopleCoin } from '../PeopleCoin';\r\nimport { PeopleSelection, PeopleSelectionType } from '../types';\r\nimport { usePeopleViewStyles } from './PeopleView.styles';\r\nimport { FormatNames, PeopleViewProps } from './PeopleView.types';\r\n\r\nconst defaultFormatNames: FormatNames = (names: string[]) => ({ normal: names.join(', ') });\r\n\r\nexport const PeopleView: React.FC<PeopleViewProps> = ({\r\n    label,\r\n    selections,\r\n    onRetrieveIcon,\r\n    formatNames = defaultFormatNames,\r\n    className,\r\n    ...props\r\n}) => {\r\n    const { normal: names, compact: compactNames } = React.useMemo(\r\n        () => formatNames(selections.map(selection => selection.name)),\r\n        [selections, formatNames]\r\n    );\r\n\r\n    const aggregatedSelection = React.useMemo<PeopleSelection>(\r\n        () =>\r\n            selections.length === 1\r\n                ? selections[0]\r\n                : { type: PeopleSelectionType.Unspecific, id: 'aggregated', name: names, icon: 'People' },\r\n        [names, selections]\r\n    );\r\n\r\n    const labelId = useId('label');\r\n    const styles = usePeopleViewStyles();\r\n    return (\r\n        <div className={mergeStyles(styles.root, className)} {...props}>\r\n            <PeopleCoin selection={aggregatedSelection} onRetrieveIcon={onRetrieveIcon} coinSize={32} />\r\n            <div className={styles.textContainer}>\r\n                <div className={styles.names} title={names} aria-labelledby={labelId}>\r\n                    {compactNames ?? names}\r\n                </div>\r\n                <div className={styles.label} id={labelId}>\r\n                    {label}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n","import { makeStyles } from '@addressbook/components-fluentui-teams-theme';\r\n\r\nexport const usePreviewingDecoratorStyles = makeStyles({\r\n    root: {\r\n        position: 'relative',\r\n    },\r\n    mask: {\r\n        position: 'absolute',\r\n        inset: 0,\r\n    },\r\n});\r\n","import { FontSizes, makeStyles } from '@addressbook/components-fluentui-teams-theme';\r\n\r\nexport const usePrimarySettingsStyles = makeStyles({\r\n    row: {\r\n        display: 'flex',\r\n        flexDirection: 'row',\r\n        alignItems: 'center',\r\n        gap: '12px',\r\n        flexWrap: 'wrap',\r\n        '> .ms-TextField': {\r\n            flexGrow: 7,\r\n            flexBasis: '240px',\r\n        },\r\n        '> .ms-Dropdown-container': {\r\n            flexGrow: 1,\r\n            flexBasis: '160px',\r\n        },\r\n    },\r\n    optionRow: {\r\n        display: 'flex',\r\n        flexDirection: 'row',\r\n        alignItems: 'center',\r\n        gap: '8px',\r\n    },\r\n    optionIcon: {\r\n        fontSize: FontSizes.size18,\r\n    },\r\n});\r\n","export * from './AppHeader.component';\r\n","/*\r\n *  Copyright © Microsoft Corporation. All rights reserved.\r\n */\r\n\r\nimport React from 'react';\r\nimport { Modal, mergeStyleSets, IModalStyles } from '@fluentui/react';\r\nimport { useId } from '@fluentui/react-hooks';\r\nimport { useModalStyles } from './CommonModal.styles';\r\nimport { ModalContent, ModalContentProps } from './ModalContent';\r\n\r\nexport type CommonModalProps = ModalContentProps & {\r\n    isOpen: boolean;\r\n    modalStyles?: Partial<IModalStyles>;\r\n};\r\n\r\nexport const CommonModal: React.FC<CommonModalProps> = ({\r\n    isOpen,\r\n    modalStyles,\r\n    ...props\r\n}: CommonModalProps): JSX.Element => {\r\n    const styles = useModalStyles();\r\n    const titleId = useId('ModalTitle');\r\n    const subTitleId = useId('ModalSubTitle');\r\n    return (\r\n        <Modal\r\n            titleAriaId={titleId}\r\n            subtitleAriaId={subTitleId}\r\n            styles={mergeStyleSets(styles, modalStyles)}\r\n            isOpen={isOpen}\r\n            isBlocking\r\n            layerProps={{ eventBubblingEnabled: true }}\r\n            focusTrapZoneProps={{ isClickableOutsideFocusTrap: true }}\r\n            onDismiss={props.onDismiss}>\r\n            <ModalContent titleId={titleId} subTitleId={subTitleId} {...props} />\r\n        </Modal>\r\n    );\r\n};\r\n","/*\r\n *  Copyright © Microsoft Corporation. All rights reserved.\r\n */\r\n\r\nimport { isContrastTheme } from '@addressbook/components-fluentui-teams-theme';\r\nimport { ellipsisStyles } from '../styles/ellipsisStyles';\r\nimport { makeStyles } from '../styles/makeStyles';\r\n\r\nexport const useCommonCardStyles = makeStyles(theme => ({\r\n    root: {\r\n        position: 'relative',\r\n        padding: '16px',\r\n        width: '300px',\r\n        height: '100px',\r\n        boxShadow: '0px 0.3px 0.9px rgba(0, 0, 0, 0.07), 0px 1.6px 3.6px rgba(0, 0, 0, 0.11)',\r\n        borderRadius: '4px',\r\n        cursor: 'pointer',\r\n        textAlign: 'start',\r\n        background: theme.palette.white,\r\n        border: `${isContrastTheme(theme.name) ? '0.87px' : 0} solid ${theme.palette.neutralLighter}`,\r\n        outlineOffset: '2px',\r\n\r\n        display: 'flex',\r\n        boxSizing: 'border-box',\r\n        flexDirection: 'column',\r\n        justifyContent: 'space-between',\r\n        alignItems: 'normal',\r\n\r\n        color: theme.palette.neutralDark,\r\n    },\r\n    mobileRoot: {\r\n        boxShadow: 'none',\r\n        background: 'transparent',\r\n        width: '100%',\r\n        height: '106px',\r\n        ':before': {\r\n            content: '\"\"',\r\n            position: 'absolute',\r\n            right: 0,\r\n            bottom: 0,\r\n            width: 'calc(100% - 16px)',\r\n            borderBottom: `1px solid ${theme.palette.neutralTertiaryAlt}`,\r\n        },\r\n    },\r\n    mobileRootWithoutReminder: {\r\n        height: '64px',\r\n        ':before': {\r\n            width: 'calc(100% - 72px)',\r\n        },\r\n    },\r\n    expandedRoot: {\r\n        paddingInline: '18px',\r\n        justifyContent: 'center',\r\n    },\r\n    hightlightedDescription: {\r\n        color: theme.palette.redDark,\r\n    },\r\n    expandedIconRoot: {\r\n        columnGap: '18px',\r\n    },\r\n    expandedDescription: [\r\n        ellipsisStyles(3),\r\n        { marginTop: '3px !important', whiteSpace: 'normal', wordBreak: 'normal', maxLines: 3 },\r\n    ],\r\n}));\r\n","import { AWTEventData, AWTEventProperties, AWTPropertyType } from '@aria/webjs-sdk';\r\nimport { PanelRegion, PanelType, ActionOutcome, PanelLaunchMethod, CommonLogCategory } from './types';\r\n\r\n/**\r\n * Details bag for logs\r\n *\r\n * @param message message\r\n * @param error error\r\n * @param details Details (callstack, source, stringified details)\r\n * @param method method\r\n */\r\nexport interface ITelemetryDetails {\r\n    message?: string;\r\n    error?: Error;\r\n    details?: string;\r\n    method?: string;\r\n}\r\n\r\nexport interface IAWTLogger {\r\n    logEvent: (event: AWTEventProperties | AWTEventData | string) => void;\r\n    setContext: (name: string, value: string | number | boolean, type?: AWTPropertyType) => void;\r\n}\r\n\r\nexport interface ILogger<TScenarioName extends string, TStepName extends string, TLogCategory extends string> {\r\n    /**\r\n     * session id\r\n     */\r\n    readonly sessionId: string;\r\n\r\n    /**\r\n     * Used to start log event at once even in delay time\r\n     */\r\n    activeLogger: () => void;\r\n\r\n    /**\r\n     * Set Compliant Aria Client for EUDB\r\n     */\r\n    setCompliantAriaClient: (tenantId: string) => Promise<void>;\r\n\r\n    /**\r\n     * Used to add/update common property for logger\r\n     *\r\n     * @param dataMap dictionary of common properties to update/add\r\n     */\r\n    setCommonProperty: (dataMap: Record<string, string | number | boolean | undefined>) => void;\r\n\r\n    /**\r\n     * Used to log scenario relative data\r\n     *\r\n     * @param name Scenario name\r\n     * @param eventData Data of the event\r\n     * @param completeScenario if the scenario should be stopped\r\n     */\r\n    logScenario: (name: string, eventData: IScenarioEventData, completeScenario: boolean) => void;\r\n\r\n    /**\r\n     * Used to log a performance signal\r\n     *\r\n     * @param action Action\r\n     * @param source Source\r\n     * @param duration Time measurement in MS\r\n     * @param duartionDetails Other duration details as needed\r\n     * @param dataBag databag\r\n     */\r\n    logPerformance: (\r\n        action: string,\r\n        source: string,\r\n        duration: number,\r\n        duartionDetails?: { [key: string]: number },\r\n        dataBag?: any\r\n    ) => void;\r\n\r\n    /**\r\n     * Used to log a http request and response\r\n     *\r\n     * @param httpInfo data bag containing http info\r\n     */\r\n    logHttp: (httpInfo: IHttpInfo) => void;\r\n\r\n    /**\r\n     * Used to log a UI Event\r\n     *\r\n     * @param panelLaunchMethod how the panel was launched\r\n     * @param panelRegion The region of the page the panel is lcoated in\r\n     * @param panelType indicates which panel the action was performed in\r\n     * @param dataBag Other details as needed\r\n     */\r\n    logUserBiView: (\r\n        panelLaunchMethod: PanelLaunchMethod,\r\n        panelRegion: PanelRegion,\r\n        panelType: PanelType,\r\n        dataBag?: any\r\n    ) => void;\r\n\r\n    /**\r\n     * Used to log a user action\r\n     *\r\n     * @param scenarioName The action category\r\n     * @param scenarioType The action scenario\r\n     * @param moduleName name of the module clicked (name of the class)\r\n     * @param dataBag Other details as needed\r\n     * @param pageLeave Indicate whether the current action is leaving current page, if yes, it will raise additional event to track the event with stay time\r\n     */\r\n    logUserBiAction: (\r\n        scenarioName: TScenarioName,\r\n        scenarioType: string,\r\n        moduleName: string,\r\n        dataBag?: any,\r\n        pageLeave?: boolean\r\n    ) => void;\r\n\r\n    /**\r\n     * Used to log an API Action\r\n     *\r\n     * @param nonUiComponent The non UI component\r\n     * @param event The event\r\n     * @param details Other details as needed\r\n     */\r\n    logNonUiTelemetry: (nonUiComponent: string, outcome: ActionOutcome, details?: any) => void;\r\n\r\n    /**\r\n     * Used to log debug informational messages - noisy chatter for debugging issues to the trace table\r\n     *\r\n     * @param logCategory The component/category for which this log is relevant to\r\n     * @param message The message to log\r\n     */\r\n    logTraceDebug: (logCategory: TLogCategory | CommonLogCategory, message: string) => void;\r\n\r\n    /**\r\n     * Used to log informational messages to the trace table\r\n     *\r\n     * @param logCategory The component/category for which this log is relevant to\r\n     * @param message The message to log\r\n     */\r\n    logTraceInfo: (logCategory: TLogCategory | CommonLogCategory, message: string) => void;\r\n\r\n    /**\r\n     * Used to log warning messages to the trace table\r\n     *\r\n     * @param logCategory The component/category for which this log is relevant to\r\n     * @param message The message to log\r\n     */\r\n    logTraceWarning: (logCategory: TLogCategory | CommonLogCategory, message: string) => void;\r\n\r\n    /**\r\n     * Used to log error messages to the trace table\r\n     *\r\n     * @param logCategory The component/category for which this log is relevant to\r\n     * @param message The message to log\r\n     */\r\n    logTraceError: (logCategory: TLogCategory | CommonLogCategory, message: string) => void;\r\n\r\n    /**\r\n     * Used to log an exception to the trace table when callstack is available\r\n     *\r\n     * @param logCategory logCategory\r\n     * @param details Details (callstack, source, stringified details)\r\n     * @param dataBag Any additional custom data bags to be emitted as ARIA columns. Use only for really specific cases,\r\n     * for any generic use, add a structured new param to this method definition\r\n     */\r\n    logTraceException: (\r\n        logCategory: TLogCategory | CommonLogCategory,\r\n        details: ITelemetryDetails,\r\n        dataBag?: any\r\n    ) => void;\r\n\r\n    /**\r\n     * Used to log an HTTP exception to the trace table\r\n     *\r\n     * @param httpAPI The API name to be printed in the trace log for readability on which API failed\r\n     * @param message Message\r\n     * @param httpStatusCode HTTP Status code of the response\r\n     */\r\n    logTraceHttpException: (httpAPI: string, message: string, httpStatusCode: number) => void;\r\n\r\n    /**\r\n     * Creates a scenario logger\r\n     *\r\n     * @param name The name of the scenario\r\n     * @param dataBag data info log when start scenario\r\n     */\r\n    createScenario(name: string, dataBag?: any): IScenarioLogger<TStepName>;\r\n\r\n    /**\r\n     * Finds an active scenario logger\r\n     *\r\n     * @param name The name of the scenario\r\n     */\r\n    findScenario(name: string): IScenarioLogger<TStepName> | null;\r\n\r\n    /**\r\n     * Finds an active scenario logger and mark it with step and data\r\n     *\r\n     * @param scenarioName The name of the scenario\r\n     * @param step The name of the step\r\n     * @param status The status\r\n     * @param eventData Event data\r\n     */\r\n    markScenario(\r\n        scenarioName: TScenarioName,\r\n        step: TStepName,\r\n        status?: TelemetryScenarioStatus,\r\n        eventData?: Partial<IScenarioEventData>\r\n    ): void;\r\n\r\n    /**\r\n     * End a scenario and delete it\r\n     *\r\n     * @param scenarioName The name of the scenario\r\n     * @param eventData Event data\r\n     */\r\n    stopScenario(scenarioName: string, eventData?: Partial<IScenarioEventData>): void;\r\n\r\n    /**\r\n     * End a scenario with failure and delete it\r\n     *\r\n     * @param scenarioName The name of the scenario\r\n     * @param eventData Event data\r\n     */\r\n    failScenario(scenarioName: string, eventData?: Partial<IScenarioEventData>): void;\r\n\r\n    /**\r\n     * Forcefully remove scenario, only to be used in cases with task module limitations.\r\n     *\r\n     * @param name  The name of the scenario\r\n     */\r\n    markScenarioComplete(name: string): void;\r\n\r\n    /**\r\n     * Function to call to flush logs\r\n     *\r\n     * @param callback the function that is called when flush finishes.\r\n     */\r\n    flushLogs(callback: () => void): void;\r\n\r\n    /**\r\n     * Prevents new events from being added for transmission. It also batches all\r\n     * events currently in the queue, and creates requests for them to be sent. If\r\n     * HTML5 Beacons are supported, then they will be used.\r\n     * */\r\n    flushAndTeardown(): void;\r\n}\r\n\r\n// interface for logging http info. Will change over time.\r\nexport interface IHttpInfo {\r\n    apiName?: string;\r\n    url: string;\r\n    clientRequestId: string;\r\n    correlationId: string;\r\n    latency?: number;\r\n    getTeamsContextLatency?: number;\r\n    getAuthTokenLatency?: number;\r\n    requestMethod: string;\r\n    responseCode?: number;\r\n    responseText?: string;\r\n    edgeRef?: string;\r\n}\r\n\r\nexport interface IScenarioLogger<TStepName extends string> {\r\n    elapsedTime: number;\r\n    getCurrentElapsedTime(): number;\r\n    mark(stepName: TStepName, status?: TelemetryScenarioStatus, eventData?: Partial<IScenarioEventData>): void;\r\n    stop(eventData?: Partial<IScenarioEventData>): void;\r\n    fail(eventData?: Partial<IScenarioEventData>): void;\r\n}\r\n\r\nexport enum ScenarioColumns {\r\n    Delta = 'delta',\r\n    Elapsed = 'elapsed',\r\n    Error = 'error',\r\n    ErrorCode = 'errorCode',\r\n    ScenarioName = 'Scenario.Name',\r\n    ScenarioStatus = 'Scenario.Status',\r\n    ScenarioStep = 'Scenario.Step',\r\n    StartReason = 'startReason',\r\n    StatusCode = 'statusCode',\r\n    StepDelta = 'stepDelta',\r\n    StepElapsed = 'stepElapsed',\r\n}\r\n\r\nexport enum TelemetryScenarioStatus {\r\n    Abandoned = 'abandoned',\r\n    Failure = 'failure',\r\n    Incomplete = 'incomplete',\r\n    Init = 'init',\r\n    Success = 'success',\r\n    Timeout = 'timeout',\r\n}\r\n\r\nexport enum TelemetryScenarioStep {\r\n    Finish = 'finish',\r\n    Pause = 'pause',\r\n    Start = 'start',\r\n    Test = 'test',\r\n}\r\n\r\nexport interface ScenarioProperties {\r\n    /**\r\n     * Name of the scenario marker\r\n     */\r\n    [ScenarioColumns.ScenarioName]?: string;\r\n    [ScenarioColumns.ScenarioStep]?: TelemetryScenarioStep | string;\r\n    /**\r\n     * Indicates the status of the scenario like 'success', 'failure', 'timeout', etc.\r\n     */\r\n    [ScenarioColumns.ScenarioStatus]?: TelemetryScenarioStatus;\r\n\r\n    [ScenarioColumns.StartReason]?: string;\r\n    [ScenarioColumns.StatusCode]?: string;\r\n\r\n    [ScenarioColumns.ErrorCode]?: string;\r\n    [ScenarioColumns.Error]?: Error;\r\n\r\n    /**\r\n     * Scenario Latency\r\n     */\r\n    [ScenarioColumns.Delta]?: number;\r\n    /**\r\n     * Allows to order the events during a given session. To be renamed as Scenario_Elapsed\r\n     */\r\n    [ScenarioColumns.Elapsed]?: number;\r\n\r\n    /**\r\n     * Step latency\r\n     */\r\n    [ScenarioColumns.StepDelta]?: number;\r\n    [ScenarioColumns.StepElapsed]?: number;\r\n}\r\n\r\nexport interface IScenarioEventData extends ScenarioProperties {\r\n    id?: string;\r\n    lastUpdatedTime?: Date;\r\n    startTime?: Date;\r\n    finishTime?: Date;\r\n    dataBag?: any;\r\n}\r\n","/*\r\n *  Copyright © Microsoft Corporation. All rights reserved.\r\n */\r\n\r\nimport { IModalStyles, ITextFieldStyles } from '@fluentui/react';\r\nimport { makeStyles } from '../styles/makeStyles';\r\n\r\nexport const useCopyResponseModalStyles = /* #__PURE__*/ makeStyles<Partial<IModalStyles>>({\r\n    main: {\r\n        width: '25rem',\r\n        height: '18rem',\r\n        maxHeight: '100%',\r\n    },\r\n    scrollableContent: {\r\n        height: '100%',\r\n        width: '100%',\r\n        overflow: 'hidden',\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        padding: '1.1875rem 2rem 2.5rem 2rem',\r\n        boxSizing: 'border-box',\r\n    },\r\n});\r\n\r\nexport const useContentStyles = /* #__PURE__*/ makeStyles(theme => ({\r\n    header: {\r\n        width: '100%',\r\n        maxWidth: '100%',\r\n        height: '1rem',\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        '>.ms-Button--icon': {\r\n            width: '1rem',\r\n            height: '1rem',\r\n        },\r\n    },\r\n    contents: {\r\n        width: '100%',\r\n        maxWidth: '100%',\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        marginTop: '1rem',\r\n    },\r\n    copySuccessIcon: {\r\n        width: '2.75rem',\r\n        height: '2.75rem',\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n    },\r\n    copyTitle: {\r\n        width: '100%',\r\n        maxWidth: '100%',\r\n        marginTop: '1rem !important',\r\n        span: {\r\n            color: theme.palette.black,\r\n        },\r\n    },\r\n    copyContent: {\r\n        width: '100%',\r\n        maxWidth: '100%',\r\n        flex: '0 0 auto',\r\n        marginTop: '1.25rem !important',\r\n    },\r\n    linkPermissionSetting: {\r\n        width: '21rem',\r\n        height: '3rem',\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        border: `1px solid ${theme.palette.neutralLight}`,\r\n        borderRadius: '3px',\r\n        marginTop: '1.25rem !important',\r\n    },\r\n    linkPermissionSettingIcon: {\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n        width: '2rem',\r\n        height: '2rem',\r\n        margin: '0 0.5rem',\r\n    },\r\n    linkPermissionSettingTextStyles: [\r\n        {\r\n            width: '15rem',\r\n            maxWidth: '15rem',\r\n        },\r\n    ],\r\n}));\r\n\r\nexport function useLinkPlaceTextFieldStyles(): Partial<ITextFieldStyles> {\r\n    return {\r\n        fieldGroup: {\r\n            width: '14.75rem',\r\n            height: '1.875rem !important',\r\n            '.ms-TextField-fieldGroup:hover': {\r\n                borderWidth: '0 0 0 2px',\r\n            },\r\n            '.ms-TextField-fieldGroup:focus': {\r\n                borderWidth: '0 0 0 2px',\r\n            },\r\n        },\r\n    };\r\n}\r\n","import { IPersonaProps } from '@fluentui/react';\r\nimport React from 'react';\r\nimport { PeopleCoin } from '../PeopleCoin';\r\nimport { PeopleSelection, PeopleSelectionType, WithSelection } from '../types';\r\nimport { PeopleSelectProps } from './PeopleSelect.types';\r\n\r\n/**\r\n * Extracts the selection from persona props.\r\n *\r\n * @param props The persona props.\r\n * @returns The selection.\r\n */\r\nexport function extractSelectionFromPersonaProps(props: IPersonaProps): PeopleSelection {\r\n    return (props as WithSelection<IPersonaProps>).selection;\r\n}\r\n\r\n/**\r\n * Normalizes filter text.\r\n *\r\n * @param filter The filter text to normalize.\r\n * @returns The normalized filter text.\r\n * @example normalizeFilter('') // ''\r\n * @example normalizeFilter('  ') // ''\r\n * @example normalizeFilter('Ruijun Gao') // 'ruijun gao'\r\n * @example normalizeFilter('  Ruijun Gao  ') // 'ruijun gao'\r\n */\r\nexport function normalizeFilter(filter: string): string {\r\n    return filter.trim().toLowerCase();\r\n}\r\n\r\n/**\r\n * Filters suggestions based on selections.\r\n *\r\n * @param selections The selections to filter suggestions against.\r\n * @param suggestions The suggestions to filter.\r\n * @returns The filtered suggestions.\r\n * @example filterSuggestions([], []) // []\r\n * @example filterSuggestions([{ id: '1', name: 'Ruijun Gao' }], [{ id: '1', name: 'Ruijun Gao' }]) // []\r\n * @example filterSuggestions([{ id: '1', name: 'Ruijun Gao' }], [{ id: '2', name: 'Ruijun Gao' }]) // [{ id: '1', name: 'Ruijun Gao' }]\r\n */\r\nexport function filterSuggestions(suggestions: PeopleSelection[], selections: PeopleSelection[]): PeopleSelection[] {\r\n    return suggestions.filter(suggestion => !selections.some(selection => selection.id === suggestion.id));\r\n}\r\n\r\n/**\r\n * Resolves the items of a selection in-place if it is resolvable and not resolved.\r\n *\r\n * @param selection The selection to resolve.\r\n * @returns A promise that resolves when the selection is resolved.\r\n */\r\nexport async function resolvePeopleSelectionItems(selection: PeopleSelection): Promise<void> {\r\n    if (selection.type === PeopleSelectionType.User || !selection.resolveItems) return;\r\n\r\n    if (!selection.items) selection.items = selection.resolveItems();\r\n    if (!Array.isArray(selection.items)) selection.items = await selection.items;\r\n}\r\n\r\n/**\r\n * Expands a selection in selections into multiple selections if it is expandable.\r\n *\r\n * @param selections The selections.\r\n * @param selection The selection to expand.\r\n * @returns The new selections if the selection is expanded, otherwise undefined.\r\n */\r\nexport function tryExpandPeopleSelection(\r\n    selections: PeopleSelection[],\r\n    selection: PeopleSelection\r\n): PeopleSelection[] | undefined {\r\n    if (selection.type === PeopleSelectionType.User || !selection.expandable || !Array.isArray(selection.items)) return;\r\n\r\n    const index = selections.indexOf(selection);\r\n    if (index < 0) return;\r\n\r\n    const newSelections = [...selections];\r\n    const absentSelections = filterSuggestions(selection.items, selections);\r\n    const patchedSelections = absentSelections.map(absentSelection => ({\r\n        ...absentSelection,\r\n        unremovable: absentSelection.unremovable || selection.unremovable,\r\n    }));\r\n\r\n    newSelections.splice(index, 1, ...patchedSelections);\r\n    return newSelections;\r\n}\r\n\r\nexport type UseMapPeopleSelectionToPersonaOptions = Pick<PeopleSelectProps, 'onRetrieveIcon' | 'describeSuggestion'>;\r\nexport type MapPeopleSelectionToPersonaProps = (selection: PeopleSelection) => WithSelection<IPersonaProps>;\r\n\r\n/**\r\n * A hook that creates a function that maps a selection to a persona props.\r\n * The function will memoize the result based on the describeSuggestion function.\r\n *\r\n * @param describeSuggestion A function that describes a suggestion, used to generate the secondary text.\r\n * @returns A function that maps a selection to a persona props.\r\n */\r\nexport function useMapPeopleSelectionToPersonaProps({\r\n    onRetrieveIcon,\r\n    describeSuggestion,\r\n}: UseMapPeopleSelectionToPersonaOptions): MapPeopleSelectionToPersonaProps {\r\n    return React.useCallback(\r\n        selection => ({\r\n            key: selection.id,\r\n            text: selection.name,\r\n            secondaryText: describeSuggestion?.(selection),\r\n            selection,\r\n            onRenderPersonaCoin: props => (\r\n                <PeopleCoin {...props} selection={selection} onRetrieveIcon={onRetrieveIcon} coinSize={32} />\r\n            ),\r\n        }),\r\n        [describeSuggestion, onRetrieveIcon]\r\n    );\r\n}\r\n","import { Extension } from '@tiptap/core';\r\nimport { Blockquote } from '@tiptap/extension-blockquote';\r\nimport { Bold } from '@tiptap/extension-bold';\r\nimport { BulletList } from '@tiptap/extension-bullet-list';\r\nimport { Code } from '@tiptap/extension-code';\r\nimport { CodeBlock } from '@tiptap/extension-code-block';\r\nimport { Color } from '@tiptap/extension-color';\r\nimport { Document } from '@tiptap/extension-document';\r\nimport { Dropcursor } from '@tiptap/extension-dropcursor';\r\nimport { Gapcursor } from '@tiptap/extension-gapcursor';\r\nimport { HardBreak } from '@tiptap/extension-hard-break';\r\nimport { Heading } from '@tiptap/extension-heading';\r\nimport { History } from '@tiptap/extension-history';\r\nimport { HorizontalRule } from '@tiptap/extension-horizontal-rule';\r\nimport { Italic } from '@tiptap/extension-italic';\r\nimport { ListItem } from '@tiptap/extension-list-item';\r\nimport { OrderedList } from '@tiptap/extension-ordered-list';\r\nimport { Paragraph } from '@tiptap/extension-paragraph';\r\nimport { Strike } from '@tiptap/extension-strike';\r\nimport { Table } from '@tiptap/extension-table';\r\nimport { TableCell } from '@tiptap/extension-table-cell';\r\nimport { TableHeader } from '@tiptap/extension-table-header';\r\nimport { TableRow } from '@tiptap/extension-table-row';\r\nimport { Text } from '@tiptap/extension-text';\r\nimport { TextStyle } from '@tiptap/extension-text-style';\r\nimport { Underline } from '@tiptap/extension-underline';\r\nimport { isDefined } from '@addressbook/utilities-core';\r\nimport { BackgroundColor } from './background-color';\r\nimport { FontSize } from './font-size';\r\nimport { Link } from './link';\r\nimport { Misc } from './misc';\r\n\r\nconst defaults = [\r\n    // Extensions\r\n    { key: 'history', extension: History },\r\n    { key: 'dropcursor', extension: Dropcursor },\r\n    { key: 'gapcursor', extension: Gapcursor },\r\n    { key: 'misc', extension: Misc },\r\n\r\n    // Nodes\r\n    { key: 'document', extension: Document },\r\n    { key: 'text', extension: Text },\r\n\r\n    // Nodes.blocks\r\n    { key: 'heading', extension: Heading },\r\n    { key: 'paragraph', extension: Paragraph },\r\n    { key: 'blockquote', extension: Blockquote },\r\n    { key: 'codeBlock', extension: CodeBlock },\r\n    { key: 'hardBreak', extension: HardBreak },\r\n    { key: 'horizontalRule', extension: HorizontalRule },\r\n\r\n    // Nodes.lists\r\n    { key: 'listItem', extension: ListItem },\r\n    { key: 'bulletList', extension: BulletList },\r\n    { key: 'orderedList', extension: OrderedList },\r\n\r\n    // Nodes.tables\r\n    { key: 'table', extension: Table },\r\n    { key: 'tableRow', extension: TableRow },\r\n    { key: 'tableHeader', extension: TableHeader },\r\n    { key: 'tableCell', extension: TableCell },\r\n\r\n    // Marks.styles\r\n    // Must be before other marks to ensure it's applied at the most top level\r\n    // Otherwise, for example, strike won't know the current font size or color, then it can't apply the correct styles\r\n    { key: 'textStyle', extension: TextStyle },\r\n    { key: 'backgroundColor', extension: BackgroundColor },\r\n    { key: 'color', extension: Color },\r\n    { key: 'fontSize', extension: FontSize },\r\n\r\n    // Marks.formats\r\n    { key: 'bold', extension: Bold },\r\n    { key: 'italic', extension: Italic },\r\n    { key: 'underline', extension: Underline },\r\n    { key: 'strike', extension: Strike },\r\n\r\n    // Marks.embeds\r\n    { key: 'link', extension: Link },\r\n    { key: 'code', extension: Code },\r\n] as const;\r\n\r\ntype DefaultItem = typeof defaults[number];\r\ntype DefaultItemKey = DefaultItem['key'];\r\ntype DefaultItemByKey<K extends DefaultItem['key']> = Extract<DefaultItem, { key: K }>;\r\n\r\ntype DiscardAny<T> = any extends T ? never : T;\r\n\r\n/**\r\n * Options for default extensions.\r\n * - `false` to disable the extension.\r\n * - `undefined` to use the default options without configuration.\r\n * - Otherwise, provide the options to configure the extension.\r\n *\r\n * @default {}\r\n * @see {@link https://www.tiptap.dev/api/extensions/starter-kit}\r\n */\r\nexport type DefaultsOptions = {\r\n    [K in DefaultItemKey]?: Partial<DiscardAny<DefaultItemByKey<K>['extension']['options']>> | false;\r\n};\r\n\r\nexport const Defaults = Extension.create<DefaultsOptions>({\r\n    name: 'defaults',\r\n\r\n    addExtensions() {\r\n        return defaults\r\n            .map(({ key, extension }) => {\r\n                const options = this.options?.[key];\r\n\r\n                if (options === false) return;\r\n                if (options === undefined) return extension;\r\n                return extension.configure(options);\r\n            })\r\n            .filter(isDefined);\r\n    },\r\n});\r\n","/*\r\n *  Copyright © Microsoft Corporation. All rights reserved.\r\n */\r\n\r\nexport * from './CommonLoadingIndicator.component';\r\n","import { KeyExtractor } from '../../abstractions';\r\nimport { BaseFormEntry } from '../types';\r\n\r\n/**\r\n * A key extractor that uses the question id as the key.\r\n *\r\n * @param entry The entry.\r\n * @returns The key.\r\n */\r\nexport const idKeyExtractor: KeyExtractor<BaseFormEntry<{ id: string }, unknown>> = entry => entry.question.id;\r\n","import { app, authentication, chat, dialog, menus, teamsCore } from '@microsoft/teams-js';\r\nimport { fallbackBySelector } from './fallback';\r\nimport { coerceTeamsTheme, TeamsContextTheme } from './themes';\r\nimport { ensureByTeamsInitialization, guardByTeamsInitialization } from './utils';\r\n\r\nexport function getTeamsContext(): Promise<app.Context> {\r\n    const result = ensureByTeamsInitialization(app.getContext);\r\n    return fallbackBySelector(result, data => data.getContext);\r\n}\r\n\r\nexport function getAuthToken(resources: string | string[]): Promise<string> {\r\n    const parameters = {\r\n        resources: typeof resources === 'string' ? [resources, 'openid', 'Calls.JoinGroupCall.All'] : resources,\r\n    };\r\n    const result = ensureByTeamsInitialization(() => authentication.getAuthToken(parameters));\r\n    return fallbackBySelector(result, data => data.getAuthToken);\r\n}\r\n\r\nexport function registerOnThemeChangeHandler(handler: (theme: TeamsContextTheme) => void): Promise<void> {\r\n    const coercedHandler: app.themeHandler = theme => handler(coerceTeamsTheme(theme));\r\n    return ensureByTeamsInitialization(() => app.registerOnThemeChangeHandler(coercedHandler));\r\n}\r\n\r\nexport const registerBeforeUnloadHandler = guardByTeamsInitialization(teamsCore.registerBeforeUnloadHandler);\r\nexport const notifyAppInitializationSuccess = guardByTeamsInitialization(app.notifySuccess);\r\nexport const notifyAppInitializationFailure = guardByTeamsInitialization(app.notifyFailure);\r\nexport const executeDeepLink = guardByTeamsInitialization(app.openLink);\r\nexport const openChat = guardByTeamsInitialization(chat.openChat);\r\n// export const openChat = guardByTeamsInitialization();\r\nexport const getAuthenticationUser = guardByTeamsInitialization<authentication.UserProfile, []>(authentication.getUser);\r\nexport const setNavBarMenu = guardByTeamsInitialization(menus.setNavBarMenu);\r\nexport const resizeTaskModule = guardByTeamsInitialization(dialog.update.resize);\r\nexport const submitTask = guardByTeamsInitialization(dialog.url.submit);\r\nexport const startTask = guardByTeamsInitialization(dialog.url.open);\r\n","export * from './abstractions';\r\nexport * from './facade';\r\nexport * from './implementations';\r\n","import React, { useMemo } from 'react';\r\nimport { mergeStyles } from '@fluentui/react';\r\nimport { rem } from '@addressbook/components-fluentui-teams-theme';\r\nimport { styles } from './EmptyState.styles';\r\nimport defultImg from './turtle.svg';\r\n\r\nexport interface IEmptyStateProps {\r\n    title: string;\r\n    image?: string | JSX.Element;\r\n    message?: string;\r\n    actionText?: string;\r\n    className?: string;\r\n    onAction?: () => void;\r\n    background?: string;\r\n    color?: string;\r\n    btnColor?: string;\r\n    height?: string;\r\n    btnBackground?: string;\r\n    role?: React.AriaRole;\r\n    titleFontSize?: number | string;\r\n}\r\nexport function EmptyState({\r\n    title,\r\n    message,\r\n    image = defultImg,\r\n    onAction,\r\n    actionText,\r\n    children,\r\n    className,\r\n    height,\r\n    color = '#000',\r\n    btnColor = '#242424',\r\n    background = '#F5F5F5',\r\n    btnBackground = '#FFF',\r\n    role,\r\n    titleFontSize = 18,\r\n}: React.PropsWithChildren<IEmptyStateProps>): React.ReactElement {\r\n    const titleId = useMemo(() => `dialogTitle${Math.random()}`.replace('.', '-'), []);\r\n    const descId = useMemo(() => `dialogDesc${Math.random()}`.replace('.', '-'), []);\r\n\r\n    return (\r\n        <div className={mergeStyles(styles.root, { height, background, color }, className)}>\r\n            {image && (\r\n                <div aria-hidden>{typeof image === 'string' ? <img alt='' aria-hidden src={image} /> : image}</div>\r\n            )}\r\n            <div\r\n                role={role}\r\n                aria-atomic\r\n                aria-labelledby={title && titleId}\r\n                aria-describedby={message && descId}\r\n                style={styles.info}>\r\n                {title && (\r\n                    <h2\r\n                        id={titleId}\r\n                        style={{ fontSize: typeof titleFontSize === 'number' ? rem(titleFontSize) : titleFontSize }}>\r\n                        {title}\r\n                    </h2>\r\n                )}\r\n                {message && (\r\n                    <pre id={descId} style={styles.message}>\r\n                        {message}\r\n                    </pre>\r\n                )}\r\n            </div>\r\n            {actionText && onAction && (\r\n                <button\r\n                    aria-hidden={!title}\r\n                    autoFocus\r\n                    style={{\r\n                        ...styles.btn,\r\n                        background: btnBackground,\r\n                        color: btnColor,\r\n                        cursor: 'pointer',\r\n                    }}\r\n                    onClick={onAction}>\r\n                    {actionText}\r\n                </button>\r\n            )}\r\n            {children}\r\n        </div>\r\n    );\r\n}\r\n","export * from './TaskModuleV2.component';\r\nexport * from './TaskModuleV2.styles';\r\n","export * from './background-color';\r\nexport * from './customized-mention';\r\nexport * from './defaults';\r\nexport * from './file';\r\nexport * from './font-size';\r\nexport * from './hack';\r\nexport * from './link';\r\nexport * from './misc';\r\n","import { IconButton } from '@fluentui/react';\r\nimport React from 'react';\r\nimport { FieldProps } from '../../../abstractions';\r\nimport { FormContext, FormEntry, FormFeature, QuestionAction } from '../../types';\r\nimport { addNewFormEntry } from '../../utilities';\r\n\r\nexport type DesigningActionsProps = FieldProps<FormEntry, FormContext, FormFeature>;\r\n\r\nexport function DesigningActions({\r\n    entry,\r\n    onEntryChange,\r\n    context,\r\n    onContextChange,\r\n    feature,\r\n}: DesigningActionsProps): JSX.Element {\r\n    const { entries } = context;\r\n    const { comparator, idGenerator, orderGenerator, constants, strings } = feature;\r\n\r\n    const [sortedEntries, sortedIndex, nextSlotOrder] = React.useMemo(() => {\r\n        const sortedEntries = [...entries].sort(comparator);\r\n        const sortedIndex = sortedEntries.findIndex(e => e === entry);\r\n        const nextSlotOrder = orderGenerator(\r\n            sortedEntries[sortedIndex]?.question.order,\r\n            sortedEntries[sortedIndex + 1]?.question.order\r\n        );\r\n        return [sortedEntries, sortedIndex, nextSlotOrder];\r\n    }, [comparator, entries, entry, orderGenerator]);\r\n\r\n    const reachMaxEntries = entries.length >= constants.maxEntries;\r\n\r\n    const addEntry = React.useCallback(() => {\r\n        const newEntries = addNewFormEntry(entries, { idGenerator, order: nextSlotOrder, strings });\r\n        onContextChange?.({ ...context, entries: newEntries });\r\n    }, [context, entries, idGenerator, nextSlotOrder, onContextChange, strings]);\r\n\r\n    const copyEntry = React.useCallback(() => {\r\n        const newEntry = { ...entry };\r\n        newEntry.question = { ...newEntry.question, id: idGenerator(), order: nextSlotOrder };\r\n        delete newEntry.question.familyId;\r\n        delete newEntry.question.eTag;\r\n        delete newEntry.answer.content;\r\n        delete newEntry.active;\r\n        onContextChange?.({ ...context, entries: [...entries, newEntry] });\r\n    }, [context, entries, entry, idGenerator, nextSlotOrder, onContextChange]);\r\n\r\n    const deleteEntry = React.useCallback(() => {\r\n        const newEntries = entries.filter(e => e !== entry);\r\n        onContextChange?.({ ...context, entries: newEntries });\r\n    }, [entries, onContextChange, context, entry]);\r\n\r\n    const moveEntry = React.useCallback(\r\n        (newIndex: number) => {\r\n            if (newIndex === sortedIndex) return;\r\n\r\n            const [newPrevIndex, newNextIndex] =\r\n                newIndex < sortedIndex ? [newIndex - 1, newIndex] : [newIndex, newIndex + 1];\r\n\r\n            const newOrder = orderGenerator(\r\n                sortedEntries[newPrevIndex]?.question.order,\r\n                sortedEntries[newNextIndex]?.question.order\r\n            );\r\n\r\n            const newEntry = { ...entry };\r\n            newEntry.question = { ...newEntry.question, order: newOrder };\r\n            onEntryChange?.(newEntry);\r\n        },\r\n        [entry, onEntryChange, orderGenerator, sortedEntries, sortedIndex]\r\n    );\r\n\r\n    return (\r\n        <>\r\n            <IconButton\r\n                iconProps={{ iconName: 'Up' }}\r\n                title={strings.questionAction(QuestionAction.MoveUp)}\r\n                disabled={!sortedEntries[sortedIndex - 1]}\r\n                onClick={() => moveEntry(sortedIndex - 1)}\r\n            />\r\n            <IconButton\r\n                iconProps={{ iconName: 'Down' }}\r\n                title={strings.questionAction(QuestionAction.MoveDown)}\r\n                disabled={!sortedEntries[sortedIndex + 1]}\r\n                onClick={() => moveEntry(sortedIndex + 1)}\r\n            />\r\n            <IconButton\r\n                iconProps={{ iconName: 'Add' }}\r\n                title={strings.questionAction(QuestionAction.Add)}\r\n                onClick={addEntry}\r\n                disabled={reachMaxEntries}\r\n            />\r\n            <IconButton\r\n                iconProps={{ iconName: 'Copy' }}\r\n                title={strings.questionAction(QuestionAction.Copy)}\r\n                onClick={copyEntry}\r\n                disabled={reachMaxEntries}\r\n            />\r\n            <IconButton\r\n                iconProps={{ iconName: 'Delete' }}\r\n                title={strings.questionAction(QuestionAction.Delete)}\r\n                onClick={deleteEntry}\r\n            />\r\n        </>\r\n    );\r\n}\r\n","import { mergeStyles } from '@fluentui/react';\r\nimport { useId } from '@fluentui/react-hooks';\r\nimport React from 'react';\r\nimport { PeopleCoin } from '../PeopleCoin';\r\nimport { FormatOptionalStringBySelection, PeopleSelection, RetrieveIcon } from '../types';\r\nimport { usePeopleListStyles } from './PeopleList.styles';\r\n\r\n/**\r\n * The props for the PeopleList component, which renders a list of people in a vertical layout.\r\n *\r\n * @property label The label for the list.\r\n * @property selections The people to display.\r\n * @property formatName A function to format the name for each person.\r\n * @property formatDescription A function to format the description for each person.\r\n * @property onRetrieveIcon A function to retrieve the icon for each person.\r\n * @property onItemClick A callback for when a person is clicked.\r\n * @property labelClassName The class name for the label.\r\n * @property listClassName The class name for the list.\r\n * @property itemClassName The class name for each person item.\r\n */\r\nexport interface PeopleListProps extends React.HTMLAttributes<HTMLDivElement> {\r\n    label?: string;\r\n    selections: PeopleSelection[];\r\n    formatName?: FormatOptionalStringBySelection;\r\n    formatDescription?: FormatOptionalStringBySelection;\r\n    onRetrieveIcon?: RetrieveIcon;\r\n    onItemClick?: (selection: PeopleSelection) => void;\r\n    labelClassName?: string;\r\n    listClassName?: string;\r\n    itemClassName?: string;\r\n}\r\n\r\nexport const PeopleList: React.FC<PeopleListProps> = ({\r\n    label,\r\n    selections,\r\n    formatName,\r\n    formatDescription,\r\n    onRetrieveIcon,\r\n    onItemClick,\r\n    labelClassName,\r\n    listClassName,\r\n    itemClassName,\r\n    ...props\r\n}) => {\r\n    const labelId = useId('label');\r\n\r\n    const styles = usePeopleListStyles();\r\n    return (\r\n        <div {...props}>\r\n            {label && (\r\n                <div id={labelId} className={mergeStyles(styles.label, labelClassName)}>\r\n                    {label}\r\n                </div>\r\n            )}\r\n            <div className={mergeStyles(styles.list, listClassName)} role='list' aria-labelledby={labelId}>\r\n                {selections.map(selection => (\r\n                    <div\r\n                        key={selection.id}\r\n                        className={mergeStyles(styles.item, itemClassName)}\r\n                        role='listitem'\r\n                        onClick={() => onItemClick?.(selection)}>\r\n                        <PeopleCoin selection={selection} onRetrieveIcon={onRetrieveIcon} coinSize={24} />\r\n                        <div className={styles.text}>\r\n                            <div>{formatName?.(selection) ?? selection.name}</div>\r\n                            <div>{formatDescription?.(selection)}</div>\r\n                        </div>\r\n                    </div>\r\n                ))}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n","import { FontSizes, makeStyles } from '@addressbook/components-fluentui-teams-theme';\r\n\r\nexport const useInsertLinkStyles = makeStyles({\r\n    root: {\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        gap: '8px',\r\n    },\r\n    buttons: {\r\n        display: 'flex',\r\n        justifyContent: 'flex-end',\r\n        gap: '8px',\r\n    },\r\n});\r\n\r\nexport const useInsertLinkDialogStyles = makeStyles({\r\n    root: {\r\n        '.ms-Dialog-content': {\r\n            display: 'flex',\r\n            flexDirection: 'column',\r\n            gap: '16px',\r\n        },\r\n    },\r\n});\r\n\r\nexport const useInsertLinkMenuStyles = makeStyles({\r\n    root: {\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        gap: '8px',\r\n        padding: '16px',\r\n    },\r\n    header: {\r\n        fontSize: FontSizes.size14,\r\n        fontWeight: 600,\r\n    },\r\n});\r\n","import { ServiceInterceptor } from '../types';\r\nimport { TestRequest, RequestSelector, urlSelector, isGet } from './utilities';\r\n\r\nexport interface PoolingInterceptorOptions {\r\n    test?: TestRequest;\r\n    pool: PromisePool;\r\n}\r\n\r\n/**\r\n * Create a service interceptor that pools pending promises for requests and reuses them.\r\n *\r\n * @property test Determines whether a request should be pooled.\r\n * @property selector A function that selects a key from a request.\r\n * @property pool A map of pending promises.\r\n * @returns An interceptor.\r\n */\r\nexport function createPoolingInterceptor({ test = isGet, pool }: PoolingInterceptorOptions): ServiceInterceptor {\r\n    return async (request, proceed) => {\r\n        if (!test(request)) return proceed(request);\r\n        return pool.acquire(request, () => proceed(request));\r\n    };\r\n}\r\n\r\n/**\r\n * A promise pool.\r\n *\r\n * @property acquire Acquire a promise for a request.\r\n */\r\nexport interface PromisePool {\r\n    acquire(request: Request, fire: () => Promise<Response>): Promise<Response>;\r\n}\r\n\r\n/**\r\n * A promise pool that pools pending promises for requests and reuses them based on a key.\r\n */\r\nexport class KeyedPromisePool implements PromisePool {\r\n    private pendings = new Map<PropertyKey, Promise<Response>>();\r\n\r\n    /**\r\n     * Creates an instance of MemoryPromisePool.\r\n     *\r\n     * @param selector A function that selects a key from a request.\r\n     */\r\n    constructor(private selector: RequestSelector = urlSelector) {}\r\n\r\n    async acquire(request: Request, fire: () => Promise<Response>): Promise<Response> {\r\n        const key = this.selector(request);\r\n\r\n        const pending = this.pendings.get(key);\r\n        if (pending) return (await pending).clone();\r\n\r\n        const fired = fire();\r\n        this.pendings.set(key, fired);\r\n\r\n        try {\r\n            return await fired;\r\n        } finally {\r\n            this.pendings.delete(key);\r\n        }\r\n    }\r\n}\r\n","export * from './PeopleCoin';\r\n","import { DefaultButton, mergeStyles, PrimaryButton, TextField } from '@fluentui/react';\r\nimport React from 'react';\r\nimport { RichTextFieldButton, RichTextFieldStrings } from '../../types';\r\nimport { useInsertLinkStyles } from './InsertLink.styles';\r\n\r\nexport interface Link {\r\n    url: string;\r\n    displayText: string;\r\n}\r\n\r\nexport interface InsertLinkProps extends React.HTMLAttributes<HTMLDivElement> {\r\n    initialLink: Link;\r\n    onConfirm?: (link: Link) => void;\r\n    onCancel?: () => void;\r\n    normalizeUrl?: (url: string) => string;\r\n    strings: Pick<RichTextFieldStrings, 'button' | 'insertLinkTitle' | 'insertLinkUrl' | 'insertLinkDisplayAs'>;\r\n}\r\n\r\nexport const InsertLink: React.FC<InsertLinkProps> = ({\r\n    initialLink,\r\n    onConfirm,\r\n    onCancel,\r\n    normalizeUrl,\r\n    strings,\r\n    className,\r\n    ...props\r\n}) => {\r\n    const [displayText, setDisplayText] = React.useState(initialLink.displayText);\r\n    const [url, setUrl] = React.useState(initialLink.url);\r\n    const normalizedUrl = React.useMemo(() => normalizeUrl?.(url) ?? url, [url, normalizeUrl]);\r\n\r\n    const onConfirmInternal = React.useCallback(() => {\r\n        if (!normalizedUrl) return;\r\n        onConfirm?.({ url: normalizedUrl, displayText: displayText || url });\r\n    }, [onConfirm, normalizedUrl, displayText, url]);\r\n\r\n    const onKeyPress = React.useCallback(\r\n        (e: React.KeyboardEvent) => {\r\n            if (e.key === 'Enter') onConfirmInternal();\r\n        },\r\n        [onConfirmInternal]\r\n    );\r\n\r\n    const styles = useInsertLinkStyles();\r\n    return (\r\n        <div className={mergeStyles(styles.root, className)} {...props}>\r\n            <TextField\r\n                label={strings.insertLinkUrl}\r\n                required\r\n                type='url'\r\n                value={url}\r\n                onChange={(_, newValue = '') => setUrl(newValue)}\r\n                onKeyPress={onKeyPress}\r\n            />\r\n            <TextField\r\n                label={strings.insertLinkDisplayAs}\r\n                value={displayText}\r\n                onChange={(_, newValue = '') => setDisplayText(newValue)}\r\n                onKeyPress={onKeyPress}\r\n            />\r\n            <div className={mergeStyles(styles.buttons)}>\r\n                <DefaultButton onClick={onCancel}>{strings.button(RichTextFieldButton.Cancel)}</DefaultButton>\r\n                <PrimaryButton onClick={onConfirmInternal} disabled={!normalizedUrl}>\r\n                    {strings.button(RichTextFieldButton.OK)}\r\n                </PrimaryButton>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n","export * from './RestrictionSettings';\r\n","/*\r\n *  Copyright © Microsoft Corporation. All rights reserved.\r\n */\r\nimport React from 'react';\r\nimport { IStyle, Text, Icon, mergeStyles } from '@fluentui/react';\r\nimport { useKeyboardInvoke } from '@addressbook/utilities-hooks';\r\nimport { useCommonIconStyles } from './CommonIcon.styles';\r\n\r\nexport interface CommonIconProps {\r\n    /**\r\n     * icon name or icon element\r\n     * - IconName or string as iconName\r\n     * - Any JSX.Element as rendered icon\r\n     */\r\n    icon?: string | JSX.Element;\r\n    iconColor?: string;\r\n    iconBackgroundColor?: string;\r\n    size?: CommonIconSize;\r\n    styles?: CommonIconStyles;\r\n\r\n    title?: string;\r\n    titleId?: string;\r\n    titleAs?: React.ElementType<React.HTMLAttributes<HTMLElement>>;\r\n    description?: React.ReactNode;\r\n    descriptionId?: string;\r\n\r\n    editIconAriaLabel?: string;\r\n    onIconClick?: () => void;\r\n    className?: string;\r\n\r\n    titleTrailingItem?: React.ReactNode;\r\n    rightItem?: React.ReactNode;\r\n}\r\n\r\nexport interface CommonIconStyles {\r\n    root?: IStyle;\r\n    content?: IStyle;\r\n    editIcon?: IStyle;\r\n    title?: IStyle;\r\n    description?: IStyle;\r\n    textarea?: IStyle;\r\n    iconContainer?: IStyle;\r\n}\r\n\r\n/**\r\n * size of icon container\r\n */\r\nexport enum CommonIconSize {\r\n    Size28 = 'icon-size-28',\r\n    Size32 = 'icon-size-32',\r\n    Size40 = 'icon-size-40',\r\n    Size44 = 'icon-size-44',\r\n    Size48 = 'icon-size-48',\r\n    Size64 = 'icon-size-64',\r\n    Size80 = 'icon-size-80',\r\n}\r\n\r\nexport const CommonIcon: React.FC<CommonIconProps> = ({\r\n    icon,\r\n    iconColor = 'white',\r\n    iconBackgroundColor,\r\n    size = CommonIconSize.Size32,\r\n    styles = {},\r\n    title,\r\n    titleId,\r\n    titleAs,\r\n    description,\r\n    descriptionId,\r\n    onIconClick,\r\n    editIconAriaLabel,\r\n    className,\r\n    titleTrailingItem,\r\n    rightItem,\r\n}: CommonIconProps): JSX.Element => {\r\n    const defaultStyles = useCommonIconStyles();\r\n\r\n    const ref = useKeyboardInvoke<HTMLDivElement>();\r\n\r\n    return (\r\n        <div className={mergeStyles(defaultStyles.root, styles.root, className)}>\r\n            <div className={mergeStyles(size, defaultStyles.content, styles.content)}>\r\n                {icon && (\r\n                    <div\r\n                        role={onIconClick ? 'button' : 'presentation'}\r\n                        tabIndex={onIconClick ? 0 : undefined}\r\n                        onClick={onIconClick}\r\n                        ref={ref}\r\n                        aria-label={onIconClick && editIconAriaLabel}\r\n                        className={mergeStyles(\r\n                            defaultStyles.iconContainer,\r\n                            iconBackgroundColor && {\r\n                                backgroundColor: iconBackgroundColor,\r\n                            },\r\n                            styles.iconContainer\r\n                        )}>\r\n                        {typeof icon === 'string' ? (\r\n                            <Icon\r\n                                className={mergeStyles(defaultStyles.icon, {\r\n                                    color: iconColor,\r\n                                    fill: iconColor,\r\n                                })}\r\n                                iconName={icon}\r\n                            />\r\n                        ) : (\r\n                            icon\r\n                        )}\r\n                        {onIconClick && (\r\n                            <Icon className={mergeStyles(defaultStyles.editIcon, styles.editIcon)} iconName='Edit' />\r\n                        )}\r\n                    </div>\r\n                )}\r\n                {(title || description) && (\r\n                    <div className={mergeStyles(defaultStyles.textContainer, styles.textarea)}>\r\n                        {title && (\r\n                            <div className={defaultStyles.titleContainer}>\r\n                                <Text\r\n                                    id={titleId}\r\n                                    title={title}\r\n                                    role='presentation'\r\n                                    // prevent screen reader from reading the title twice (group) in MacOS\r\n                                    // about presentation role: https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Techniques/Using_the_presentation_role\r\n                                    className={mergeStyles(defaultStyles.title, styles.title)}\r\n                                    as={titleAs}>\r\n                                    {title}\r\n                                </Text>\r\n                                {titleTrailingItem}\r\n                            </div>\r\n                        )}\r\n                        {description &&\r\n                            (typeof description === 'string' ? (\r\n                                <Text\r\n                                    id={descriptionId}\r\n                                    title={description}\r\n                                    role='presentation'\r\n                                    className={mergeStyles(defaultStyles.description, styles.description)}>\r\n                                    {description}\r\n                                </Text>\r\n                            ) : (\r\n                                description\r\n                            ))}\r\n                    </div>\r\n                )}\r\n            </div>\r\n            {rightItem}\r\n        </div>\r\n    );\r\n};\r\n","/*\r\n *  Copyright © Microsoft Corporation. All rights reserved.\r\n */\r\n\r\nimport { IDialogStyles } from '@fluentui/react';\r\nimport { makeStyles } from '@addressbook/components-fluentui-teams-theme';\r\n\r\nexport const useDialogStyles = makeStyles<Partial<IDialogStyles>>(() => {\r\n    return {\r\n        main: {\r\n            maxWidth: '600px !important',\r\n            width: '600px !important',\r\n            margin: '0 5px',\r\n        },\r\n    };\r\n});\r\n\r\nexport const useContentStyles = makeStyles(() => ({\r\n    footerButtons: {\r\n        display: 'flex',\r\n        flexDirection: 'row-reverse',\r\n        flexWrap: 'nowrap',\r\n        whiteSpace: 'nowrap',\r\n        justifyContent: 'space-between',\r\n        '.ms-Dialog-actions': {\r\n            width: '100%',\r\n        },\r\n        '.ms-Dialog-actionsRight': {\r\n            width: '100%',\r\n        },\r\n        '.ms-Dialog-action:first-child:nth-last-child(1)': {\r\n            maxWidth: '100%',\r\n            display: 'inline-block',\r\n        },\r\n        '.ms-Dialog-action:first-child:nth-last-child(2), .ms-Dialog-action:first-child:nth-last-child(2) ~ .ms-Dialog-action':\r\n            {\r\n                maxWidth: '50%',\r\n                display: 'inline-block',\r\n            },\r\n        '.ms-Dialog-action:first-child:nth-last-child(3), .ms-Dialog-action:first-child:nth-last-child(3) ~ .ms-Dialog-action':\r\n            {\r\n                maxWidth: '33.3%',\r\n                display: 'inline-block',\r\n            },\r\n        '.ms-Button': {\r\n            maxWidth: '100%',\r\n        },\r\n        '.ms-Button-flexContainer': {\r\n            maxWidth: '100%',\r\n        },\r\n        '.ms-Button-textContainer': {\r\n            maxWidth: '100%',\r\n        },\r\n    },\r\n    button: {\r\n        height: '28px',\r\n        padding: 0,\r\n        '.ms-Button-label': {\r\n            maxWidth: '100%',\r\n            overflow: 'hidden',\r\n            whiteSpace: 'nowrap',\r\n            textOverflow: 'ellipsis',\r\n            wordBreak: 'break-all',\r\n            height: '1rem',\r\n        },\r\n        flexFlow: '1',\r\n        flexShrink: '0',\r\n    },\r\n    primaryButton: {\r\n        borderRadius: '5px',\r\n    },\r\n}));\r\n","import { uuid } from '@addressbook/utilities-core';\r\nimport { IdGenerator } from '../types';\r\n\r\nexport const uuidIdGenerator: IdGenerator = uuid;\r\n","/*\r\n *  Copyright © Microsoft Corporation. All rights reserved.\r\n */\r\n\r\nexport * from './CommonIcon.component';\r\n","export * from './RenderingField';\r\n","export * from './comparators';\r\nexport * from './constants';\r\nexport * from './default';\r\nexport * from './descriptors';\r\nexport * from './idGenerators';\r\nexport * from './keyExtractors';\r\nexport * from './orderGenerators';\r\nexport * from './sanitizers';\r\nexport * from './strings';\r\nexport * from './trailingRenders';\r\nexport * from './validators';\r\n","/* istanbul ignore file */\r\n\r\n// Default theme colors\r\n// eslint-disable-next-line @typescript-eslint/no-namespace\r\nexport namespace CoreColors {\r\n    export const appBlack = '#252423';\r\n    export const appBlackAlpha10 = '#e8e7e6';\r\n    export const appWhite = '#fff';\r\n    export const appWhiteAlpha10 = 'rgba(255, 255, 255, 0.1)';\r\n\r\n    export const appBrand02 = '#33344a';\r\n    export const appBrand04 = '#464775';\r\n    export const appBrand06 = '#6264a7';\r\n    export const appBrand08 = '#8b8cc7';\r\n    export const appBrand12 = '#bdbde6';\r\n    export const appBrand14 = '#e2e2f6';\r\n    export const appBrand16 = '#f4f4fc';\r\n\r\n    export const appBrand00 = '#6264a7'; // Does not swap in dark theme\r\n\r\n    export const appGray02 = '#484644';\r\n    export const appGray03 = '#605e5c';\r\n    export const appGray04 = '#979593';\r\n    export const appGray06 = '#c8c6c4';\r\n    export const appGray08 = '#e1dfdd';\r\n    export const appGray09 = '#edebe9';\r\n    export const appGray10 = '#f3f2f1';\r\n    export const appGray12 = 'rgba(37, 36, 35, 0.05)';\r\n    export const appGray14 = '#faf9f8';\r\n\r\n    export const appRed = '#eeacb2';\r\n    export const appRedLight = '#fdf6f6';\r\n    export const appRedDark = '#b10e1c';\r\n    export const appGreen = '#9fd89f';\r\n    export const appGreenLight = '#f1faf1';\r\n    export const appGreenDark = '#0e700e';\r\n\r\n    export const overlayBackground = 'rgba(37, 36, 35, .75)';\r\n    export const placeHolderTextColor = '#616161';\r\n    export const pickerPersonaContainerBackground = '#e9eaf6';\r\n}\r\n\r\n// Dark theme colors\r\n// eslint-disable-next-line @typescript-eslint/no-namespace\r\nexport namespace DarkColors {\r\n    export const appBlack = '#fff';\r\n    export const appBlackAlpha10 = 'rgba(255, 255, 255, 0.1)';\r\n    export const appWhite = '#201f1f';\r\n    export const appWhiteAlpha10 = 'rgba(255, 255, 255, 0.1)';\r\n\r\n    export const appBrand02 = '#e2e3f6';\r\n    export const appBrand04 = '#bdbde6';\r\n    export const appBrand06 = '#a6a7dc';\r\n    export const appBrand08 = '#8b8cc7';\r\n    export const appBrand12 = '#6264a7';\r\n    export const appBrand14 = '#464775';\r\n    export const appBrand16 = '#33344a';\r\n\r\n    export const appGray02 = '#c8c6c4';\r\n    export const appGray03 = '#b3b0ad';\r\n    export const appGray04 = '#8a8886';\r\n    export const appGray06 = '#605e5c';\r\n    export const appGray08 = '#484644';\r\n    export const appGray09 = '#3b3a3a';\r\n    export const appGray10 = '#2d2c2c';\r\n    export const appGray12 = 'rgba(255, 255, 255, 0.05)';\r\n    export const appGray14 = '#292828';\r\n\r\n    export const appRed = '#dc626d';\r\n    export const appRedLight = '#3b0509';\r\n    export const appRedDark = '#c50f1f';\r\n    export const appGreen = '#107c10';\r\n    export const appGreenLight = '#052505';\r\n    export const appGreenDark = '#54b054';\r\n\r\n    export const redTextDark = '#f9526b';\r\n    export const overlayBackground = 'rgba(37,36,35,.75)';\r\n    export const appPersonaBackground = '#3B3A3A';\r\n    export const pickerPersonaContainerBackground = '#323348';\r\n}\r\n\r\n// Contrast theme colors\r\n// eslint-disable-next-line @typescript-eslint/no-namespace\r\nexport namespace ContrastColors {\r\n    export const appBlack = '#fff';\r\n    export const appBlackAlpha10 = 'rgba(255, 255, 255, 0.1)';\r\n    export const appWhite = '#000';\r\n    export const appWhiteAlpha10 = 'rgba(255, 255, 255, 0.1)';\r\n    export const NeutralForeground3 = '#ADADAD';\r\n\r\n    export const appBrand02 = '#000';\r\n    export const appBrand04 = '#ffff00';\r\n    export const appBrand06 = '#00ebff';\r\n    export const appBrand08 = '#ffff00';\r\n    export const appBrand12 = '#ffff00';\r\n    export const appBrand14 = '#000';\r\n    export const appBrand16 = '#000';\r\n\r\n    export const appGray02 = '#fff';\r\n    export const appGray03 = '#000';\r\n    export const appGray04 = '#fff';\r\n    export const appGray06 = '#000';\r\n    export const appGray08 = '#fff';\r\n    export const appGray09 = '#000';\r\n    export const appGray10 = '#000';\r\n    export const appGray12 = '#fff';\r\n    export const appGray14 = '#000';\r\n\r\n    export const appGreenContrast = '#30f42c';\r\n\r\n    export const overlayBackground = 'rgba(0,0,0,.75)';\r\n\r\n    export const appRed = '#fff';\r\n    export const appRedLight = '#000';\r\n    export const appRedDark = '#fff';\r\n    export const appGreen = '#fff';\r\n    export const appGreenLight = '#000';\r\n    export const appGreenDark = '#fff';\r\n\r\n    export const pickerPersonaContainerBackground = '#ffff00';\r\n}\r\n\r\n// Default V2 theme colors\r\n// eslint-disable-next-line @typescript-eslint/no-namespace\r\nexport namespace DefaultV2Colors {\r\n    export const appBlack = '#242424';\r\n    export const appBlackAlpha10 = 'rgba(255, 255, 255, 0.1)'; // Missing\r\n    export const appWhite = '#fff';\r\n    export const appWhiteAlpha10 = 'rgba(255, 255, 255, 0.1)'; // Missing\r\n\r\n    export const appBrand02 = '#2F2F4A';\r\n    export const appBrand04 = '#383966';\r\n    export const appBrand05 = '#444791';\r\n    export const appBrand06 = '#5B5FC7';\r\n    export const appBrand08 = '#9092c1';\r\n    export const appBrand12 = '#a5a7cf';\r\n    export const appBrand14 = '#bbbcdd';\r\n    export const appBrand16 = '#E8EBFA';\r\n\r\n    export const appGray02 = '#424242';\r\n    export const appGray03 = '#616161';\r\n    export const appGray04 = '#8a8a8a';\r\n    export const appGray06 = '#bdbdbd';\r\n    export const appGray08 = '#d1d1d1';\r\n    export const appGray09 = '#ebebeb';\r\n    export const appGray10 = '#f0f0f0';\r\n    export const appGray12 = '#f5f5f5';\r\n    export const appGray14 = '#fafafa';\r\n\r\n    export const appRed = '#b10e1c';\r\n    export const appRedLight = '#fdf6f6';\r\n    export const appRedDark = '#eeacb2';\r\n    export const appGreen = '#9fd89f';\r\n    export const appGreenLight = '#f1faf1';\r\n    export const appGreenDark = '#0e700e';\r\n\r\n    export const overlayBackground = 'rgba(37,36,35,.75)'; // Missing\r\n}\r\n\r\n// Dark V2 theme colors\r\n// eslint-disable-next-line @typescript-eslint/no-namespace\r\nexport namespace DarkV2Colors {\r\n    export const appBlack = '#fff';\r\n    export const appBlackAlpha10 = 'rgba(255, 255, 255, 0.1)'; // Missing\r\n    export const appWhite = '#292929';\r\n    export const appWhiteAlpha10 = 'rgba(255, 255, 255, 0.1)'; // Missing\r\n\r\n    export const appBrand02 = '#C5CBFA';\r\n    export const appBrand04 = '#ACB3FA';\r\n    export const appBrand05 = '#444791';\r\n    export const appBrand06 = '#9399F5';\r\n    export const appBrand08 = '#7A80EB';\r\n    export const appBrand12 = '#5B5FC7';\r\n    export const appBrand14 = '#444791';\r\n    export const appBrand16 = '#2F2F4A';\r\n\r\n    export const appGray02 = '#d6d6d6';\r\n    export const appGray03 = '#adadad';\r\n    export const appGray04 = '#8a8a8a';\r\n    export const appGray06 = '#666';\r\n    export const appGray08 = '#5c5c5c';\r\n    export const appGray09 = '#3d3d3d';\r\n    export const appGray10 = '#141414';\r\n    export const appGray12 = '#1f1f1f';\r\n    export const appGray14 = '#242424';\r\n\r\n    export const appRed = '#dc626d';\r\n    export const appRedLight = '#3b0509';\r\n    export const appRedDark = '#c50f1f';\r\n    export const appGreen = '#107c10';\r\n    export const appGreenLight = '#052505';\r\n    export const appGreenDark = '#54b054';\r\n\r\n    export const overlayBackground = 'rgba(37,36,35,.75)'; // Missing\r\n}\r\n\r\n// eslint-disable-next-line @typescript-eslint/no-namespace\r\nexport namespace SecondaryColors {\r\n    export const appOrange01 = '#833122';\r\n    export const appOrange02 = '#a33d2a';\r\n    export const appOrange03 = '#bd432c';\r\n    export const appOrange04 = '#cc4a31';\r\n    export const appOrange = '#e97548';\r\n    export const appOrange14 = '#efdbd3';\r\n    export const appOrange16 = '#f9ecea';\r\n\r\n    export const appGreen = '#92c353';\r\n    export const appGreen04 = '#237b4b';\r\n\r\n    export const grey2 = '#050505';\r\n    export const grey6 = '#0f0f0f';\r\n    export const grey10 = '#1a1a1a';\r\n    export const grey18 = '#2e2e2e';\r\n    export const grey20 = '#333333';\r\n    export const grey22 = '#383838';\r\n    export const grey88 = '#e0e0e0';\r\n}\r\n\r\n// eslint-disable-next-line @typescript-eslint/no-namespace\r\nexport namespace BoxShadowColors {\r\n    export const boxShadowColor = 'rgba(0,0,0,.1)';\r\n    export const boxShadowColorDark = 'rgba(0,0,0,.25)';\r\n    export const boxShadowColorDarkV2 = 'rgba(0,0,0,.3)';\r\n    export const boxShadowColorDarker = 'rgba(0,0,0,.5)';\r\n}\r\nexport const appWhiteAlpha10 = 'rgba(37, 36, 36, 0.1)';\r\n","import { Interceptor, InterceptorTarget } from './types';\r\n\r\n/**\r\n * Apply an interceptor to a target.\r\n *\r\n * @param interceptor The interceptor to apply.\r\n * @param target The target to apply the interceptor to.\r\n * @returns The target with the interceptor applied.\r\n */\r\nexport function applyInterceptor<Param, Result>(\r\n    interceptor: Interceptor<Param, Result>,\r\n    target: InterceptorTarget<Param, Result>\r\n): InterceptorTarget<Param, Result> {\r\n    return param => interceptor(param, target);\r\n}\r\n\r\n/**\r\n * Compose multiple interceptors into a single interceptor.\r\n * The interceptors are called in order, with the next interceptor as the proceed function.\r\n *\r\n * @param interceptors The interceptors to compose.\r\n * @returns The composed interceptor.\r\n */\r\nexport function composeInterceptors<Param, Result>(\r\n    interceptors: Interceptor<Param, Result>[]\r\n): Interceptor<Param, Result> {\r\n    return interceptors.reduce(composeInterceptorsInternal);\r\n}\r\n\r\n/**\r\n * Compose two interceptors into a single interceptor.\r\n *\r\n * @param current The interceptor to call first.\r\n * @param next The interceptor to call second.\r\n * @returns The composed interceptor.\r\n */\r\nfunction composeInterceptorsInternal<Param, Result>(\r\n    current: Interceptor<Param, Result>,\r\n    next: Interceptor<Param, Result>\r\n): Interceptor<Param, Result> {\r\n    return (param, proceed) => current(param, applyInterceptor(next, proceed));\r\n}\r\n","import Mention from '@tiptap/extension-mention';\r\n\r\nexport const CustomizedMention = Mention.extend({\r\n    addAttributes() {\r\n        // Return an object with attribute configuration\r\n        return {\r\n            id: {\r\n                default: null,\r\n                parseHTML: element => {\r\n                    return element.getAttribute('data-mention-id');\r\n                },\r\n                renderHTML: attributes => {\r\n                    if (!attributes.id) {\r\n                        return {};\r\n                    }\r\n\r\n                    return {\r\n                        'data-mention-id': attributes.id,\r\n                    };\r\n                },\r\n            },\r\n\r\n            type: {\r\n                default: null,\r\n                parseHTML: element => element.getAttribute('data-mention-type'),\r\n                renderHTML: attributes => {\r\n                    if (!attributes.type) {\r\n                        return {};\r\n                    }\r\n\r\n                    return {\r\n                        'data-mention-type': attributes.type,\r\n                    };\r\n                },\r\n            },\r\n\r\n            label: {\r\n                default: null,\r\n                rendered: false,\r\n                parseHTML: element => element.innerText,\r\n            },\r\n        };\r\n    },\r\n\r\n    renderHTML: props => [\r\n        'span',\r\n        {\r\n            'data-type': 'mention',\r\n            'data-mention-id': props.node.attrs?.id,\r\n            'data-mention-type': props.node.attrs?.type,\r\n        },\r\n        props.node.attrs?.label ?? props.node.attrs?.id,\r\n    ],\r\n});\r\n","import { DriveItem, DriveItemUploadableProperties, Permission, UploadSession } from '@microsoft/microsoft-graph-types';\r\nimport { ServiceOperation, ServiceOperationError, ServiceResourceLocator } from '@addressbook/services-core';\r\nimport { silently } from '@addressbook/utilities-core';\r\nimport { AccessSharingLinkOptions, ThumbnailSize, UploadOptions } from '../types';\r\nimport { GraphThumbnailResource } from './thumbnail';\r\n\r\n/**\r\n * The drive item resource.\r\n *\r\n * @see https://learn.microsoft.com/graph/api/resources/driveitem\r\n */\r\nexport class GraphDriveItemResource {\r\n    constructor(private operation: ServiceOperation, private locator: ServiceResourceLocator) {}\r\n\r\n    /**\r\n     * Navigates to the root of the drive.\r\n     *\r\n     * @param index The thumbnail index.\r\n     * @param size The thumbnail size.\r\n     * @returns The thumbnail resource.\r\n     */\r\n    thumbnails(index: number, size: ThumbnailSize): GraphThumbnailResource {\r\n        return new GraphThumbnailResource(this.operation, this.locator.extend('thumbnails', index.toString(), size));\r\n    }\r\n\r\n    /**\r\n     * Gets the id of the drive item.\r\n     *\r\n     * @param signal The abort signal.\r\n     * @returns The id of the drive item, or an empty string if the drive item does not exist.\r\n     * @see https://learn.microsoft.com/graph/api/driveitem-get\r\n     */\r\n    async getId(signal?: AbortSignal): Promise<string | undefined> {\r\n        const url = `/v1.0/${this.locator.path}?$select=id`;\r\n        try {\r\n            const response = await this.operation.requestJson<DriveItem>(url, { signal });\r\n            return response.id;\r\n        } catch (error) {\r\n            if (error instanceof ServiceOperationError && error.response.status === 404) return;\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Shares the drive item.\r\n     *\r\n     * @param signal The abort signal.\r\n     * @returns The sharing link.\r\n     * @see https://learn.microsoft.com/graph/api/driveitem-createlink\r\n     */\r\n    async share(signal?: AbortSignal): Promise<string> {\r\n        const url = `/v1.0/${this.locator.path}/createLink`;\r\n        const response = await this.operation.requestJson<Permission>(url, {\r\n            method: 'POST',\r\n            headers: { 'Content-Type': 'application/json' },\r\n            body: JSON.stringify({ type: 'view', scope: 'organization' }),\r\n            signal,\r\n        });\r\n        return response.link?.webUrl ?? '';\r\n    }\r\n\r\n    /**\r\n     * Creates a folder under the drive item.\r\n     *\r\n     * @param name The folder name.\r\n     * @param signal The abort signal.\r\n     * @returns The id of the created folder.\r\n     * @see https://learn.microsoft.com/graph/api/driveitem-post-children\r\n     */\r\n    async createFolder(name: string, signal?: AbortSignal): Promise<string> {\r\n        const url = `/v1.0/${this.locator.path}/children`;\r\n        const response = await this.operation.requestJson<DriveItem>(url, {\r\n            method: 'POST',\r\n            headers: { 'Content-Type': 'application/json' },\r\n            body: JSON.stringify({ name, folder: {} }),\r\n            signal,\r\n        });\r\n        return response.id ?? '';\r\n    }\r\n\r\n    /**\r\n     * Uploads the drive item using an upload session.\r\n     *\r\n     * @param file The file to upload.\r\n     * @param options The upload options.\r\n     * @param signal The abort signal.\r\n     * @returns The id of the uploaded item.\r\n     * @see https://learn.microsoft.com/graph/api/driveitem-createuploadsession\r\n     */\r\n    async upload(file: File, { conflictBehavior, ...options }: UploadOptions, signal?: AbortSignal): Promise<string> {\r\n        const url = `/v1.0/${this.locator.path}/createUploadSession`;\r\n        const response = await this.operation.requestJson<UploadSession>(url, {\r\n            method: 'POST',\r\n            headers: { 'Content-Type': 'application/json' },\r\n            body: JSON.stringify({\r\n                item: {\r\n                    '@microsoft.graph.conflictBehavior': conflictBehavior,\r\n                    ...getDriveItemUploadableProperties(file),\r\n                },\r\n                deferCommit: true,\r\n            }),\r\n            signal,\r\n        });\r\n\r\n        const { uploadUrl } = response;\r\n        if (!uploadUrl) throw new Error('Upload URL not found.');\r\n\r\n        try {\r\n            return await this.performUpload(file, uploadUrl, options, signal);\r\n        } catch (error) {\r\n            // Delete the upload session if the upload fails, so that the upload session is not left open.\r\n            // The signal is not passed intentionally to ensure the delete request is sent.\r\n            // Ignore the error if the delete request fails.\r\n            await silently(this.operation.request(uploadUrl, { method: 'DELETE' }));\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    private async performUpload(\r\n        file: File,\r\n        url: string,\r\n        { chunkSize = defaultChunkSize, onProgress }: Omit<UploadOptions, 'conflictBehavior'>,\r\n        signal?: AbortSignal\r\n    ): Promise<string> {\r\n        // Loop until the upload is complete.\r\n        let expectedRange: [number, number | undefined] = [0, undefined];\r\n        while (true) {\r\n            const start = expectedRange[0];\r\n            const end = Math.min(expectedRange[1] ?? start + chunkSize, file.size);\r\n            const chunk = file.slice(start, end);\r\n            if (!chunk.size) break;\r\n\r\n            onProgress?.(start / file.size);\r\n            const response = await this.operation.requestJson<UploadSession>(url, {\r\n                method: 'PUT',\r\n                headers: { 'Content-Range': `bytes ${start}-${end - 1}/${file.size}` },\r\n                body: chunk,\r\n                signal,\r\n            });\r\n\r\n            if (!response.nextExpectedRanges?.length) break;\r\n            expectedRange = parseBytesRange(response.nextExpectedRanges[0]);\r\n        }\r\n\r\n        // Commit the upload.\r\n        onProgress?.(1);\r\n        const response = await this.operation.requestJson<DriveItem>(url, { method: 'POST', signal });\r\n        return response.id ?? '';\r\n    }\r\n\r\n    /**\r\n     * Downloads the drive item content.\r\n     *\r\n     * @param options The download options.\r\n     * @param signal The abort signal.\r\n     * @returns The drive item content.\r\n     * @see https://learn.microsoft.com/graph/api/driveitem-get-content\r\n     */\r\n    download({ prefer }: AccessSharingLinkOptions = {}, signal?: AbortSignal): Promise<Blob> {\r\n        const url = `/v1.0/${this.locator.path}/content`;\r\n        return this.operation.requestBlob(url, { headers: prefer ? { Prefer: prefer } : {}, signal });\r\n    }\r\n}\r\n\r\n/**\r\n * The default chunk size for uploading files.\r\n * The chunk size must be a multiple of 320 KiB (327,680 bytes).\r\n *\r\n * https://learn.microsoft.com/graph/api/driveitem-createuploadsession#upload-bytes-to-the-upload-session\r\n */\r\nconst defaultChunkSize = 32 * 320 * 1024; // 10 MiB\r\n\r\n/**\r\n * Parses an inclusive bytes range string as a tuple of start and end byte, where the parsed end byte is exclusive.\r\n *\r\n * @param range The bytes range string, e.g. '0-41'.\r\n * @returns The start and end byte.\r\n * @see https://learn.microsoft.com/graph/api/driveitem-createuploadsession#response-1\r\n *\r\n * @example parseBytesRange('0-41') // [0, 42]\r\n * @example parseBytesRange('42-') // [42, undefined]\r\n */\r\nfunction parseBytesRange(range: string): [number, number | undefined] {\r\n    const [startByteString, endByteString] = range.split('-');\r\n    const startByte = parseInt(startByteString, 10);\r\n    const endByte = endByteString ? parseInt(endByteString, 10) + 1 : undefined;\r\n    return [startByte, endByte];\r\n}\r\n\r\n/**\r\n * Gets the uploadable properties for a file.\r\n *\r\n * @param file The file.\r\n * @returns The uploadable properties.\r\n * @see https://learn.microsoft.com/graph/api/resources/driveitemuploadableproperties\r\n */\r\nfunction getDriveItemUploadableProperties(file: File): DriveItemUploadableProperties {\r\n    return {\r\n        name: file.name,\r\n        fileSystemInfo: {\r\n            lastModifiedDateTime: new Date(file.lastModified).toISOString(),\r\n        },\r\n    };\r\n}\r\n","import { useForceUpdate } from '@fluentui/react-hooks';\r\nimport React from 'react';\r\nimport { PeopleSelection, RetrieveIcon } from '../types';\r\n\r\nexport function useIcon(selection: PeopleSelection, onRetrieveIcon?: RetrieveIcon): PeopleSelection['icon'] {\r\n    const forceUpdate = useForceUpdate();\r\n\r\n    React.useEffect(() => {\r\n        if (selection.icon || !onRetrieveIcon) return;\r\n\r\n        const retrieval = ensureRetrieval(selection, onRetrieveIcon);\r\n        if (!retrieval) return;\r\n\r\n        // Force update when retrieval is done\r\n        let mounted = true;\r\n        retrieval.then(() => mounted && forceUpdate());\r\n        return () => {\r\n            mounted = false;\r\n        };\r\n    }, [forceUpdate, onRetrieveIcon, selection]);\r\n\r\n    return selection.icon || (onRetrieveIcon && getCachedIcon(selection));\r\n}\r\n\r\nconst cachedIconsOrRetrievals = new Map<PeopleSelection['id'], PeopleSelection['icon'] | Promise<void>>();\r\n\r\n/**\r\n * Returns the cached icon or undefined if it's not cached or being retrieved.\r\n *\r\n * @param selection The selection to get the cached icon for.\r\n * @returns The cached icon.\r\n */\r\nfunction getCachedIcon(selection: PeopleSelection): PeopleSelection['icon'] {\r\n    const iconOrRetrieval = cachedIconsOrRetrievals.get(selection.id);\r\n    if (iconOrRetrieval instanceof Promise) return;\r\n\r\n    return iconOrRetrieval;\r\n}\r\n\r\n/**\r\n * Ensures that the icon is retrieved and cached.\r\n *\r\n * @param selection The selection to retrieve the icon for.\r\n * @param retrieveIcon The function to retrieve the icon.\r\n * @returns A promise that resolves when the icon is retrieved and cached or undefined if the icon is already cached.\r\n */\r\nfunction ensureRetrieval(selection: PeopleSelection, retrieveIcon: RetrieveIcon): Promise<void> | undefined {\r\n    const iconOrRetrieval = cachedIconsOrRetrievals.get(selection.id);\r\n    if (iconOrRetrieval instanceof Promise) return iconOrRetrieval;\r\n\r\n    // Since the icon can also be undefined, we need to check by key explicitly instead of checking if icon is truthy.\r\n    if (cachedIconsOrRetrievals.has(selection.id)) return;\r\n\r\n    const newRetrieval = safeRetrieveIcon(selection, retrieveIcon).then(icon => {\r\n        cachedIconsOrRetrievals.set(selection.id, icon);\r\n    });\r\n    cachedIconsOrRetrievals.set(selection.id, newRetrieval);\r\n    return newRetrieval;\r\n}\r\n\r\nasync function safeRetrieveIcon(\r\n    selection: PeopleSelection,\r\n    retrieveIcon: RetrieveIcon\r\n): Promise<PeopleSelection['icon']> {\r\n    try {\r\n        const icon = await retrieveIcon(selection);\r\n        return icon instanceof Blob ? URL.createObjectURL(icon) : icon;\r\n    } catch {\r\n        return;\r\n    }\r\n}\r\n","export enum EntryPoint {\r\n    ComposeExtension = 'composeExtension',\r\n    Workflow = 'workflow',\r\n    PersonalApp = 'personalApp',\r\n    AdaptiveCard = 'adaptiveCard',\r\n}\r\n\r\nexport enum PanelType {\r\n    WorkReport = 'workReport',\r\n    HomePage = 'homePage',\r\n    WriteReport = 'writeReport',\r\n    ReviewReport = 'reviewReport',\r\n\r\n    CreateRequestPage = 'CreateRequestPage',\r\n    EditRequestPage = 'EditRequestPage',\r\n    CopyRequestPage = 'CopyRequestPage',\r\n    SubmitUpdatePage = 'SubmitUpdatePage',\r\n    SubmitOOBEUpdatePage = 'SubmitOOBEUpdatePage',\r\n    SubmitUpdateV2Page = 'SubmitUpdateV2Page',\r\n    SubmitOOBEUpdateV2Page = 'SubmitOOBEUpdateV2Page',\r\n    AggregatedViewPage = 'AggregatedViewPage',\r\n\r\n    TaskModuleRBACListPage = 'TaskModuleRBACListPage',\r\n    TaskModuleCollectUpdatesPage = 'TaskModuleCollectUpdatesPage',\r\n    TaskModuleSuccessStoryPage = 'TaskModuleSuccessStoryPage',\r\n    TaskModulePreviewTemplatePage = 'TaskModulePreviewTemplatePage',\r\n    TaskModuleCreateRequestPage = 'TaskModuleCreateRequestPage',\r\n    PreviewAdaptiveCardPage = 'PreviewAdaptiveCardPage',\r\n    TaskModuleSubmitUpdatePage = 'TaskModuleSubmitUpdatePage',\r\n    TaskModuleSendReminderPage = 'TaskModuleSendReminderPage',\r\n    TaskModuleReviewReportPage = 'TaskModuleReviewReportPage',\r\n}\r\n\r\nexport enum InvokedContext {\r\n    Chat = 'Chat',\r\n    Team = 'Team',\r\n    Global = 'Global',\r\n}\r\n\r\nexport enum LoggerLevels {\r\n    info = 'info',\r\n    debug = 'debug',\r\n    log = 'log',\r\n    warn = 'warn',\r\n    error = 'error',\r\n}\r\n\r\n// Log Category Sources for scenarios\r\nexport enum CommonLogCategory {\r\n    GlobalException = 'GlobalException',\r\n    HTTPException = 'HTTPException',\r\n}\r\n\r\n/**\r\n * The region of the page the panel is located\r\n * in (Ex: Panel_Type = Channel, Panel.Region = Main or Right)\r\n * Note: Keep the enums Alphabetically Sorted\r\n */\r\nexport enum PanelRegion {\r\n    Banner = 'banner',\r\n    Dialog = 'dialog',\r\n    Footer = 'footer',\r\n    Header = 'header',\r\n    Left = 'left',\r\n    Main = 'main',\r\n    Modal = 'modal',\r\n    Popover = 'popover',\r\n    Right = 'right',\r\n    Toast = 'toast',\r\n    Virtual = 'virtual',\r\n}\r\n\r\n/**\r\n * How a panel was opened up\r\n * Sample values: nav, notification, direct, toast, userInitiated, update,\r\n * login, appNav, redererTerminated\r\n */\r\nexport enum PanelLaunchMethod {\r\n    ActivityFeed = 'activityFeed',\r\n    AppNav = 'appNav',\r\n    Direct = 'direct',\r\n    Nav = 'nav',\r\n    Notification = 'notification',\r\n    Posts = 'posts',\r\n    Toast = 'toast',\r\n    Update = 'update',\r\n    UserInitiated = 'userInitiated',\r\n}\r\n\r\nexport enum ActionGesture {\r\n    Click = 'click',\r\n    Hover = 'hover',\r\n    KeyPress = 'keypress',\r\n    None = 'none',\r\n    Scroll = 'scroll',\r\n}\r\n\r\nexport enum PanelViewOutcome {\r\n    Failure = 'failure',\r\n    Init = 'init',\r\n    None = 'none',\r\n    Success = 'success',\r\n}\r\n\r\n/**\r\n * Outcome of action taken\r\n * (Ex: Action_Outcome = \"read\" is logged when \"scroll\" action happens)\r\n * Note: Keep the enums Alphabetically Sorted\r\n */\r\nexport enum PanelActionOutcome {\r\n    CopyToClipboard = 'copyToClipboard',\r\n    Disable = 'disable',\r\n    DismissBanner = 'dismissBanner',\r\n    Enable = 'enable',\r\n    Hide = 'hide',\r\n    Inspect = 'inspect',\r\n    Launch = 'launch',\r\n    Nav = 'nav',\r\n    None = 'none',\r\n    OpenChat = 'openChat',\r\n    OpenDialog = 'openDialog',\r\n    OpenPopup = 'openPopup',\r\n    Read = 'read',\r\n    RemoveBanner = 'removeBanner',\r\n    RemoveChiclet = 'removeChiclet',\r\n    Retry = 'retry',\r\n    Select = 'select',\r\n    Show = 'show',\r\n    ShowBanner = 'showBanner',\r\n    Submit = 'submit',\r\n    Toggle = 'toggle',\r\n    Update = 'update',\r\n}\r\n\r\nexport type ActionOutcome = PanelActionOutcome | PanelViewOutcome;\r\n\r\nexport enum ThreadType {\r\n    GroupChat = 'GroupChat',\r\n    OneOnOneChat = 'OneOnOneChat',\r\n    SelfChat = 'SelfChat',\r\n    NewChat = 'NewChat',\r\n    Meeting = 'Meeting',\r\n    Channel = 'Channel',\r\n    NA = 'N/A',\r\n}\r\n","export interface PeopleSelectStrings {\r\n    inputPlaceholder: string;\r\n    requiredErrorMessage: string;\r\n    removeButtonAriaLabel: string;\r\n    suggestionsHeaderText?: string;\r\n    noResultsFoundText?: string;\r\n    suggestionsAvailableAlertText?: string;\r\n}\r\n\r\nexport const peopleSelectDefaultStrings: PeopleSelectStrings = {\r\n    inputPlaceholder: 'Enter names here',\r\n    requiredErrorMessage: 'This field is required',\r\n    removeButtonAriaLabel: 'Remove',\r\n    suggestionsHeaderText: 'Suggestions',\r\n    noResultsFoundText: 'No results found',\r\n    suggestionsAvailableAlertText: 'Suggestions available',\r\n};\r\n","import { mergeStyles } from '@fluentui/react';\r\nimport { RibbonPosition, RichTextField, RichTextFieldProps } from '@addressbook/components-rich-text-tiptap';\r\nimport React from 'react';\r\nimport { FormEntry, FormMode, FormQuestionType, RichTextEntry } from '../../types';\r\nimport { useRichTextFieldStyles } from '../../utilities';\r\nimport { BaseDescriptor, FieldComponentTypeFactory } from './BaseDescriptor';\r\n\r\nconst defaultOptions = {\r\n    defaultPlaceholder: 'Enter your response',\r\n};\r\n\r\n/**\r\n * The options for the rich text descriptor to customize the rich text field.\r\n * `strings` is used for localization purposes.\r\n * `compact` is used for mobile view.\r\n * `callbacks` is used for callbacks to log events.\r\n */\r\nexport type RichTextDescriptorOptions = Partial<typeof defaultOptions> &\r\n    Pick<RichTextFieldProps, 'strings' | 'compact' | 'callbacks'>;\r\n\r\nconst makeFieldComponent: FieldComponentTypeFactory<RichTextDescriptorOptions & typeof defaultOptions, RichTextEntry> =\r\n    ({ defaultPlaceholder, ...options }) =>\r\n    ({ entry, onEntryChange, context, showPlaceholder, delegatedProps }) => {\r\n        const { mode } = context;\r\n        const { question, answer } = entry;\r\n\r\n        const value = answer.content ?? '';\r\n        const onChange = React.useCallback(\r\n            (value: string) => {\r\n                const newAnswer = { ...entry.answer };\r\n                newAnswer.content = value;\r\n                if (!newAnswer.content) delete newAnswer.content;\r\n\r\n                onEntryChange?.({ ...entry, answer: newAnswer });\r\n            },\r\n            [entry, onEntryChange]\r\n        );\r\n        const placeholder = showPlaceholder ? question.placeholder || defaultPlaceholder : undefined;\r\n        const ribbonPosition =\r\n            mode === FormMode.Viewing\r\n                ? RibbonPosition.None\r\n                : options.compact\r\n                ? RibbonPosition.Bottom\r\n                : RibbonPosition.Top;\r\n\r\n        const styles = useRichTextFieldStyles();\r\n        return React.useMemo(\r\n            () => (\r\n                <RichTextField\r\n                    {...delegatedProps}\r\n                    className={mergeStyles(\r\n                        styles.root,\r\n                        options.compact && styles.compact,\r\n                        mode !== FormMode.Viewing && styles.minHeightConstrained\r\n                    )}\r\n                    value={value}\r\n                    onChange={onChange}\r\n                    placeholder={placeholder}\r\n                    ribbonPosition={ribbonPosition}\r\n                    focusable={mode !== FormMode.Viewing}\r\n                    {...options}\r\n                />\r\n            ),\r\n            [delegatedProps, mode, onChange, placeholder, ribbonPosition, styles, value]\r\n        );\r\n    };\r\n\r\n/**\r\n * The descriptor that renders a rich text field for rich text questions.\r\n */\r\nexport class RichTextDescriptor extends BaseDescriptor<RichTextEntry> {\r\n    protected readonly FieldComponent;\r\n\r\n    constructor(options?: RichTextDescriptorOptions) {\r\n        super();\r\n        this.FieldComponent = makeFieldComponent({ ...defaultOptions, ...options });\r\n    }\r\n\r\n    /**\r\n     * Tests whether the entry is a rich text question.\r\n     *\r\n     * @param entry The entry to test.\r\n     * @returns Passes the test or not.\r\n     */\r\n    test(entry: FormEntry): entry is RichTextEntry {\r\n        return entry.question.type === FormQuestionType.RichText;\r\n    }\r\n}\r\n","export enum RichTextFieldButton {\r\n    OK,\r\n    Cancel,\r\n    Close,\r\n    Retry,\r\n    Remove,\r\n    Copy,\r\n    Download,\r\n    ViewOriginalFile,\r\n    Bold,\r\n    Italic,\r\n    Underline,\r\n    Strikethrough,\r\n    BackgroundColor,\r\n    TextColor,\r\n    FontSize,\r\n    BulletedList,\r\n    NumberedList,\r\n    DecreaseIndent,\r\n    IncreaseIndent,\r\n    InsertLink,\r\n    InsertImage,\r\n    InsertFile,\r\n    InsertTable,\r\n    Code,\r\n    ClearFormat,\r\n}\r\n\r\nexport enum RichTextFieldFontSize {\r\n    Small,\r\n    Medium,\r\n    Large,\r\n}\r\n\r\nexport enum RichTextFieldBackgroundColor {\r\n    Removal,\r\n    KobiRed,\r\n    RoseBud,\r\n    Goldenrod,\r\n    Primrose,\r\n    Mantis,\r\n    RegentStBlue,\r\n    PeriwinkleGray,\r\n    PaleRose,\r\n}\r\n\r\nexport enum RichTextFieldTextColor {\r\n    Removal,\r\n    Red,\r\n    TuscanOrange,\r\n    Sunglow,\r\n    Pear,\r\n    Eucalyptus,\r\n    FadedJade,\r\n    FunBlue,\r\n    TyrianPurple,\r\n}\r\n\r\nexport interface RichTextFieldTableSize {\r\n    rows: number;\r\n    cols: number;\r\n}\r\n\r\nexport interface RichTextFieldStrings {\r\n    button: (button: RichTextFieldButton) => string;\r\n    fontSize: (size: RichTextFieldFontSize) => string;\r\n    backgroundColor: (color: RichTextFieldBackgroundColor) => string;\r\n    textColor: (color: RichTextFieldTextColor) => string;\r\n    insertLinkTitle: string;\r\n    insertLinkUrl: string;\r\n    insertLinkDisplayAs: string;\r\n    insertTableTitle: (size?: RichTextFieldTableSize) => string;\r\n    messageContentUnavailable: string;\r\n    defaultImageFileStem: string;\r\n}\r\n\r\n/**\r\n * A file storage for rich text fields.\r\n *\r\n * @property upload - Upload a file and return the file locator URL.\r\n * @property download - Retrieve the file blob by the file locator URL.\r\n * @property thumbnail - Retrieve the thumbnail blob by the file locator URL.\r\n */\r\nexport interface RichTextFileStorageService {\r\n    upload: (file: File) => Promise<string>;\r\n    download: (url: string) => Promise<Blob>;\r\n    thumbnail?: (url: string) => Promise<Blob>;\r\n}\r\n","import { Comparator } from '../../abstractions';\r\nimport { BaseFormEntry } from '../types';\r\n\r\n/**\r\n * A comparator that compares entries by their question order.\r\n *\r\n * @param first The first entry.\r\n * @param second The second entry.\r\n * @returns The comparison result.\r\n */\r\nexport const orderComparator: Comparator<BaseFormEntry<{ order: number }, unknown>> = (first, second) =>\r\n    first.question.order - second.question.order;\r\n","/*\r\n *  Copyright © Microsoft Corporation. All rights reserved.\r\n */\r\nexport * from './CommonCard.component';\r\nexport * from './CommonCard.shimmer';\r\n","export * from './TaskModule.component';\r\nexport * from './TaskModule.styles';\r\n","import { DefaultButton, Icon, IconButton, Layer, mergeStyles, Popup, Spinner, SpinnerSize } from '@fluentui/react';\r\nimport { useBoolean } from '@fluentui/react-hooks';\r\nimport { copyImageToClipboard, ImageSize } from '@addressbook/utilities-core';\r\nimport { useBlobObjectUrl } from '@addressbook/utilities-hooks';\r\nimport React from 'react';\r\nimport { TransformComponent, TransformWrapper } from 'react-zoom-pan-pinch';\r\nimport { RichTextFieldButton } from '../../types';\r\nimport { useEmbeddedImageContentStyles, useFullscreenImageContentStyles, useImageViewStyles } from './styles';\r\nimport { FileOptions } from './types';\r\nimport { accommodateImage, AccomodatePolicy } from './utils';\r\n\r\nexport interface ImageViewProps extends React.PropsWithChildren<React.HTMLAttributes<HTMLDivElement>> {\r\n    name?: string;\r\n    url?: string;\r\n    blob?: Blob;\r\n    thumbnail?: Blob;\r\n    imageSize?: ImageSize;\r\n    loading?: boolean;\r\n    error?: Error;\r\n    onRetry?: () => void;\r\n    onRemove?: () => void;\r\n    compact?: boolean;\r\n    strings: FileOptions['strings'];\r\n}\r\n\r\nexport const ImageView: React.FC<ImageViewProps> = ({\r\n    name,\r\n    url,\r\n    blob,\r\n    thumbnail,\r\n    imageSize,\r\n    loading,\r\n    error,\r\n    onRetry,\r\n    onRemove,\r\n    compact,\r\n    strings,\r\n    children,\r\n    className,\r\n    ...props\r\n}) => {\r\n    const [fullscreen, { setTrue: enterFullscreen, setFalse: exitFullscreen }] = useBoolean(false);\r\n    const contentProps = { name, url, blob, thumbnail, imageSize, loading, error, onRetry, onRemove, compact, strings };\r\n\r\n    const styles = useImageViewStyles();\r\n    return (\r\n        <div className={mergeStyles(styles.root, className)} {...props}>\r\n            <EmbeddedImageContent className={styles.embedded} onClick={enterFullscreen} {...contentProps} />\r\n            <FullscreenImageContent isOpen={fullscreen} onDismiss={exitFullscreen} {...contentProps} />\r\n            <div className={styles.hidden}>{children}</div>\r\n        </div>\r\n    );\r\n};\r\n\r\nconst embeddedHeight = 180;\r\n\r\nconst EmbeddedImageContent: React.FC<ImageViewProps> = ({\r\n    name,\r\n    blob,\r\n    url: _url,\r\n    thumbnail,\r\n    imageSize,\r\n    loading,\r\n    error,\r\n    onRetry,\r\n    onRemove,\r\n    compact: _compact,\r\n    strings,\r\n    className,\r\n    style,\r\n    ...props\r\n}) => {\r\n    const blobUrl = useBlobObjectUrl(blob ?? thumbnail);\r\n\r\n    const height = embeddedHeight;\r\n    const width = imageSize ? height * (imageSize.width / imageSize.height) : height;\r\n\r\n    const styles = useEmbeddedImageContentStyles();\r\n    return (\r\n        <div className={mergeStyles(styles.root, className)} style={{ width, height, ...style }} {...props}>\r\n            {blobUrl && <img className={styles.image} src={blobUrl} alt={name} title={name} />}\r\n            {error && (\r\n                <div\r\n                    className={mergeStyles(styles.mask, styles.error)}\r\n                    role='alert'\r\n                    title={strings.messageContentUnavailable}>\r\n                    <Icon className={styles.icon} iconName='ImageOff' />\r\n                    <div className={styles.buttons}>\r\n                        {onRetry && (\r\n                            <DefaultButton\r\n                                onClick={event => {\r\n                                    event.stopPropagation();\r\n                                    onRetry();\r\n                                }}\r\n                                iconProps={{ iconName: 'ArrowClockwise' }}\r\n                                title={strings.button(RichTextFieldButton.Retry)}\r\n                            />\r\n                        )}\r\n                        {onRemove && (\r\n                            <DefaultButton\r\n                                onClick={event => {\r\n                                    event.stopPropagation();\r\n                                    onRemove();\r\n                                }}\r\n                                iconProps={{ iconName: 'Delete' }}\r\n                                title={strings.button(RichTextFieldButton.Remove)}\r\n                            />\r\n                        )}\r\n                    </div>\r\n                </div>\r\n            )}\r\n            {loading && <Spinner className={styles.mask} size={SpinnerSize.large} />}\r\n        </div>\r\n    );\r\n};\r\n\r\ninterface FullscreenImageContentProps extends ImageViewProps {\r\n    isOpen?: boolean;\r\n    onDismiss?: () => void;\r\n}\r\n\r\nconst FullscreenImageContent: React.FC<FullscreenImageContentProps> = ({\r\n    name,\r\n    blob,\r\n    url,\r\n    thumbnail: _thumbnail,\r\n    imageSize: _imageSize,\r\n    loading,\r\n    error,\r\n    onRetry: _onRetry,\r\n    onRemove: _onRemove,\r\n    compact,\r\n    strings,\r\n    isOpen,\r\n    onDismiss,\r\n    className,\r\n    ...props\r\n}) => {\r\n    const blobUrl = useBlobObjectUrl(blob);\r\n\r\n    const styles = useFullscreenImageContentStyles();\r\n    if (!isOpen) return null;\r\n    return (\r\n        <Layer eventBubblingEnabled>\r\n            <Popup\r\n                className={mergeStyles(styles.root, className)}\r\n                onDismiss={onDismiss}\r\n                onRestoreFocus={({ originalElement }) => originalElement?.focus()}\r\n                {...props}>\r\n                <div className={styles.header}>\r\n                    <div className={styles.name} title={name}>\r\n                        {name}\r\n                    </div>\r\n                    <div className={styles.controls}>\r\n                        {!compact && blobUrl && (\r\n                            <IconButton\r\n                                className={styles.button}\r\n                                as='a'\r\n                                href={blobUrl}\r\n                                download={name}\r\n                                iconProps={{ iconName: 'ArrowDownload' }}\r\n                                title={strings.button(RichTextFieldButton.Download)}\r\n                            />\r\n                        )}\r\n                        {!compact && blob && (\r\n                            <IconButton\r\n                                className={styles.button}\r\n                                onClick={() => {\r\n                                    copyImageToClipboard({ blob, name });\r\n                                }}\r\n                                iconProps={{ iconName: 'Copy' }}\r\n                                title={strings.button(RichTextFieldButton.Copy)}\r\n                            />\r\n                        )}\r\n                        {url && (\r\n                            <IconButton\r\n                                className={styles.button}\r\n                                as='a'\r\n                                href={url}\r\n                                target='_blank'\r\n                                rel='noopener noreferrer'\r\n                                iconProps={{ iconName: 'Open' }}\r\n                                title={strings.button(RichTextFieldButton.ViewOriginalFile)}\r\n                            />\r\n                        )}\r\n                        <IconButton\r\n                            className={styles.button}\r\n                            iconProps={{ iconName: 'Cancel' }}\r\n                            onClick={onDismiss}\r\n                            title={strings.button(RichTextFieldButton.Close)}\r\n                        />\r\n                    </div>\r\n                </div>\r\n                {blobUrl ? (\r\n                    <TransformedImage\r\n                        src={blobUrl}\r\n                        alt={name}\r\n                        className={styles.image}\r\n                        wrapperClassName={mergeStyles(styles.main, styles.wrapper)}\r\n                    />\r\n                ) : loading ? (\r\n                    <Spinner className={styles.main} size={SpinnerSize.large} />\r\n                ) : error ? (\r\n                    <div className={mergeStyles(styles.main, styles.message)} role='alert'>\r\n                        {strings.messageContentUnavailable}\r\n                    </div>\r\n                ) : null}\r\n            </Popup>\r\n        </Layer>\r\n    );\r\n};\r\n\r\ninterface TransformedImageProps extends Omit<React.ImgHTMLAttributes<HTMLImageElement>, 'onLoad'> {\r\n    wrapperClassName?: string;\r\n}\r\n\r\nconst TransformedImage: React.FC<TransformedImageProps> = ({ wrapperClassName, ...props }) => {\r\n    const [disabled, setDisabled] = React.useState(true);\r\n    const [panning, { setTrue: startPanning, setFalse: stopPanning }] = useBoolean(false);\r\n\r\n    const wrapperStyle = React.useMemo(() => ({ cursor: panning ? 'grabbing' : 'grab' }), [panning]);\r\n\r\n    return (\r\n        <TransformWrapper\r\n            disabled={disabled}\r\n            minScale={0.5}\r\n            maxScale={4}\r\n            onPanningStart={startPanning}\r\n            onPanningStop={stopPanning}>\r\n            {({ centerView }) => (\r\n                <TransformComponent wrapperClass={wrapperClassName} wrapperStyle={wrapperStyle}>\r\n                    <img\r\n                        {...props}\r\n                        onLoad={event => {\r\n                            setDisabled(false);\r\n                            accommodateImage(event.target as HTMLImageElement, {\r\n                                selector: '.react-transform-wrapper',\r\n                                policy: AccomodatePolicy.ScaleDown,\r\n                            });\r\n                            centerView(1, 0);\r\n                        }}\r\n                    />\r\n                </TransformComponent>\r\n            )}\r\n        </TransformWrapper>\r\n    );\r\n};\r\n","/*\r\n *  Copyright © Microsoft Corporation. All rights reserved.\r\n */\r\n\r\nexport * from './Spinner';\r\n","import { decodeDataUrl, encodeDataUrl, getMimeByDataUrl, isImageMime } from '@addressbook/utilities-core';\r\nimport {\r\n    RichTextFieldBackgroundColor,\r\n    RichTextFieldButton,\r\n    RichTextFieldFontSize,\r\n    RichTextFieldStrings,\r\n    RichTextFieldTextColor,\r\n    RichTextFileStorageService,\r\n} from './types';\r\n\r\nexport const defaultRichTextFieldStrings: RichTextFieldStrings = {\r\n    button: button => defaultButtonStrings[button],\r\n    fontSize: size => defaultFontSizeStrings[size],\r\n    backgroundColor: color => defaultBackgroundColorStrings[color],\r\n    textColor: color => defaultTextColorStrings[color],\r\n    insertLinkTitle: 'Insert Link',\r\n    insertLinkUrl: 'Web address (URL)',\r\n    insertLinkDisplayAs: 'Display as',\r\n    insertTableTitle: size => (size ? `Insert ${size.rows}x${size.cols} table` : 'Insert table'),\r\n    messageContentUnavailable: 'The file content is unavailable.',\r\n    defaultImageFileStem: 'image',\r\n};\r\n\r\nconst defaultButtonStrings: Record<RichTextFieldButton, string> = {\r\n    [RichTextFieldButton.OK]: 'OK',\r\n    [RichTextFieldButton.Cancel]: 'Cancel',\r\n    [RichTextFieldButton.Close]: 'Close',\r\n    [RichTextFieldButton.Retry]: 'Retry',\r\n    [RichTextFieldButton.Remove]: 'Remove',\r\n    [RichTextFieldButton.Copy]: 'Copy',\r\n    [RichTextFieldButton.Download]: 'Download',\r\n    [RichTextFieldButton.ViewOriginalFile]: 'View original file',\r\n    [RichTextFieldButton.Bold]: 'Bold',\r\n    [RichTextFieldButton.Italic]: 'Italic',\r\n    [RichTextFieldButton.Underline]: 'Underline',\r\n    [RichTextFieldButton.Strikethrough]: 'Strikethrough',\r\n    [RichTextFieldButton.BackgroundColor]: 'Background color',\r\n    [RichTextFieldButton.TextColor]: 'Text color',\r\n    [RichTextFieldButton.FontSize]: 'Font size',\r\n    [RichTextFieldButton.BulletedList]: 'Bulleted list',\r\n    [RichTextFieldButton.NumberedList]: 'Numbered list',\r\n    [RichTextFieldButton.DecreaseIndent]: 'Decrease indent',\r\n    [RichTextFieldButton.IncreaseIndent]: 'Increase indent',\r\n    [RichTextFieldButton.InsertLink]: 'Insert link',\r\n    [RichTextFieldButton.InsertImage]: 'Insert image',\r\n    [RichTextFieldButton.InsertFile]: 'Insert file',\r\n    [RichTextFieldButton.InsertTable]: 'Insert table',\r\n    [RichTextFieldButton.Code]: 'Code',\r\n    [RichTextFieldButton.ClearFormat]: 'Clear format',\r\n};\r\n\r\nconst defaultFontSizeStrings: Record<RichTextFieldFontSize, string> = {\r\n    [RichTextFieldFontSize.Small]: 'Small',\r\n    [RichTextFieldFontSize.Medium]: 'Medium',\r\n    [RichTextFieldFontSize.Large]: 'Large',\r\n};\r\n\r\nconst defaultBackgroundColorStrings: Record<RichTextFieldBackgroundColor, string> = {\r\n    [RichTextFieldBackgroundColor.Removal]: 'No highlight',\r\n    [RichTextFieldBackgroundColor.KobiRed]: 'Kobi red',\r\n    [RichTextFieldBackgroundColor.RoseBud]: 'Rose bud',\r\n    [RichTextFieldBackgroundColor.Goldenrod]: 'Goldenrod',\r\n    [RichTextFieldBackgroundColor.Primrose]: 'Primrose',\r\n    [RichTextFieldBackgroundColor.Mantis]: 'Mantis',\r\n    [RichTextFieldBackgroundColor.RegentStBlue]: 'Regent St. blue',\r\n    [RichTextFieldBackgroundColor.PeriwinkleGray]: 'Periwinkle gray',\r\n    [RichTextFieldBackgroundColor.PaleRose]: 'Pale rose',\r\n};\r\n\r\nconst defaultTextColorStrings: Record<RichTextFieldTextColor, string> = {\r\n    [RichTextFieldTextColor.Removal]: 'Automatic',\r\n    [RichTextFieldTextColor.Red]: 'Red',\r\n    [RichTextFieldTextColor.TuscanOrange]: 'Tuscan orange',\r\n    [RichTextFieldTextColor.Sunglow]: 'Sunglow',\r\n    [RichTextFieldTextColor.Pear]: 'Pear',\r\n    [RichTextFieldTextColor.Eucalyptus]: 'Eucalyptus',\r\n    [RichTextFieldTextColor.FadedJade]: 'Faded jade',\r\n    [RichTextFieldTextColor.FunBlue]: 'Fun blue',\r\n    [RichTextFieldTextColor.TyrianPurple]: 'Tyrian purple',\r\n};\r\n\r\nexport const backgroundColorValues: [RichTextFieldBackgroundColor, string][] = [\r\n    [RichTextFieldBackgroundColor.Removal, ''],\r\n    [RichTextFieldBackgroundColor.KobiRed, '#df9299'],\r\n    [RichTextFieldBackgroundColor.RoseBud, '#f4a593'],\r\n    [RichTextFieldBackgroundColor.Goldenrod, '#fdd472'],\r\n    [RichTextFieldBackgroundColor.Primrose, '#e5f18f'],\r\n    [RichTextFieldBackgroundColor.Mantis, '#82cda8'],\r\n    [RichTextFieldBackgroundColor.RegentStBlue, '#9dd9db'],\r\n    [RichTextFieldBackgroundColor.PeriwinkleGray, '#c7d4e8'],\r\n    [RichTextFieldBackgroundColor.PaleRose, '#ebd3e1'],\r\n];\r\n\r\nexport const textColorValues: [RichTextFieldTextColor, string][] = [\r\n    [RichTextFieldTextColor.Removal, ''],\r\n    [RichTextFieldTextColor.Red, '#b6424c'],\r\n    [RichTextFieldTextColor.TuscanOrange, '#cd5937'],\r\n    [RichTextFieldTextColor.Sunglow, '#fdc030'],\r\n    [RichTextFieldTextColor.Pear, '#bdcb4c'],\r\n    [RichTextFieldTextColor.Eucalyptus, '#2b9b62'],\r\n    [RichTextFieldTextColor.FadedJade, '#37797b'],\r\n    [RichTextFieldTextColor.FunBlue, '#1e53a3'],\r\n    [RichTextFieldTextColor.TyrianPurple, '#a5397a'],\r\n];\r\n\r\nexport const fontSizeValues: [RichTextFieldFontSize, string][] = [\r\n    [RichTextFieldFontSize.Small, '7.5pt'],\r\n    [RichTextFieldFontSize.Medium, ''],\r\n    [RichTextFieldFontSize.Large, '18pt'],\r\n];\r\n\r\n/**\r\n * The default file storage for rich text fields, which uploads files as data URLs.\r\n */\r\nexport const defaultRichTextFileStorageService: RichTextFileStorageService = {\r\n    upload: encodeDataUrl,\r\n    download: downloadDataUrl,\r\n    thumbnail: thumbnailDataUrl,\r\n};\r\n\r\nasync function downloadDataUrl(url: string): Promise<Blob> {\r\n    const blob = decodeDataUrl(url);\r\n    if (!blob) throw new Error('Invalid data URL');\r\n    return blob;\r\n}\r\n\r\nasync function thumbnailDataUrl(url: string): Promise<Blob> {\r\n    const mime = getMimeByDataUrl(url);\r\n    if (!(mime && isImageMime(mime))) throw new Error('Unsupported MIME type');\r\n    return downloadDataUrl(url);\r\n}\r\n","/*\r\n *  Copyright © Microsoft Corporation. All rights reserved.\r\n */\r\n\r\nexport * from './ConfirmationDialog.component';\r\n","import { makeStyles, FontSizes, isContrastTheme } from '@addressbook/components-fluentui-teams-theme';\r\n\r\nexport const useCollapsibleTextFieldStyles = makeStyles(theme => ({\r\n    root: {\r\n        '&.ms-TextField .ms-TextField-wrapper .ms-TextField-fieldGroup': {\r\n            display: 'flex',\r\n            alignItems: 'center',\r\n            gap: '4px',\r\n            input: {\r\n                fontSize: FontSizes.size24,\r\n                '::placeholder': {\r\n                    color: isContrastTheme(theme.name) ? theme.palette.black : theme.palette.neutralPrimary,\r\n                },\r\n            },\r\n        },\r\n        '.ms-TextField-errorMessage': {\r\n            padding: '4px 12px',\r\n        },\r\n    },\r\n    collapsed: {\r\n        '&.ms-TextField .ms-TextField-wrapper': {\r\n            maxWidth: 'max-content',\r\n            '.ms-TextField-fieldGroup': {\r\n                '::before': {\r\n                    content: '\"\"',\r\n                },\r\n                backgroundColor: 'unset',\r\n            },\r\n        },\r\n    },\r\n    error: {\r\n        '&.ms-TextField .ms-TextField-wrapper .ms-TextField-fieldGroup': {\r\n            border: `1px solid ${theme.palette.redDark}`,\r\n        },\r\n    },\r\n    collapsedText: {\r\n        marginInlineStart: '12px',\r\n        color: theme.palette.black,\r\n        fontSize: FontSizes.size24,\r\n        overflow: 'hidden',\r\n        textOverflow: 'ellipsis',\r\n        whiteSpace: 'nowrap',\r\n    },\r\n    collapsedPlaceholder: {\r\n        color: isContrastTheme(theme.name) ? theme.palette.black : theme.palette.neutralPrimary,\r\n    },\r\n    button: {\r\n        margin: '4px',\r\n    },\r\n}));\r\n","import { Dropdown, mergeStyles, ResponsiveMode } from '@fluentui/react';\r\nimport { DecimalTextField } from '@addressbook/components-fields';\r\nimport React from 'react';\r\nimport { FormQuestionType, TextNumberRestrictionType, TextNumberRestrictionValueKey } from '../../../types';\r\nimport {\r\n    deriveTextNumberRestriction,\r\n    getTextNumberRestrictionOptions,\r\n    useDropdownStyles,\r\n    useTextFieldStyles,\r\n} from '../../../utilities';\r\nimport { QuestionSettingsProps } from '../types';\r\nimport { useRestrictionSettingsStyles } from './RestrictionSettings.styles';\r\n\r\nconst allTextNumberRestrictionValueKeys: TextNumberRestrictionValueKey[] = ['min', 'max', 'value'];\r\n\r\nexport function RestrictionSettings({\r\n    question,\r\n    onQuestionChange,\r\n    strings,\r\n}: QuestionSettingsProps): JSX.Element | null {\r\n    const styles = useRestrictionSettingsStyles();\r\n    const textFieldStyles = useTextFieldStyles();\r\n    const dropdownStyles = useDropdownStyles();\r\n\r\n    if (!(question.type === FormQuestionType.Text && question.number && question.restriction)) return null;\r\n\r\n    const restriction = question.restriction;\r\n    const valueSettings = allTextNumberRestrictionValueKeys\r\n        .filter(key => key in restriction)\r\n        .map(key => (\r\n            <DecimalTextField\r\n                key={key}\r\n                value={restriction[key]}\r\n                onChange={value => {\r\n                    const newRestriction = { ...restriction };\r\n\r\n                    if (key in newRestriction) {\r\n                        newRestriction[key] = value;\r\n                    }\r\n\r\n                    // Ensure max is always greater than min\r\n                    if (key === 'min' && 'max' in newRestriction && value > newRestriction.max) {\r\n                        newRestriction.max = value;\r\n                    }\r\n\r\n                    // Ensure min is always less than max\r\n                    if (key === 'max' && 'min' in newRestriction && value < newRestriction.min) {\r\n                        newRestriction.min = value;\r\n                    }\r\n\r\n                    onQuestionChange({ ...question, restriction: newRestriction });\r\n                }}\r\n                placeholder={strings.restrictionValuePlaceholder(key)}\r\n                styles={textFieldStyles}\r\n            />\r\n        ));\r\n\r\n    return (\r\n        <div className={styles.row}>\r\n            <Dropdown\r\n                selectedKey={restriction.type}\r\n                onChange={(_, option) =>\r\n                    option &&\r\n                    onQuestionChange({\r\n                        ...question,\r\n                        restriction: deriveTextNumberRestriction(option.key as TextNumberRestrictionType, restriction),\r\n                    })\r\n                }\r\n                options={getTextNumberRestrictionOptions(strings)}\r\n                responsiveMode={ResponsiveMode.unknown}\r\n                styles={dropdownStyles}\r\n            />\r\n            <div className={mergeStyles(styles.values, valueSettings.length === 2 && styles.between)}>\r\n                {valueSettings}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n","export * from './client';\r\nexport * from './types';\r\n","import { isDarkTheme, isDefaultTheme } from '@addressbook/components-fluentui-teams-theme';\r\nimport { makeStyles } from '../styles/makeStyles';\r\n\r\nexport const useTaskModuleV2Styles = /* #__PURE__*/ makeStyles({\r\n    root: {\r\n        width: '100%',\r\n        height: '100%',\r\n        overflowY: 'auto',\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        boxSizing: 'border-box',\r\n        paddingBottom: '0.75rem',\r\n    },\r\n    content: {\r\n        padding: '24px 60px',\r\n    },\r\n    header: {\r\n        marginBottom: '22px',\r\n    },\r\n});\r\n\r\nexport const useTaskModuleContentCustomizedStyles = /* #__PURE__*/ makeStyles(theme => ({\r\n    background: isDefaultTheme(theme.name)\r\n        ? 'linear-gradient(#DCE0FA 1%,white 40%) fixed'\r\n        : isDarkTheme(theme.name)\r\n        ? 'linear-gradient(#3D3E78 1%,#333333 40%) fixed'\r\n        : 'black',\r\n}));\r\n\r\nexport const useTaskModuleCategorizedTemplateStoreStyles = /* #__PURE__*/ makeStyles(() => ({\r\n    padding: '24px 0',\r\n}));\r\n","export * from './form';\r\nexport * from './base';\r\nexport * from './text';\r\nexport * from './rich-text';\r\nexport * from './choice';\r\nexport * from './date-time';\r\n","import React from 'react';\r\n\r\n/**\r\n * A hook that allows invoking the element by pressing Enter or Space key.\r\n *\r\n * @returns The ref for the element.\r\n */\r\nexport function useKeyboardInvoke<Element extends HTMLElement>(): React.Ref<Element> {\r\n    const elementRef = React.useRef<Element>(null);\r\n\r\n    React.useEffect(() => {\r\n        const element = elementRef.current;\r\n        if (!element) return;\r\n\r\n        const handler = (event: KeyboardEvent): void => {\r\n            // Should do nothing if the default behavior is prevented\r\n            if (event.defaultPrevented) return;\r\n            if (event.key === 'Enter' || event.key === ' ') {\r\n                element.click();\r\n                event.preventDefault();\r\n            }\r\n        };\r\n\r\n        const controller = new AbortController();\r\n        element.addEventListener('keydown', handler, { signal: controller.signal });\r\n        return () => controller.abort();\r\n    }, []);\r\n\r\n    return elementRef;\r\n}\r\n","import { mergeStyles } from '@fluentui/react';\r\nimport { rem } from '@addressbook/components-fluentui-teams-theme';\r\nimport React from 'react';\r\nimport { PeopleCoin } from '../PeopleCoin';\r\nimport { PeopleSelection, RetrieveIcon } from '../types';\r\nimport { usePeoplePileStyles } from './PeoplePile.styles';\r\n\r\n/**\r\n * The props for the PeoplePile component, which renders a pile of people in a horizontal layout.\r\n *\r\n * @property selections The people to display.\r\n * @property onRetrieveIcon A function to retrieve the icon for each person.\r\n * @property maxVisible The maximum number of people to display before showing an overflow count.\r\n * @property compact If true, the pile will be compact, that is, icons will overlap each other.\r\n * @property coinSize The size of the coins.\r\n * @property showOnlyName If true, only the name of the first person will be displayed.\r\n * @property overflowTitle The title for the overflow count.\r\n */\r\nexport interface PeoplePileProps extends React.HTMLAttributes<HTMLDivElement> {\r\n    selections: PeopleSelection[];\r\n    onRetrieveIcon?: RetrieveIcon;\r\n    maxVisible?: number;\r\n    compact?: boolean;\r\n    coinSize?: number;\r\n    showOnlyName?: boolean;\r\n    overflowTitle?: string;\r\n}\r\n\r\nexport const PeoplePile: React.FC<PeoplePileProps> = ({\r\n    selections,\r\n    onRetrieveIcon,\r\n    maxVisible = Infinity,\r\n    compact,\r\n    coinSize = 24,\r\n    showOnlyName,\r\n    overflowTitle,\r\n    className,\r\n    ...props\r\n}) => {\r\n    const [visibleSelections, overflowCount] = React.useMemo(() => {\r\n        const visibleSelections = selections.slice(0, maxVisible);\r\n        const overflowCount = Math.max(selections.length - maxVisible, 0);\r\n        return [visibleSelections, overflowCount];\r\n    }, [maxVisible, selections]);\r\n\r\n    const onlyNameText = React.useMemo(\r\n        () => showOnlyName && !overflowCount && selections.length === 1 && selections[0].name,\r\n        [overflowCount, selections, showOnlyName]\r\n    );\r\n\r\n    const styles = usePeoplePileStyles();\r\n\r\n    const overflow = React.useMemo(\r\n        () =>\r\n            overflowCount > 0 && (\r\n                <div\r\n                    className={mergeStyles(styles.overflow, compact && styles.compactOverflow, {\r\n                        fontSize: rem(Math.min(coinSize * 0.5, 10)),\r\n                    })}\r\n                    title={overflowTitle}>\r\n                    {overflowCount}\r\n                </div>\r\n            ),\r\n        [overflowCount, overflowTitle, styles, compact, coinSize]\r\n    );\r\n\r\n    const onlyName = React.useMemo(\r\n        () =>\r\n            onlyNameText && (\r\n                <div\r\n                    className={mergeStyles(styles.onlyName, {\r\n                        fontSize: rem(Math.min(coinSize * 0.75, 14)),\r\n                        margin: `0 ${rem(2 + coinSize * 0.25)}`,\r\n                    })}\r\n                    title={props.title ? undefined : onlyNameText}>\r\n                    {onlyNameText}\r\n                </div>\r\n            ),\r\n        [coinSize, onlyNameText, props.title, styles.onlyName]\r\n    );\r\n\r\n    return (\r\n        <div className={mergeStyles(styles.root, className)} {...props}>\r\n            <div className={mergeStyles(styles.coins, compact && styles.compactCoins)} role='list'>\r\n                {visibleSelections.map(selection => (\r\n                    <PeopleCoin\r\n                        key={selection.id}\r\n                        role='listitem'\r\n                        selection={selection}\r\n                        onRetrieveIcon={onRetrieveIcon}\r\n                        coinSize={coinSize}\r\n                        preventNameAsTitle={Boolean(props.title)}\r\n                    />\r\n                ))}\r\n            </div>\r\n            {overflow}\r\n            {onlyName}\r\n        </div>\r\n    );\r\n};\r\n","import { encodeDataUrl } from './data-urls';\r\nimport { isImageMime } from './mimes';\r\n\r\n/**\r\n * Copies the given data to the clipboard.\r\n *\r\n * @param data - The data to copy.\r\n * @returns A promise that resolves when the data is copied.\r\n * @remarks This function doesn't use Clipboard API because some policies may prevent it from working.\r\n */\r\nexport async function copyToClipboard(data: Record<string, string>): Promise<void> {\r\n    const input = document.createElement('input');\r\n    input.style.display = 'none';\r\n\r\n    // We have to use a dummy value, since blank value won't work in some browsers (for example, iOS Safari).\r\n    input.value = ' ';\r\n\r\n    try {\r\n        document.body.appendChild(input);\r\n\r\n        await new Promise<void>((resolve, reject) => {\r\n            document.addEventListener(\r\n                'copy',\r\n                event => {\r\n                    const dataTransfer = event.clipboardData;\r\n                    if (!dataTransfer) return;\r\n\r\n                    dataTransfer.clearData();\r\n                    Object.entries(data).forEach(([type, content]) => dataTransfer.setData(type, content));\r\n\r\n                    event.preventDefault();\r\n                    resolve();\r\n                },\r\n                { once: true }\r\n            );\r\n\r\n            input.select();\r\n            const successful = document.execCommand('copy');\r\n            if (!successful) reject(new Error('Failed to copy data to clipboard'));\r\n        });\r\n    } finally {\r\n        document.body.removeChild(input);\r\n    }\r\n}\r\n\r\nexport interface CopyImageToClipboardOptions {\r\n    blob: Blob;\r\n    name?: string;\r\n}\r\n\r\n/**\r\n * Copies the given image to the clipboard.\r\n *\r\n * @property blob - The image blob to copy.\r\n * @property name - The name of the image.\r\n * @returns A promise that resolves when the image is copied.\r\n */\r\nexport async function copyImageToClipboard({ blob, name }: CopyImageToClipboardOptions): Promise<void> {\r\n    if (!isImageMime(blob.type)) return;\r\n\r\n    const dataUrl = await encodeDataUrl(blob);\r\n\r\n    const image = document.createElement('img');\r\n    image.src = dataUrl;\r\n    if (name) image.alt = name;\r\n\r\n    return copyToClipboard({ [blob.type]: dataUrl, 'text/html': image.outerHTML, 'text/plain': name ?? '' });\r\n}\r\n\r\nexport interface CopyLinkToClipboardOptions {\r\n    url: string;\r\n    text?: string;\r\n    image?: string;\r\n}\r\n\r\n/**\r\n * Copies the given link to the clipboard.\r\n *\r\n * @property url - The link to copy.\r\n * @property text - The text of the link.\r\n * @property image - The image to show in the link.\r\n * @returns A promise that resolves when the link is copied.\r\n */\r\nexport function copyLinkToClipboard({ url, text, image }: CopyLinkToClipboardOptions): Promise<void> {\r\n    const anchor = document.createElement('a');\r\n    anchor.href = url;\r\n\r\n    if (text || !image) {\r\n        const textContainer = document.createElement('div');\r\n        textContainer.textContent = text ?? url;\r\n        anchor.appendChild(textContainer);\r\n    }\r\n\r\n    if (image) {\r\n        const img = document.createElement('img');\r\n        img.src = image;\r\n        anchor.appendChild(img);\r\n    }\r\n\r\n    return copyToClipboard({ 'text/html': anchor.outerHTML, 'text/plain': url });\r\n}\r\n","import { mergeStyles, Pivot, PivotItem } from '@fluentui/react';\r\nimport React, { useCallback } from 'react';\r\nimport { usePillButtonStyles, usePillPivotStyles } from './PillPivot.styles';\r\n\r\nexport interface PillPivotProps {\r\n    items: { key: string; text: string }[];\r\n    defaultSelectedKey?: string;\r\n    isMobile?: boolean;\r\n    onSelected?: (key: string) => void;\r\n    className?: string;\r\n}\r\n\r\nexport const PillPivot: React.FC<PillPivotProps> = ({\r\n    items,\r\n    defaultSelectedKey,\r\n    isMobile,\r\n    onSelected,\r\n    className,\r\n}: PillPivotProps): JSX.Element => {\r\n    const styles = usePillPivotStyles();\r\n    const buttonStyles = usePillButtonStyles();\r\n\r\n    const onLinkClick = useCallback(\r\n        (item?: PivotItem) => {\r\n            if (onSelected && item?.props.itemKey) {\r\n                onSelected(item.props.itemKey);\r\n            }\r\n        },\r\n        [onSelected]\r\n    );\r\n\r\n    return (\r\n        <Pivot\r\n            onLinkClick={onLinkClick}\r\n            defaultSelectedKey={defaultSelectedKey}\r\n            headersOnly\r\n            styles={{\r\n                root: mergeStyles(styles.root, isMobile && 'is-mobile', className),\r\n                link: isMobile ? buttonStyles.mobile : buttonStyles.root,\r\n                linkIsSelected: mergeStyles(isMobile ? buttonStyles.mobile : buttonStyles.root, 'is-active'),\r\n                linkContent: buttonStyles.content,\r\n            }}>\r\n            {items.map(item => (\r\n                <PivotItem key={item.key} itemKey={item.key} ariaLabel={item.text} headerText={item.text} />\r\n            ))}\r\n        </Pivot>\r\n    );\r\n};\r\n","import { useRef, useMemo } from 'react';\r\n\r\ntype Update<T> = (updater: (value: T) => T) => void;\r\n\r\n/**\r\n * A hook to create an update function upon an onChange callback.\r\n *\r\n * This is useful if your onChange callback has a setState (returned by useState) sink, but you want\r\n * to call it in the same render cycle. The update function returned by this hook will retain the\r\n * latest value (instead of having to wait for the passed in state update) and call the onChange\r\n * callback immediately.\r\n *\r\n * @param value The value to use.\r\n * @param onChange A function to call when the value changes.\r\n * @returns A proxy function that will call the onChange callback with the updated value.\r\n *\r\n * @example\r\n * const [value, setValue] = useState(0);\r\n * const onChange: (value: number) => void = setValue;\r\n *\r\n * const addValueByTwo = () => onChange(value + 2); // works\r\n * const addValueByTwo = () => { onChange(value + 1); onChange(value + 1); }; // doesn't work, value will be 1\r\n *\r\n * const updateValue = useUpdate(value, onChange);\r\n * const addValueByTwo = () => updateValue(value => value + 2); // works\r\n * const addValueByTwo = () => { updateValue(value => value + 1); updateValue(value => value + 1); }; // works\r\n */\r\nexport function useUpdate<T>(value: T, onChange: undefined): undefined;\r\nexport function useUpdate<T>(value: T, onChange: (value: T) => void): Update<T>;\r\nexport function useUpdate<T>(value: T, onChange?: (value: T) => void): Update<T> | undefined;\r\nexport function useUpdate<T>(value: T, onChange?: (value: T) => void): Update<T> | undefined {\r\n    const valueRef = useRef(value);\r\n    valueRef.current = value;\r\n\r\n    return useMemo(() => {\r\n        if (!onChange) return;\r\n\r\n        return updater => {\r\n            const newValue = updater(valueRef.current);\r\n            valueRef.current = newValue;\r\n            onChange(newValue);\r\n        };\r\n    }, [onChange]);\r\n}\r\n","import { SdkError } from '@microsoft/teams-js';\r\n\r\nexport interface TeamsErrorInit {\r\n    message?: string;\r\n    code?: TeamsErrorCode;\r\n    cause?: Error;\r\n}\r\n\r\nexport enum TeamsErrorCode {\r\n    NoNetwork = 'NoNetwork',\r\n    ServerTemporarilyUnavailable = 'ServerTemporarilyUnavailable',\r\n    Transient = 'Transient',\r\n    Unexpected = 'Unexpected',\r\n    Unknown = 'Unknown',\r\n}\r\n\r\nconst defaultMessage = 'A Teams error occurred.';\r\n\r\n/**\r\n * The error class to wrap all the errors thrown by Teams JS SDK. This class provides a unified error handling\r\n * mechanism for all the errors thrown by the SDK, which could be an Error, an SdkError, or a string.\r\n *\r\n * @property code The code of the error.\r\n * @property cause The cause of the error.\r\n */\r\nexport class TeamsError extends Error {\r\n    code: TeamsErrorCode;\r\n    cause?: Error;\r\n\r\n    constructor({ message = defaultMessage, code = TeamsErrorCode.Unknown, cause }: TeamsErrorInit = {}) {\r\n        super(message);\r\n        this.code = code;\r\n        this.cause = cause;\r\n        this.name = 'TeamsError';\r\n    }\r\n\r\n    /**\r\n     * The singleton instance of an unknown error.\r\n     */\r\n    static readonly unknown = new TeamsError();\r\n\r\n    /**\r\n     * Wrap a TeamsError from an unknown error, populating the error properties if recognized.\r\n     *\r\n     * @param error The error to wrap a TeamsError from.\r\n     * @returns A TeamsError instance.\r\n     */\r\n    static from(error: unknown): TeamsError {\r\n        // Returns TeamsError as is\r\n        if (error instanceof TeamsError) return error;\r\n\r\n        // Wrap an Error\r\n        if (error instanceof Error) {\r\n            return new TeamsError({\r\n                message: error.message,\r\n                code: parseTeamsErrorCode(error.message),\r\n                cause: error,\r\n            });\r\n        }\r\n\r\n        // Wrap an SdkError\r\n        if (isSdkError(error)) {\r\n            return new TeamsError({\r\n                message: `${error.errorCode}, ${error.message}`,\r\n                code: parseTeamsErrorCode(error.message, error.errorCode),\r\n            });\r\n        }\r\n\r\n        // Wrap a string\r\n        if (typeof error === 'string') {\r\n            return new TeamsError({\r\n                message: error,\r\n                code: parseTeamsErrorCode(error),\r\n            });\r\n        }\r\n\r\n        // Returns an unknown error if not recognized\r\n        return TeamsError.unknown;\r\n    }\r\n}\r\n\r\n/**\r\n * Checks whether the error fits the SdkError interface.\r\n *\r\n * @param error The error to check.\r\n * @returns Whether the error fits the SdkError interface.\r\n * @remarks Implement this by our own to avoid the unstrict type check in the SDK.\r\n */\r\nfunction isSdkError(error: unknown): error is SdkError {\r\n    if (typeof error !== 'object' || error === null) return false;\r\n\r\n    const { errorCode, message } = error as { errorCode: unknown; message: unknown };\r\n    return typeof errorCode === 'number' && (typeof message === 'string' || message === undefined);\r\n}\r\n\r\n/**\r\n * Parses the Teams error code from the error message or the raw code.\r\n *\r\n * @param message The error message.\r\n * @param rawCode The raw error code.\r\n * @returns The Teams error code.\r\n */\r\nfunction parseTeamsErrorCode(message?: string, rawCode?: number): TeamsErrorCode {\r\n    if (rawCode) {\r\n        // Parse the error code from the SDK\r\n    }\r\n\r\n    if (message) {\r\n        if (message.startsWith('Error: NoNetwork')) {\r\n            return TeamsErrorCode.NoNetwork;\r\n        }\r\n\r\n        if (message.startsWith('Error: ServerTemporarilyUnavailable')) {\r\n            return TeamsErrorCode.ServerTemporarilyUnavailable;\r\n        }\r\n\r\n        if (message.startsWith('Error: TransientError')) {\r\n            return TeamsErrorCode.Transient;\r\n        }\r\n\r\n        if (message.startsWith('Error: Unexpected')) {\r\n            return TeamsErrorCode.Unexpected;\r\n        }\r\n    }\r\n\r\n    return TeamsErrorCode.Unknown;\r\n}\r\n","import { ITextField } from '@fluentui/react';\r\nimport React from 'react';\r\nimport { ChoiceAnswerContent, ChoiceEntry } from '../types';\r\n\r\nexport interface UseShuffledProps<T> {\r\n    array: T[];\r\n    enabled?: boolean;\r\n}\r\n\r\n/**\r\n * Returns a shuffled copy of the array.\r\n *\r\n * @param props.array The array to shuffle.\r\n * @param props.enabled Whether to shuffle the array.\r\n * @returns An array.\r\n *\r\n * @example useShuffled(['Yes', 'No', 'Maybe later']) // ['No', 'Maybe later', 'Yes']\r\n * @example useShuffled(['Yes', 'No', 'Maybe later'], false) // ['Yes', 'No', 'Maybe later']\r\n */\r\nexport function useShuffled<T>({ array, enabled }: UseShuffledProps<T>): T[] {\r\n    return React.useMemo(() => {\r\n        if (!enabled) return array;\r\n\r\n        return array\r\n            .map<[number, T]>(element => [Math.random(), element])\r\n            .sort(([first], [second]) => first - second)\r\n            .map(([, element]) => element);\r\n    }, [array, enabled]);\r\n}\r\n\r\n/**\r\n * Returns a function that updates the entry's answer, according to the chosen options and the \"other\" value.\r\n *\r\n * @param entry The current choice entry.\r\n * @param onEntryChange A function that is called when the entry changes.\r\n * @returns A function if `onEntryChange` is defined, `undefined` otherwise.\r\n */\r\nexport function useChoiceChange(\r\n    entry: ChoiceEntry,\r\n    onEntryChange?: (entry: ChoiceEntry) => void\r\n): ((chosen: string[], other?: string) => void) | undefined {\r\n    return React.useMemo(\r\n        () =>\r\n            onEntryChange &&\r\n            ((chosen: string[], other?: string) => {\r\n                const newAnswer = { ...entry.answer };\r\n\r\n                if (chosen.length > 0 || other !== undefined) {\r\n                    newAnswer.content = { chosen, other };\r\n                } else {\r\n                    delete newAnswer.content;\r\n                }\r\n\r\n                onEntryChange({ ...entry, answer: newAnswer });\r\n            }),\r\n        [entry, onEntryChange]\r\n    );\r\n}\r\n\r\nexport interface UseChosenAndOther {\r\n    chosen: string[];\r\n    otherKey: string;\r\n    otherValue?: string;\r\n    otherSelected: boolean;\r\n    otherFieldRef: React.RefObject<ITextField>;\r\n}\r\n\r\n/**\r\n * Returns the chosen options and the \"other\" related values.\r\n *\r\n * @param choices The choices besides the \"other\" option.\r\n * @param content The current answer content.\r\n * @returns An object with the chosen options and the \"other\" related values.\r\n */\r\nexport function useChosenAndOther(choices: string[], content?: ChoiceAnswerContent): UseChosenAndOther {\r\n    const otherFieldRef = React.useRef<ITextField>(null);\r\n    return React.useMemo(\r\n        () => ({\r\n            chosen: content?.chosen ?? [],\r\n            otherKey: ['other', ...choices.map(choice => choice.replace(/(\\s|-)+/g, '_').toLowerCase())].join('-'),\r\n            otherValue: content?.other,\r\n            otherSelected: content?.other !== undefined,\r\n            otherFieldRef,\r\n        }),\r\n        [choices, content]\r\n    );\r\n}\r\n","export * from './BaseDescriptor';\r\nexport * from './CheckboxChoiceDescriptor';\r\nexport * from './DateTimeDescriptor';\r\nexport * from './default';\r\nexport * from './DropdownChoiceDescriptor';\r\nexport * from './FallbackViewingDescriptor';\r\nexport * from './RadioChoiceDescriptor';\r\nexport * from './RichTextDescriptor';\r\nexport * from './TextDescriptor';\r\n","import { IButton, IconButton, ITextField, ITextFieldProps, mergeStyles, TextField } from '@fluentui/react';\r\nimport React from 'react';\r\nimport { useCollapsibleTextFieldStyles } from './CollapsibleTextField.styles';\r\n\r\nconst defaultStrings = {\r\n    editButton: (label: string, value: string) => `Edit ${label} \"${value}\"`,\r\n    doneButton: 'Done',\r\n};\r\n\r\nconst defaultIconNames = {\r\n    editButton: 'Edit',\r\n    doneButton: 'CheckMark',\r\n};\r\n\r\nexport interface CollapsibleTextFieldProps\r\n    extends Omit<ITextFieldProps, 'componentRef' | 'onKeyPress' | 'onRenderInput'> {\r\n    strings?: typeof defaultStrings;\r\n    iconNames?: typeof defaultIconNames;\r\n}\r\n\r\nexport const CollapsibleTextField: React.FC<CollapsibleTextFieldProps> = ({\r\n    label,\r\n    className,\r\n    strings,\r\n    iconNames,\r\n    ...props\r\n}) => {\r\n    const [collapsed, setCollapsed] = React.useState(true);\r\n    const fieldRef = React.useRef<ITextField>(null);\r\n    const buttonRef = React.useRef<IButton>(null);\r\n\r\n    const expand = React.useCallback(() => {\r\n        setCollapsed(false);\r\n        requestAnimationFrame(() => fieldRef.current?.focus());\r\n    }, []);\r\n\r\n    const collapse = React.useCallback(() => {\r\n        fieldRef.current?.blur();\r\n        setCollapsed(true);\r\n        requestAnimationFrame(() => buttonRef.current?.focus());\r\n    }, []);\r\n\r\n    const onKeyPress = React.useCallback(\r\n        (event: React.KeyboardEvent<HTMLInputElement>) => {\r\n            if (event.key === 'Enter') collapse();\r\n        },\r\n        [collapse]\r\n    );\r\n\r\n    const stringsInternal = React.useMemo(() => ({ ...defaultStrings, ...strings }), [strings]);\r\n    const iconNamesInternal = React.useMemo(() => ({ ...defaultIconNames, ...iconNames }), [iconNames]);\r\n    const styles = useCollapsibleTextFieldStyles();\r\n    return (\r\n        <TextField\r\n            {...props}\r\n            componentRef={fieldRef}\r\n            className={mergeStyles(\r\n                styles.root,\r\n                collapsed && styles.collapsed,\r\n                props.errorMessage && styles.error,\r\n                className\r\n            )}\r\n            title={label}\r\n            onKeyPress={onKeyPress}\r\n            onRenderInput={(inputProps, defaultRender) =>\r\n                collapsed ? (\r\n                    <>\r\n                        <span\r\n                            id={inputProps?.id}\r\n                            title={inputProps?.title}\r\n                            aria-placeholder={inputProps?.placeholder}\r\n                            aria-required={inputProps?.required}\r\n                            aria-readonly={inputProps?.readOnly}\r\n                            aria-errormessage={inputProps?.['aria-errormessage']}\r\n                            aria-invalid={inputProps?.['aria-invalid']}\r\n                            aria-disabled\r\n                            role='textbox'\r\n                            className={mergeStyles(\r\n                                styles.collapsedText,\r\n                                !inputProps?.value && styles.collapsedPlaceholder\r\n                            )}>\r\n                            {inputProps?.value || inputProps?.placeholder}\r\n                        </span>\r\n                        <IconButton\r\n                            componentRef={buttonRef}\r\n                            className={styles.button}\r\n                            title={stringsInternal.editButton(label ?? '', (inputProps?.value ?? '') as string)}\r\n                            iconProps={{ iconName: iconNamesInternal.editButton }}\r\n                            onClick={expand}\r\n                        />\r\n                    </>\r\n                ) : (\r\n                    <>\r\n                        {defaultRender?.(inputProps)}\r\n                        <IconButton\r\n                            componentRef={buttonRef}\r\n                            className={styles.button}\r\n                            title={stringsInternal.doneButton}\r\n                            iconProps={{ iconName: iconNamesInternal.doneButton }}\r\n                            onClick={collapse}\r\n                        />\r\n                    </>\r\n                )\r\n            }\r\n        />\r\n    );\r\n};\r\n","/*\r\n *  Copyright © Microsoft Corporation. All rights reserved.\r\n */\r\nexport * from './PillPivot.component';\r\n","/*\r\n *  Copyright © Microsoft Corporation. All rights reserved.\r\n */\r\n\r\nimport React from 'react';\r\nimport { ModalContent, ModalContentProps } from '../CommonModal/ModalContent';\r\nimport { useTaskModuleStyles } from './TaskModule.styles';\r\n\r\nexport type TaskModuleProps = Omit<ModalContentProps, 'onDismiss'>;\r\nexport const TaskModule: React.FC<TaskModuleProps> = props => {\r\n    const styles = useTaskModuleStyles();\r\n    return (\r\n        <div className={styles.root}>\r\n            <ModalContent {...props} />\r\n        </div>\r\n    );\r\n};\r\n","/*\r\n *  Copyright © Microsoft Corporation. All rights reserved.\r\n */\r\n\r\nimport { FontWeights } from '@fluentui/react';\r\nimport { FontSizes, isContrastTheme, makeStyles } from '@addressbook/components-fluentui-teams-theme';\r\n\r\nexport const usePillPivotStyles = makeStyles(_theme => ({\r\n    root: {\r\n        display: 'flex',\r\n        gap: '4px',\r\n\r\n        '&.is-mobile': {\r\n            gap: '8px',\r\n        },\r\n    },\r\n}));\r\n\r\nexport const usePillButtonStyles = makeStyles(theme => ({\r\n    root: {\r\n        boxSizing: 'border-box',\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n        alignItems: 'center',\r\n        width: '81px',\r\n        height: '25px',\r\n        cursor: 'pointer',\r\n        borderRadius: '30px',\r\n        fontWeight: FontWeights.regular,\r\n        fontSize: FontSizes.size12,\r\n        border: `1px solid ${isContrastTheme(theme.name) ? theme.palette.themeDark : theme.palette.neutralLight}`,\r\n        background: theme.palette.white,\r\n        color: isContrastTheme(theme.name) ? theme.palette.black : theme.palette.neutralPrimary,\r\n\r\n        padding: 0,\r\n        '&::before, &::after': {\r\n            display: 'none',\r\n        },\r\n\r\n        '&.is-active': {\r\n            background: isContrastTheme(theme.name) ? theme.palette.themePrimary : theme.palette.themeLighter,\r\n            borderColor: isContrastTheme(theme.name) ? theme.palette.themeDark : theme.palette.themeLight,\r\n            color: isContrastTheme(theme.name) ? theme.palette.black : theme.palette.themePrimary,\r\n            fontWeight: FontWeights.semibold,\r\n        },\r\n    },\r\n    mobile: {\r\n        boxSizing: 'border-box',\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n        alignItems: 'center',\r\n        width: '105px',\r\n        height: '32px',\r\n        cursor: 'pointer',\r\n        borderRadius: '20px',\r\n        fontWeight: FontWeights.regular,\r\n        fontSize: FontSizes.size16,\r\n        background: theme.palette.neutralLighter,\r\n        color: theme.palette.neutralDark,\r\n\r\n        padding: 0,\r\n        '&::before, &::after': {\r\n            display: 'none',\r\n        },\r\n\r\n        '&.is-active, &.is-selected:hover': {\r\n            background: theme.palette.themePrimary,\r\n            color: theme.palette.white,\r\n            fontWeight: FontWeights.semibold,\r\n        },\r\n    },\r\n    content: {\r\n        lineHeight: 'initial',\r\n    },\r\n}));\r\n","import { isContrastTheme, makeStyles } from '@addressbook/components-fluentui-teams-theme';\r\n\r\nexport const usePeopleCoinStyles = makeStyles(theme => ({\r\n    icon: {\r\n        color: theme.palette.themePrimary,\r\n        backgroundColor: isContrastTheme(theme.name) ? theme.palette.white : theme.palette.neutralLighter,\r\n        border: isContrastTheme(theme.name) ? `1px solid ${theme.palette.black}` : undefined,\r\n        borderRadius: '50%',\r\n    },\r\n}));\r\n","/**\r\n * A service resource locator.\r\n */\r\nexport class ServiceResourceLocator {\r\n    private constructor(private parts: string[]) {}\r\n\r\n    /**\r\n     * The root locator.\r\n     */\r\n    static readonly root = new ServiceResourceLocator([]);\r\n\r\n    /**\r\n     * Get the path of the locator, excluding empty parts.\r\n     *\r\n     * @returns The path.\r\n     */\r\n    get path(): string {\r\n        return this.parts.filter(part => part !== '').join('/');\r\n    }\r\n\r\n    /**\r\n     * Extend the locator with the given parts.\r\n     *\r\n     * @param parts The parts to extend.\r\n     * @returns The extended\r\n     */\r\n    extend(...parts: string[]): ServiceResourceLocator {\r\n        return new ServiceResourceLocator([...this.parts, ...parts]);\r\n    }\r\n}\r\n","export * from './components';\r\nexport { CustomizedMention, Hack } from './extensions';\r\nexport * from './types';\r\n","import { Extension } from '@tiptap/core';\r\n\r\ndeclare module '@tiptap/core' {\r\n    interface Commands<ReturnType> {\r\n        fontSize: {\r\n            /**\r\n             * Set the fontSize\r\n             */\r\n            setFontSize: (fontSize: string) => ReturnType;\r\n\r\n            /**\r\n             * Unset the fontSize\r\n             */\r\n            unsetFontSize: () => ReturnType;\r\n        };\r\n    }\r\n}\r\n\r\nexport interface FontSizeOptions {\r\n    types: string[];\r\n}\r\n\r\nexport const FontSize = Extension.create<FontSizeOptions>({\r\n    name: 'fontSize',\r\n\r\n    addOptions() {\r\n        return {\r\n            types: ['textStyle'],\r\n        };\r\n    },\r\n\r\n    addGlobalAttributes() {\r\n        return [\r\n            {\r\n                types: this.options.types,\r\n                attributes: {\r\n                    fontSize: {\r\n                        default: null,\r\n                        parseHTML: element => element.style.fontSize?.replace(/['\"]+/g, ''),\r\n                        renderHTML: attributes => {\r\n                            if (!attributes.fontSize) return {};\r\n                            return { style: `font-size: ${attributes.fontSize}` };\r\n                        },\r\n                    },\r\n                },\r\n            },\r\n        ];\r\n    },\r\n\r\n    addCommands() {\r\n        return {\r\n            setFontSize:\r\n                fontSize =>\r\n                ({ chain }) =>\r\n                    chain().setMark('textStyle', { fontSize }).run(),\r\n            unsetFontSize:\r\n                () =>\r\n                ({ chain }) =>\r\n                    chain().setMark('textStyle', { fontSize: null }).removeEmptyTextStyle().run(),\r\n        };\r\n    },\r\n});\r\n","import { isContrastTheme, makeStyles } from '@addressbook/components-fluentui-teams-theme';\r\n\r\nexport const useColorMenuItemStyles = makeStyles(theme => ({\r\n    root: {\r\n        display: 'block',\r\n        width: '16px',\r\n        height: '16px',\r\n        padding: 0,\r\n\r\n        border: 'none',\r\n        borderRadius: '4px',\r\n\r\n        cursor: 'pointer',\r\n    },\r\n    color: {\r\n        boxShadow: 'rgba(0, 0, 0, 0.1) 0px 0px 2px, rgba(0, 0, 0, 0.15) 0px 2px 4px',\r\n        ':hover': {\r\n            borderStyle: 'solid',\r\n            borderWidth: '1px',\r\n            borderColor: theme.palette.neutralDark,\r\n        },\r\n    },\r\n    text: {\r\n        height: '24px',\r\n        width: '100%',\r\n        '.ms-ContextualMenu-item:has(&)': {\r\n            flex: '100%',\r\n        },\r\n\r\n        color: isContrastTheme(theme.name) ? theme.palette.black : theme.palette.neutralPrimary,\r\n        backgroundColor: theme.palette.white,\r\n\r\n        borderStyle: 'solid',\r\n        borderWidth: '1px',\r\n        borderColor: isContrastTheme(theme.name) ? theme.palette.black : theme.palette.neutralTertiary,\r\n\r\n        ':hover': {\r\n            color: isContrastTheme(theme.name) ? theme.palette.white : undefined,\r\n            backgroundColor: isContrastTheme(theme.name) ? theme.palette.accent : theme.palette.neutralLighterAlt,\r\n        },\r\n    },\r\n}));\r\n","export * from './InsertLink';\r\nexport * from './InsertLink.dialog';\r\nexport * from './InsertLink.menu';\r\n","export * from './RichTextField';\r\nexport * from './RichTextField.types';\r\n","import { isContrastTheme, makeStyles } from '@addressbook/components-fluentui-teams-theme';\r\n\r\nconst SeparatorWidth = 1;\r\nconst RibbonButtonGap = 4;\r\n\r\nexport const useRibbonStyles = makeStyles(theme => ({\r\n    leadingButton: {\r\n        position: 'relative',\r\n        '.ms-OverflowSet-item:not(:first-child) &::before': {\r\n            content: '\"\"',\r\n            backgroundColor: isContrastTheme(theme.name) ? theme.palette.black : theme.palette.neutralTertiaryAlt,\r\n            position: 'absolute',\r\n            width: `${SeparatorWidth}px`,\r\n            insetBlock: '25%',\r\n            insetInlineStart: `-${(RibbonButtonGap + SeparatorWidth) / 2}px`,\r\n        },\r\n    },\r\n}));\r\n\r\nexport const useRibbonCommandBarStyles = makeStyles(theme => ({\r\n    root: {\r\n        ':first-child': {\r\n            paddingTop: '8px',\r\n        },\r\n        ':last-child': {\r\n            paddingBottom: '8px',\r\n        },\r\n        height: '32px',\r\n        paddingInline: '12px',\r\n        border: 'none',\r\n        '.ms-OverflowSet': {\r\n            gap: `${RibbonButtonGap}px`,\r\n        },\r\n        '.ms-Button': {\r\n            color: theme.palette.black,\r\n            border: 'none',\r\n            margin: 0,\r\n            padding: '0 8px',\r\n            borderRadius: '4px',\r\n            '.ms-Icon': {\r\n                height: '16px',\r\n                width: '16px',\r\n                margin: 0,\r\n                padding: 0,\r\n                color: 'inherit !important',\r\n                svg: {\r\n                    margin: 0,\r\n                    fill: 'currentColor !important',\r\n                },\r\n            },\r\n            svg: {\r\n                display: 'block',\r\n                height: '100%',\r\n                width: '100%',\r\n            },\r\n        },\r\n        '.ms-Button.is-checked': {\r\n            color: isContrastTheme(theme.name) ? theme.palette.themeDark : theme.palette.accent,\r\n            backgroundColor: isContrastTheme(theme.name) ? undefined : theme.palette.neutralQuaternary,\r\n        },\r\n        '.ms-Button:hover': {\r\n            '@media (hover: hover)': {\r\n                color: isContrastTheme(theme.name) ? theme.palette.white : theme.palette.accent,\r\n                backgroundColor: isContrastTheme(theme.name) ? theme.palette.accent : undefined,\r\n            },\r\n        },\r\n        '.ms-Button:hover:not(.is-checked)': {\r\n            '@media (hover: none)': {\r\n                color: theme.palette.black,\r\n            },\r\n        },\r\n        '.ms-Button:not(.ms-CommandBar-overflowButton) .ms-Button-menuIcon': {\r\n            display: 'none',\r\n        },\r\n    },\r\n}));\r\n","import { FontSizes, makeStyles } from '@addressbook/components-fluentui-teams-theme';\r\n\r\nexport const usePeopleViewStyles = makeStyles(theme => ({\r\n    root: {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        gap: '8px',\r\n        cursor: 'default',\r\n    },\r\n    textContainer: {\r\n        flex: 1,\r\n        minWidth: 0,\r\n    },\r\n    names: {\r\n        fontSize: FontSizes.size14,\r\n        fontWeight: 600,\r\n        color: theme.palette.black,\r\n        overflow: 'hidden',\r\n        textOverflow: 'ellipsis',\r\n        whiteSpace: 'nowrap',\r\n        maxWidth: 'max-content',\r\n    },\r\n    label: {\r\n        fontSize: FontSizes.size12,\r\n        fontWeight: 400,\r\n        color: theme.palette.neutralDark,\r\n        overflow: 'hidden',\r\n        textOverflow: 'ellipsis',\r\n        whiteSpace: 'nowrap',\r\n        maxWidth: 'max-content',\r\n    },\r\n}));\r\n","/*\r\n *  Copyright © Microsoft Corporation. All rights reserved.\r\n */\r\n\r\nexport * from './ContentCopyResponseModal.component';\r\nexport type { ContentCopyResponseProps } from './ContentCopyResponseModalContent';\r\n","import { JSONContent, mergeAttributes, Node } from '@tiptap/core';\r\nimport { Fragment } from '@tiptap/pm/model';\r\nimport { Plugin } from '@tiptap/pm/state';\r\nimport { ReactNodeViewRenderer } from '@tiptap/react';\r\nimport {\r\n    createFileByBlob,\r\n    dataTransferIncludesFiles,\r\n    decodeDataUrl,\r\n    extractFilesFromDataTransfer,\r\n    getExtensionByMime,\r\n    getMimeByDataUrl,\r\n    isImageMime,\r\n    joinFileName,\r\n    normalizeFileName,\r\n    splitFileName,\r\n    uuid,\r\n} from '@addressbook/utilities-core';\r\nimport { defaultRichTextFieldStrings, defaultRichTextFileStorageService } from '../../utils';\r\nimport { NodeRenderHTMLProps } from '../types';\r\nimport { FileSessions } from './sessions';\r\nimport { FileOptions } from './types';\r\nimport { FileNodeView } from './view';\r\n\r\ndeclare module '@tiptap/core' {\r\n    interface Commands<ReturnType> {\r\n        file: {\r\n            /**\r\n             * Insert a file.\r\n             *\r\n             * @param file - The file to insert.\r\n             */\r\n            insertFile: (file: File) => ReturnType;\r\n\r\n            /**\r\n             * Insert files.\r\n             *\r\n             * @param files - The files to insert.\r\n             */\r\n            insertFiles: (files: File[]) => ReturnType;\r\n        };\r\n    }\r\n}\r\n\r\n/**\r\n * The file extension.\r\n */\r\nexport const File = Node.create<FileOptions, FileSessions>({\r\n    name: 'file',\r\n    content: 'text?',\r\n    group: 'inline',\r\n    inline: true,\r\n    atom: true,\r\n    selectable: true,\r\n    draggable: true,\r\n    defining: true,\r\n\r\n    addOptions() {\r\n        return {\r\n            fileStorageService: defaultRichTextFileStorageService,\r\n            strings: defaultRichTextFieldStrings,\r\n            defaultMime: 'application/octet-stream',\r\n            HTMLAttributes: {\r\n                target: '_blank',\r\n                rel: 'noopener noreferrer',\r\n            },\r\n        };\r\n    },\r\n\r\n    addStorage() {\r\n        return new FileSessions(this.options.fileStorageService);\r\n    },\r\n\r\n    addAttributes() {\r\n        return {\r\n            href: {\r\n                default: null,\r\n            },\r\n            target: {\r\n                default: this.options.HTMLAttributes.target,\r\n            },\r\n            rel: {\r\n                default: this.options.HTMLAttributes.rel,\r\n            },\r\n            mime: {\r\n                default: this.options.defaultMime,\r\n                parseHTML: element => element.getAttribute(`data-${this.name}-mime`) || null,\r\n                renderHTML: attributes => (attributes.mime ? { [`data-${this.name}-mime`]: attributes.mime } : {}),\r\n            },\r\n            error: {\r\n                default: null,\r\n                parseHTML: element => (element.getAttribute(`data-${this.name}-error`) ? true : null),\r\n                renderHTML: attributes => (attributes.error ? { [`data-${this.name}-error`]: attributes.error } : {}),\r\n            },\r\n            key: {\r\n                rendered: false,\r\n            },\r\n        };\r\n    },\r\n\r\n    parseHTML() {\r\n        const getFileNameByImage = (image: HTMLImageElement): string => {\r\n            const name = image.alt || image.title || this.options.strings.defaultImageFileStem;\r\n            const mime = getMimeByDataUrl(image.src);\r\n            const extension = mime && getExtensionByMime(mime);\r\n\r\n            const normalizedName = normalizeFileName(name);\r\n            const nameParts = splitFileName(normalizedName);\r\n            const ensuredNameParts =\r\n                !extension || nameParts.extension === extension\r\n                    ? nameParts\r\n                    : { stem: joinFileName(nameParts), extension };\r\n\r\n            return joinFileName(ensuredNameParts);\r\n        };\r\n\r\n        return [\r\n            {\r\n                tag: `a[data-type=\"${this.name}\"]`,\r\n                priority: 100,\r\n                getAttrs: element => {\r\n                    const anchor = element as HTMLAnchorElement;\r\n\r\n                    // anchor.href is not suitable here because it is resolved to an absolute URL, even if the href is\r\n                    // empty or a fragment. We need the original href value.\r\n                    const url = anchor.getAttribute('href');\r\n                    if (!url) return false;\r\n\r\n                    const mime = anchor.getAttribute(`data-${this.name}-mime`);\r\n                    if (!mime) return false;\r\n\r\n                    const key = uuid();\r\n                    if (isImageMime(mime)) {\r\n                        this.storage.download(key, url);\r\n                    } else {\r\n                        this.storage.thumbnail(key, url);\r\n                    }\r\n                    return { key };\r\n                },\r\n            },\r\n            {\r\n                tag: 'img[src^=\"data:\"]',\r\n                priority: 100,\r\n                getAttrs: element => {\r\n                    const image = element as HTMLImageElement;\r\n                    const blob = decodeDataUrl(image.src);\r\n                    if (!blob) return false;\r\n\r\n                    const mime = getMimeByDataUrl(image.src);\r\n\r\n                    const key = uuid();\r\n                    this.storage.upload(key, createFileByBlob(blob, getFileNameByImage(image)));\r\n                    return { mime, key };\r\n                },\r\n                getContent: (node, schema) => Fragment.from(schema.text(getFileNameByImage(node as HTMLImageElement))),\r\n            },\r\n        ];\r\n    },\r\n\r\n    renderHTML({ HTMLAttributes }: NodeRenderHTMLProps) {\r\n        return ['a', mergeAttributes({ 'data-type': this.name }, this.options.HTMLAttributes, HTMLAttributes), 0];\r\n    },\r\n\r\n    addNodeView() {\r\n        return ReactNodeViewRenderer(FileNodeView);\r\n    },\r\n\r\n    addCommands() {\r\n        return {\r\n            insertFile:\r\n                file =>\r\n                ({ commands }) =>\r\n                    commands.insertFiles([file]),\r\n            insertFiles:\r\n                files =>\r\n                ({ commands, editor }) => {\r\n                    // Map files to JSON content\r\n                    const content: JSONContent[] = files.map(file => {\r\n                        const mime = file.type || this.options.defaultMime;\r\n\r\n                        const key = uuid();\r\n                        this.storage.upload(key, file);\r\n                        return {\r\n                            type: this.name,\r\n                            attrs: { mime, key },\r\n                            content: [{ type: 'text', text: file.name }],\r\n                        };\r\n                    });\r\n\r\n                    // Wrap content in a paragraph if grouping with other file nodes\r\n                    const { $from, $to } = editor.state.selection;\r\n                    const grouping =\r\n                        ($from.nodeBefore && $from.nodeBefore.type.name === this.name) ||\r\n                        ($to.nodeAfter && $to.nodeAfter.type.name === this.name);\r\n                    const wrappedContent = grouping ? content : { type: 'paragraph', content };\r\n\r\n                    return commands.insertContent(wrappedContent);\r\n                },\r\n        };\r\n    },\r\n\r\n    addProseMirrorPlugins() {\r\n        const consumeDataTransfer = (data: DataTransfer | null): boolean | void => {\r\n            if (!data || !dataTransferIncludesFiles(data) || data.types.length > 1) return;\r\n            const files = extractFilesFromDataTransfer(data);\r\n            return files.length > 0 && this.editor.chain().insertFiles(files).focus().run();\r\n        };\r\n\r\n        return [\r\n            new Plugin({\r\n                props: {\r\n                    handleDrop: (_, event) => consumeDataTransfer(event.dataTransfer),\r\n                    handlePaste: (_, event) => consumeDataTransfer(event.clipboardData),\r\n                },\r\n            }),\r\n        ];\r\n    },\r\n});\r\n","import { Semaphore } from '@addressbook/utilities-core';\r\nimport { ServiceInterceptor } from '../types';\r\n\r\nexport interface ThrottlingInterceptorOptions {\r\n    maxConcurrency?: number;\r\n}\r\n\r\nconst defaultMaxConcurrency = 8;\r\n\r\n/**\r\n * Create a service interceptor to throttle requests.\r\n *\r\n * @property maxConcurrency The maximum number of concurrent requests.\r\n * @returns An interceptor.\r\n */\r\nexport function createThrottlingInterceptor({\r\n    maxConcurrency = defaultMaxConcurrency,\r\n}: ThrottlingInterceptorOptions = {}): ServiceInterceptor {\r\n    const semaphore = new Semaphore(maxConcurrency);\r\n    return (request, proceed) => semaphore.run(() => proceed(request));\r\n}\r\n","export type TestRequest = (request: Request) => boolean;\r\nexport const isGet: TestRequest = request => request.method === 'GET';\r\n\r\nexport type TestResponse = (response: Response) => boolean;\r\nexport const isServerErrorOrTooManyRequests: TestResponse = response =>\r\n    response.status >= 500 || response.status === 429;\r\n\r\nexport type TestRequestAndResponse = (request: Request, response?: Response) => boolean;\r\nexport const isGetAndOk: TestRequestAndResponse = (request, response) =>\r\n    request.method === 'GET' && (response?.ok ?? true);\r\n\r\nexport type RequestSelector = (request: Request) => PropertyKey;\r\nexport const urlSelector: RequestSelector = request => request.url;\r\n","import { ServiceOperation, ServiceResourceLocator } from '@addressbook/services-core';\r\nimport { ProfilePhotoSize } from '../types';\r\nimport { GraphDriveResource } from './drive';\r\nimport { GraphProfilePhotoResource } from './profile-photo';\r\n\r\n/**\r\n * The group resource.\r\n *\r\n * @see https://learn.microsoft.com/graph/api/resources/group\r\n */\r\nexport class GraphGroupResource {\r\n    constructor(private operation: ServiceOperation, private locator: ServiceResourceLocator) {}\r\n\r\n    /**\r\n     * Navigates to the drive resource.\r\n     *\r\n     * @returns The drive resource.\r\n     * @see https://learn.microsoft.com/graph/api/drive-get\r\n     */\r\n    get drive(): GraphDriveResource {\r\n        return new GraphDriveResource(this.operation, this.locator.extend('drive'));\r\n    }\r\n\r\n    /**\r\n     * Navigates to the profile photo resource.\r\n     *\r\n     * @returns The profile photo resource.\r\n     * @see https://learn.microsoft.com/graph/api/profilephoto-get\r\n     */\r\n    get photo(): GraphProfilePhotoResource {\r\n        return new GraphProfilePhotoResource(this.operation, this.locator.extend('photo'));\r\n    }\r\n\r\n    /**\r\n     * Navigates to the profile photo resource by size.\r\n     *\r\n     * @param size The profile photo size.\r\n     * @returns The profile photo resource.\r\n     * @see https://learn.microsoft.com/graph/api/profilephoto-get\r\n     */\r\n    photos(size: ProfilePhotoSize): GraphProfilePhotoResource {\r\n        return new GraphProfilePhotoResource(this.operation, this.locator.extend('photos', `${size}x${size}`));\r\n    }\r\n}\r\n","import { ChoiceGroup, IChoiceGroupOption, TextField } from '@fluentui/react';\r\nimport React from 'react';\r\nimport { ChoiceAppearance, ChoiceEntry, FormContext, FormEntry, FormMode, FormQuestionType } from '../../types';\r\nimport {\r\n    useChoiceChange,\r\n    useChoiceGroupOptionStyles,\r\n    useChoiceGroupStyles,\r\n    useChosenAndOther,\r\n    useOtherFieldStyles,\r\n    useShuffled,\r\n} from '../../utilities';\r\nimport { BaseDescriptor, FieldComponentTypeFactory } from './BaseDescriptor';\r\n\r\nconst defaultOptions = {\r\n    otherPlaceholder: 'Other',\r\n    choiceAriaLabel: (title: string, choice: string) => `${title}: ${choice}`,\r\n};\r\n\r\nexport type RadioChoiceDescriptorOptions = Partial<typeof defaultOptions>;\r\n\r\nconst makeFieldComponent: FieldComponentTypeFactory<\r\n    RadioChoiceDescriptorOptions & typeof defaultOptions,\r\n    ChoiceEntry\r\n> =\r\n    ({ otherPlaceholder, choiceAriaLabel }) =>\r\n    ({ entry, onEntryChange, showPlaceholder, delegatedProps }) => {\r\n        const { question, answer } = entry;\r\n        const { choices, shuffle, allowOther } = question;\r\n\r\n        const shuffledChoices = useShuffled({ array: choices, enabled: shuffle && !delegatedProps.readOnly });\r\n        const onChange = useChoiceChange(entry, onEntryChange);\r\n        const { chosen, otherKey, otherValue, otherSelected, otherFieldRef } = useChosenAndOther(\r\n            choices,\r\n            answer.content\r\n        );\r\n\r\n        const choiceGroupStyles = useChoiceGroupStyles();\r\n        const choiceGroupOptionStyles = useChoiceGroupOptionStyles();\r\n        const otherFieldStyles = useOtherFieldStyles();\r\n\r\n        const options = shuffledChoices.map<IChoiceGroupOption>(choice => ({\r\n            key: choice,\r\n            text: choice,\r\n            styles: choiceGroupOptionStyles,\r\n            ariaLabel: choiceAriaLabel(question.title ?? '', choice),\r\n        }));\r\n\r\n        if (allowOther) {\r\n            options.push({\r\n                key: otherKey,\r\n                text: otherValue ?? '',\r\n                styles: choiceGroupOptionStyles,\r\n                onRenderLabel: choiceGroupProps => (\r\n                    <TextField\r\n                        componentRef={otherFieldRef}\r\n                        value={choiceGroupProps?.text}\r\n                        onChange={onChange && ((_, newValue) => onChange([], newValue))}\r\n                        placeholder={showPlaceholder ? otherPlaceholder : undefined}\r\n                        readOnly={delegatedProps.readOnly}\r\n                        invalid={otherSelected && delegatedProps.invalid}\r\n                        id={choiceGroupProps?.labelId}\r\n                        className='ms-ChoiceFieldLabel'\r\n                        styles={otherFieldStyles}\r\n                    />\r\n                ),\r\n                ariaLabel: choiceAriaLabel(question.title ?? '', otherValue ?? otherPlaceholder),\r\n            });\r\n        }\r\n\r\n        return (\r\n            <ChoiceGroup\r\n                {...delegatedProps}\r\n                selectedKey={otherSelected ? otherKey : chosen[0] ?? null}\r\n                onChange={\r\n                    onChange &&\r\n                    ((_, option) => {\r\n                        if (!option) return;\r\n\r\n                        if (option.key === otherKey) {\r\n                            otherFieldRef.current?.focus();\r\n                            onChange([], '');\r\n                        } else {\r\n                            onChange([option.key]);\r\n                        }\r\n                    })\r\n                }\r\n                options={options}\r\n                role='radiogroup'\r\n                styles={choiceGroupStyles}\r\n            />\r\n        );\r\n    };\r\n\r\n/**\r\n * The descriptor that renders a group of radio buttons for choice entries with radio appearance.\r\n */\r\nexport class RadioChoiceDescriptor extends BaseDescriptor<ChoiceEntry> {\r\n    protected readonly FieldComponent;\r\n\r\n    constructor(options?: RadioChoiceDescriptorOptions) {\r\n        super();\r\n        this.FieldComponent = makeFieldComponent({ ...defaultOptions, ...options });\r\n    }\r\n\r\n    /**\r\n     * Tests whether the entry is a choice entry with radio appearance, and the form is not in viewing mode.\r\n     *\r\n     * @param entry The entry to test.\r\n     * @param context The context.\r\n     * @returns Passes the test or not.\r\n     */\r\n    test(entry: FormEntry, context: FormContext): entry is ChoiceEntry {\r\n        return (\r\n            entry.question.type === FormQuestionType.Choice &&\r\n            entry.question.appearance === ChoiceAppearance.Radio &&\r\n            context.mode !== FormMode.Viewing\r\n        );\r\n    }\r\n}\r\n","/**\r\n * Checks if a data transfer contains files.\r\n *\r\n * @param data The data transfer to check.\r\n * @returns `true` if the data transfer contains files, otherwise `false`.\r\n */\r\nexport function dataTransferIncludesFiles(data: DataTransfer): boolean {\r\n    return data.types.includes('Files');\r\n}\r\n\r\n/**\r\n * Extracts files from a data transfer.\r\n *\r\n * @param data The data transfer to extract files from.\r\n * @returns The files in the data transfer.\r\n */\r\nexport function extractFilesFromDataTransfer(data: DataTransfer): File[] {\r\n    const files = Array.from(data.items, item => item.getAsFile());\r\n    return files.filter((file): file is File => file !== null);\r\n}\r\n","/**\r\n * Check if a URL is an absolute URL.\r\n *\r\n * @param url The URL to check.\r\n * @returns true if the URL is an absolute URL, false otherwise.\r\n */\r\nexport function isAbsoluteUrl(url: string): boolean {\r\n    try {\r\n        new URL(url);\r\n        return true;\r\n    } catch {\r\n        return false;\r\n    }\r\n}\r\n\r\ninterface ProtocolOfNormalizeUrl {\r\n    name: string;\r\n    guess?: RegExp;\r\n}\r\n\r\n// See RFC 3986: https://datatracker.ietf.org/doc/html/rfc3986#section-3.3\r\nconst unreserved = '[\\\\w\\\\d._~-]';\r\nconst genericTopLevelDomain = '\\\\w+';\r\nconst host = `${unreserved}+\\\\.${genericTopLevelDomain}`;\r\n\r\nconst mailtoRegex = new RegExp(`^${unreserved}+@${host}$`);\r\nconst ftpRegex = new RegExp(`^ftp\\.${host}(/\\\\S+)?$`);\r\nconst httpRegex = new RegExp(`^${host}(/\\\\S+)?$`);\r\n\r\nconst defaultProtocols: ProtocolOfNormalizeUrl[] = [\r\n    { name: 'mailto', guess: mailtoRegex },\r\n    { name: 'ftp', guess: ftpRegex },\r\n    { name: 'ftps' },\r\n    { name: 'http' },\r\n    { name: 'https', guess: httpRegex },\r\n];\r\n\r\n/**\r\n * Normalize URL to a valid URL with protocol, or empty string if the URL is invalid.\r\n *\r\n * @param url the URL to normalize\r\n * @param protocols the protocols to allow or guess\r\n * @returns the normalized URL\r\n *\r\n * @example normalizeUrl('https://example.com') // 'https://www.example.com/'\r\n * @example normalizeUrl('alice@example.com') // 'mailto:alice@example.com'\r\n * @example normalizeUrl('ftp.example.com') // 'ftp://ftp.example.com/'\r\n * @example normalizeUrl('example.com') // 'https://www.example.com/'\r\n * @example normalizeUrl('example') // ''\r\n */\r\nexport function normalizeUrl(url: string, protocols: ProtocolOfNormalizeUrl[] = defaultProtocols): string {\r\n    try {\r\n        // Try to parse the url\r\n        const parsedUrl = new URL(url);\r\n\r\n        // If the protocol is not allowed, return empty string\r\n        if (!protocols.some(protocol => parsedUrl.protocol === `${protocol.name}:`)) return '';\r\n\r\n        // If the url is valid, return it\r\n        return parsedUrl.toString();\r\n    } catch {\r\n        // If the url is not valid, try to guess the protocol\r\n        for (const { name, guess } of protocols) {\r\n            if (!guess?.test(url)) continue;\r\n\r\n            // If the url is valid with the guessed protocol, return it\r\n            try {\r\n                return new URL(`${name}:${url}`).toString();\r\n            } catch {\r\n                // Ignore any errors\r\n            }\r\n        }\r\n\r\n        // Otherwise, return empty string\r\n        return '';\r\n    }\r\n}\r\n\r\n/**\r\n * Opens the given url in a new tab.\r\n *\r\n * @param url The url.\r\n */\r\nexport function openUrl(url: string): void {\r\n    window.open(url, '_blank', 'noopener noreferrer');\r\n}\r\n","export * from './Icons';\r\n","import { isEqual } from 'lodash-es';\r\nimport React from 'react';\r\n\r\n/**\r\n * A Hook to create a deep dependency list, ensuring that the dependencies are stable when they only change shallowly.\r\n *\r\n * @param deps The dependencies to stabilize.\r\n * @returns The stabilized dependencies.\r\n */\r\nexport function useDeepDeps<Deps extends React.DependencyList>(deps: Deps): Deps {\r\n    const ref = React.useRef<Deps>();\r\n    if (!ref.current || !isEqual(deps, ref.current)) ref.current = deps;\r\n    return ref.current;\r\n}\r\n\r\n/**\r\n * A Hook to create a memoized value, ensuring that the value is stable when the dependencies change shallowly.\r\n *\r\n * @param factory The factory to create the value.\r\n * @param deps The dependencies to stabilize.\r\n * @returns The memoized value.\r\n */\r\nexport function useDeepMemo<T>(factory: () => T, deps: React.DependencyList): T {\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    return React.useMemo(factory, useDeepDeps(deps));\r\n}\r\n\r\n/**\r\n * A Hook to create a memoized callback, ensuring that the callback is stable when the dependencies change shallowly.\r\n *\r\n * @param callback The callback to memoize.\r\n * @param deps The dependencies to stabilize.\r\n * @returns The memoized callback.\r\n */\r\nexport function useDeepCallback<T extends (...args: never[]) => unknown>(callback: T, deps: React.DependencyList): T {\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    return React.useCallback(callback, useDeepDeps(deps));\r\n}\r\n\r\n/**\r\n * A Hook to create an effect, ensuring that the effect won't run when the dependencies change shallowly.\r\n *\r\n * @param effect The effect to run.\r\n * @param deps The dependencies to stabilize.\r\n * @returns The effect.\r\n */\r\nexport function useDeepEffect(effect: React.EffectCallback, deps: React.DependencyList): void {\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    return React.useEffect(effect, useDeepDeps(deps));\r\n}\r\n","/*\r\n *  Copyright © Microsoft Corporation. All rights reserved.\r\n */\r\n\r\nexport * from './CollapsingArea.component';\r\n","export * from './default';\r\nexport * from './LengthValidator';\r\nexport * from './NumberValidator';\r\nexport * from './RequiredValidator';\r\nexport * from './RichTextValidator';\r\n","export const rem = (px: number): string => `${px / 16}rem`;\r\n\r\nexport namespace FontSizes {\r\n    export const size10 = rem(10);\r\n    export const size12 = rem(12);\r\n    export const size14 = rem(14);\r\n    export const size16 = rem(16);\r\n    export const size18 = rem(18);\r\n    export const size20 = rem(20);\r\n    export const size24 = rem(24);\r\n    export const size28 = rem(28);\r\n    export const size32 = rem(32);\r\n    export const size42 = rem(42);\r\n    export const size68 = rem(68);\r\n}\r\n","import React from 'react';\r\n\r\n/**\r\n * A unique key for a rendering.\r\n *\r\n * @remarks `number` is intentionally not used since React keys are converted to strings eventually,\r\n * even if they are numbers, which can lead to unexpected behavior when unrendering elements with\r\n * numeric keys.\r\n */\r\nexport type RenderingKey = string;\r\nexport type RenderingElement = React.ReactElement;\r\n\r\n/**\r\n * The result of the `useRenderings` hook.\r\n *\r\n * @property renderings The current renderings.\r\n * @property render Renders a new element.\r\n * @property unrender Unrenders an element.\r\n * @property dispose Disposes all renderings.\r\n */\r\nexport interface UseRenderingsResult {\r\n    renderings: RenderingElement[];\r\n    render: (key: RenderingKey, element: RenderingElement) => void;\r\n    unrender: (key: RenderingKey) => void;\r\n    dispose: () => void;\r\n}\r\n\r\n/**\r\n * A hook that allows to dynamically render and unrender React elements.\r\n */\r\nexport function useRenderings(): UseRenderingsResult {\r\n    const [renderings, setRenderings] = React.useState<UseRenderingsResult['renderings']>([]);\r\n\r\n    const render = React.useCallback<UseRenderingsResult['render']>(\r\n        (key, element) =>\r\n            setRenderings(renderings => {\r\n                let index = renderings.findIndex(rendering => rendering.key === key);\r\n                if (index < 0) index = renderings.length;\r\n\r\n                const newRenderings = [...renderings];\r\n                newRenderings[index] = React.cloneElement(element, { key });\r\n                return newRenderings;\r\n            }),\r\n        [setRenderings]\r\n    );\r\n\r\n    const unrender = React.useCallback<UseRenderingsResult['unrender']>(\r\n        key => setRenderings(rendering => rendering.filter(element => element.key !== key)),\r\n        [setRenderings]\r\n    );\r\n\r\n    const dispose = React.useCallback<UseRenderingsResult['dispose']>(() => setRenderings([]), [setRenderings]);\r\n\r\n    return { renderings, render, unrender, dispose };\r\n}\r\n","/**\r\n * Silently resolves a promise.\r\n *\r\n * @param promise The promise.\r\n * @returns The promise that resolves if the promise resolves, and resolves undefined if the promise rejects.\r\n */\r\nexport async function silently(promise: Promise<void>): Promise<void>;\r\nexport async function silently<T>(promise: Promise<T>): Promise<T | undefined>;\r\nexport async function silently<T>(promise: Promise<T>): Promise<T | undefined> {\r\n    try {\r\n        return await promise;\r\n    } catch {\r\n        // Ignore the error.\r\n    }\r\n}\r\n\r\n/**\r\n * Delay for a number of milliseconds.\r\n *\r\n * @param ms The number of milliseconds to delay.\r\n * @returns A promise that resolves after the delay.\r\n */\r\nexport function delay(ms: number): Promise<void> {\r\n    return new Promise(resolve => setTimeout(resolve, ms));\r\n}\r\n","import { Spinner, SpinnerSize, TooltipHost } from '@fluentui/react';\r\nimport { useBlobObjectUrl } from '@addressbook/utilities-hooks';\r\nimport React from 'react';\r\nimport { useFallbackViewStyles } from './styles';\r\n\r\nexport interface FallbackViewProps extends React.PropsWithChildren<React.AnchorHTMLAttributes<HTMLAnchorElement>> {\r\n    thumbnail?: Blob;\r\n    loading?: boolean;\r\n}\r\n\r\nexport const FallbackView: React.FC<FallbackViewProps> = ({ thumbnail, loading, children, ...props }) => {\r\n    const targetRef = React.useRef<HTMLAnchorElement>(null);\r\n    const thumbnailUrl = useBlobObjectUrl(thumbnail);\r\n\r\n    const styles = useFallbackViewStyles();\r\n    return (\r\n        // Justification: the props are spread to the anchor element\r\n        // eslint-disable-next-line react/jsx-no-target-blank\r\n        <a ref={targetRef} {...props}>\r\n            {loading && <Spinner className={styles.spinner} size={SpinnerSize.xSmall} />}\r\n            {thumbnailUrl ? <TooltipHost content={<img src={thumbnailUrl} />}>{children}</TooltipHost> : children}\r\n        </a>\r\n    );\r\n};\r\n","/**\r\n * A semaphore is a synchronization primitive that restricts the number of simultaneous accesses to a shared resource.\r\n */\r\nexport class Semaphore {\r\n    private currentInternal: number;\r\n    private notifies: VoidFunction[];\r\n\r\n    /**\r\n     * Create a semaphore.\r\n     *\r\n     * @param resources The number of resources.\r\n     */\r\n    constructor(resources: number) {\r\n        if (resources <= 0 || !Number.isInteger(resources)) throw new Error('Resources must be a positive integer.');\r\n\r\n        this.currentInternal = resources;\r\n        this.notifies = [];\r\n    }\r\n\r\n    /**\r\n     * Get the number of available resources.\r\n     */\r\n    get current(): number {\r\n        return this.currentInternal;\r\n    }\r\n\r\n    /**\r\n     * Acquire a resource.\r\n     *\r\n     * @returns A promise that resolves to an idempotent function to release the resource.\r\n     */\r\n    async acquire(): Promise<VoidFunction> {\r\n        while (this.currentInternal <= 0) await new Promise<void>(resolve => this.notifies.push(resolve));\r\n        this.currentInternal--;\r\n\r\n        let released = false;\r\n        return () => {\r\n            if (released) return;\r\n            released = true;\r\n\r\n            this.currentInternal++;\r\n            this.notifies.shift()?.();\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Run an action with a resource.\r\n     *\r\n     * @param action The action to run.\r\n     * @returns The result of the action.\r\n     */\r\n    async run<T>(action: () => T | Promise<T>): Promise<T> {\r\n        const release = await this.acquire();\r\n        try {\r\n            return await action();\r\n        } finally {\r\n            release();\r\n        }\r\n    }\r\n}\r\n","import { LengthValidator } from './LengthValidator';\r\nimport { NumberValidator } from './NumberValidator';\r\nimport { RequiredValidator } from './RequiredValidator';\r\nimport { RichTextValidator } from './RichTextValidator';\r\n\r\nexport const defaultValidators = [\r\n    new LengthValidator(),\r\n    new RequiredValidator(),\r\n    new NumberValidator(),\r\n    new RichTextValidator(),\r\n];\r\n","import { FontSizes, makeStyles } from '@addressbook/components-fluentui-teams-theme';\r\n\r\nexport const usePeopleListStyles = makeStyles(theme => ({\r\n    label: {\r\n        fontSize: FontSizes.size14,\r\n        fontWeight: 600,\r\n        color: theme.palette.black,\r\n        marginBottom: '8px',\r\n    },\r\n    list: {\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        gap: '8px',\r\n    },\r\n    item: {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        gap: '8px',\r\n    },\r\n    text: {\r\n        flex: 1,\r\n        fontSize: FontSizes.size12,\r\n        color: theme.palette.black,\r\n    },\r\n}));\r\n","import { AnyExtension } from '@tiptap/core';\r\nimport { RichTextFieldStrings } from '../types';\r\nimport { defaultRichTextFieldStrings } from '../utils';\r\n\r\n/**\r\n * Get the compact by an extension.\r\n *\r\n * @param extension The extension.\r\n * @returns The compact.\r\n */\r\nexport function getCompactByExtension(extension: AnyExtension): boolean | undefined {\r\n    const compact = extension.options.compact;\r\n    return typeof compact === 'boolean' ? compact : undefined;\r\n}\r\n\r\n/**\r\n * Get the strings by an extension.\r\n *\r\n * @param extension The extension.\r\n * @returns The strings.\r\n */\r\nexport function getStringsByExtension(extension: AnyExtension): RichTextFieldStrings {\r\n    const strings = extension.options.strings;\r\n    return typeof strings === 'object' ? (strings as RichTextFieldStrings) : defaultRichTextFieldStrings;\r\n}\r\n","export * from './PeopleCoin';\r\nexport * from './PeopleList';\r\nexport * from './PeoplePile';\r\nexport * from './PeopleSelect';\r\nexport * from './PeopleView';\r\nexport * from './types';\r\n","import { ServiceOperation, ServiceResourceLocator } from '@addressbook/services-core';\r\nimport { GraphDriveResource } from './drive';\r\nimport { GraphGroupResource } from './group';\r\nimport { GraphShareResource } from './share';\r\nimport { GraphUserResource } from './user';\r\n\r\n/**\r\n * The root resource.\r\n *\r\n * @see https://learn.microsoft.com/graph/api/resources/root\r\n */\r\nexport class GraphRootResource {\r\n    constructor(private operation: ServiceOperation, private locator: ServiceResourceLocator) {}\r\n\r\n    /**\r\n     * Navigates to the current user resource.\r\n     *\r\n     * @returns The current user resource.\r\n     * @see https://learn.microsoft.com/graph/api/user-get\r\n     */\r\n    get me(): GraphUserResource {\r\n        return new GraphUserResource(this.operation, this.locator.extend('me'));\r\n    }\r\n\r\n    /**\r\n     * Navigates to the user resource by id.\r\n     *\r\n     * @param id The user id.\r\n     * @returns The user resource.\r\n     * @see https://learn.microsoft.com/graph/api/user-get\r\n     */\r\n    users(id: string): GraphUserResource {\r\n        return new GraphUserResource(this.operation, this.locator.extend('users', id));\r\n    }\r\n\r\n    /**\r\n     * Navigates to the group resource by id.\r\n     *\r\n     * @param id The group id.\r\n     * @returns The group resource.\r\n     * @see https://learn.microsoft.com/graph/api/group-get\r\n     */\r\n    groups(id: string): GraphGroupResource {\r\n        return new GraphGroupResource(this.operation, this.locator.extend('groups', id));\r\n    }\r\n\r\n    /**\r\n     * Navigates to the drive resource by id.\r\n     *\r\n     * @param id The drive id.\r\n     * @returns The drive resource.\r\n     * @see https://learn.microsoft.com/graph/api/drive-get\r\n     */\r\n    drives(id: string): GraphDriveResource {\r\n        return new GraphDriveResource(this.operation, this.locator.extend('drives', id));\r\n    }\r\n\r\n    /**\r\n     * Navigates to the share resource by id or sharing link.\r\n     *\r\n     * @param idOrUrl The share id or sharing link.\r\n     * @returns The share resource.\r\n     * @see https://learn.microsoft.com/graph/api/shares-get\r\n     */\r\n    shares(idOrUrl: string): GraphShareResource {\r\n        return new GraphShareResource(\r\n            this.operation,\r\n            this.locator.extend('shares', encodeSharingUrlIfNecessary(idOrUrl))\r\n        );\r\n    }\r\n}\r\n\r\n/**\r\n * Encodes a sharing URL if necessary, only if the input is a URL, otherwise returns the input as is.\r\n *\r\n * @param idOrUrl The share id or sharing link.\r\n * @returns The original id or the encoded sharing URL.\r\n */\r\nfunction encodeSharingUrlIfNecessary(idOrUrl: string): string {\r\n    return idOrUrl.startsWith('https://') ? encodeSharingUrl(idOrUrl) : idOrUrl;\r\n}\r\n\r\n/**\r\n * Encodes a sharing URL for use with the Microsoft Graph API. To encode a sharing URL, use the following logic:\r\n * - First, use base64 encode the URL.\r\n * - Convert the base64 encoded result to unpadded base64url format by removing = characters from the end of the value,\r\n * replacing / with _ and + with -.)\r\n * - Append u! to be beginning of the string.\r\n *\r\n * @param url The sharing URL.\r\n * @returns The encoded sharing URL.\r\n * @see https://learn.microsoft.com/graph/api/shares-get\r\n *\r\n * @example encodeSharingUrl('https://example.com') // 'u!aHR0cHM6Ly9leGFtcGxlLmNvbQ'\r\n */\r\nfunction encodeSharingUrl(url: string): string {\r\n    return `u!${btoa(url).replace(/=+$/, '').replace('/', '_').replace('+', '-')}`;\r\n}\r\n","import { mergeStyles } from '@fluentui/react';\r\n\r\n/**\r\n * text with ellipsis styles\r\n *\r\n * @param line max row number\r\n * @returns classname\r\n */\r\nexport const ellipsisStyles = (line: number): string =>\r\n    mergeStyles(\r\n        {\r\n            overflow: 'hidden',\r\n            textOverflow: 'ellipsis',\r\n            wordBreak: 'break-word',\r\n        },\r\n        line === 1\r\n            ? {\r\n                  display: 'block',\r\n                  whiteSpace: 'nowrap',\r\n              }\r\n            : {\r\n                  display: '-webkit-box',\r\n                  '-webkit-box-orient': 'vertical',\r\n                  '-webkit-line-clamp': `${line}`,\r\n              }\r\n    );\r\n","export * from './PreviewingDecorator';\r\n","import { mergeStyles } from '@fluentui/react';\r\nimport React from 'react';\r\nimport { FieldProps } from '../../../abstractions';\r\nimport { FormContext, FormEntry, FormFeature } from '../../types';\r\nimport { useActive } from '../../utilities';\r\nimport { PreviewingDecorator } from '../PreviewingDecorator';\r\nimport { ActiveDesigningDecorator } from './DesigningDecorator.active';\r\nimport { useDesigningDecoratorStyles } from './DesigningDecorator.styles';\r\n\r\nexport function DesigningDecorator<CoercedEntry extends FormEntry>(\r\n    props: React.PropsWithChildren<FieldProps<FormEntry, FormContext, FormFeature, CoercedEntry>>\r\n): JSX.Element {\r\n    const { entry, onEntryChange, feature } = props;\r\n    const { strings } = feature;\r\n\r\n    const active = entry.active ?? false;\r\n    const setActive = React.useCallback(\r\n        (value: boolean) => {\r\n            const newEntry = { ...entry };\r\n            newEntry.active = value;\r\n            if (!newEntry.active) delete newEntry.active;\r\n            onEntryChange?.(newEntry);\r\n        },\r\n        [entry, onEntryChange]\r\n    );\r\n\r\n    const hint = React.useMemo(() => strings.questionHint(entry.question, active), [active, entry.question, strings]);\r\n\r\n    const ref = useActive<HTMLDivElement>({ active, setActive });\r\n\r\n    const Component = active ? ActiveDesigningDecorator : PreviewingDecorator;\r\n    const styles = useDesigningDecoratorStyles();\r\n    return (\r\n        <div ref={ref} className={mergeStyles(styles.root, !active && styles.inactive)} tabIndex={0} aria-label={hint}>\r\n            <Component {...props} />\r\n        </div>\r\n    );\r\n}\r\n","export * from './EmptyState';\r\n","/*\r\n *  Copyright © Microsoft Corporation. All rights reserved.\r\n */\r\n\r\nexport * from './MobileSheet.component';\r\n","import React from 'react';\r\n\r\nexport interface UseLongPressOptions {\r\n    onLongPress?: () => void;\r\n    onClick?: () => void;\r\n    duration?: number;\r\n}\r\n\r\nconst defaultDuration = 1000;\r\n\r\n/**\r\n * A hook that allows invoking a callback function when an element is long pressed.\r\n *\r\n * @property onLongPress The callback function to invoke when the element is long pressed.\r\n * @property onClick The callback function to invoke when the element is clicked.\r\n * @property duration The duration in milliseconds to consider the press as long press.\r\n * @returns A ref object that should be assigned to the element to be long pressed.\r\n */\r\nexport function useLongPress<Element extends HTMLElement>({\r\n    onLongPress,\r\n    onClick,\r\n    duration = defaultDuration,\r\n}: UseLongPressOptions): React.Ref<Element> {\r\n    const elementRef = React.useRef<Element>(null);\r\n\r\n    const onLongPressRef = React.useRef(onLongPress);\r\n    onLongPressRef.current = onLongPress;\r\n\r\n    const onClickRef = React.useRef(onClick);\r\n    onClickRef.current = onClick;\r\n\r\n    // Events happen in order: down -> (leave -> enter)* -> up -> document up\r\n    // - handleDown: set pointer with long press context, set timeout to trigger long press\r\n    // - handleUp: invoke onClick if long press is not triggered\r\n    // - handleEnter: mark pointer as inside\r\n    // - handleLeave: mark pointer as outside\r\n    // - handleDocumentUp: delete long press context of pointer, clear timeout\r\n    React.useEffect(() => {\r\n        const element = elementRef.current;\r\n        if (!element) return;\r\n\r\n        const contexts = new Map<InvokingContextKey, InvokingContext>();\r\n\r\n        const guard =\r\n            (handler: (key: InvokingContextKey) => void) =>\r\n            (event: PossibleInvokingEvent): void => {\r\n                if (!isInvokingEvent(event)) return;\r\n\r\n                const key = getInvokingContextKey(event);\r\n                handler(key);\r\n            };\r\n\r\n        const trigger = (key: InvokingContextKey): void => {\r\n            const context = contexts.get(key);\r\n            if (!context || !context.inside) return;\r\n\r\n            const onLongPress = onLongPressRef.current;\r\n            if (!onLongPress) return;\r\n\r\n            onLongPress();\r\n            context.triggered = true;\r\n        };\r\n\r\n        const handleDown = guard(key => {\r\n            if (contexts.has(key)) return;\r\n\r\n            const timeoutId = setTimeout(() => trigger(key), duration);\r\n            contexts.set(key, { timeoutId, triggered: false, inside: true });\r\n        });\r\n\r\n        const handleUp = guard(key => {\r\n            const context = contexts.get(key);\r\n            if (!context || context.triggered) return;\r\n\r\n            const onClick = onClickRef.current;\r\n            if (!onClick) return;\r\n\r\n            onClick();\r\n        });\r\n\r\n        const handleLeave = guard(key => {\r\n            const context = contexts.get(key);\r\n            if (!context) return;\r\n\r\n            context.inside = false;\r\n        });\r\n\r\n        const handleEnter = guard(key => {\r\n            const context = contexts.get(key);\r\n            if (!context) return;\r\n\r\n            context.inside = true;\r\n        });\r\n\r\n        const handleDocumentUp = guard(key => {\r\n            const context = contexts.get(key);\r\n            if (!context) return;\r\n\r\n            clearTimeout(context.timeoutId);\r\n            contexts.delete(key);\r\n        });\r\n\r\n        const controller = new AbortController();\r\n\r\n        // Handle pointer events\r\n        element.addEventListener('pointerdown', handleDown, { signal: controller.signal });\r\n        element.addEventListener('pointerup', handleUp, { signal: controller.signal, capture: true });\r\n        element.addEventListener('pointerleave', handleLeave, { signal: controller.signal, capture: true });\r\n        element.addEventListener('pointerenter', handleEnter, { signal: controller.signal, capture: true });\r\n        element.ownerDocument.addEventListener('pointerup', handleDocumentUp, { signal: controller.signal });\r\n\r\n        // Handle keyboard events\r\n        element.addEventListener('keydown', handleDown, { signal: controller.signal });\r\n        element.addEventListener('keyup', handleUp, { signal: controller.signal, capture: true });\r\n        element.ownerDocument.addEventListener('keyup', handleDocumentUp, { signal: controller.signal });\r\n\r\n        // Clean up timeouts\r\n        controller.signal.addEventListener('abort', () => contexts.forEach(({ timeoutId }) => clearTimeout(timeoutId)));\r\n\r\n        return () => controller.abort();\r\n    }, [duration]);\r\n\r\n    return elementRef;\r\n}\r\n\r\ntype PossibleInvokingEvent = PointerEvent | KeyboardEvent;\r\n\r\ntype InvokingContextKey = PointerEvent['pointerId'] | KeyboardEvent['key'];\r\n\r\ninterface InvokingContext {\r\n    timeoutId: ReturnType<typeof setTimeout>;\r\n    triggered: boolean;\r\n    inside: boolean;\r\n}\r\n\r\nfunction isInvokingEvent(event: PossibleInvokingEvent): boolean {\r\n    return event instanceof KeyboardEvent ? event.key === 'Enter' || event.key === ' ' : true;\r\n}\r\n\r\nfunction getInvokingContextKey(event: PossibleInvokingEvent): InvokingContextKey {\r\n    return event instanceof KeyboardEvent ? event.key : event.pointerId;\r\n}\r\n","import { FormEntry, FormQuestionType, Validation, ValidationFailure, Validator } from '../../types';\r\nimport { hasErrorFiles, hasUploadingFiles, isHtmlEmpty, createValidationSuccess } from '../../utilities';\r\n\r\nexport interface RichTextValidatorOptions {\r\n    requiredErrorMessage?: string;\r\n    filesErrorMessage?: string;\r\n}\r\n\r\nconst defaultRequiredErrorMessage = 'This field is required';\r\nconst defaultFilesErrorMessage = 'Something went wrong while uploading files';\r\n\r\n/**\r\n * A validator that checks rich text answers.\r\n */\r\nexport class RichTextValidator implements Validator<FormEntry> {\r\n    private requiredErrorMessage: string;\r\n    private filesErrorMessage: string;\r\n\r\n    /**\r\n     * Creates a rich text validator.\r\n     *\r\n     * @param options.requiredErrorMessage The error message to display when the answer is empty.\r\n     * @param options.filesErrorMessage The error message to display when there are files with errors.\r\n     * @returns A required validator.\r\n     */\r\n    constructor({\r\n        requiredErrorMessage = defaultRequiredErrorMessage,\r\n        filesErrorMessage = defaultFilesErrorMessage,\r\n    }: RichTextValidatorOptions = {}) {\r\n        this.requiredErrorMessage = requiredErrorMessage;\r\n        this.filesErrorMessage = filesErrorMessage;\r\n    }\r\n\r\n    validate({ question, answer }: FormEntry): Validation {\r\n        if (question.type !== FormQuestionType.RichText) {\r\n            return createValidationSuccess();\r\n        }\r\n\r\n        const content = (answer.content ?? '') as string;\r\n        const dom = new DOMParser().parseFromString(content, 'text/html');\r\n\r\n        // Check for required.\r\n        if (question.required && isHtmlEmpty(dom)) {\r\n            return this.createValidationFailure(this.requiredErrorMessage);\r\n        }\r\n\r\n        // Check for error files.\r\n        if (hasErrorFiles(dom)) {\r\n            return this.createValidationFailure(this.filesErrorMessage);\r\n        }\r\n\r\n        // Check for uploading files.\r\n        if (hasUploadingFiles(dom)) {\r\n            return this.createValidationFailure();\r\n        }\r\n\r\n        return createValidationSuccess();\r\n    }\r\n\r\n    private createValidationFailure(errorMessage?: string): ValidationFailure {\r\n        return { valid: false, errorMessage };\r\n    }\r\n}\r\n","/*\r\n *  Copyright © Microsoft Corporation. All rights reserved.\r\n */\r\nimport { FontWeights } from '@fluentui/react';\r\nimport { isContrastTheme, rem } from '@addressbook/components-fluentui-teams-theme';\r\nimport { ellipsisStyles } from '../styles/ellipsisStyles';\r\nimport { makeStyles } from '../styles/makeStyles';\r\nimport { CommonIconSize } from './CommonIcon.component';\r\n\r\nexport const useCommonIconStyles = makeStyles(theme => ({\r\n    root: { display: 'flex', justifyContent: 'space-between' },\r\n    content: {\r\n        display: 'flex',\r\n        columnGap: '12px',\r\n        alignItems: 'center',\r\n        overflow: 'hidden',\r\n    },\r\n    iconContainer: {\r\n        position: 'relative',\r\n        height: '2rem',\r\n        width: '2rem',\r\n        display: 'flex',\r\n        alignContent: 'center',\r\n        justifyContent: 'center',\r\n        alignItems: 'center',\r\n        borderRadius: '4px',\r\n        flexShrink: '0 !important',\r\n        '&:hover .edit-icon': {\r\n            visibility: 'visible',\r\n        },\r\n        [`.${CommonIconSize.Size28} &`]: { height: '28px', width: '28px' },\r\n        [`.${CommonIconSize.Size32} &`]: { height: '32px', width: '32px' },\r\n        [`.${CommonIconSize.Size40} &`]: { height: '40px', width: '40px' },\r\n        [`.${CommonIconSize.Size44} &`]: { height: '44px', width: '44px' },\r\n        [`.${CommonIconSize.Size48} &`]: { height: '48px', width: '48px' },\r\n        [`.${CommonIconSize.Size64} &`]: { height: '64px', width: '64px' },\r\n        [`.${CommonIconSize.Size80} &`]: { height: '80px', width: '80px' },\r\n    },\r\n    icon: {\r\n        color: 'white',\r\n        fontSize: '1rem',\r\n\r\n        [`.${CommonIconSize.Size28} &`]: theme.fonts.mediumPlus,\r\n        [`.${CommonIconSize.Size32} &`]: theme.fonts.xLarge,\r\n        [`.${CommonIconSize.Size40} &`]: theme.fonts.xLargePlus,\r\n        [`.${CommonIconSize.Size44} &`]: theme.fonts.xxLarge,\r\n        [`.${CommonIconSize.Size48} &`]: theme.fonts.xxLargePlus,\r\n        [`.${CommonIconSize.Size64} &`]: { fontSize: rem(48) },\r\n        [`.${CommonIconSize.Size80} &`]: { fontSize: rem(48) },\r\n    },\r\n    editIcon: [\r\n        'edit-icon',\r\n        {\r\n            cursor: 'pointer',\r\n            visibility: 'hidden',\r\n            color: theme.palette.white,\r\n            position: 'absolute',\r\n            fontSize: '8px',\r\n            background: theme.palette.neutralDark,\r\n            padding: '6px',\r\n            borderRadius: '50%',\r\n            bottom: '4px',\r\n            right: '4px',\r\n        },\r\n    ],\r\n    textContainer: { overflow: 'hidden' },\r\n    titleContainer: {\r\n        display: 'flex',\r\n        flexDirection: 'row',\r\n    },\r\n    title: [\r\n        ellipsisStyles(1),\r\n        {\r\n            fontWeight: FontWeights.semibold,\r\n            color: isContrastTheme(theme.name) ? 'inherit' : theme.palette.black,\r\n            margin: 0,\r\n        },\r\n    ],\r\n    description: [\r\n        theme.fonts.small,\r\n        ellipsisStyles(1),\r\n        {\r\n            color: isContrastTheme(theme.name) ? 'inherit' : theme.palette.neutralDark,\r\n        },\r\n    ],\r\n}));\r\n","import { ServiceInterceptor } from '../types';\r\n\r\n/**\r\n * A set of header entries, whose values can be either a string or a function that returns a string.\r\n */\r\nexport type HeaderEntries = Record<HeaderKey, HeaderValue | HeaderFactory>;\r\n\r\ntype HeaderKey = string;\r\ntype HeaderValue = string;\r\ntype HeaderFactory = (request: Request) => HeaderValue;\r\n\r\n/**\r\n * Create a service interceptor that adds headers to the request.\r\n *\r\n * @param entries The header entries.\r\n * @returns An interceptor.\r\n */\r\nexport function createHeadersInterceptor(entries: HeaderEntries): ServiceInterceptor {\r\n    return (request, proceed) => {\r\n        const newRequest = new Request(request);\r\n        for (const [key, valueOrFactory] of Object.entries(entries)) {\r\n            const value = typeof valueOrFactory === 'function' ? valueOrFactory(request) : valueOrFactory;\r\n            newRequest.headers.append(key, value);\r\n        }\r\n        return proceed(newRequest);\r\n    };\r\n}\r\n","export * from './RichTextField';\r\n","export * from './PeoplePile';\r\n","import { CheckboxChoiceDescriptor } from './CheckboxChoiceDescriptor';\r\nimport { DateTimeDescriptor } from './DateTimeDescriptor';\r\nimport { DropdownChoiceDescriptor } from './DropdownChoiceDescriptor';\r\nimport { FallbackViewingDescriptor } from './FallbackViewingDescriptor';\r\nimport { RadioChoiceDescriptor } from './RadioChoiceDescriptor';\r\nimport { RichTextDescriptor } from './RichTextDescriptor';\r\nimport { TextDescriptor } from './TextDescriptor';\r\n\r\nexport const defaultDescriptors = [\r\n    new TextDescriptor(),\r\n    new RichTextDescriptor(),\r\n    new RadioChoiceDescriptor(),\r\n    new DropdownChoiceDescriptor(),\r\n    new CheckboxChoiceDescriptor(),\r\n    new DateTimeDescriptor(),\r\n    new FallbackViewingDescriptor(),\r\n];\r\n","/*\r\n *  Copyright © Microsoft Corporation. All rights reserved.\r\n */\r\n\r\nexport * from './CommonPanel.component';\r\n","import { keyframes } from '@fluentui/react';\r\nimport { makeStyles } from '@addressbook/components-fluentui-teams-theme';\r\n\r\nexport const useSpinnerStyles = makeStyles({\r\n    root: {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        justifyContent: 'center',\r\n    },\r\n    bound: {\r\n        overflow: 'hidden',\r\n    },\r\n    animated: {\r\n        display: 'block',\r\n        willChange: 'transform',\r\n        animation: `${keyframes({\r\n            from: { transform: 'translateY(0)' },\r\n            to: { transform: 'translateY(-100%)' },\r\n        })} 2s steps(60) infinite`,\r\n    },\r\n});\r\n","import { mergeStyles } from '@fluentui/react';\r\nimport React from 'react';\r\nimport { Form } from '../abstractions';\r\nimport { defaultFormFeature, FormContext, FormEntry, FormFeature, validateEntries } from '../implementations';\r\nimport { useFormFacadeStyles } from './FormFacade.styles';\r\n\r\n/**\r\n * The ref for the form facade, providing access to the form functionalities.\r\n */\r\nexport interface FormFacadeRef {\r\n    /**\r\n     * Validate the form.\r\n     *\r\n     * @param quietly Whether to suppress the error messages.\r\n     */\r\n    validate: (quietly?: boolean) => void;\r\n}\r\n\r\n/**\r\n * The props for the form facade.\r\n */\r\nexport interface FormFacadeProps extends React.HTMLAttributes<HTMLDivElement> {\r\n    /**\r\n     * The context for the form.\r\n     */\r\n    context: FormContext;\r\n\r\n    /**\r\n     * The callback to be invoked when the context changes.\r\n     */\r\n    onContextChange?: (context: FormContext) => void;\r\n\r\n    /**\r\n     * The feature for the form.\r\n     */\r\n    feature?: Partial<FormFeature>;\r\n}\r\n\r\n/**\r\n * The form facade component that renders a form with default feature in a single column layout.\r\n */\r\nexport const FormFacade = React.forwardRef<FormFacadeRef, FormFacadeProps>(\r\n    ({ context, onContextChange, feature, className, ...props }, ref) => {\r\n        const featureInternal = React.useMemo(() => ({ ...defaultFormFeature, ...feature }), [feature]);\r\n\r\n        // Populate the ref.\r\n        React.useImperativeHandle(\r\n            ref,\r\n            () => ({\r\n                validate: quietly => {\r\n                    const newEntries = validateEntries(context.entries, featureInternal.validators, quietly);\r\n                    onContextChange?.({ ...context, entries: newEntries });\r\n                },\r\n            }),\r\n            [context, onContextChange, featureInternal.validators]\r\n        );\r\n\r\n        const styles = useFormFacadeStyles();\r\n\r\n        return (\r\n            <div className={mergeStyles(styles.root, className)} {...props}>\r\n                <Form<FormEntry, FormContext, FormFeature>\r\n                    context={context}\r\n                    onContextChange={onContextChange}\r\n                    feature={featureInternal}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n);\r\n","import { mergeStyles } from '@fluentui/react';\r\nimport React from 'react';\r\nimport { useColorMenuItemStyles } from './ColorMenuItem.styles';\r\n\r\nexport interface ColorMenuItemProps {\r\n    text: string;\r\n    color?: string;\r\n    onClick?: () => void;\r\n}\r\n\r\nexport const ColorMenuItem: React.FC<ColorMenuItemProps> = ({ text, color, onClick }) => {\r\n    const styles = useColorMenuItemStyles();\r\n\r\n    return (\r\n        <button\r\n            className={mergeStyles(styles.root, color ? styles.color : styles.text)}\r\n            style={{ backgroundColor: color }}\r\n            onClick={onClick}\r\n            title={text}>\r\n            {!color && text}\r\n        </button>\r\n    );\r\n};\r\n","/**\r\n * Prompts the user to select a file.\r\n *\r\n * @property options.accept The file types to accept, as a comma-separated list of MIME types.\r\n * @returns A promise that resolves to the selected file, or rejects if the user cancels.\r\n */\r\nexport async function selectFile(options: Partial<Pick<HTMLInputElement, 'accept'>> = {}): Promise<File> {\r\n    const input = document.createElement('input');\r\n    Object.assign(input, options);\r\n    input.style.display = 'none';\r\n    input.type = 'file';\r\n\r\n    try {\r\n        document.body.appendChild(input);\r\n        return await new Promise((resolve, reject) => {\r\n            input.addEventListener('change', () => {\r\n                const file = input.files?.[0];\r\n                if (file) resolve(file);\r\n                else reject();\r\n            });\r\n            input.addEventListener('cancel', () => reject());\r\n            input.click();\r\n        });\r\n    } finally {\r\n        document.body.removeChild(input);\r\n    }\r\n}\r\n\r\n/**\r\n * Gets the SHA-1 digest of a blob, as a hex string.\r\n *\r\n * @param blob The blob to digest.\r\n * @returns A promise that resolves to the digest.\r\n */\r\nexport async function digestBlob(blob: Blob): Promise<string> {\r\n    const buffer = await blob.arrayBuffer();\r\n    const digest = await crypto.subtle.digest('SHA-1', buffer);\r\n    return encodeHexString(digest);\r\n}\r\n\r\n/**\r\n * Encodes a buffer as a hex string.\r\n *\r\n * @param buffer The buffer to encode.\r\n * @returns The encoded hex string.\r\n */\r\nexport function encodeHexString(buffer: ArrayBuffer): string {\r\n    return Array.from(new Uint8Array(buffer))\r\n        .map(b => b.toString(16).padStart(2, '0'))\r\n        .join('');\r\n}\r\n\r\n/**\r\n * Creates a file from a blob.\r\n *\r\n * @param blob The blob to create the file from.\r\n * @param name The name of the file.\r\n * @returns The created file.\r\n */\r\nexport function createFileByBlob(blob: Blob, name: string): File {\r\n    return new File([blob], name, {\r\n        type: blob.type,\r\n        ...(blob instanceof File && { lastModified: blob.lastModified }),\r\n    });\r\n}\r\n\r\nexport interface GetReadableSizeStringOptions {\r\n    units: string[];\r\n    base: number;\r\n    offset?: number;\r\n    precision?: number;\r\n}\r\n\r\nconst defaultGetReadableSizeStringOptions: GetReadableSizeStringOptions = {\r\n    units: ['B', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'],\r\n    base: 1024,\r\n};\r\n\r\n/**\r\n * Gets the readable size string for the given size in bytes.\r\n *\r\n * @param sizeInBytes The size in bytes.\r\n * @property units The size units.\r\n * @property base The base of the size units.\r\n * @property offset The exponent offset for the next unit, added to the exponent of the size to determine the unit.\r\n * @property precision The precision of the size, as the number of fractional digits.\r\n * @returns The readable size string.\r\n *\r\n * @example getReadableSizeString(0) // '0 B'\r\n * @example getReadableSizeString(42) // '42 B'\r\n * @example getReadableSizeString(768) // '0.8 KB'\r\n * @example getReadableSizeString(1024) // '1.0 KB'\r\n * @example getReadableSizeString(1024 * 1.5) // '1.5 KB'\r\n */\r\nexport function getReadableSizeString(\r\n    sizeInBytes: number,\r\n    { units, base, offset = 0.1, precision = 1 }: GetReadableSizeStringOptions = defaultGetReadableSizeStringOptions\r\n): string {\r\n    if (sizeInBytes < 0 || !Number.isInteger(sizeInBytes)) throw new Error('Size must be a non-negative integer.');\r\n\r\n    const exponent = sizeInBytes && Math.log(sizeInBytes) / Math.log(base);\r\n    const unitIndex = Math.min(Math.floor(exponent + offset), units.length - 1);\r\n    const size = sizeInBytes / base ** unitIndex;\r\n\r\n    const numberPart = unitIndex === 0 ? size : size.toFixed(precision);\r\n    const unitPart = units[unitIndex];\r\n\r\n    return `${numberPart} ${unitPart}`;\r\n}\r\n\r\nexport interface NormalizeFileNameOptions {\r\n    disallowed?: RegExp;\r\n    replacement?: string;\r\n}\r\n\r\n/**\r\n * The default disallowed characters for file names.\r\n *\r\n * @see https://learn.microsoft.com/graph/onedrive-addressing-driveitems#onedrive-reserved-characters\r\n */\r\nconst defaultDisallowed = /[/\\\\*<>?:\"|#%]/g;\r\n\r\n/**\r\n * Normalizes a file name by replacing disallowed characters with replacement.\r\n *\r\n * @param name The name to normalize.\r\n * @property disallowed The disallowed characters to replace.\r\n * @property replacement The replacement character for disallowed characters.\r\n * @returns The normalized name.\r\n */\r\nexport function normalizeFileName(\r\n    name: string,\r\n    { disallowed = defaultDisallowed, replacement = '_' }: NormalizeFileNameOptions = {}\r\n): string {\r\n    return name.replace(disallowed, replacement);\r\n}\r\n\r\n/**\r\n * The parts of a file name.\r\n *\r\n * @property stem The stem of the name.\r\n * @property extension The extension of the name.\r\n * @example { stem: 'image', extension: 'png' }\r\n */\r\nexport interface FileNameParts {\r\n    stem: string;\r\n    extension: string;\r\n}\r\n\r\n/**\r\n * Splits a file name into its stem and extension.\r\n *\r\n * @param name The name to split.\r\n * @returns The stem and extension of the name.\r\n * @example splitFileName('') // { stem: '', extension: '' }\r\n * @example splitFileName('image') // { stem: 'image', extension: '' }\r\n * @example splitFileName('image.png') // { stem: 'image', extension: 'png' }\r\n * @example splitFileName('image.gif.png') // { stem: 'image.gif', extension: 'png' }\r\n * @example splitFileName('.hidden') // { stem: '.hidden', extension: '' }\r\n * @example splitFileName('.hidden.sh') // { stem: '.hidden', extension: 'sh' }\r\n */\r\nexport function splitFileName(name: string): FileNameParts {\r\n    const lastDot = name.lastIndexOf('.');\r\n    return lastDot <= 0\r\n        ? { stem: name, extension: '' }\r\n        : { stem: name.slice(0, lastDot), extension: name.slice(lastDot + 1) };\r\n}\r\n\r\n/**\r\n * Joins a file name from its stem and extension.\r\n *\r\n * @param parts The parts of the file name.\r\n * @returns The joined file name.\r\n * @example joinFileName({ stem: '', extension: '' }) // ''\r\n * @example joinFileName({ stem: 'image', extension: '' }) // 'image'\r\n * @example joinFileName({ stem: 'image', extension: 'png' }) // 'image.png'\r\n * @example joinFileName({ stem: 'image.gif', extension: 'png' }) // 'image.gif.png'\r\n * @example joinFileName({ stem: '.hidden', extension: '' }) // '.hidden'\r\n * @example joinFileName({ stem: '.hidden', extension: 'sh' }) // '.hidden.sh'\r\n */\r\nexport function joinFileName(parts: FileNameParts): string {\r\n    return parts.extension ? `${parts.stem}.${parts.extension}` : parts.stem;\r\n}\r\n","export * from './DesigningDecorator';\r\n","export * from './PrimarySettings';\r\n","import { Dialog } from '@fluentui/react';\r\nimport React from 'react';\r\nimport { InsertLink, InsertLinkProps, Link } from './InsertLink';\r\nimport { useInsertLinkDialogStyles } from './InsertLink.styles';\r\n\r\nexport type InsertLinkDialogProps = InsertLinkProps;\r\n\r\nexport const InsertLinkDialog: React.FC<InsertLinkDialogProps> = ({\r\n    initialLink,\r\n    onConfirm,\r\n    onCancel,\r\n    normalizeUrl,\r\n    strings,\r\n}) => {\r\n    const [link, setLink] = React.useState<Link>();\r\n    const [hidden, setHidden] = React.useState(false);\r\n    const dismiss = React.useCallback(() => setHidden(true), []);\r\n\r\n    const confirm = React.useCallback(\r\n        (link: Link) => {\r\n            setLink(link);\r\n            dismiss();\r\n        },\r\n        [dismiss]\r\n    );\r\n\r\n    const cancel = React.useCallback(() => {\r\n        setLink(undefined);\r\n        dismiss();\r\n    }, [dismiss]);\r\n\r\n    const commit = React.useCallback(() => (link ? onConfirm?.(link) : onCancel?.()), [link, onConfirm, onCancel]);\r\n\r\n    const styles = useInsertLinkDialogStyles();\r\n    return (\r\n        <Dialog\r\n            hidden={hidden}\r\n            dialogContentProps={{ title: strings.insertLinkTitle }}\r\n            modalProps={{ className: styles.root, onDismiss: cancel, onDismissed: commit }}>\r\n            <InsertLink\r\n                initialLink={initialLink}\r\n                onConfirm={confirm}\r\n                onCancel={cancel}\r\n                normalizeUrl={normalizeUrl}\r\n                strings={strings}\r\n            />\r\n        </Dialog>\r\n    );\r\n};\r\n","import { isContrastTheme, makeStyles } from '@addressbook/components-fluentui-teams-theme';\r\n\r\nexport const useChoiceSettingsStyles = makeStyles(theme => ({\r\n    root: {\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        gap: '8px',\r\n        paddingInlineStart: '8px',\r\n    },\r\n    choiceRow: {\r\n        display: 'flex',\r\n        flexDirection: 'row',\r\n        alignItems: 'center',\r\n        gap: '4px',\r\n        '> .ms-TextField': {\r\n            flexBasis: '400px',\r\n            marginInline: '8px',\r\n        },\r\n    },\r\n    hidden: {\r\n        visibility: 'hidden',\r\n    },\r\n    actionRow: {\r\n        display: 'flex',\r\n        flexDirection: 'row',\r\n        alignItems: 'center',\r\n        gap: '8px 24px',\r\n        flexWrap: 'wrap',\r\n        '> .ms-Button': {\r\n            height: '28px',\r\n            padding: 0,\r\n        },\r\n    },\r\n    decorator: {\r\n        flexShrink: 0,\r\n        height: '16px',\r\n        width: '16px',\r\n        margin: '4px',\r\n        boxSizing: 'border-box',\r\n        border: `1px solid ${isContrastTheme(theme.name) ? theme.palette.black : theme.palette.neutralTertiary}`,\r\n    },\r\n    checkbox: {\r\n        borderRadius: '2px',\r\n    },\r\n    radio: {\r\n        borderRadius: '50%',\r\n    },\r\n}));\r\n","export * from './authorization';\r\nexport * from './caching';\r\nexport * from './headers';\r\nexport * from './logging';\r\nexport * from './online';\r\nexport * from './pooling';\r\nexport * from './retry';\r\nexport * from './throttling';\r\n","import { FontSizes, isContrastTheme, isDefaultTheme, makeStyles } from '@addressbook/components-fluentui-teams-theme';\r\n\r\nexport const useFileNodeViewStyles = makeStyles(theme => ({\r\n    root: {\r\n        borderRadius: '4px',\r\n        overflow: 'hidden',\r\n        '&.selected a': {\r\n            textDecorationStyle: 'double',\r\n        },\r\n    },\r\n    error: {\r\n        borderColor: theme.palette.redDark,\r\n        '[data-node-view-content]': {\r\n            color: theme.palette.redDark,\r\n        },\r\n        a: {\r\n            textDecoration: 'line-through',\r\n        },\r\n    },\r\n    image: {\r\n        display: 'inline-flex',\r\n        maxWidth: '100%',\r\n        boxShadow: theme.effects.elevation4,\r\n        margin: '2px',\r\n        borderWidth: '1px',\r\n        borderStyle: 'solid',\r\n        borderColor: isContrastTheme(theme.name) ? theme.palette.black : 'transparent',\r\n        '&.selected': {\r\n            borderColor: isContrastTheme(theme.name) ? theme.palette.accent : theme.palette.black,\r\n        },\r\n    },\r\n}));\r\n\r\nexport const useImageViewStyles = makeStyles({\r\n    root: {\r\n        width: 'fit-content',\r\n        maxWidth: '100%',\r\n        height: '100%',\r\n    },\r\n    embedded: {\r\n        cursor: 'pointer',\r\n    },\r\n    hidden: {\r\n        display: 'none',\r\n    },\r\n});\r\n\r\nexport const useEmbeddedImageContentStyles = makeStyles(theme => ({\r\n    root: {\r\n        position: 'relative',\r\n        maxWidth: '100%',\r\n    },\r\n    image: {\r\n        display: 'block',\r\n        objectFit: 'contain',\r\n        width: '100%',\r\n        height: '100%',\r\n    },\r\n    mask: {\r\n        position: 'absolute',\r\n        inset: 0,\r\n        backgroundColor: isDefaultTheme(theme.name) ? 'rgba(0, 0, 0, 0.4)' : 'rgba(0, 0, 0, 0.5)',\r\n    },\r\n    error: {\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        alignItems: 'center',\r\n        justifyContent: 'center',\r\n        padding: '24px',\r\n        gap: '12px',\r\n    },\r\n    buttons: {\r\n        display: 'flex',\r\n        gap: '12px',\r\n        '.ms-Button': {\r\n            minWidth: '32px',\r\n            padding: 0,\r\n        },\r\n    },\r\n    icon: {\r\n        flex: 1,\r\n        fontSize: '48px',\r\n    },\r\n}));\r\n\r\nexport const useFullscreenImageContentStyles = makeStyles({\r\n    root: {\r\n        height: '100vh',\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        alignItems: 'stretch',\r\n        backgroundColor: 'rgba(0, 0, 0, 0.9)',\r\n    },\r\n    header: {\r\n        display: 'flex',\r\n        flexShrink: 0,\r\n        alignItems: 'center',\r\n        justifyContent: 'space-between',\r\n        padding: '16px 24px',\r\n        gap: '16px',\r\n    },\r\n    name: {\r\n        fontSize: FontSizes.size16,\r\n        color: 'white',\r\n        overflow: 'hidden',\r\n        textOverflow: 'ellipsis',\r\n        whiteSpace: 'nowrap',\r\n    },\r\n    controls: {\r\n        display: 'flex',\r\n        gap: '8px',\r\n    },\r\n    button: {\r\n        color: 'white',\r\n    },\r\n    main: {\r\n        flex: 1,\r\n    },\r\n    wrapper: {\r\n        width: 'unset !important',\r\n        height: 'unset !important',\r\n    },\r\n    image: {\r\n        display: 'block',\r\n    },\r\n    message: {\r\n        fontSize: FontSizes.size16,\r\n        color: 'white',\r\n        textAlign: 'center',\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        alignItems: 'center',\r\n        justifyContent: 'center',\r\n        padding: '24px',\r\n    },\r\n});\r\n\r\nexport const useFallbackViewStyles = makeStyles({\r\n    spinner: {\r\n        display: 'inline-flex',\r\n        margin: '0 4px',\r\n    },\r\n});\r\n","/**\r\n * Encodes a blob as a data URL.\r\n *\r\n * @param blob The blob to encode.\r\n * @returns A promise that resolves to the data URL.\r\n */\r\nexport function encodeDataUrl(blob: Blob): Promise<string> {\r\n    return new Promise((resolve, reject) => {\r\n        const reader = new FileReader();\r\n        reader.addEventListener('load', () => resolve(reader.result as string));\r\n        reader.addEventListener('error', () => reject());\r\n        reader.readAsDataURL(blob);\r\n    });\r\n}\r\n\r\n/**\r\n * Decodes a data URL as a blob.\r\n *\r\n * @param dataUrl The data URL to decode.\r\n * @returns The decoded blob, or `undefined` if the data URL is invalid.\r\n */\r\nexport function decodeDataUrl(dataUrl: string): Blob | undefined {\r\n    const [protocol, body] = dataUrl.split(':', 2);\r\n    if (protocol !== 'data') return;\r\n\r\n    const [prefix, data] = body.split(',', 2);\r\n    const [mime, encoding] = prefix.split(';', 2);\r\n    const blobPart = encoding === 'base64' ? decodeBase64(data) : decodeURIComponent(data);\r\n    return new Blob([blobPart], { type: mime });\r\n}\r\n\r\nfunction decodeBase64(data: string): ArrayBuffer {\r\n    const binaryString = atob(data);\r\n    const byteArray = Uint8Array.from(binaryString, c => c.charCodeAt(0));\r\n    return byteArray.buffer;\r\n}\r\n","import { ServiceInterceptor } from '../types';\r\nimport { isGetAndOk, RequestSelector, TestRequestAndResponse, urlSelector } from './utilities';\r\n\r\nexport interface CachingInterceptorOptions {\r\n    test?: TestRequestAndResponse;\r\n    cache: ServiceCache;\r\n}\r\n\r\n/**\r\n * Create a service interceptor that caches responses.\r\n *\r\n * @property test Determines whether a request and response should be cached.\r\n * @property cache The cache used to store responses.\r\n * @returns An interceptor.\r\n */\r\nexport function createCachingInterceptor({ test = isGetAndOk, cache }: CachingInterceptorOptions): ServiceInterceptor {\r\n    return async (request, proceed) => {\r\n        if (!test(request)) return proceed(request);\r\n\r\n        const cachedResponse = await cache.get(request);\r\n        if (cachedResponse) return cachedResponse;\r\n\r\n        const response = await proceed(request);\r\n        if (!test(request, response)) return response;\r\n\r\n        await cache.set(request, response.clone());\r\n        return response;\r\n    };\r\n}\r\n\r\n/**\r\n * A service cache.\r\n *\r\n * @property get Gets a cached response by the request.\r\n * @property set Sets a cached response for the request.\r\n */\r\nexport interface ServiceCache {\r\n    get(request: Request): Promise<Response | undefined>;\r\n    set(request: Request, response: Response): Promise<void>;\r\n}\r\n\r\n/**\r\n * An memory service cache that stores responses in a Map.\r\n */\r\nexport class MemoryServiceCache implements ServiceCache {\r\n    private cache = new Map<PropertyKey, Response>();\r\n\r\n    /**\r\n     * Creates an instance of MemoryServiceCache.\r\n     *\r\n     * @param selector A function that selects a key from a request.\r\n     */\r\n    constructor(private selector: RequestSelector = urlSelector) {}\r\n\r\n    async get(request: Request): Promise<Response | undefined> {\r\n        return this.cache.get(this.selector(request))?.clone();\r\n    }\r\n\r\n    async set(request: Request, response: Response): Promise<void> {\r\n        this.cache.set(this.selector(request), response);\r\n    }\r\n}\r\n","import { CommandBar, ICommandBarItemProps } from '@fluentui/react';\r\nimport { isDefined } from '@addressbook/utilities-core';\r\nimport { useRenderings } from '@addressbook/utilities-hooks';\r\nimport React from 'react';\r\nimport { compactRibbonItemGroups, defaultRibbonItemGroups, getItemProps } from './RichTextRibbon.items';\r\nimport { useRibbonCommandBarStyles, useRibbonStyles } from './RichTextRibbon.styles';\r\nimport { RichTextRibbonProps } from './RichTextRibbon.types';\r\n\r\n/**\r\n * The ribbon component for the rich text editor.\r\n */\r\nexport const RichTextRibbon: React.FC<RichTextRibbonProps> = ({ editor, compact, callbacks = {}, strings }) => {\r\n    const styles = useRibbonStyles();\r\n    const commandBarStyles = useRibbonCommandBarStyles();\r\n    const { renderings, render, unrender } = useRenderings();\r\n\r\n    if (!editor) return null;\r\n\r\n    const ribbonItemGroups = compact ? compactRibbonItemGroups : defaultRibbonItemGroups;\r\n    const ribbonItemParams = { editor, compact, callbacks, strings, render, unrender };\r\n    const items: ICommandBarItemProps[] = ribbonItemGroups.flatMap(ribbonItemGroup => {\r\n        const group = ribbonItemGroup.map(ribbonItem => getItemProps(ribbonItem, ribbonItemParams)).filter(isDefined);\r\n        if (group.length) group[0].className = styles.leadingButton;\r\n        return group;\r\n    });\r\n\r\n    return (\r\n        <div>\r\n            <CommandBar styles={commandBarStyles} items={items} />\r\n            {renderings}\r\n        </div>\r\n    );\r\n};\r\n","export * from './blob';\r\nexport * from './debounce';\r\nexport * from './deep';\r\nexport * from './drop';\r\nexport * from './keyboard';\r\nexport * from './long-press';\r\nexport * from './renderings';\r\nexport * from './update';\r\nexport * from './visibility';\r\n","import { ServiceOperation, ServiceResourceLocator } from '@addressbook/services-core';\r\nimport { GraphDriveItemResource } from './drive-item';\r\n\r\n/**\r\n * The share resource.\r\n *\r\n * @see https://learn.microsoft.com/graph/api/resources/shareddriveitem\r\n */\r\nexport class GraphShareResource {\r\n    constructor(private operation: ServiceOperation, private locator: ServiceResourceLocator) {}\r\n\r\n    /**\r\n     * Navigates to the drive item resource.\r\n     *\r\n     * @returns The drive item resource.\r\n     * @see https://learn.microsoft.com/graph/api/driveitem-get\r\n     */\r\n    get driveItem(): GraphDriveItemResource {\r\n        return new GraphDriveItemResource(this.operation, this.locator.extend('driveItem'));\r\n    }\r\n}\r\n","export * from './error';\r\nexport * from './interceptors';\r\nexport * from './locator';\r\nexport * from './operation';\r\nexport * from './types';\r\n","/*\r\n *  Copyright © Microsoft Corporation. All rights reserved.\r\n */\r\n\r\nimport React from 'react';\r\nimport { Modal, mergeStyleSets, IModalStyles } from '@fluentui/react';\r\nimport { useCopyResponseModalStyles } from './ContentCopyResponseModal.styles';\r\nimport { ContentCopyRequestModalContent, ContentCopyResponseProps } from './ContentCopyResponseModalContent';\r\n\r\nexport type ContentCopyResponseModalProps = ContentCopyResponseProps & {\r\n    isOpen: boolean;\r\n    modalStyles?: IModalStyles;\r\n};\r\n\r\nexport const ContentCopyResponseModal: React.FC<ContentCopyResponseModalProps> = ({\r\n    isOpen,\r\n    modalStyles,\r\n    ...props\r\n}: ContentCopyResponseModalProps): JSX.Element => {\r\n    const styles = useCopyResponseModalStyles();\r\n    return (\r\n        <Modal styles={mergeStyleSets(styles, modalStyles)} isOpen={isOpen} isBlocking onDismiss={props.onDismiss}>\r\n            <ContentCopyRequestModalContent {...props} />\r\n        </Modal>\r\n    );\r\n};\r\n","import { MotionAnimations } from '@fluentui/react';\r\nimport { FontSizes, makeStyles } from '@addressbook/components-fluentui-teams-theme';\r\n\r\nexport const useRenderingFieldStyles = makeStyles(theme => ({\r\n    headerContainer: {\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        gap: '4px',\r\n        marginBottom: '8px',\r\n    },\r\n    labelContainer: {\r\n        display: 'flex',\r\n        flexDirection: 'row',\r\n        alignItems: 'center',\r\n    },\r\n    label: {\r\n        fontSize: FontSizes.size14,\r\n        color: theme.palette.neutralDark,\r\n        fontWeight: 600,\r\n        wordBreak: 'break-word',\r\n    },\r\n    requiredLabel: {\r\n        '::after': {\r\n            content: '\"*\"',\r\n            color: theme.palette.redDark,\r\n            marginInline: '4px',\r\n        },\r\n    },\r\n    description: {\r\n        fontSize: FontSizes.size12,\r\n        color: theme.palette.neutralSecondary,\r\n        wordBreak: 'break-word',\r\n    },\r\n    errorMessage: {\r\n        fontSize: FontSizes.size12,\r\n        color: theme.palette.redDark,\r\n        paddingInline: '12px',\r\n        marginTop: '4px',\r\n        wordBreak: 'break-word',\r\n        animation: `${MotionAnimations.fadeIn}, ${MotionAnimations.slideDownIn}`,\r\n    },\r\n}));\r\n","import { Extension } from '@tiptap/core';\r\n\r\ndeclare module '@tiptap/core' {\r\n    interface Commands<ReturnType> {\r\n        misc: {\r\n            /**\r\n             * Focus the editor after a number of frames to avoid focus being stolen by other elements, for example the\r\n             * ribbon.\r\n             *\r\n             * @param frames Number of frames to wait before focusing the editor, defaults to 0.\r\n             * @param args Arguments to pass to the `focus` command.\r\n             */\r\n            focusLater: (frames?: number, ...args: Parameters<Commands['focus']['focus']>) => ReturnType;\r\n        };\r\n    }\r\n}\r\n\r\nexport const Misc = Extension.create({\r\n    name: 'misc',\r\n\r\n    addCommands() {\r\n        return {\r\n            focusLater:\r\n                (frames = 0, ...args) =>\r\n                ({ commands }) => {\r\n                    schedule(frames, () => commands.focus(...args));\r\n                    return true;\r\n                },\r\n        };\r\n    },\r\n});\r\n\r\nfunction schedule(frames: number, callback: () => void): void {\r\n    if (frames <= 0) {\r\n        callback();\r\n        return;\r\n    }\r\n\r\n    requestAnimationFrame(() => schedule(frames - 1, callback));\r\n}\r\n","export * from './ChoiceSettings';\r\n","import React from 'react';\r\nimport { Descriptor, FieldProps } from '../../../abstractions';\r\nimport { FieldComponentType, RenderingField } from '../../components';\r\nimport { FormContext, FormEntry, FormFeature } from '../../types';\r\n\r\n/**\r\n * The base descriptor that provides the common logic for all descriptors, such as validation.\r\n * Any inherited descriptor must implement the `test` method and `FieldComponent` property.\r\n */\r\nexport abstract class BaseDescriptor<CoercedEntry extends FormEntry>\r\n    implements Descriptor<FormEntry, FormContext, FormFeature, CoercedEntry>\r\n{\r\n    /**\r\n     * The component that renders the field, which can be either a class component or a function component.\r\n     * No entry validation is needed in this component, as it is handled by the base descriptor.\r\n     */\r\n    protected abstract readonly FieldComponent: FieldComponentType<CoercedEntry>;\r\n\r\n    /**\r\n     * Tests whether the entry is the type that the descriptor can handle.\r\n     *\r\n     * @param entry The entry to test.\r\n     * @param context The form context.\r\n     * @returns Passes the test or not.\r\n     */\r\n    abstract test(entry: FormEntry, context: FormContext): entry is CoercedEntry;\r\n\r\n    /**\r\n     * Renders the field with some common logic, such as validation and designing tools.\r\n     *\r\n     * @param props The props to render the field.\r\n     * @returns The rendered field.\r\n     */\r\n    render(props: FieldProps<FormEntry, FormContext, FormFeature, CoercedEntry>): JSX.Element {\r\n        return <RenderingField {...props} Component={this.FieldComponent} />;\r\n    }\r\n}\r\n\r\nexport type FieldComponentTypeFactory<Options, CoercedEntry extends FormEntry> = (\r\n    options: Options\r\n) => FieldComponentType<CoercedEntry>;\r\n","import { debounce } from 'lodash-es';\r\nimport { useEffect } from 'react';\r\n\r\nexport interface UseElementsVisibilityOptions {\r\n    elementsProvider: () => Element[];\r\n    onVisibilityChange: (visibilityRatios: number[]) => void;\r\n    threshold?: number[];\r\n}\r\n\r\nconst defaultThreshold = [0, 0.2, 0.4, 0.6, 0.8, 1];\r\n\r\n/**\r\n * A hook that observes the visibility of the provided elements and calls the onVisibilityChange callback when the visibility changes.\r\n *\r\n * @property elementsProvider A function that returns the elements to observe.\r\n * @property onVisibilityChange A callback that is called when the visibility of the elements changes.\r\n */\r\nexport function useElementsVisibility({\r\n    elementsProvider,\r\n    onVisibilityChange,\r\n    threshold = defaultThreshold,\r\n}: UseElementsVisibilityOptions): void {\r\n    useEffect(() => {\r\n        const elements = elementsProvider();\r\n        if (!elements.length) return;\r\n\r\n        const visibilityRatios = Array.from({ length: elements.length }, () => 0);\r\n        const observer = new IntersectionObserver(\r\n            debounce((entries: IntersectionObserverEntry[]) => {\r\n                entries.forEach(entry => {\r\n                    const index = elements.indexOf(entry.target);\r\n                    visibilityRatios[index] = entry.intersectionRatio;\r\n                });\r\n\r\n                onVisibilityChange(visibilityRatios);\r\n            }),\r\n            { threshold }\r\n        );\r\n\r\n        elements.forEach(item => observer.observe(item));\r\n        return () => observer.disconnect();\r\n    }, [elementsProvider, onVisibilityChange, threshold]);\r\n}\r\n","import { FormEntry, FormQuestionType, Validation, ValidationFailure, Validator } from '../../types';\r\nimport { createValidationSuccess } from '../../utilities';\r\n\r\n/**\r\n * A function that returns the max length of the answer content.\r\n *\r\n * @param type The type of the question.\r\n * @returns The max length of the answer content.\r\n */\r\nexport type MaxLength = (type: FormQuestionType) => number;\r\n\r\n/**\r\n * A function that returns the error message the given max length.\r\n *\r\n * @param maxLength The max length of the answer content.\r\n * @param type The type of the question.\r\n * @returns The error message.\r\n */\r\nexport type ErrorMessageByMaxLength = (maxLength: number, type: FormQuestionType) => string;\r\n\r\nexport interface LengthValidatorOptions {\r\n    maxLength?: MaxLength;\r\n    errorMessageByMaxLength?: ErrorMessageByMaxLength;\r\n}\r\n\r\nconst defaultMaxLength: MaxLength = () => 10000;\r\nconst defaultErrorMessageByMaxLength: ErrorMessageByMaxLength = maxLength =>\r\n    `Please enter less than ${maxLength} characters`;\r\n\r\n/**\r\n * A validator that checks if the answer not exceeds the max length.\r\n * If the answer content is not a string, this validator will always pass.\r\n * Otherwise, this validator will fail if the answer content exceeds the max length, and prevent the change.\r\n */\r\nexport class LengthValidator implements Validator<FormEntry> {\r\n    private maxLength: MaxLength;\r\n    private errorMessageByMaxLength: ErrorMessageByMaxLength;\r\n\r\n    /**\r\n     * Creates a length validator.\r\n     *\r\n     * @param options.maxLength The max length of the answer content.\r\n     * @param options.errorMessageByMaxLength The error message if the answer content exceeds the max length.\r\n     * @returns A length validator.\r\n     */\r\n    constructor({\r\n        maxLength = defaultMaxLength,\r\n        errorMessageByMaxLength = defaultErrorMessageByMaxLength,\r\n    }: LengthValidatorOptions = {}) {\r\n        this.maxLength = maxLength;\r\n        this.errorMessageByMaxLength = errorMessageByMaxLength;\r\n    }\r\n\r\n    validate({ question, answer }: FormEntry): Validation {\r\n        const content = answer.content;\r\n\r\n        // Check for undefined.\r\n        if (content === undefined) {\r\n            return createValidationSuccess();\r\n        }\r\n\r\n        const type = question.type;\r\n        const maxLength = this.maxLength(type);\r\n\r\n        // Check for string.\r\n        if (typeof content === 'string') {\r\n            const length = content.length;\r\n            return length <= maxLength ? createValidationSuccess() : this.createValidationFailure(maxLength, type);\r\n        }\r\n\r\n        // Check for choice answer.\r\n        if (typeof content === 'object' && 'chosen' in content) {\r\n            const length = content.chosen.reduce((l, c) => l + c.length, 0) + (content.other?.length ?? 0);\r\n            return length <= maxLength ? createValidationSuccess() : this.createValidationFailure(maxLength, type);\r\n        }\r\n\r\n        return createValidationSuccess();\r\n    }\r\n\r\n    private createValidationFailure(maxLength: number, type: FormQuestionType): ValidationFailure {\r\n        const errorMessage = this.errorMessageByMaxLength(maxLength, type);\r\n        return { valid: false, errorMessage, preventChange: true };\r\n    }\r\n}\r\n","export * from './InsertTable';\r\n","export * from './DesigningDecorator';\r\nexport * from './DesigningTrailingActions';\r\nexport * from './RenderingField';\r\n","import { FontSizes, isContrastTheme, makeStyles } from '@addressbook/components-fluentui-teams-theme';\r\nimport React from 'react';\r\nimport { FormContext, FormEntry, FormMode } from '../../types';\r\nimport { BaseDescriptor, FieldComponentTypeFactory } from './BaseDescriptor';\r\n\r\nconst defaultOptions = {\r\n    formatList: (value: string[]): string => value.join('\\n'),\r\n    formatDate: (value: Date): string => value.toDateString(),\r\n};\r\n\r\nconst useFallbackViewingStyles = makeStyles(theme => ({\r\n    root: {\r\n        cursor: 'text',\r\n        whiteSpace: 'pre-wrap',\r\n        overflowWrap: 'break-word',\r\n        fontSize: FontSizes.size14,\r\n        color: theme.palette.black,\r\n        backgroundColor: isContrastTheme(theme.name) ? theme.palette.white : theme.palette.neutralLighter,\r\n        padding: '6px 12px',\r\n        borderRadius: '4px',\r\n        borderWidth: '1px',\r\n        borderStyle: 'solid',\r\n        borderColor: isContrastTheme(theme.name) ? theme.palette.black : 'transparent',\r\n        lineHeight: FontSizes.size18,\r\n        minHeight: FontSizes.size18,\r\n    },\r\n}));\r\n\r\n/**\r\n * The options for the fallback viewing descriptor.\r\n */\r\nexport type FallbackViewingDescriptorOptions = Partial<typeof defaultOptions>;\r\n\r\nconst makeFieldComponent: FieldComponentTypeFactory<\r\n    FallbackViewingDescriptorOptions & typeof defaultOptions,\r\n    FormEntry\r\n> =\r\n    ({ formatList, formatDate }) =>\r\n    ({ entry, delegatedProps }) => {\r\n        const { answer } = entry;\r\n\r\n        const viewingContent = React.useMemo<string>(() => {\r\n            const content = answer.content;\r\n            if (content === undefined) {\r\n                return '';\r\n            }\r\n\r\n            if (typeof content === 'string') {\r\n                return content;\r\n            }\r\n\r\n            if ('chosen' in content) {\r\n                const list = content.other ? [...content.chosen, content.other] : content.chosen;\r\n                return formatList(list);\r\n            }\r\n\r\n            if (content instanceof Date) {\r\n                return formatDate(content);\r\n            }\r\n\r\n            const exhaustiveCheck: never = content;\r\n            throw new Error(`Unhandled content type: ${exhaustiveCheck}`);\r\n        }, [answer]);\r\n\r\n        const styles = useFallbackViewingStyles();\r\n        return (\r\n            <div {...delegatedProps} className={styles.root} role='textbox' tabIndex={-1}>\r\n                {viewingContent}\r\n            </div>\r\n        );\r\n    };\r\n\r\n/**\r\n * The fallback descriptor that renders a text field in viewing mode, for all entries.\r\n */\r\nexport class FallbackViewingDescriptor extends BaseDescriptor<FormEntry> {\r\n    protected readonly FieldComponent;\r\n\r\n    constructor(options: FallbackViewingDescriptorOptions = {}) {\r\n        super();\r\n        this.FieldComponent = makeFieldComponent({ ...defaultOptions, ...options });\r\n    }\r\n\r\n    /**\r\n     * Tests whether the form is in viewing mode.\r\n     *\r\n     * @param _ Unused.\r\n     * @param context The context.\r\n     * @returns Passes the test or not.\r\n     */\r\n    test(_: FormEntry, context: FormContext): _ is FormEntry {\r\n        return context.mode === FormMode.Viewing;\r\n    }\r\n}\r\n","import { makeStyles } from '@addressbook/components-fluentui-teams-theme';\r\nexport const userSlideDotsStyles = /* #__PURE__*/ makeStyles(theme => ({\r\n    stepper: {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        justifyContent: 'center',\r\n    },\r\n    selectOption: {\r\n        width: '8px',\r\n        height: '8px',\r\n        margin: '0px 6px',\r\n        borderRadius: '50%',\r\n        backgroundColor: theme.palette.neutralTertiaryAlt,\r\n        '&.is-clickable': {\r\n            cursor: 'pointer',\r\n            ':hover': { backgroundColor: theme.palette.themePrimary },\r\n        },\r\n        '&.is-active': {\r\n            backgroundColor: theme.palette.themePrimary,\r\n        },\r\n    },\r\n}));\r\n","import { ContrastColors, FontSizes, isContrastTheme, makeStyles } from '@addressbook/components-fluentui-teams-theme';\r\n\r\nexport const useMockedFieldStyles = makeStyles(theme => ({\r\n    root: {\r\n        color: isContrastTheme(theme.name) ? theme.palette.black : theme.palette.neutralTertiary,\r\n        boxSizing: 'border-box',\r\n        borderWidth: '1px',\r\n        borderStyle: 'solid',\r\n        borderColor: isContrastTheme(theme.name) ? ContrastColors.appGreenContrast : theme.palette.neutralTertiaryAlt,\r\n        borderRadius: '4px',\r\n\r\n        pointerEvents: 'none',\r\n        userSelect: 'none',\r\n    },\r\n    ribbon: {\r\n        display: 'flex',\r\n        flexDirection: 'row',\r\n        alignItems: 'center',\r\n        height: FontSizes.size32,\r\n        gap: '8px',\r\n        padding: '7px 11px 1px',\r\n        '> *': {\r\n            padding: '0 8px',\r\n        },\r\n    },\r\n    input: {\r\n        display: 'flex',\r\n        flexDirection: 'row',\r\n        alignItems: 'center',\r\n        justifyContent: 'space-between',\r\n        padding: '5px 12px',\r\n        fontSize: FontSizes.size14,\r\n        fontWeight: '400',\r\n        lineHeight: FontSizes.size20,\r\n    },\r\n    multiline: {\r\n        height: '96px',\r\n    },\r\n    icon: {\r\n        fontSize: FontSizes.size16,\r\n    },\r\n}));\r\n","export enum FormQuestionType {\r\n    Text,\r\n    RichText,\r\n    Choice,\r\n    DateTime,\r\n}\r\n\r\nexport interface BaseFormQuestion<Type extends FormQuestionType> {\r\n    type: Type;\r\n    id: string;\r\n    familyId?: string;\r\n    eTag?: string;\r\n    order: number;\r\n    title?: string;\r\n    rtTitle?: string;\r\n    subtitle?: string;\r\n    rtSubtitle?: string;\r\n    required?: boolean;\r\n    tooltip?: string;\r\n    placeholder?: string;\r\n}\r\n\r\nexport interface BaseFormAnswer<Content> {\r\n    eTag?: string;\r\n    content?: Content;\r\n}\r\n\r\nexport interface BaseFormEntry<Question, Answer> {\r\n    question: Question;\r\n    answer: Answer;\r\n    active?: boolean;\r\n    invalid?: boolean;\r\n    errorMessage?: string;\r\n}\r\n","import { ServiceInterceptor } from '../types';\r\n\r\nexport interface LoggingInterceptorOptions<Context> {\r\n    logRequest: (request: Request) => Context;\r\n    logResponse: (response: Response, context: Context) => void;\r\n    logError: (error: unknown, context: Context) => void;\r\n}\r\n\r\n/**\r\n * Create a service interceptor that logs request, response and error.\r\n *\r\n * @property logRequest A function that logs request.\r\n * @property logResponse A function that logs response.\r\n * @property logError A function that logs error.\r\n * @returns An interceptor.\r\n * @remarks The context returned by `logRequest` will be passed to `logResponse` and `logError`, which helps to\r\n * correlate the logs, for example, logging the latency of a request.\r\n */\r\nexport function createLoggingInterceptor<Context>({\r\n    logRequest,\r\n    logResponse,\r\n    logError,\r\n}: LoggingInterceptorOptions<Context>): ServiceInterceptor {\r\n    return async (request, proceed) => {\r\n        const context = logRequest(request);\r\n        try {\r\n            const response = await proceed(request);\r\n            logResponse(response, context);\r\n            return response;\r\n        } catch (error) {\r\n            logError(error, context);\r\n            throw error;\r\n        }\r\n    };\r\n}\r\n","import {\r\n    ActionOutcome,\r\n    AriaTelemetryClient,\r\n    Configuration,\r\n    EventBaseType,\r\n    flushTelemetry,\r\n    getClients,\r\n    initializeTelemetryClient,\r\n    logEvent,\r\n    logger,\r\n    LoggingContext,\r\n    logUIEvent,\r\n    PanelActionEvent,\r\n    PanelLaunchMethod,\r\n    PanelRegion,\r\n    PanelViewEvent,\r\n    ScenarioColumns,\r\n    TelemetryContext,\r\n    TelemetryScenarioStatus,\r\n    updateToCompliantAriaClient,\r\n    UserBiColumns,\r\n    UserBIEvent,\r\n} from '@microsoft/teams-telemetry';\r\nimport { uuid } from '@addressbook/utilities-core';\r\nimport { camelCase, groupBy } from 'lodash-es';\r\nimport { IHttpInfo, ILogger, IScenarioEventData, IScenarioLogger, ITelemetryDetails } from './common/interfaces';\r\nimport { CommonLogCategory, LoggerLevels, PanelType } from './common/types';\r\nimport { ScenarioLogger } from './ScenarioLogger';\r\n\r\nenum AriaEventTypes {\r\n    Trace = 'upd_trace',\r\n    Performance = 'upd_performance',\r\n    UserBi = 'userbi',\r\n    NonUiEvent = 'upd_nonUiEvent',\r\n    Scenario = 'upd_scenario',\r\n    Http = 'upd_http',\r\n}\r\n\r\nconst emailPattern = /([\\w-\\.]+)@([\\w-]+\\.)+[\\w-]+/g;\r\nconst emailPlaceholder = '[email]';\r\n\r\nconst guidPattern = /[a-f\\d]{8}(-[a-f\\d]{4}){3}-[a-f\\d]{12}/gi;\r\nconst guidPlaceholder = '[guid]';\r\n\r\n/**\r\n * Sets up the Telemetry and hijacks the console events\r\n * So that we can automatically instrument the native console events\r\n */\r\nexport class OneDSLogger<TScenarioName extends string, TStepName extends string, TLogCategory extends string>\r\n    implements ILogger<TScenarioName, TStepName, TLogCategory>\r\n{\r\n    private originalInfo: () => any;\r\n    private originalDebug: () => any;\r\n    private originalLog: () => any;\r\n    private originalWarn: () => any;\r\n    private originalError: () => any;\r\n    private originalAssert: (test?: boolean, ...args: any[]) => any;\r\n\r\n    public readonly sessionId: string;\r\n    private lastUserBiViewEventTime: number;\r\n    private activeScenarios: Record<string, IScenarioLogger<TStepName>>;\r\n\r\n    private ariaTelemetryClient?: AriaTelemetryClient;\r\n\r\n    private isDevelopment: boolean;\r\n    private logTraceTypes: ('Debug' | 'Info' | 'Warning' | 'Error' | 'Exception' | 'HTTPException')[];\r\n\r\n    // log event when promise is resolved\r\n    private initPromise: Promise<any>;\r\n    private initPromiseResolve: (() => void) | undefined;\r\n\r\n    private instrumentationKey: string | undefined;\r\n\r\n    /**\r\n     * Logger constructor.\r\n     *\r\n     * @param ariaToken aria token\r\n     * @param sessionId sessionId\r\n     * @param delay milliseconds to wait before log event. 0 default; -1 for infinitely.\r\n     * @param isDevelopment if true, enable console log and trace log. false default.\r\n     */\r\n    constructor(config?: {\r\n        ariaToken?: string;\r\n        sessionId?: string;\r\n        delay?: number;\r\n        isDevelopment?: boolean;\r\n        logTraceTypes?: ('Debug' | 'Info' | 'Warning' | 'Error' | 'Exception' | 'HTTPException')[];\r\n    }) {\r\n        const { ariaToken, sessionId, delay, isDevelopment, logTraceTypes } = config || {};\r\n\r\n        this.isDevelopment = isDevelopment || false;\r\n        this.logTraceTypes = logTraceTypes || [];\r\n        this.lastUserBiViewEventTime = performance.now();\r\n\r\n        this.originalInfo = console.info.bind(console);\r\n        this.originalDebug = console.debug ? console.debug.bind(console) : console.log.bind(console);\r\n        this.originalLog = console.log.bind(console);\r\n        this.originalWarn = console.warn.bind(console);\r\n        this.originalError = console.error.bind(console);\r\n        this.originalAssert = console.assert.bind(console);\r\n\r\n        if (!isDevelopment) {\r\n            // set up our functions above to use the inner function\r\n            console.info = this.hook.bind(this, this.originalInfo, LoggerLevels.info);\r\n            console.debug = this.hook.bind(this, this.originalDebug, LoggerLevels.debug);\r\n            console.log = this.hook.bind(this, this.originalLog, LoggerLevels.log);\r\n            console.warn = this.hook.bind(this, this.originalWarn, LoggerLevels.warn);\r\n            console.error = this.hook.bind(this, this.originalError, LoggerLevels.error);\r\n            console.assert = this.assert.bind(this);\r\n        }\r\n\r\n        this.initPromise = new Promise((r: any): void => (this.initPromiseResolve = r));\r\n        if (delay === undefined || delay >= 0) {\r\n            setTimeout((): void => this.activeLogger(), delay);\r\n        }\r\n\r\n        if (ariaToken) {\r\n            this.instrumentationKey = ariaToken;\r\n            this.initializeAria();\r\n        }\r\n\r\n        this.sessionId = sessionId || uuid();\r\n\r\n        this.setCommonProperty({ Session: this.sessionId });\r\n\r\n        this.activeScenarios = {};\r\n\r\n        if (!isDevelopment) {\r\n            // log all global runtime error\r\n            window.addEventListener('error', err =>\r\n                this.logTraceException(CommonLogCategory.GlobalException, { error: err as any as Error })\r\n            );\r\n            // log load performance\r\n            window.addEventListener('load', this.logLoadPerformance.bind(this));\r\n        }\r\n    }\r\n\r\n    public activeLogger(): void {\r\n        if (this.initPromiseResolve) {\r\n            this.initPromiseResolve();\r\n        }\r\n    }\r\n\r\n    public setCompliantAriaClient(tenantId: string): Promise<void> {\r\n        if (!this.ariaTelemetryClient) {\r\n            return Promise.resolve();\r\n        }\r\n\r\n        return this.ariaTelemetryClient\r\n            .getCompliantAriaClient(tenantId, this.getClientConfig())\r\n            .then(client => {\r\n                updateToCompliantAriaClient(client);\r\n            })\r\n            .catch(err => {\r\n                console.error('Get ComplaintAriaClient error', err);\r\n            });\r\n    }\r\n\r\n    public setCommonProperty(dataMap: Record<string, string | number | boolean | undefined>): void {\r\n        const context = logger.getLoggerContext();\r\n        const newContext: LoggingContext = { customProperties: context?.customProperties ?? {} };\r\n        for (const [key, value] of Object.entries(dataMap)) {\r\n            newContext.customProperties![key] = value as string;\r\n        }\r\n        logger.updateContext(newContext);\r\n    }\r\n\r\n    public logPerformance(\r\n        action: string,\r\n        source: string,\r\n        duration: number,\r\n        duartionDetails?: { [key: string]: number },\r\n        dataBag?: any\r\n    ): void {\r\n        const logDetails = {};\r\n        Object.entries(duartionDetails ?? {}).map(v => (logDetails[`Time.${camelCase(v[0])}`] = Math.ceil(v[1])));\r\n        const eventProperties = {\r\n            Action: action,\r\n            Source: source,\r\n            Duration: Math.ceil(duration),\r\n            ...logDetails,\r\n        };\r\n        this.addDetailsToEventProperties(dataBag, eventProperties);\r\n\r\n        this.logEvent(AriaEventTypes.Performance, eventProperties);\r\n    }\r\n\r\n    public logHttp(httpInfo: IHttpInfo): void {\r\n        const eventProperties = {\r\n            HTTP_API: httpInfo.apiName!,\r\n            HTTP_URL: httpInfo.url,\r\n            HTTP_ClientRequestId: httpInfo.clientRequestId,\r\n            HTTP_CorrelationId: httpInfo.correlationId,\r\n            HTTP_Latency: httpInfo.latency!,\r\n            HTTP_GetTeamsContextLatency: httpInfo.getTeamsContextLatency!,\r\n            HTTP_GetAuthTokenLatency: httpInfo.getAuthTokenLatency!,\r\n            HTTP_ResponseCode: httpInfo.responseCode!,\r\n            HTTP_ResponseText: httpInfo.responseText!,\r\n            HTTP_RequestMethod: httpInfo.requestMethod,\r\n            HTTP_Edge_Ref: httpInfo.edgeRef!,\r\n        };\r\n\r\n        this.logEvent(AriaEventTypes.Http, eventProperties);\r\n    }\r\n\r\n    public logUserBiView(\r\n        panelLaunchMethod: PanelLaunchMethod,\r\n        panelRegion: PanelRegion,\r\n        panelType: PanelType,\r\n        dataBag?: any\r\n    ): void {\r\n        const event: UserBIEvent<PanelViewEvent & Partial<TelemetryContext>> = {\r\n            eventName: EventBaseType.PanelView,\r\n            properties: {\r\n                [UserBiColumns.PanelRegion]: panelRegion,\r\n                [UserBiColumns.PanelType]: panelType,\r\n                [UserBiColumns.PanelLaunchMethod]: panelLaunchMethod,\r\n                [UserBiColumns.PanelUri]: window.location.hash,\r\n            },\r\n        };\r\n        this.lastUserBiViewEventTime = performance.now();\r\n        this.addDetailsToEventProperties(dataBag, event.properties);\r\n\r\n        this.logUIEvent<PanelViewEvent>(event);\r\n    }\r\n\r\n    public logUserBiAction(\r\n        scenarioName: TScenarioName,\r\n        scenarioType: string,\r\n        moduleName: string,\r\n        dataBag?: any,\r\n        pageLeave?: boolean\r\n    ): void {\r\n        const event: UserBIEvent<any> = {\r\n            eventName: EventBaseType.PanelAction,\r\n            properties: {\r\n                [UserBiColumns.Scenario]: scenarioName,\r\n                [UserBiColumns.ScenarioType]: camelCase(scenarioType),\r\n                [UserBiColumns.ModuleName]: camelCase(moduleName),\r\n                [UserBiColumns.PanelUri]: window.location.hash,\r\n                ['Panel.Path']: window.location.hash.replace(guidPattern, guidPlaceholder),\r\n                ['DataBag.PageElapsed']: performance.now() - this.lastUserBiViewEventTime,\r\n                ['DataBag.PageLeave']: !!pageLeave,\r\n            },\r\n        };\r\n\r\n        this.addDetailsToEventProperties(dataBag, event.properties);\r\n        this.logUIEvent<PanelActionEvent>(event);\r\n    }\r\n\r\n    public logNonUiTelemetry(nonUiComponent: string, outcome: ActionOutcome, details?: any): void {\r\n        const eventProperties = {\r\n            SourceComponent: nonUiComponent,\r\n            Event: outcome,\r\n        };\r\n\r\n        this.addDetailsToEventProperties(details, eventProperties);\r\n\r\n        this.logEvent(AriaEventTypes.NonUiEvent, eventProperties);\r\n    }\r\n\r\n    public createScenario(name: string, dataBag?: any): IScenarioLogger<TStepName> {\r\n        if (!name) {\r\n            throw new Error('Missing scenario name.');\r\n        }\r\n\r\n        if (this.activeScenarios[name] != null) {\r\n            console.warn(`trying to create a scenario: ${name} that already exists`);\r\n            return this.activeScenarios[name];\r\n        }\r\n\r\n        const newScenario = new ScenarioLogger(this, name, dataBag);\r\n        this.activeScenarios[name] = newScenario;\r\n        return newScenario;\r\n    }\r\n\r\n    public findScenario(name: string): IScenarioLogger<TStepName> | null {\r\n        return this.activeScenarios[name] ? this.activeScenarios[name] : null;\r\n    }\r\n\r\n    public markScenario(\r\n        scenarioName: TScenarioName,\r\n        step: TStepName,\r\n        status?: TelemetryScenarioStatus,\r\n        eventData?: Partial<IScenarioEventData>\r\n    ): void {\r\n        const scenario = this.findScenario(scenarioName);\r\n\r\n        if (scenario) {\r\n            scenario.mark(step, status, eventData);\r\n        }\r\n    }\r\n\r\n    public stopScenario(scenarioName: string, eventData?: Partial<IScenarioEventData>): void {\r\n        const scenario = this.findScenario(scenarioName);\r\n\r\n        if (scenario) {\r\n            scenario.stop(eventData);\r\n        }\r\n    }\r\n\r\n    public failScenario(scenarioName: string, eventData?: Partial<IScenarioEventData>): void {\r\n        const scenario = this.findScenario(scenarioName);\r\n\r\n        if (scenario) {\r\n            scenario.fail(eventData);\r\n        }\r\n    }\r\n\r\n    public logScenario(name: string, eventData: IScenarioEventData, completeScenario: boolean): void {\r\n        const eventProperties = { [ScenarioColumns.ScenarioName]: name };\r\n        Object.keys(eventData).forEach((key: string): void => {\r\n            if (key === 'dataBag') {\r\n                this.addDetailsToEventProperties(eventData.dataBag, eventProperties);\r\n            } else {\r\n                eventProperties[key.charAt(0).toUpperCase() + key.slice(1)] = eventData[key];\r\n            }\r\n        });\r\n\r\n        this.logEvent(AriaEventTypes.Scenario, eventProperties);\r\n\r\n        if (completeScenario) {\r\n            delete this.activeScenarios[name];\r\n        }\r\n    }\r\n\r\n    public markScenarioComplete(name: string): void {\r\n        if (this.activeScenarios[name] != null) {\r\n            delete this.activeScenarios[name];\r\n        }\r\n    }\r\n\r\n    public hook(_stream: null | ((str: string, args?: any[]) => any), prefix: string, ...args: any[]): void {\r\n        let message = '';\r\n\r\n        // more data args are passed, stringify and record\r\n        for (const arg of args) {\r\n            try {\r\n                const formattedArg = JSON.stringify(arg, null, 2);\r\n                message += '\\r\\n' + formattedArg;\r\n            } catch (err) {\r\n                console.warn(`Error stringifying console logs, because: ${err}`);\r\n            }\r\n        }\r\n\r\n        switch (prefix) {\r\n            case LoggerLevels.info:\r\n            case LoggerLevels.debug:\r\n            case LoggerLevels.log:\r\n                if (this.isDevelopment) {\r\n                    this.logTraceInternal(prefix, 'console', message);\r\n                }\r\n                break;\r\n            case LoggerLevels.warn:\r\n            case LoggerLevels.error:\r\n                this.logTraceInternal(prefix, 'console', message);\r\n                break;\r\n        }\r\n    }\r\n\r\n    public logTraceDebug(logCategory: TLogCategory | CommonLogCategory, message: string): void {\r\n        // If Debug logs are disabled for this user, don't do anything\r\n        if (!this.isLogTraceDebugEnabled()) {\r\n            return;\r\n        }\r\n\r\n        this.logTraceInternal(LoggerLevels.debug, logCategory, message);\r\n    }\r\n\r\n    public logTraceInfo(logCategory: TLogCategory | CommonLogCategory, message: string): void {\r\n        // If Info logs are disabled for this user, don't do anything\r\n        if (!this.isLogTraceInfoEnabled()) {\r\n            return;\r\n        }\r\n\r\n        this.logTraceInternal(LoggerLevels.info, logCategory, message);\r\n    }\r\n\r\n    public logTraceWarning(logCategory: TLogCategory | CommonLogCategory, message: string): void {\r\n        // If Warning logs are disabled for this user, don't do anything\r\n        if (!this.isLogTraceWarningEnabled()) {\r\n            return;\r\n        }\r\n\r\n        this.logTraceInternal(LoggerLevels.warn, logCategory, message);\r\n    }\r\n\r\n    public logTraceError(logCategory: TLogCategory | CommonLogCategory, message: string): void {\r\n        // If Error logs are disabled for this user, don't do anything\r\n        if (!this.isLogTraceErrorEnabled()) {\r\n            return;\r\n        }\r\n\r\n        this.logTraceInternal(LoggerLevels.error, logCategory, message);\r\n    }\r\n\r\n    public logTraceException(\r\n        logCategory: TLogCategory | CommonLogCategory,\r\n        options: ITelemetryDetails,\r\n        dataBag?: any\r\n    ): void {\r\n        if (this.isDevelopment) {\r\n            console.log(logCategory, JSON.stringify(options));\r\n        }\r\n\r\n        // If Exception logs are disabled for this user in production, don't do anything\r\n        if (!this.isLogTraceExceptionEnabled()) {\r\n            return;\r\n        }\r\n\r\n        this.logTraceInternal(LoggerLevels.error, logCategory, options.message, options, dataBag);\r\n    }\r\n\r\n    public logTraceHttpException(httpAPI: string, message: string, httpStatusCode: number): void {\r\n        const messageWithStatusCode = `{${httpAPI}} API call failed with message {${message}}, statusCode {${httpStatusCode}}`;\r\n        if (this.isDevelopment) {\r\n            console.log(messageWithStatusCode);\r\n        }\r\n\r\n        if (!this.isLogTraceHTTPExceptionEnabled()) {\r\n            return;\r\n        }\r\n\r\n        this.logTraceInternal(LoggerLevels.error, CommonLogCategory.HTTPException, messageWithStatusCode);\r\n    }\r\n\r\n    public flushLogs(callback?: (() => void) | undefined): void {\r\n        const telemetryClients = getClients();\r\n        telemetryClients.forEach(telemetryClient => {\r\n            if (telemetryClient.isInitialized()) {\r\n                telemetryClient.flush(callback);\r\n            }\r\n        });\r\n    }\r\n\r\n    public flushAndTeardown(): void {\r\n        flushTelemetry();\r\n    }\r\n\r\n    // Check if debug-level logs are allowed to pass through\r\n    private isLogTraceDebugEnabled(): boolean {\r\n        return this.logTraceTypes.includes('Debug');\r\n    }\r\n\r\n    // Check if info-level logs are allowed to pass through\r\n    private isLogTraceInfoEnabled(): boolean {\r\n        return this.logTraceTypes.includes('Info');\r\n    }\r\n\r\n    // Check if warning-level logs are allowed to pass through\r\n    private isLogTraceWarningEnabled(): boolean {\r\n        return this.logTraceTypes.includes('Warning');\r\n    }\r\n\r\n    // Check if error-level logs are allowed to pass through\r\n    private isLogTraceErrorEnabled(): boolean {\r\n        return this.logTraceTypes.includes('Error');\r\n    }\r\n\r\n    // Check if exception are allowed to pass through\r\n    private isLogTraceExceptionEnabled(): boolean {\r\n        return this.logTraceTypes.includes('Exception');\r\n    }\r\n\r\n    // Check if HTTP exception are allowed to pass through\r\n    private isLogTraceHTTPExceptionEnabled(): boolean {\r\n        return this.logTraceTypes.includes('HTTPException');\r\n    }\r\n\r\n    private logTraceInternal(\r\n        level: LoggerLevels,\r\n        logCategory: TLogCategory | string,\r\n        message?: string,\r\n        options?: ITelemetryDetails,\r\n        dataBag?: any\r\n    ): void {\r\n        const eventProperties: { [key: string]: string } = {\r\n            LogLevel: level,\r\n            LogCategory: logCategory,\r\n        };\r\n\r\n        if (message) {\r\n            eventProperties.Message = message;\r\n        }\r\n\r\n        this.addDetailsToEventProperties(dataBag, eventProperties);\r\n\r\n        if (options) {\r\n            if (options.error) {\r\n                if (options.error.stack) {\r\n                    eventProperties.CallStack = options.error.stack;\r\n                }\r\n\r\n                if (options.error.name) {\r\n                    eventProperties.ExceptionType = options.error.name;\r\n                }\r\n\r\n                if (options.error.message) {\r\n                    eventProperties.ExceptionMessage = options.error.message;\r\n                }\r\n\r\n                const code = (options.error as { code?: unknown }).code;\r\n                if (typeof code === 'string') {\r\n                    eventProperties.ExceptionCode = code;\r\n                }\r\n            }\r\n\r\n            if (options.details) {\r\n                eventProperties.Details = options.details;\r\n            }\r\n\r\n            if (options.method) {\r\n                eventProperties.Method = options.method;\r\n            }\r\n        }\r\n\r\n        this.logEvent(AriaEventTypes.Trace, eventProperties);\r\n    }\r\n\r\n    private assert(test?: boolean, ...args: any[]): void {\r\n        this.originalAssert(test, args);\r\n        if (test === false) {\r\n            this.hook(null, 'err', args);\r\n        }\r\n    }\r\n\r\n    private addDetailsToEventProperties(\r\n        details: any,\r\n        eventProperties: {\r\n            [key: string]: string | number | boolean | null;\r\n        }\r\n    ): void {\r\n        if (details) {\r\n            const typeOfDetails = typeof details;\r\n            if (typeOfDetails === 'string' || typeOfDetails === 'boolean' || typeOfDetails === 'number') {\r\n                eventProperties['DataBag.info'] = details;\r\n            } else {\r\n                Object.keys(details).forEach((key: string): void => {\r\n                    const typeOfDetail = typeof details[key];\r\n                    const eventKey = `DataBag.${key}`;\r\n                    if (typeOfDetail === 'string' || typeOfDetail === 'boolean' || typeOfDetail === 'number') {\r\n                        eventProperties[eventKey] = details[key];\r\n                    } else {\r\n                        eventProperties[eventKey] = JSON.stringify(details[key]);\r\n                    }\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    private logEvent(\r\n        eventName: string,\r\n        properties: {\r\n            [key: string]: string | number | boolean;\r\n        }\r\n    ): void {\r\n        properties['AppInfo.ElapsedTime'] = Math.ceil(performance.now());\r\n        this.initPromise.then((): void => {\r\n            logEvent(eventName, properties);\r\n        });\r\n    }\r\n\r\n    private logUIEvent<T>(event: UserBIEvent<T & Partial<TelemetryContext>>): void {\r\n        (event.properties as any)['AppInfo.ElapsedTime'] = Math.ceil(performance.now());\r\n        this.initPromise.then((): void => {\r\n            logUIEvent(event);\r\n        });\r\n    }\r\n\r\n    private getClientConfig(): Configuration {\r\n        const config: Configuration = {\r\n            instrumentationKey: this.instrumentationKey,\r\n            channelConfiguration: {\r\n                // Post channel configuration\r\n                eventsLimitInMem: 50,\r\n            },\r\n            webAnalyticsConfiguration: {\r\n                // Web Analytics Plugin configuration\r\n                autoCapture: {\r\n                    scroll: false,\r\n                    pageView: false,\r\n                    onLoad: false,\r\n                    onUnload: false,\r\n                    click: false,\r\n                    jsError: false,\r\n                },\r\n            },\r\n        };\r\n        return config;\r\n    }\r\n\r\n    private initializeAria(): void {\r\n        this.ariaTelemetryClient = new AriaTelemetryClient(this.getClientConfig(), this.isDevelopment);\r\n        initializeTelemetryClient(this.ariaTelemetryClient, this.isDevelopment);\r\n    }\r\n\r\n    private logLoadPerformance(): void {\r\n        setTimeout(() => {\r\n            let perfDetails: { [key: string]: number } = {};\r\n\r\n            // https://developer.mozilla.org/en-US/docs/Web/API/PerformancePaintTiming\r\n            performance.getEntriesByType('paint').forEach(p => (perfDetails[p.name] = p.startTime));\r\n\r\n            // https://developer.mozilla.org/en-US/docs/Web/API/PerformanceResourceTiming\r\n            const resPerfs = performance.getEntriesByType('resource') as PerformanceResourceTiming[];\r\n            const resourceDetails = groupBy(resPerfs, res => res.initiatorType);\r\n\r\n            Object.entries(resourceDetails).map(([type, value]) => {\r\n                const duration = Math.max(...value.map(j => j.responseEnd)) - Math.min(...value.map(j => j.startTime));\r\n                this.logPerformance(`resource-${type}`, window.location.href, duration, undefined, {\r\n                    details: value.map(p => ({\r\n                        name: this.formatUrl(p.name),\r\n                        duration: Math.ceil(p.duration),\r\n                        size: p.transferSize,\r\n                    })),\r\n                });\r\n            });\r\n\r\n            const js = resPerfs.filter(ele => ele.initiatorType === 'script');\r\n            perfDetails['download-script'] =\r\n                Math.max(...js.map(j => j.responseEnd)) - Math.min(...js.map(j => j.startTime));\r\n\r\n            // https://developer.mozilla.org/en-US/docs/Web/API/PerformanceNavigationTiming\r\n            // https://developer.mozilla.org/en-US/docs/Web/Performance/Navigation_and_resource_timings\r\n            const timeInfo = performance.getEntriesByType('navigation')?.[0] as PerformanceNavigationTiming;\r\n            if (!timeInfo) {\r\n                return;\r\n            }\r\n            perfDetails['page-ttfb'] = timeInfo.responseStart - timeInfo.startTime;\r\n            const loadDuration = timeInfo.loadEventStart - timeInfo.startTime;\r\n            perfDetails['page-loading'] = loadDuration;\r\n\r\n            perfDetails = {\r\n                ...perfDetails,\r\n                Cache: timeInfo.domainLookupStart - timeInfo.fetchStart,\r\n                Dns: timeInfo.domainLookupEnd - timeInfo.domainLookupStart,\r\n                Connect: timeInfo.connectEnd - timeInfo.connectStart,\r\n                Request: timeInfo.responseStart - timeInfo.requestStart,\r\n                Download: timeInfo.responseEnd - timeInfo.responseStart,\r\n                Dom: timeInfo.domComplete - timeInfo.responseEnd,\r\n                Contentload: timeInfo.loadEventEnd - timeInfo.loadEventStart,\r\n                DOMContentLoaded: timeInfo.domContentLoadedEventEnd - timeInfo.domContentLoadedEventStart,\r\n                Redirect: timeInfo.redirectEnd - timeInfo.redirectStart,\r\n            };\r\n\r\n            this.logPerformance('performance-timing', window.location.href, loadDuration, perfDetails);\r\n        }, 0);\r\n    }\r\n\r\n    private formatUrl(url: string): string {\r\n        // remove same url prefix\r\n        // eg. https://reports.teams.microsoft.com/dist/js/runtime~main.1234.js to runtime~main.1234.js\r\n        if (url.startsWith(location.origin)) {\r\n            url = url.split('/').pop() ?? '';\r\n        }\r\n        // remove email\r\n        return decodeURIComponent(url).replace(emailPattern, emailPlaceholder);\r\n    }\r\n}\r\n","import { makeStyles } from '@addressbook/components-fluentui-teams-theme';\r\n\r\nexport const usePeoplePileStyles = makeStyles({\r\n    root: {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n    },\r\n    coins: {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        gap: '4px',\r\n    },\r\n    compactCoins: {\r\n        gap: 0,\r\n        '>:not(:first-child)': {\r\n            marginInlineStart: '-2px',\r\n        },\r\n    },\r\n    overflow: {\r\n        zIndex: 0,\r\n        margin: '0 4px',\r\n        '::before': {\r\n            content: '\"+\"',\r\n        },\r\n    },\r\n    compactOverflow: {\r\n        margin: '0 2px',\r\n    },\r\n    onlyName: {\r\n        margin: '0 4px',\r\n        overflow: 'hidden',\r\n        textOverflow: 'ellipsis',\r\n        whiteSpace: 'nowrap',\r\n    },\r\n});\r\n","import { Label, mergeStyles } from '@fluentui/react';\r\nimport { useId } from '@fluentui/react-hooks';\r\nimport { EditorOptions, Extensions } from '@tiptap/core';\r\nimport { Placeholder } from '@tiptap/extension-placeholder';\r\nimport { EditorContent, useEditor } from '@tiptap/react';\r\nimport React, { forwardRef } from 'react';\r\nimport { Defaults, File } from '../../extensions';\r\nimport { defaultRichTextFieldStrings } from '../../utils';\r\nimport { RichTextRibbon } from '../RichTextRibbon';\r\nimport { useRichTextFieldStyles } from './RichTextField.styles';\r\nimport { RibbonPosition, RichTextFieldProps } from './RichTextField.types';\r\n\r\nexport const RichTextField = forwardRef<HTMLDivElement, RichTextFieldProps>(\r\n    (\r\n        {\r\n            value,\r\n            onChange,\r\n            errorMessage,\r\n            label,\r\n            description,\r\n            required,\r\n            placeholder,\r\n            prefix,\r\n            readOnly,\r\n            invalid,\r\n            compact,\r\n            ribbonPosition = RibbonPosition.Top,\r\n            focusable = true,\r\n            callbacks,\r\n            fileStorageService,\r\n            additionalExtensions,\r\n            strings,\r\n            className,\r\n            rootClassName,\r\n            containerClassName,\r\n            children,\r\n            'aria-required': ariaRequired,\r\n            'aria-placeholder': ariaPlaceholder,\r\n            'aria-readonly': ariaReadonly,\r\n            'aria-labelledby': externalLabelId,\r\n            'aria-describedby': externalDescriptionId,\r\n            ...props\r\n        },\r\n        ref\r\n    ) => {\r\n        const stringsInternal = React.useMemo(() => ({ ...defaultRichTextFieldStrings, ...strings }), [strings]);\r\n\r\n        const valueRef = React.useRef(value);\r\n        valueRef.current = value;\r\n\r\n        const onChangeRef = React.useRef(onChange);\r\n        onChangeRef.current = onChange;\r\n\r\n        const uncontrolledValueRef = React.useRef(value);\r\n\r\n        // Prevent calling onChange when the html is not changed, since we catch any possible content updates from\r\n        // `UpdateContentPlugin`, which could be noisy.\r\n        const onUpdate = React.useCallback<EditorOptions['onUpdate']>(event => {\r\n            const html = event.editor.getHTML();\r\n            if (valueRef.current === html) return;\r\n            onChangeRef.current?.(html);\r\n            uncontrolledValueRef.current = html;\r\n        }, []);\r\n\r\n        const internalLabelId = useId('label');\r\n        const internalDescriptionId = useId('description');\r\n        const internalErrorMessageId = useId('errormessage');\r\n\r\n        // Prefix is used to add a data attribute to the editor container, which can be used for styling, to dynamically\r\n        // add a prefix to the content. This is useful for example when the editor is used to render replies in comments.\r\n        // Tiptap does not provide a way to directly access the contenteditable element, so we have to pass these attributes\r\n        // to support accessibility. The contenteditable element is not a native input, so it must have a role of textbox.\r\n        // Error message is handled separately, because it can change without the editor content changing, and we want to\r\n        // avoid unnecessary re-renders.\r\n        const composedArialRequired = required || ariaRequired;\r\n        const composedAriaPlaceholder = placeholder || ariaPlaceholder;\r\n        const composedAriaReadonly = readOnly || ariaReadonly;\r\n        const composedLabelId = externalLabelId || (label && internalLabelId);\r\n        const composedDescriptionId = externalDescriptionId || (description && internalDescriptionId);\r\n        const editorProps = React.useMemo<EditorOptions['editorProps']>(\r\n            () => ({\r\n                attributes: {\r\n                    ...(prefix && { 'data-prefix': prefix }),\r\n                    role: 'textbox',\r\n                    'aria-multiline': 'true',\r\n                    ...(composedArialRequired && { 'aria-required': 'true' }),\r\n                    ...(composedAriaPlaceholder && { 'aria-placeholder': composedAriaPlaceholder }),\r\n                    ...(composedAriaReadonly && { 'aria-readonly': 'true' }),\r\n                    ...(composedLabelId && { 'aria-labelledby': composedLabelId }),\r\n                    ...(composedDescriptionId && { 'aria-describedby': composedDescriptionId }),\r\n                },\r\n            }),\r\n            [\r\n                prefix,\r\n                composedArialRequired,\r\n                composedAriaPlaceholder,\r\n                composedAriaReadonly,\r\n                composedLabelId,\r\n                composedDescriptionId,\r\n            ]\r\n        );\r\n\r\n        const extensions = React.useMemo<Extensions>(\r\n            () => [\r\n                Defaults,\r\n                Placeholder.configure({ placeholder }),\r\n                ...(fileStorageService\r\n                    ? [File.configure({ fileStorageService, compact, strings: stringsInternal })]\r\n                    : []),\r\n                ...(additionalExtensions ?? []),\r\n            ],\r\n            [additionalExtensions, compact, fileStorageService, placeholder, stringsInternal]\r\n        );\r\n\r\n        const editor = useEditor(\r\n            {\r\n                parseOptions: { preserveWhitespace: 'full' },\r\n                editorProps,\r\n                extensions,\r\n                editable: !readOnly,\r\n                content: value,\r\n                onUpdate,\r\n            },\r\n            [editorProps, extensions, readOnly]\r\n        );\r\n\r\n        // Because Tiptap handles its own changes, and does not allow preventing edits,\r\n        // we have to settle for a hybrid between controlled and uncontrolled mode.\r\n        // It can't prevent the change, but will still override the content whenever value differs from current state.\r\n        // Like https://www.npmjs.com/package/react-quill#user-content-controlled-mode-caveats\r\n        React.useEffect(() => {\r\n            if (!editor || uncontrolledValueRef.current === value) return;\r\n\r\n            // Workaround for \"flushSync was called from inside a lifecycle method. React cannot flush when React is\r\n            // already rendering. Consider moving this call to a scheduler task or micro task.\"\r\n            // See https://github.com/ueberdosis/tiptap/issues/3764\r\n            queueMicrotask(() => {\r\n                if (uncontrolledValueRef.current === value) return;\r\n                editor.commands.setContent(value);\r\n            });\r\n        }, [editor, value]);\r\n\r\n        const styles = useRichTextFieldStyles();\r\n        return (\r\n            <div ref={ref} className={rootClassName}>\r\n                {label && (\r\n                    <Label id={internalLabelId} required={required}>\r\n                        {label}\r\n                    </Label>\r\n                )}\r\n                {description && (\r\n                    <div id={internalDescriptionId} className={styles.description}>\r\n                        {description}\r\n                    </div>\r\n                )}\r\n                <div\r\n                    className={mergeStyles(\r\n                        'ms-RichTextField',\r\n                        styles.editorContainer,\r\n                        errorMessage || invalid ? styles.error : focusable && styles.focusable,\r\n                        containerClassName\r\n                    )}>\r\n                    {ribbonPosition === RibbonPosition.Top && (\r\n                        <RichTextRibbon\r\n                            editor={editor}\r\n                            compact={compact}\r\n                            callbacks={callbacks}\r\n                            strings={stringsInternal}\r\n                        />\r\n                    )}\r\n                    {children}\r\n                    <EditorContent\r\n                        editor={editor}\r\n                        className={mergeStyles(styles.editor, className)}\r\n                        aria-errormessage={errorMessage ? internalErrorMessageId : undefined}\r\n                        aria-invalid={!!errorMessage || invalid}\r\n                        {...props}\r\n                    />\r\n                    {ribbonPosition === RibbonPosition.Bottom && (\r\n                        <RichTextRibbon\r\n                            editor={editor}\r\n                            compact={compact}\r\n                            callbacks={callbacks}\r\n                            strings={stringsInternal}\r\n                        />\r\n                    )}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n);\r\n","/*\r\n *  Copyright © Microsoft Corporation. All rights reserved.\r\n */\r\n\r\nimport React from 'react';\r\nimport { Modal, mergeStyleSets, IModalStyles } from '@fluentui/react';\r\nimport { useCopyRequestModalStyles } from './ContentCopyRequestModal.styles';\r\nimport { ContentCopyRequestModalContent, ContentCopyRequestProps } from './ContentCopyRequestModalContent';\r\n\r\nexport type ContentCopyRequestModalProps = ContentCopyRequestProps & {\r\n    isOpen: boolean;\r\n    modalStyles?: IModalStyles;\r\n};\r\n\r\nexport const ContentCopyRequestModal: React.FC<ContentCopyRequestModalProps> = ({\r\n    isOpen,\r\n    modalStyles,\r\n    ...props\r\n}: ContentCopyRequestModalProps): JSX.Element => {\r\n    const styles = useCopyRequestModalStyles();\r\n    return (\r\n        <Modal styles={mergeStyleSets(styles, modalStyles)} isOpen={isOpen} isBlocking onDismiss={props.onDismiss}>\r\n            <ContentCopyRequestModalContent {...props} />\r\n        </Modal>\r\n    );\r\n};\r\n","import { BaseFormEntry, Validation, ValidationFailure, ValidationSuccess, Validator } from '../types';\r\n\r\n/**\r\n * Creates a successful validation.\r\n *\r\n * @returns The successful validation.\r\n */\r\nexport function createValidationSuccess(): ValidationSuccess {\r\n    return { valid: true };\r\n}\r\n\r\n/**\r\n * Merges multiple validations into a single validation.\r\n * If any of the validations fail, the merged validation will fail.\r\n * The error message of the merged validation will be the first error message found.\r\n * If any of the validations prevent change, the merged validation will prevent change.\r\n *\r\n * @param validations The validations to merge.\r\n * @returns The merged validation.\r\n */\r\nexport function mergeValidations(validations: Validation[]): Validation {\r\n    const failures = validations.filter((result): result is ValidationFailure => !result.valid);\r\n\r\n    if (failures.length === 0) {\r\n        return { valid: true };\r\n    }\r\n\r\n    return {\r\n        valid: false,\r\n        errorMessage: failures.find(result => result.errorMessage)?.errorMessage,\r\n        preventChange: failures.some(result => result.preventChange),\r\n    };\r\n}\r\n\r\n/**\r\n * Validates a single entry and returns a new entry with the validation result.\r\n *\r\n * @param entry The entry to validate.\r\n * @param validators The validators to use.\r\n * @param quietly If true, the entry's error message will not be set.\r\n * @returns The validated entry.\r\n */\r\nexport function validateEntry<Question, Answer, Entry extends BaseFormEntry<Question, Answer>>(\r\n    entry: Entry,\r\n    validators: Validator<Entry>[],\r\n    quietly?: boolean\r\n): Entry {\r\n    const validation = mergeValidations(validators.map(validator => validator.validate(entry)));\r\n    const newEntry = { ...entry };\r\n\r\n    newEntry.invalid = !validation.valid;\r\n\r\n    if (validation.valid || !validation.errorMessage || quietly) {\r\n        delete newEntry.errorMessage;\r\n    } else {\r\n        newEntry.errorMessage = validation.errorMessage;\r\n    }\r\n\r\n    return newEntry;\r\n}\r\n\r\n/**\r\n * Validates multiple entries and returns new entries with the validation results.\r\n *\r\n * @param entries The entries to validate.\r\n * @param validators The validators to use.\r\n * @param quietly If true, the entries' error messages will not be set.\r\n * @returns The validated entries.\r\n */\r\nexport function validateEntries<Question, Answer, Entry extends BaseFormEntry<Question, Answer>>(\r\n    entries: Entry[],\r\n    validators: Validator<Entry>[],\r\n    quietly?: boolean\r\n): Entry[] {\r\n    return entries.map(entry => validateEntry(entry, validators, quietly));\r\n}\r\n\r\n/**\r\n * Checks if the dom is visually empty. Empty is defined as no text content and no lists, tables, or images.\r\n *\r\n * @param dom The document to check.\r\n * @returns True if the dom is visually empty, false otherwise.\r\n */\r\nexport function isHtmlEmpty(dom: Document): boolean {\r\n    // If the text content is empty and there are no lists, tables, or images, then it's considered empty.\r\n    return !dom.body.textContent && dom.body.querySelector('ol, ul, table, img') === null;\r\n}\r\n\r\n/**\r\n * Checks if the dom has error files, which have data-type=file and data-file-error.\r\n *\r\n * @param dom The document to check.\r\n * @returns True if the dom has error files, false otherwise.\r\n */\r\nexport function hasErrorFiles(dom: Document): boolean {\r\n    return Boolean(dom.querySelector('a[data-type=file][data-file-error]'));\r\n}\r\n\r\n/**\r\n * Checks if the dom has uploading files, which have data-type=file but no href yet.\r\n *\r\n * @param dom The document to check.\r\n * @returns True if the dom has uploading files, false otherwise.\r\n */\r\nexport function hasUploadingFiles(dom: Document): boolean {\r\n    return Boolean(dom.querySelector('a[data-type=file]:not([href])'));\r\n}\r\n","export * from './src/index';\r\n\r\nimport { makeStyles as FluentUIV8MakeStyles, IStyle, Theme, UseStylesOptions } from '@fluentui/react';\r\n/**\r\n * Registers a css object, optionally as a function of the theme.\r\n *\r\n * @param styleOrFunction - Either a css javascript object, or a function which takes in `ITheme`\r\n * and returns a css javascript object.\r\n *\r\n */\r\ntype MakeStyleFunction = <\r\n    TStyleSet extends {\r\n        [key in keyof TStyleSet]: IStyle;\r\n    } = {\r\n        [key: string]: IStyle;\r\n    }\r\n>(\r\n    /**\r\n     * a function which takes in `ITheme`\r\n     */\r\n    styleOrFunction: TStyleSet | ((theme: Theme) => TStyleSet)\r\n) => (options?: UseStylesOptions) => {\r\n    [key in keyof TStyleSet]: string;\r\n};\r\n\r\nexport const makeStyles: MakeStyleFunction = FluentUIV8MakeStyles;\r\n","export * from './PeopleView';\r\nexport * from './PeopleView.types';\r\n","import { Icon, mergeStyles } from '@fluentui/react';\r\nimport React from 'react';\r\nimport { FormQuestion, FormStrings, QuestionDisplayType } from '../../../types';\r\nimport { getDisplayType } from '../../../utilities';\r\nimport { QuestionSettingsProps } from '../types';\r\nimport { useMockedFieldStyles } from './MockedField.styles';\r\n\r\nexport type MockedFieldProps = Omit<QuestionSettingsProps, 'onQuestionChange'>;\r\n\r\nexport function MockedField({ question, strings }: MockedFieldProps): JSX.Element | null {\r\n    const styles = useMockedFieldStyles();\r\n\r\n    const { hidden, placeholder, trailingIconName, multiline, ribbonIconNames } = React.useMemo(\r\n        () => getMockedFieldAppearance(question, strings),\r\n        [question, strings]\r\n    );\r\n\r\n    if (hidden) return null;\r\n\r\n    return (\r\n        <div className={mergeStyles(styles.root, multiline && styles.multiline)}>\r\n            {ribbonIconNames && (\r\n                <div className={styles.ribbon}>\r\n                    {ribbonIconNames.map(iconName => (\r\n                        <Icon className={styles.icon} key={iconName} iconName={iconName} />\r\n                    ))}\r\n                </div>\r\n            )}\r\n            <div className={styles.input}>\r\n                <span>{placeholder}</span>\r\n                {trailingIconName && <Icon className={styles.icon} iconName={trailingIconName} />}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\ninterface MockedFieldAppearance {\r\n    hidden?: boolean;\r\n    placeholder?: string;\r\n    trailingIconName?: string;\r\n    multiline?: boolean;\r\n    ribbonIconNames?: string[];\r\n}\r\n\r\nconst hiddenDisplayTypes = [QuestionDisplayType.MultipleChoice, QuestionDisplayType.SingleChoice];\r\nconst multilineDisplayTypes = [QuestionDisplayType.MultilineText, QuestionDisplayType.RichText];\r\nconst displayTypeTrailingIconNames: Partial<Record<QuestionDisplayType, string>> = {\r\n    [QuestionDisplayType.Date]: 'Calendar',\r\n    [QuestionDisplayType.Dropdown]: 'ChevronDown',\r\n};\r\nconst richTextFieldRibbonIconNames = ['Bold', 'Italic', 'Underline', 'Strikethrough', 'More'];\r\n\r\nfunction getMockedFieldAppearance(question: FormQuestion, strings: FormStrings): MockedFieldAppearance {\r\n    const displayType = getDisplayType(question);\r\n    if (hiddenDisplayTypes.includes(displayType)) return { hidden: true };\r\n    return {\r\n        placeholder: strings.questionMockedFieldDefaultPlaceholder(displayType),\r\n        trailingIconName: displayTypeTrailingIconNames[displayType],\r\n        multiline: multilineDisplayTypes.includes(displayType),\r\n        ...(displayType === QuestionDisplayType.RichText && { ribbonIconNames: richTextFieldRibbonIconNames }),\r\n    };\r\n}\r\n","import { Sanitizer } from '../types';\r\n\r\nexport const identitySanitizer: Sanitizer = html => html;\r\n","import { FontSizes, isContrastTheme, makeStyles } from '@addressbook/components-fluentui-teams-theme';\r\n\r\nexport const useRichTextFieldStyles = makeStyles(theme => ({\r\n    editorContainer: {\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        backgroundColor: isContrastTheme(theme.name) ? theme.palette.white : theme.palette.neutralLighter,\r\n        borderRadius: '4px',\r\n        borderWidth: '1px',\r\n        borderStyle: 'solid',\r\n        borderColor: isContrastTheme(theme.name) ? theme.palette.black : 'transparent',\r\n        overflow: 'hidden',\r\n    },\r\n    focusable: {\r\n        borderBottomWidth: isContrastTheme(theme.name) ? undefined : '2px',\r\n        '&:focus-within': {\r\n            borderBottomWidth: '2px',\r\n            borderBottomColor: isContrastTheme(theme.name) ? theme.palette.accent : theme.palette.themePrimary,\r\n        },\r\n    },\r\n    error: {\r\n        borderColor: theme.palette.redDark,\r\n    },\r\n    description: {\r\n        fontSize: FontSizes.size12,\r\n        marginBottom: '8px',\r\n    },\r\n    editor: {\r\n        flexGrow: 1,\r\n        boxSizing: 'border-box',\r\n        overflow: 'auto',\r\n        overflowWrap: 'break-word',\r\n        padding: '6px 12px',\r\n        cursor: 'text',\r\n\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        '.tiptap': {\r\n            // Layout and style the rich text field input area\r\n            flexGrow: 1,\r\n            boxShadow: 'none',\r\n            outline: 'none',\r\n\r\n            // Style the rich text field content\r\n            color: theme.palette.black,\r\n            a: {\r\n                color: theme.palette.themePrimary,\r\n            },\r\n            'p, h1, h2, h3, h4, h5, h6, pre, blockquote': {\r\n                marginBlock: 0,\r\n                padding: 0,\r\n            },\r\n            '[data-type=mention]': {\r\n                color: theme.palette.accent,\r\n            },\r\n\r\n            table: {\r\n                width: '100%',\r\n                tableLayout: 'fixed',\r\n                borderCollapse: 'collapse',\r\n\r\n                td: {\r\n                    border: `1px solid ${theme.palette.neutralSecondary}`,\r\n\r\n                    // Mitigate nested tables overflowing the parent cell\r\n                    overflow: 'auto',\r\n                },\r\n\r\n                th: {\r\n                    textAlign: 'inherit',\r\n                    backgroundColor: theme.palette.neutralLighter,\r\n                    border: `1px solid ${theme.palette.neutralSecondary}`,\r\n                },\r\n\r\n                '.selectedCell': {\r\n                    position: 'relative',\r\n                    ':after': {\r\n                        opacity: 0.2,\r\n                        backgroundColor: theme.palette.neutralSecondary,\r\n                        content: '\"\"',\r\n                        inset: 0,\r\n                        pointerEvents: 'none',\r\n                        position: 'absolute',\r\n                    },\r\n                },\r\n            },\r\n\r\n            // Style the rich text field placeholder\r\n            // An empty editor may contain several empty paragraphs or tables, so we need to ensure it is the only child\r\n            'p.is-editor-empty:first-child:last-child': {\r\n                position: 'relative',\r\n                '::before': {\r\n                    content: 'attr(data-placeholder)',\r\n                    color: isContrastTheme(theme.name) ? theme.palette.black : theme.palette.neutralPrimary,\r\n                    position: 'absolute',\r\n                    inset: 0,\r\n                    overflow: 'hidden',\r\n                    textOverflow: 'ellipsis',\r\n                    whiteSpace: 'nowrap',\r\n                },\r\n            },\r\n        },\r\n\r\n        '.tiptap[data-prefix]': {\r\n            '::before': {\r\n                content: 'attr(data-prefix) \" \"',\r\n                color: isContrastTheme(theme.name) ? theme.palette.black : theme.palette.neutralPrimary,\r\n            },\r\n            '>div:first-child, >p:first-child': {\r\n                display: 'inline',\r\n            },\r\n        },\r\n    },\r\n    errorMessage: {\r\n        color: theme.palette.redDark,\r\n        padding: '4px 12px',\r\n        fontSize: FontSizes.size12,\r\n    },\r\n}));\r\n","import { applyInterceptor, composeInterceptors } from '@addressbook/utilities-interceptors';\r\nimport { ServiceOperationError } from './error';\r\nimport { Fetch, ServiceInterceptor } from './types';\r\n\r\nexport interface ServiceOperationOptions {\r\n    baseUrl?: string;\r\n    fetch?: Fetch;\r\n    interceptors?: ServiceInterceptor[];\r\n}\r\n\r\nexport class ServiceOperation {\r\n    private baseUrl;\r\n    private fetch;\r\n\r\n    constructor({ baseUrl, fetch = window.fetch, interceptors = [] }: ServiceOperationOptions = {}) {\r\n        this.baseUrl = baseUrl;\r\n        this.fetch = interceptors.length ? applyInterceptor(composeInterceptors(interceptors), fetch) : fetch;\r\n    }\r\n\r\n    async request(url: string | URL, init?: RequestInit): Promise<Response> {\r\n        const request = new Request(new URL(url, this.baseUrl), init);\r\n        const response = await this.fetch(request);\r\n        if (!response.ok) throw new ServiceOperationError({ request, response });\r\n        return response;\r\n    }\r\n\r\n    async requestJson<T = unknown>(url: string | URL, init?: RequestInit): Promise<T> {\r\n        const response = await this.request(url, init);\r\n        return response.json();\r\n    }\r\n\r\n    async requestBlob(url: string | URL, init?: RequestInit): Promise<Blob> {\r\n        const response = await this.request(url, init);\r\n        return response.blob();\r\n    }\r\n}\r\n","import { mergeStyles } from '@fluentui/react';\r\nimport { NodeViewProps } from '@tiptap/core';\r\nimport { NodeViewContent, NodeViewWrapper } from '@tiptap/react';\r\nimport { isImageMime } from '@addressbook/utilities-core';\r\nimport React from 'react';\r\nimport { getCompactByExtension, getStringsByExtension } from '../utils';\r\nimport { defaultFileSession, FileSessions, isValidFileSession } from './sessions';\r\nimport { useFileNodeViewStyles } from './styles';\r\nimport { useDeleteNode, useUpdateAttributes } from './utils';\r\nimport { FallbackView } from './view.fallback';\r\nimport { ImageView } from './view.image';\r\n\r\nexport type FileNodeViewProps = NodeViewProps & {\r\n    node: {\r\n        attrs: FileNodeViewAttributes;\r\n    };\r\n};\r\n\r\ninterface FileNodeViewAttributes {\r\n    href: string | null;\r\n    target: string | null;\r\n    rel: string | null;\r\n    mime: string | null;\r\n    error: true | null;\r\n    key: string;\r\n}\r\n\r\nexport const FileNodeView: React.FC<FileNodeViewProps> = ({ editor, node, selected, extension }) => {\r\n    const strings = React.useMemo(() => getStringsByExtension(extension), [extension]);\r\n    const compact = React.useMemo(() => getCompactByExtension(extension), [extension]);\r\n\r\n    // Prepare variables for the node rendering\r\n    const name = node.textContent;\r\n    const { target, rel, mime, key } = node.attrs;\r\n    const isImage = Boolean(mime && isImageMime(mime));\r\n\r\n    // Prepare functions for node operations\r\n    const updateAttributes = useUpdateAttributes<FileNodeViewAttributes>({ editor, key });\r\n    const deleteNode = useDeleteNode({ editor, key });\r\n\r\n    // Derive the session from the extension storage\r\n    const sessions = extension.storage as FileSessions;\r\n    const [session, setSession] = React.useState(() => sessions.get(key) ?? defaultFileSession);\r\n\r\n    React.useEffect(\r\n        () =>\r\n            sessions.subscribe(key, session => {\r\n                setSession(session);\r\n\r\n                // Workaround for \"flushSync was called from inside a lifecycle method. React cannot flush when React is\r\n                // already rendering. Consider moving this call to a scheduler task or micro task.\"\r\n                // See https://github.com/ueberdosis/tiptap/issues/3764\r\n                queueMicrotask(() =>\r\n                    updateAttributes({ href: session.url ?? null, error: session.error ? true : null }, true)\r\n                );\r\n            }),\r\n        [key, sessions, updateAttributes]\r\n    );\r\n\r\n    // Ensure the session is valid\r\n    React.useEffect(() => {\r\n        if (isValidFileSession(session)) return;\r\n\r\n        // Workaround for \"flushSync was called from inside a lifecycle method. React cannot flush when React is\r\n        // already rendering. Consider moving this call to a scheduler task or micro task.\"\r\n        // See https://github.com/ueberdosis/tiptap/issues/3764\r\n        queueMicrotask(() => deleteNode(true));\r\n    }, [deleteNode, session]);\r\n\r\n    const remove = React.useMemo(\r\n        () => (editor.isEditable ? () => deleteNode() : undefined),\r\n        [deleteNode, editor.isEditable]\r\n    );\r\n\r\n    const styles = useFileNodeViewStyles();\r\n    const content = <NodeViewContent as='span' />;\r\n    return (\r\n        <NodeViewWrapper\r\n            as='span'\r\n            className={mergeStyles(\r\n                styles.root,\r\n                selected && 'selected',\r\n                session.error && styles.error,\r\n                isImage && styles.image\r\n            )}\r\n            data-drag-handle\r\n            contentEditable={false}>\r\n            {isImage ? (\r\n                <ImageView\r\n                    name={name}\r\n                    blob={session.blob}\r\n                    url={session.url}\r\n                    thumbnail={session.thumbnail}\r\n                    imageSize={session.imageSize}\r\n                    loading={session.loading}\r\n                    error={session.error}\r\n                    onRetry={session.retry}\r\n                    onRemove={remove}\r\n                    compact={compact}\r\n                    strings={strings}>\r\n                    {content}\r\n                </ImageView>\r\n            ) : (\r\n                <FallbackView\r\n                    href={session.url}\r\n                    target={target || undefined}\r\n                    rel={rel || undefined}\r\n                    thumbnail={session.thumbnail}\r\n                    loading={session.loading}>\r\n                    {content}\r\n                </FallbackView>\r\n            )}\r\n        </NodeViewWrapper>\r\n    );\r\n};\r\n","import { delay } from '@addressbook/utilities-core';\r\nimport { ServiceInterceptor } from '../types';\r\nimport { isServerErrorOrTooManyRequests, TestResponse } from './utilities';\r\n\r\nexport type Backoff = (retries: number, response?: Response) => number;\r\n\r\nexport interface RetryInterceptorOptions {\r\n    test?: TestResponse;\r\n    maxRetries?: number;\r\n    backoff?: Backoff;\r\n}\r\n\r\nconst defaultMaxRetries = 3;\r\n\r\n/**\r\n * Create a service interceptor that retries requests.\r\n *\r\n * @property test A function to test if the response should be retried.\r\n * @property maxRetries The maximum number of retries.\r\n * @property backoff A function to calculate the delay between retries, in milliseconds.\r\n * @returns An interceptor.\r\n */\r\nexport function createRetryInterceptor({\r\n    test = isServerErrorOrTooManyRequests,\r\n    maxRetries = defaultMaxRetries,\r\n    backoff,\r\n}: RetryInterceptorOptions = {}): ServiceInterceptor {\r\n    return async (request, proceed) => {\r\n        let retries = 0;\r\n        while (true) {\r\n            try {\r\n                const response = await proceed(request.clone());\r\n                if (test(response) && retries++ < maxRetries) {\r\n                    if (backoff) await delay(backoff(retries, response));\r\n                    continue;\r\n                }\r\n                return response;\r\n            } catch (error) {\r\n                if (retries++ < maxRetries) {\r\n                    if (backoff) await delay(backoff(retries));\r\n                    continue;\r\n                }\r\n                throw error;\r\n            }\r\n        }\r\n    };\r\n}\r\n","/*\r\n *  Copyright © Microsoft Corporation. All rights reserved.\r\n */\r\n\r\nimport { FontWeights } from '@fluentui/react';\r\nimport { FontSizes, makeStyles } from '@addressbook/components-fluentui-teams-theme';\r\n\r\nexport const CollapsedClassName = 'is-collapsed';\r\nexport const useCollapsingAreaStyles = makeStyles(theme => ({\r\n    title: {\r\n        height: '2rem',\r\n        width: '100%',\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        justifyContent: 'space-between',\r\n        cursor: 'pointer',\r\n        boxSizing: 'border-box',\r\n    },\r\n    button: {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        textAlign: 'start',\r\n        padding: 0,\r\n        border: 'none',\r\n        background: 'transparent',\r\n    },\r\n    icon: {\r\n        height: '100%',\r\n        paddingRight: '4px',\r\n        color: theme.palette.black,\r\n    },\r\n    text: {\r\n        color: theme.palette.black,\r\n        fontSize: FontSizes.size12,\r\n        fontWeight: FontWeights.bold,\r\n        flex: 1,\r\n    },\r\n    collapsibleRegion: {\r\n        [`.${CollapsedClassName} &`]: {\r\n            display: 'none',\r\n        },\r\n    },\r\n}));\r\n","/*\r\n *  Copyright © Microsoft Corporation. All rights reserved.\r\n */\r\n\r\nimport React from 'react';\r\nimport { mergeStyles } from '@fluentui/react';\r\nimport { ModalContent, ModalContentProps } from '../CommonModal/ModalContent';\r\nimport { useTaskModuleV2Styles } from './TaskModuleV2.styles';\r\n\r\nexport type TaskModuleV2Props = Omit<ModalContentProps, 'onDismiss'>;\r\nexport const TaskModuleV2: React.FC<TaskModuleV2Props> = props => {\r\n    const styles = useTaskModuleV2Styles();\r\n    const contentMergedStyles = mergeStyles(styles.content, props.contentClassName);\r\n    const initialProps: TaskModuleV2Props = {\r\n        contentClassName: contentMergedStyles,\r\n        headerClassName: styles.header,\r\n    };\r\n\r\n    return (\r\n        <div className={styles.root}>\r\n            <ModalContent {...props} {...initialProps} />\r\n        </div>\r\n    );\r\n};\r\n","import { FocusZone } from '@fluentui/react';\r\nimport React from 'react';\r\nimport { FieldProps } from '../../../abstractions';\r\nimport { FormContext, FormEntry, FormFeature } from '../../types';\r\nimport { usePreviewingDecoratorStyles } from './PreviewingDecorator.styles';\r\n\r\nexport function PreviewingDecorator<CoercedEntry extends FormEntry>({\r\n    children,\r\n}: React.PropsWithChildren<FieldProps<FormEntry, FormContext, FormFeature, CoercedEntry>>): JSX.Element {\r\n    const styles = usePreviewingDecoratorStyles();\r\n\r\n    return (\r\n        <FocusZone className={styles.root} disabled>\r\n            {children}\r\n            <div className={styles.mask} />\r\n        </FocusZone>\r\n    );\r\n}\r\n","import { makeStyles as FluentUIV8MakeStyles, IStyle, Theme } from '@fluentui/react';\r\n\r\nexport const makeStyles: <\r\n    TStyleSet extends { [key in keyof TStyleSet]: IStyle } /* #__PURE__ */ = { [key: string]: IStyle }\r\n>(\r\n    styleFunction: ((theme: Theme) => TStyleSet) | TStyleSet\r\n) => () => { [key in keyof TStyleSet]: string } = FluentUIV8MakeStyles;\r\n","import { app } from '@microsoft/teams-js';\r\nimport { TeamsError } from './error';\r\n\r\nlet teamsInitializationPromise: Promise<void>;\r\n\r\n/**\r\n * @see https://github.com/MicrosoftDocs/msteams-docs/issues/11221\r\n * @see https://github.com/OfficeDev/microsoft-teams-library-js/blob/ecbd5626e25381d3e0f704164836258d91d75c6b/packages/teams-js/src/artifactsForCDN/validDomains.json#L4\r\n */\r\nconst additionalMessageOrigins = 'https://teams.microsoftonline.cn';\r\nfunction ensureTeamsInitializationPromise(): Promise<void> {\r\n    return (teamsInitializationPromise ??= app.initialize([additionalMessageOrigins]));\r\n}\r\n\r\ntype OrPromise<T> = T | Promise<T>;\r\n\r\n/**\r\n * Ensure that the Teams SDK is initialized before calling the callback.\r\n *\r\n * @param callback The callback to call after initialization.\r\n * @returns A promise that resolves with the result of the callback.\r\n */\r\nexport async function ensureByTeamsInitialization<Result>(callback: () => OrPromise<Result>): Promise<Result> {\r\n    try {\r\n        await ensureTeamsInitializationPromise();\r\n        return await callback();\r\n    } catch (error) {\r\n        throw TeamsError.from(error);\r\n    }\r\n}\r\n\r\n/**\r\n * A higher-order function that guards a callback with Teams SDK initialization.\r\n *\r\n * @param callback The callback to guard.\r\n * @returns A guarded callback.\r\n */\r\nexport function guardByTeamsInitialization<Result, Params extends unknown[]>(\r\n    callback: (...args: Params) => OrPromise<Result>\r\n): (...args: Params) => Promise<Result> {\r\n    return (...args) => ensureByTeamsInitialization(() => callback(...args));\r\n}\r\n\r\n/**\r\n * A function that does nothing.\r\n */\r\nexport function noop(): void {\r\n    // Noop\r\n}\r\n","import { Checkbox, FocusZone, ICheckboxProps, TextField, mergeStyles } from '@fluentui/react';\r\nimport React from 'react';\r\nimport { ChoiceAppearance, ChoiceEntry, FormContext, FormEntry, FormMode, FormQuestionType } from '../../types';\r\nimport {\r\n    useCheckboxStyles,\r\n    useChoiceChange,\r\n    useChosenAndOther,\r\n    useOtherFieldStyles,\r\n    useShuffled,\r\n} from '../../utilities';\r\nimport { BaseDescriptor, FieldComponentTypeFactory } from './BaseDescriptor';\r\n\r\nconst containerClassName = mergeStyles({\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    gap: '12px',\r\n    paddingInline: '12px',\r\n});\r\n\r\nconst defaultOptions = {\r\n    otherPlaceholder: 'Other',\r\n};\r\n\r\nexport type CheckboxChoiceDescriptorOptions = Partial<typeof defaultOptions>;\r\n\r\nconst makeFieldComponent: FieldComponentTypeFactory<\r\n    CheckboxChoiceDescriptorOptions & typeof defaultOptions,\r\n    ChoiceEntry\r\n> =\r\n    ({ otherPlaceholder }) =>\r\n    ({ entry, onEntryChange, delegatedProps, showPlaceholder }) => {\r\n        const { question, answer } = entry;\r\n        const { choices, shuffle, allowOther } = question;\r\n\r\n        const shuffledChoices = useShuffled({ array: choices, enabled: shuffle && !delegatedProps.readOnly });\r\n        const onChange = useChoiceChange(entry, onEntryChange);\r\n        const { chosen, otherKey, otherValue, otherSelected, otherFieldRef } = useChosenAndOther(\r\n            choices,\r\n            answer.content\r\n        );\r\n\r\n        const keys = allowOther ? [...shuffledChoices, otherKey] : shuffledChoices;\r\n\r\n        const checkboxStyles = useCheckboxStyles();\r\n        const otherFieldStyles = useOtherFieldStyles();\r\n\r\n        const onRenderOtherField: ICheckboxProps['onRenderLabel'] = checkboxProps => (\r\n            <TextField\r\n                componentRef={otherFieldRef}\r\n                value={checkboxProps?.label ?? ''}\r\n                onChange={onChange && ((_, newValue) => onChange(chosen, newValue))}\r\n                placeholder={showPlaceholder ? otherPlaceholder : undefined}\r\n                readOnly={delegatedProps.readOnly}\r\n                invalid={otherSelected && delegatedProps.invalid}\r\n                className='ms-Checkbox-text'\r\n                styles={otherFieldStyles}\r\n            />\r\n        );\r\n\r\n        return (\r\n            <FocusZone {...delegatedProps} className={containerClassName} role='listbox'>\r\n                {keys.map(key => (\r\n                    <Checkbox\r\n                        key={key}\r\n                        label={key === otherKey ? otherValue : key}\r\n                        checked={key === otherKey ? otherSelected : chosen.includes(key)}\r\n                        onChange={\r\n                            onChange &&\r\n                            ((_, checked) => {\r\n                                if (key === otherKey) {\r\n                                    if (checked) otherFieldRef.current?.focus();\r\n                                    onChange(chosen, checked ? '' : undefined);\r\n                                } else {\r\n                                    // Add or remove the choice from the answer, depending on the checked state.\r\n                                    const newChosen = checked ? [...chosen, key] : chosen.filter(c => c !== key);\r\n                                    onChange(newChosen, otherValue);\r\n                                }\r\n                            })\r\n                        }\r\n                        onRenderLabel={key === otherKey ? onRenderOtherField : undefined}\r\n                        inputProps={{ role: 'option' }}\r\n                        styles={checkboxStyles}\r\n                    />\r\n                ))}\r\n            </FocusZone>\r\n        );\r\n    };\r\n\r\n/**\r\n * The descriptor that renders a group of checkboxes for choice entries with checkbox appearance.\r\n */\r\nexport class CheckboxChoiceDescriptor extends BaseDescriptor<ChoiceEntry> {\r\n    protected readonly FieldComponent;\r\n\r\n    constructor(options?: CheckboxChoiceDescriptorOptions) {\r\n        super();\r\n        this.FieldComponent = makeFieldComponent({ ...defaultOptions, ...options });\r\n    }\r\n\r\n    /**\r\n     * Tests whether the entry is a choice entry with checkbox appearance, and the form is not in viewing mode.\r\n     *\r\n     * @param entry The entry to test.\r\n     * @param context The form context.\r\n     * @returns Passes the test or not.\r\n     */\r\n    test(entry: FormEntry, context: FormContext): entry is ChoiceEntry {\r\n        return (\r\n            entry.question.type === FormQuestionType.Choice &&\r\n            entry.question.appearance === ChoiceAppearance.Checkbox &&\r\n            context.mode !== FormMode.Viewing\r\n        );\r\n    }\r\n}\r\n","/*\r\n *  Copyright © Microsoft Corporation. All rights reserved.\r\n */\r\n\r\nimport React from 'react';\r\nimport { Stack } from '@fluentui/react';\r\nimport { CommonIcon } from '../CommonIcon';\r\nimport { useAppHeaderStyles } from './AppHeader.styles';\r\n\r\nexport interface AppHeaderProps {\r\n    icon?: string | JSX.Element;\r\n    accentColor?: string;\r\n    title?: string;\r\n    items?: JSX.Element;\r\n    farItems?: JSX.Element;\r\n    moduleName?: string;\r\n}\r\n\r\nexport const AppHeader: React.FC<AppHeaderProps> = ({ items, farItems, icon, accentColor, title }) => {\r\n    const headerStyles = useAppHeaderStyles();\r\n    return (\r\n        <Stack as='header' horizontal disableShrink horizontalAlign='space-between' className={headerStyles.root}>\r\n            <CommonIcon\r\n                icon={icon}\r\n                iconBackgroundColor={accentColor}\r\n                title={title}\r\n                titleAs='h1'\r\n                styles={{ title: headerStyles.text }}\r\n            />\r\n            <Stack verticalAlign='center' grow>\r\n                {items}\r\n            </Stack>\r\n            <Stack horizontalAlign='center' verticalAlign='center'>\r\n                {farItems}\r\n            </Stack>\r\n        </Stack>\r\n    );\r\n};\r\n","export * from './context';\r\nexport * from './entries';\r\nexport * from './feature';\r\n","import { mergeStyles } from '@fluentui/react';\r\nimport { Editor } from '@tiptap/core';\r\nimport { RichTextFieldTableSize } from '../../types';\r\nimport { Link } from '../InsertLink';\r\n\r\nexport function getCurrentLink(editor: Editor): Link {\r\n    const url = editor.isActive('link') ? editor.getAttributes('link').href : '';\r\n    const selection = editor.state.selection;\r\n    const displayText = editor.state.doc.textBetween(selection.from, selection.to);\r\n    return { url, displayText };\r\n}\r\n\r\nexport const maxTableSize: RichTextFieldTableSize = { rows: 6, cols: 6 };\r\n\r\nexport const menuCalloutClassName = mergeStyles({\r\n    '.ms-Callout-main': {\r\n        padding: 0,\r\n    },\r\n    '.ms-ContextualMenu': {\r\n        minWidth: 0,\r\n        width: 'auto',\r\n    },\r\n});\r\n\r\nexport const colorMenuCalloutClassName = mergeStyles(menuCalloutClassName, {\r\n    '.ms-ContextualMenu-list': {\r\n        display: 'flex',\r\n        flexWrap: 'wrap',\r\n        alignItems: 'center',\r\n        justifyContent: 'center',\r\n        gap: '12px',\r\n        padding: '8px',\r\n    },\r\n});\r\n\r\nexport function hasExtensionByName(editor: Editor, name: string): boolean {\r\n    return editor.extensionManager.extensions.some(extension => extension.name === name);\r\n}\r\n","import { menus } from '@microsoft/teams-js';\r\nimport { useEffect } from 'react';\r\nimport { noop } from '../utils';\r\nimport { setNavBarMenu } from '../wrappers';\r\n\r\nexport interface TeamsNavBarMenuItem {\r\n    id: string;\r\n    title?: string;\r\n    icon?: string;\r\n    disabled?: boolean;\r\n    selected?: boolean;\r\n    onClick?: () => void;\r\n}\r\n\r\nexport function useTeamsNavBarMenu(items: TeamsNavBarMenuItem[]): void {\r\n    useEffect(() => update(items), [items]);\r\n    useEffect(() => () => update([]), []);\r\n}\r\n\r\nfunction update(items: TeamsNavBarMenuItem[]): void {\r\n    setNavBarMenu(items.map(mapTeamsNavBarMenuItem), id => dispatchTeamsNavBarMenuItemOnClick(id, items)).catch(noop);\r\n}\r\n\r\nfunction mapTeamsNavBarMenuItem(item: TeamsNavBarMenuItem): menus.MenuItem {\r\n    return {\r\n        id: item.id,\r\n        title: item.title ?? '',\r\n        icon: item.icon ?? '',\r\n        enabled: !item.disabled,\r\n        selected: item.selected ?? false,\r\n    };\r\n}\r\n\r\nfunction dispatchTeamsNavBarMenuItemOnClick(id: string, menuItems: TeamsNavBarMenuItem[]): boolean {\r\n    const item = menuItems.find(item => item.id === id);\r\n\r\n    if (!item || !item.onClick) return false;\r\n\r\n    item.onClick();\r\n    return true;\r\n}\r\n","import { makeStyles } from '@addressbook/components-fluentui-teams-theme';\r\n\r\nexport const useLoadingIndicatorStyles = makeStyles(() => ({\r\n    root: {\r\n        position: 'relative',\r\n    },\r\n    itemProgress: {\r\n        position: 'absolute',\r\n        padding: 0,\r\n        top: 1,\r\n        width: '100%',\r\n    },\r\n}));\r\n","import {\r\n    ICheckboxStyles,\r\n    IChoiceGroupOptionStyles,\r\n    IChoiceGroupStyles,\r\n    IDatePickerStyles,\r\n    IDropdownStyles,\r\n    ITextFieldStyles,\r\n    IToggleStyles,\r\n} from '@fluentui/react';\r\nimport { FontSizes, isContrastTheme, makeStyles } from '@addressbook/components-fluentui-teams-theme';\r\n\r\nexport const useRichTextFieldStyles = makeStyles({\r\n    root: {\r\n        '--min-height': '160px',\r\n    },\r\n    compact: {\r\n        '--min-height': '120px',\r\n    },\r\n    minHeightConstrained: {\r\n        minHeight: 'var(--min-height)',\r\n    },\r\n});\r\n\r\nexport const useTextFieldStyles = makeStyles<Pick<ITextFieldStyles, 'fieldGroup' | 'field' | 'wrapper'>>(theme => ({\r\n    fieldGroup: {\r\n        '.ms-TextField-wrapper &.ms-TextField-fieldGroup': {\r\n            backgroundColor: isContrastTheme(theme.name) ? theme.palette.white : theme.palette.neutralLighter,\r\n            ':has(input)': {\r\n                height: '32px',\r\n            },\r\n            ':has([aria-invalid=true])': {\r\n                borderWidth: '1px',\r\n                borderStyle: 'solid',\r\n                borderColor: theme.palette.redDark,\r\n            },\r\n            '.is-active &:not(:has([aria-invalid=true]))': {\r\n                borderBottomColor: isContrastTheme(theme.name) ? theme.palette.accent : theme.palette.themePrimary,\r\n            },\r\n        },\r\n    },\r\n    field: {\r\n        '::placeholder': {\r\n            color: isContrastTheme(theme.name) ? theme.palette.black : theme.palette.neutralPrimary,\r\n        },\r\n    },\r\n    wrapper: {\r\n        '.ms-Label': {\r\n            fontSize: `${FontSizes.size14} !important`,\r\n            color: theme.palette.neutralDark,\r\n            fontWeight: 600,\r\n            padding: 0,\r\n            paddingBottom: '4px',\r\n        },\r\n    },\r\n}));\r\n\r\nexport const useCheckboxStyles = makeStyles<Pick<ICheckboxStyles, 'root' | 'checkbox' | 'label' | 'text'>>(theme => ({\r\n    root: {\r\n        '&.ms-Checkbox': {\r\n            padding: 0,\r\n        },\r\n    },\r\n    checkbox: {\r\n        marginInlineEnd: '12px',\r\n        borderColor: theme.palette.neutralDark,\r\n    },\r\n    label: {\r\n        minWidth: 0,\r\n    },\r\n    text: {\r\n        marginInlineStart: 0,\r\n        overflowWrap: 'break-word',\r\n        minWidth: 0,\r\n    },\r\n}));\r\n\r\nexport const useChoiceGroupStyles = makeStyles<Pick<IChoiceGroupStyles, 'flexContainer'>>({\r\n    flexContainer: {\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        gap: '12px',\r\n        paddingInline: '12px',\r\n\r\n        // By default the input stretches to the full width of the container and accepts clicks.\r\n        // We want to prevent that and solely rely on the label for the click.\r\n        '.ms-ChoiceField-input': {\r\n            width: 0,\r\n            height: 0,\r\n        },\r\n    },\r\n});\r\n\r\nexport const useChoiceGroupOptionStyles = makeStyles<\r\n    Pick<IChoiceGroupOptionStyles, 'root' | 'choiceFieldWrapper' | 'field'>\r\n>(theme => ({\r\n    root: {\r\n        margin: 0,\r\n        minHeight: '20px',\r\n    },\r\n    choiceFieldWrapper: {\r\n        minWidth: 0,\r\n    },\r\n    field: {\r\n        '&.ms-ChoiceField-field': {\r\n            display: 'block',\r\n            // Make the radio button centered vertically\r\n            '::before, ::after': {\r\n                top: '50%',\r\n                transform: 'translateY(-50%)',\r\n            },\r\n            '::before': {\r\n                width: '16px',\r\n                height: '16px',\r\n                backgroundColor: 'transparent',\r\n            },\r\n            '::after': {\r\n                insetInlineStart: '3px',\r\n                width: '10px',\r\n                height: '10px',\r\n            },\r\n            ':hover': isContrastTheme(theme.name) && {\r\n                '::before': {\r\n                    borderColor: theme.palette.accent,\r\n                },\r\n                '::after': {\r\n                    border: 'none',\r\n                    backgroundColor: theme.palette.accent,\r\n                },\r\n            },\r\n        },\r\n        '.ms-ChoiceFieldLabel': {\r\n            display: 'block',\r\n            paddingInlineStart: '28px',\r\n            overflowWrap: 'break-word',\r\n        },\r\n    },\r\n}));\r\n\r\nexport const useDropdownStyles = makeStyles<Pick<IDropdownStyles, 'dropdown' | 'title' | 'label'>>(theme => ({\r\n    dropdown: {\r\n        backgroundColor: isContrastTheme(theme.name) ? theme.palette.white : theme.palette.neutralLighter,\r\n        '&.ms-Dropdown[aria-invalid=true]': {\r\n            borderWidth: '1px',\r\n            borderStyle: 'solid',\r\n            borderColor: theme.palette.redDark,\r\n        },\r\n        '&.ms-Dropdown:not([aria-invalid=true])': {\r\n            ':focus, .is-open': {\r\n                borderBottomColor: isContrastTheme(theme.name) ? theme.palette.accent : theme.palette.themePrimary,\r\n            },\r\n        },\r\n    },\r\n    title: {\r\n        '&.ms-Dropdown-titleIsPlaceHolder': {\r\n            color: isContrastTheme(theme.name) ? theme.palette.black : theme.palette.neutralPrimary,\r\n        },\r\n    },\r\n    label: {\r\n        '&.ms-Label': {\r\n            fontSize: FontSizes.size14,\r\n            color: theme.palette.neutralDark,\r\n            fontWeight: 600,\r\n            padding: 0,\r\n            paddingBottom: '4px',\r\n        },\r\n    },\r\n}));\r\n\r\nexport const useOtherFieldStyles = makeStyles<Pick<ITextFieldStyles, 'wrapper' | 'fieldGroup' | 'field'>>(theme => ({\r\n    wrapper: {\r\n        marginInlineStart: '-6px',\r\n    },\r\n    fieldGroup: {\r\n        '.ms-TextField-wrapper &.ms-TextField-fieldGroup': {\r\n            backgroundColor: isContrastTheme(theme.name) ? theme.palette.white : theme.palette.neutralLighter,\r\n            ':has([aria-invalid=true])': {\r\n                borderWidth: '1px',\r\n                borderStyle: 'solid',\r\n                borderColor: theme.palette.redDark,\r\n            },\r\n            '.is-active &:not(:has([aria-invalid=true]))': {\r\n                borderBottomColor: isContrastTheme(theme.name) ? theme.palette.accent : theme.palette.themePrimary,\r\n            },\r\n        },\r\n    },\r\n    field: {\r\n        height: '28px',\r\n        paddingInline: '6px',\r\n        '::placeholder': {\r\n            color: isContrastTheme(theme.name) ? theme.palette.black : theme.palette.neutralPrimary,\r\n        },\r\n    },\r\n}));\r\n\r\nexport const useDatePickerStyles = makeStyles<Pick<IDatePickerStyles, 'statusMessage' | 'textField'>>(theme => ({\r\n    statusMessage: {\r\n        display: 'none',\r\n    },\r\n    textField: {\r\n        '&.ms-TextField .ms-TextField-wrapper .ms-TextField-fieldGroup': {\r\n            backgroundColor: isContrastTheme(theme.name) ? theme.palette.white : theme.palette.neutralLighter,\r\n            ':has([aria-invalid=true])': {\r\n                borderWidth: '1px',\r\n                borderStyle: 'solid',\r\n                borderColor: theme.palette.redDark,\r\n            },\r\n            ':not(:has([aria-invalid=true]))': {\r\n                ':focus, .is-open': {\r\n                    borderBottomColor: isContrastTheme(theme.name) ? theme.palette.accent : theme.palette.themePrimary,\r\n                },\r\n            },\r\n            '.ms-TextField-field::placeholder, .ms-TextField-field span': {\r\n                color: isContrastTheme(theme.name) ? theme.palette.black : theme.palette.neutralPrimary,\r\n            },\r\n        },\r\n    },\r\n}));\r\n\r\nexport const useToggleStyles = makeStyles<Pick<IToggleStyles, 'root' | 'label'>>({\r\n    root: {\r\n        margin: 0,\r\n        gap: '12px',\r\n    },\r\n    label: {\r\n        padding: 0,\r\n        margin: 0,\r\n    },\r\n});\r\n\r\nexport const fieldClassNames = '.ms-TextField-fieldGroup, .ms-Dropdown, .ms-RichTextField';\r\n","import React from 'react';\r\nimport { IconButton, PrimaryButton, Stack, Text } from '@fluentui/react';\r\nimport { CommonIcon } from '../CommonIcon';\r\nimport { useContentStyles } from './ContentCopyRequestModal.styles';\r\n\r\nexport type ContentCopyRequestProps = React.PropsWithChildren<{\r\n    copyRequestModalHeaderTitle: string;\r\n    copyRequestModalCloseButton: string;\r\n    copyRequestModalCopyButton: string;\r\n    linkTargetTitle: string;\r\n    linkPermissionSettingText: string;\r\n    onDismiss?: () => void;\r\n    LinkPermissionSettingIcon: JSX.Element;\r\n    linkGenerateAndCopy?: () => void;\r\n}>;\r\nexport const ContentCopyRequestModalContent: React.FC<ContentCopyRequestProps> = ({\r\n    copyRequestModalHeaderTitle,\r\n    copyRequestModalCloseButton,\r\n    copyRequestModalCopyButton,\r\n    linkTargetTitle,\r\n    linkPermissionSettingText,\r\n    onDismiss,\r\n    LinkPermissionSettingIcon,\r\n    linkGenerateAndCopy,\r\n}) => {\r\n    const styles = useContentStyles();\r\n\r\n    return (\r\n        <>\r\n            <Stack horizontal horizontalAlign='space-between' role='alert' className={styles.header}>\r\n                <CommonIcon\r\n                    titleAs='h1'\r\n                    className={styles.headerProperty}\r\n                    title={copyRequestModalHeaderTitle}\r\n                    description={linkTargetTitle}\r\n                />\r\n                {onDismiss && (\r\n                    <IconButton\r\n                        iconProps={{ iconName: 'Cancel' }}\r\n                        ariaLabel={copyRequestModalCloseButton}\r\n                        title={copyRequestModalCloseButton}\r\n                        onClick={onDismiss}\r\n                    />\r\n                )}\r\n            </Stack>\r\n            <div className={styles.footer}>\r\n                <Stack horizontal className={styles.linkPermissionSetting}>\r\n                    <Stack horizontalAlign='center' className={styles.linkPermissionSettingIcon}>\r\n                        {LinkPermissionSettingIcon}\r\n                    </Stack>\r\n                    <Text block className={styles.linkPermissionSettingTextStyles}>\r\n                        {linkPermissionSettingText}\r\n                    </Text>\r\n                </Stack>\r\n                <PrimaryButton primary text={copyRequestModalCopyButton} onClick={linkGenerateAndCopy} />\r\n            </div>\r\n        </>\r\n    );\r\n};\r\n","import { FormConstants } from '../types';\r\n\r\nexport const defaultFormConstants: FormConstants = {\r\n    maxEntries: Infinity,\r\n    maxTitleLength: Infinity,\r\n    maxSubtitleLength: Infinity,\r\n    initialChoices: 2,\r\n    minChoices: 1,\r\n    maxChoices: Infinity,\r\n    maxChoiceLength: Infinity,\r\n};\r\n","import { ServiceOperation, ServiceOperationOptions, ServiceResourceLocator } from '@addressbook/services-core';\r\nimport { GraphRootResource } from './resources';\r\n\r\nexport type GraphServiceClientOptions = ServiceOperationOptions;\r\n\r\n/**\r\n * A service client for the Microsoft Graph API.\r\n *\r\n * @see https://learn.microsoft.com/graph/api/overview\r\n */\r\nexport class GraphServiceClient extends GraphRootResource {\r\n    constructor(operationOptions: GraphServiceClientOptions = {}) {\r\n        super(new ServiceOperation(operationOptions), ServiceResourceLocator.root);\r\n    }\r\n}\r\n","import { makeStyles, FontSizes, isContrastTheme } from '@addressbook/components-fluentui-teams-theme';\r\n\r\nexport const useInsertTableStyles = makeStyles(theme => ({\r\n    root: {\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        gap: '8px',\r\n        padding: '16px',\r\n    },\r\n    header: {\r\n        fontSize: FontSizes.size14,\r\n        fontWeight: 600,\r\n    },\r\n    table: {\r\n        display: 'grid',\r\n        gap: '2px',\r\n    },\r\n    cell: {\r\n        width: '16px',\r\n        height: '16px',\r\n        cursor: 'pointer',\r\n        backgroundColor: 'transparent',\r\n        border: `1px solid ${isContrastTheme(theme.name) ? theme.palette.black : theme.palette.neutralPrimary}`,\r\n    },\r\n    selecting: {\r\n        backgroundColor: theme.palette.themePrimary,\r\n    },\r\n}));\r\n","import React from 'react';\r\nimport { FormFragment } from './FormFragment';\r\nimport { BaseFormContext, BaseFormFeature, FormProps } from './types';\r\n\r\n/**\r\n * A form is responsible for rendering the form entries with the given context and feature.\r\n * It uses the comparator to determine the order of the entries and the key extractor to extract a unique key from each\r\n * entry, and find the appropriate descriptor to render the entries.\r\n */\r\nexport function Form<\r\n    Entry,\r\n    Context extends BaseFormContext<Entry>,\r\n    Feature extends BaseFormFeature<Entry, Context, Feature>\r\n>(props: FormProps<Context, Feature>): JSX.Element | null {\r\n    const { context, feature } = props;\r\n    const { entries } = context;\r\n    const { comparator, keyExtractor, trailingRender } = feature;\r\n\r\n    const sortedIndices = React.useMemo(\r\n        () => Array.from(entries.keys()).sort((i, j) => comparator(entries[i], entries[j])),\r\n        [comparator, entries]\r\n    );\r\n\r\n    return (\r\n        <>\r\n            {sortedIndices.map(index => (\r\n                <FormFragment<Entry, Context, Feature> key={keyExtractor(entries[index])} {...props} index={index} />\r\n            ))}\r\n            {trailingRender(props)}\r\n        </>\r\n    );\r\n}\r\n","import { ServiceOperation, ServiceResourceLocator } from '@addressbook/services-core';\r\nimport { DirectoryObject, Presence, User } from '@microsoft/microsoft-graph-types';\r\nimport { ProfilePhotoSize } from '../types';\r\nimport { GraphDriveResource } from './drive';\r\nimport { GraphProfilePhotoResource } from './profile-photo';\r\n\r\n/**\r\n * The user resource.\r\n *\r\n * @see https://learn.microsoft.com/graph/api/resources/user\r\n */\r\nexport class GraphUserResource {\r\n    constructor(private operation: ServiceOperation, private locator: ServiceResourceLocator) {}\r\n\r\n    /**\r\n     * Navigates to the drive resource.\r\n     *\r\n     * @returns The drive resource.\r\n     * @see https://learn.microsoft.com/graph/api/drive-get\r\n     */\r\n    get drive(): GraphDriveResource {\r\n        return new GraphDriveResource(this.operation, this.locator.extend('drive'));\r\n    }\r\n\r\n    /**\r\n     * Navigates to the profile photo resource.\r\n     *\r\n     * @returns The profile photo resource.\r\n     * @see https://learn.microsoft.com/graph/api/profilephoto-get\r\n     */\r\n    get photo(): GraphProfilePhotoResource {\r\n        return new GraphProfilePhotoResource(this.operation, this.locator.extend('photo'));\r\n    }\r\n\r\n    /**\r\n     * Navigates to the profile photo resource by size.\r\n     *\r\n     * @param size The profile photo size.\r\n     * @returns The profile photo resource.\r\n     * @see https://learn.microsoft.com/graph/api/profilephoto-get\r\n     */\r\n    photos(size: ProfilePhotoSize): GraphProfilePhotoResource {\r\n        return new GraphProfilePhotoResource(this.operation, this.locator.extend('photos', `${size}x${size}`));\r\n    }\r\n\r\n    /**\r\n     * Get Presence of the user.\r\n     *\r\n     * @returns The presence of the user.\r\n     * @see https://learn.microsoft.com/en-us/graph/api/presence-get\r\n     */\r\n    async getPresence(signal?: AbortSignal): Promise<string> {\r\n        const url = `/v1.0/${this.locator.path}/presence`;\r\n        const response = await this.operation.requestJson<Presence>(url, { signal });\r\n\r\n        return response.availability ?? 'PresenceUnknown'; // Possible values are Available, AvailableIdle, Away, BeRightBack, Busy, BusyIdle, DoNotDisturb, Offline, PresenceUnknown\r\n    }\r\n\r\n    /**\r\n     * Get Presence of the user.\r\n     *\r\n     * @returns The presence of the user.\r\n     * @see https://learn.microsoft.com/en-us/graph/api/orgcontact-get-manager\r\n     */\r\n    async getManager(signal?: AbortSignal): Promise<User> {\r\n        const url = `/v1.0/${this.locator.path}/manager`;\r\n        const response = await this.operation.requestJson<DirectoryObject>(url, { signal });\r\n        console.log('url:', url);\r\n        console.log('response:', response);\r\n        return response;\r\n    }\r\n\r\n    /**\r\n     * Gets my site URL of the user.\r\n     *\r\n     * @param signal The abort signal.\r\n     * @returns The my site URL.\r\n     * @see https://learn.microsoft.com/graph/api/user-get\r\n     */\r\n    async getMySite(signal?: AbortSignal): Promise<string> {\r\n        const url = `/v1.0/${this.locator.path}?$select=mySite`;\r\n        const response = await this.operation.requestJson<User>(url, { signal });\r\n        return response.mySite ?? '';\r\n    }\r\n}\r\n","import { BaseFormFeature } from '../../abstractions';\r\nimport { FormContext } from './context';\r\nimport { FormEntry, FormQuestion, TextNumberRestrictionType, TextNumberRestrictionValueKey } from './entries';\r\n\r\n/**\r\n * The success type of a validation result.\r\n */\r\nexport interface ValidationSuccess {\r\n    valid: true;\r\n}\r\n\r\n/**\r\n * The failure type of a validation result.\r\n */\r\nexport interface ValidationFailure {\r\n    valid: false;\r\n    errorMessage?: string;\r\n    preventChange?: boolean;\r\n}\r\n\r\n/**\r\n * The result of a validation, which can be either a success or a failure.\r\n */\r\nexport type Validation = ValidationSuccess | ValidationFailure;\r\n\r\n/**\r\n * A validator is a function that validates a form entry.\r\n */\r\nexport interface Validator<Entry> {\r\n    validate(entry: Entry): Validation;\r\n}\r\n\r\n/**\r\n * A sanitizer is a function that sanitizes HTML, to ensure the rich text title or subtitle is safe to render.\r\n *\r\n * @param html The HTML to sanitize.\r\n * @returns The sanitized HTML.\r\n */\r\nexport type Sanitizer = (html: string) => string;\r\n\r\n/**\r\n * An ID generator is a function that generates a unique ID, which is used for form questions.\r\n *\r\n * @returns The generated ID.\r\n */\r\nexport type IdGenerator = () => string;\r\n\r\n/**\r\n * An order generator is a function that generates the order of a form question.\r\n *\r\n * @param prevOrder The order of the previous question. Undefined if the question is the first question.\r\n * @param nextOrder The order of the next question. Undefined if the question is the last question.\r\n * @returns The generated order.\r\n */\r\nexport type OrderGenerator = (prevOrder: number | undefined, nextOrder: number | undefined) => number;\r\n\r\nexport enum QuestionAction {\r\n    Add,\r\n    Copy,\r\n    Delete,\r\n    MoveUp,\r\n    MoveDown,\r\n}\r\n\r\nexport enum QuestionDisplayType {\r\n    ShortText,\r\n    MultilineText,\r\n    RichText,\r\n    Number,\r\n    MultipleChoice,\r\n    SingleChoice,\r\n    Dropdown,\r\n    Date,\r\n}\r\n\r\nexport enum ChoiceAction {\r\n    Add,\r\n    AddOther,\r\n    Delete,\r\n    MoveUp,\r\n    MoveDown,\r\n}\r\n\r\n/**\r\n * The strings used in the form, to localize the form.\r\n */\r\nexport interface FormStrings {\r\n    questionHint: (question: FormQuestion, active: boolean) => string;\r\n    questionAction: (action: QuestionAction) => string;\r\n    questionMockedFieldDefaultPlaceholder: (type: QuestionDisplayType) => string;\r\n    questionDisplayTypeOption: (type: QuestionDisplayType) => string;\r\n    questionNewTitle: string;\r\n    questionTitle: string;\r\n    questionSubtitle: string;\r\n    questionRequired: string;\r\n    questionRestriction: string;\r\n    questionShuffle: string;\r\n    choiceAction: (action: ChoiceAction) => string;\r\n    choiceNew: (index: number) => string;\r\n    choiceOther: string;\r\n    choicePlaceholder: string;\r\n    restrictionOption: (type: TextNumberRestrictionType) => string;\r\n    restrictionValuePlaceholder: (key: TextNumberRestrictionValueKey) => string;\r\n}\r\n\r\n/**\r\n * The constants used in the form, which define limits or behaviors of the form.\r\n */\r\nexport interface FormConstants {\r\n    maxEntries: number;\r\n    maxTitleLength: number;\r\n    maxSubtitleLength: number;\r\n    initialChoices: number;\r\n    minChoices: number;\r\n    maxChoices: number;\r\n    maxChoiceLength: number;\r\n}\r\n\r\n/**\r\n * The feature of a form, which is immutable during the lifecycle of the form.\r\n */\r\nexport interface FormFeature extends BaseFormFeature<FormEntry, FormContext, FormFeature> {\r\n    validators: Validator<FormEntry>[];\r\n    sanitizer: Sanitizer;\r\n    idGenerator: IdGenerator;\r\n    orderGenerator: OrderGenerator;\r\n    constants: FormConstants;\r\n    strings: FormStrings;\r\n}\r\n","import { ITextFieldProps, TextField } from '@fluentui/react';\r\nimport { parseFloatStrictly } from '@addressbook/utilities-core';\r\nimport React from 'react';\r\n\r\nexport interface DecimalTextFieldProps\r\n    extends Omit<ITextFieldProps, 'componentRef' | 'value' | 'onChange' | 'inputMode'> {\r\n    value: number;\r\n    onChange: (value: number) => void;\r\n}\r\n\r\n/**\r\n * A text field that only accepts decimal numbers.\r\n */\r\nexport const DecimalTextField: React.FC<DecimalTextFieldProps> = ({ value, onChange, invalid, ...props }) => {\r\n    const [pendingValue, setPendingValue] = React.useState<string>(() => String(value));\r\n    const pendingValueRef = React.useRef(pendingValue);\r\n    pendingValueRef.current = pendingValue;\r\n\r\n    const onChangeRef = React.useRef(onChange);\r\n    onChangeRef.current = onChange;\r\n\r\n    const committedValueRef = React.useRef(value);\r\n    const commit = React.useCallback((pendingValue: string) => {\r\n        const parsedValue = parseFloatStrictly(pendingValue);\r\n        if (isNaN(parsedValue)) return;\r\n        onChangeRef.current(parsedValue);\r\n        committedValueRef.current = parsedValue;\r\n    }, []);\r\n\r\n    React.useEffect(() => {\r\n        if (value === committedValueRef.current) return;\r\n        setPendingValue(String(value));\r\n    }, [value]);\r\n\r\n    const synchronize = React.useCallback((value: number) => {\r\n        const stringValue = String(value);\r\n        if (pendingValueRef.current === stringValue) return;\r\n        setPendingValue(String(value));\r\n    }, []);\r\n\r\n    return (\r\n        <TextField\r\n            {...props}\r\n            value={pendingValue}\r\n            onChange={(_, newValue = '') => {\r\n                setPendingValue(newValue);\r\n                commit(newValue);\r\n            }}\r\n            onBlur={() => synchronize(value)}\r\n            invalid={invalid || isNaN(parseFloatStrictly(pendingValue))}\r\n            inputMode='decimal'\r\n        />\r\n    );\r\n};\r\n","/**\r\n * The size of an image.\r\n *\r\n * @property width The width of the image.\r\n * @property height The height of the image.\r\n */\r\nexport interface ImageSize {\r\n    width: number;\r\n    height: number;\r\n}\r\n\r\n/**\r\n * Measures the size of an image.\r\n *\r\n * @param blob The image to measure.\r\n * @returns The size of the image.\r\n */\r\nexport async function measureImage(blob: Blob): Promise<ImageSize> {\r\n    const objectUrl = URL.createObjectURL(blob);\r\n\r\n    try {\r\n        const image = new Image();\r\n        image.src = objectUrl;\r\n        await image.decode();\r\n\r\n        return { width: image.naturalWidth, height: image.naturalHeight };\r\n    } finally {\r\n        URL.revokeObjectURL(objectUrl);\r\n    }\r\n}\r\n","import { makeStyles } from '@addressbook/components-fluentui-teams-theme';\r\n\r\nexport const useMobileSheetStyles = makeStyles(theme => ({\r\n    content: {\r\n        overflow: 'auto',\r\n        maxHeight: 'calc(100vh - 54px)',\r\n        minHeight: '90px', // for A11y - voice control overlay show number in iOS Safari.\r\n    },\r\n    header: {\r\n        height: '20px',\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        justifyContent: 'center',\r\n    },\r\n    handler: {\r\n        width: '36px',\r\n        height: '4px',\r\n        background: theme.palette.neutralTertiaryAlt,\r\n        borderRadius: '2px',\r\n    },\r\n}));\r\n\r\nexport const useMobileSheetContainerStyles = makeStyles(theme => ({\r\n    background: theme.palette.white,\r\n    paddingBottom: '8px',\r\n}));\r\n\r\nexport const useMobileSheetBackdropStyles = makeStyles({ border: 'none' });\r\n","/**\r\n * Gets the mime type of a data URL.\r\n *\r\n * @param dataUrl The data URL to get the mime type of.\r\n * @returns The mime type of the data URL, or `undefined` if the data URL is invalid.\r\n * @see https://developer.mozilla.org/docs/web/http/basics_of_http/data_urls\r\n * @example getMimeByDataUrl('data:,') // ''\r\n * @example getMimeByDataUrl('data:text/plain,42%207') // 'text/plain'\r\n * @example getMimeByDataUrl('data:;base64,') // ''\r\n * @example getMimeByDataUrl('data:application/octet-stream;base64,NDIgNw==') // 'application/octet-stream'\r\n * @example getMimeByDataUrl('') // undefined\r\n * @example getMimeByDataUrl('invalid') // undefined\r\n */\r\nexport function getMimeByDataUrl(dataUrl: string): string | undefined {\r\n    return dataUrl.match(/^data:(.*?)(?:;base64)?,\\S*$/)?.[1];\r\n}\r\n\r\n/**\r\n * Gets the extension by a mime type.\r\n *\r\n * @param mime The mime type.\r\n * @returns The extension.\r\n * @example getExtensionByMime('image/png') // 'png'\r\n * @example getExtensionByMime('application/octet-stream') // undefined\r\n */\r\nexport function getExtensionByMime(mime: string): string | undefined {\r\n    return mimeExtensionMapping[mime];\r\n}\r\n\r\n/**\r\n * The mapping from mime types to extensions.\r\n *\r\n * @see https://www.iana.org/assignments/media-types/media-types.xhtml\r\n * @see https://developer.mozilla.org/docs/Web/HTTP/Basics_of_HTTP/MIME_types/Common_types\r\n */\r\nconst mimeExtensionMapping: Record<string, string> = {\r\n    'image/apng': 'apng',\r\n    'image/avif': 'avif',\r\n    'image/bmp': 'bmp',\r\n    'image/gif': 'gif',\r\n    'image/heic': 'heic',\r\n    'image/heif': 'heif',\r\n    'image/jpeg': 'jpg',\r\n    'image/png': 'png',\r\n    'image/svg+xml': 'svg',\r\n    'image/tiff': 'tiff',\r\n    'image/vnd.microsoft.icon': 'ico',\r\n    'image/webp': 'webp',\r\n};\r\n\r\n/**\r\n * Checks if a mime type is an image mime type.\r\n *\r\n * @param mime The mime type to check.\r\n * @returns `true` if the mime type is an image mime type, otherwise `false`.\r\n * @example isImageMime('image/png') // true\r\n * @example isImageMime('application/octet-stream') // false\r\n */\r\nexport function isImageMime(mime: string): boolean {\r\n    return mime.startsWith('image/');\r\n}\r\n","/*\r\n *  Copyright © Microsoft Corporation. All rights reserved.\r\n */\r\n\r\nimport type { ICheckboxStyles, IModalStyles } from '@fluentui/react';\r\nimport { makeStyles } from '../styles/makeStyles';\r\nimport { ellipsisStyles } from '../styles/ellipsisStyles';\r\n\r\nconst horizontalPaddingGap = '30px';\r\nconst verticalPaddingGap = '24px';\r\nexport const useModalStyles = /* #__PURE__*/ makeStyles<Partial<IModalStyles>>({\r\n    main: {\r\n        width: '1000px',\r\n        height: '700px',\r\n        maxHeight: '100%',\r\n        maxWidth: '100%',\r\n    },\r\n    scrollableContent: {\r\n        height: '100%',\r\n        width: '100%',\r\n        overflow: 'hidden',\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        paddingTop: '30px',\r\n        paddingBottom: '20px',\r\n        gap: '10px',\r\n        boxSizing: 'border-box',\r\n    },\r\n});\r\n\r\nexport const useContentStyles = /* #__PURE__*/ makeStyles({\r\n    placeHolder: {\r\n        paddingBottom: '0.5rem',\r\n    },\r\n    header: {\r\n        display: 'flex',\r\n        height: '2.25rem',\r\n        alignItems: 'center',\r\n        flexShrink: 0,\r\n        padding: `0 ${horizontalPaddingGap}`,\r\n        '>:first-child': {\r\n            flex: '1 1 auto',\r\n            minWidth: 0,\r\n        },\r\n    },\r\n    content: {\r\n        flex: '1 1 auto',\r\n        overflowY: 'auto', // fallback for FireFox\r\n        'overflow-y': 'overlay', // make scrollbar float over content\r\n        padding: `${verticalPaddingGap} ${horizontalPaddingGap}`, // using the same inner padding to make scrollbar right\r\n    },\r\n    footer: {\r\n        padding: `0 ${horizontalPaddingGap}`,\r\n        display: 'flex',\r\n        justifyContent: 'flex-end',\r\n        alignItems: 'center',\r\n        gap: '0.5rem',\r\n        '>.ms-Button--action': {\r\n            marginInlineEnd: 'auto',\r\n        },\r\n    },\r\n});\r\n\r\nexport const useShareSubmissionCardConsentStyles = makeStyles<Partial<ICheckboxStyles>>(theme => ({\r\n    root: {\r\n        '&.ms-Checkbox': {\r\n            padding: 0,\r\n        },\r\n    },\r\n    checkbox: {\r\n        borderColor: theme.palette.neutralDark,\r\n    },\r\n    text: [\r\n        {\r\n            width: '10rem',\r\n        },\r\n        ellipsisStyles(1),\r\n    ],\r\n}));\r\n","import { Extensions } from '@tiptap/core';\r\nimport React from 'react';\r\nimport { RichTextFieldStrings, RichTextFileStorageService } from '../../types';\r\nimport { RichTextFieldRibbonCallbacks } from '../RichTextRibbon';\r\n\r\nexport enum RibbonPosition {\r\n    None,\r\n    Top,\r\n    Bottom,\r\n}\r\n\r\nexport type RichTextFieldCallbacks = RichTextFieldRibbonCallbacks;\r\n\r\nexport interface RichTextFieldProps extends Omit<React.HTMLAttributes<HTMLDivElement>, 'onChange'> {\r\n    value: string;\r\n    onChange?: (value: string) => void;\r\n    errorMessage?: string;\r\n    label?: string;\r\n    description?: string;\r\n    required?: boolean;\r\n    placeholder?: string;\r\n    prefix?: string;\r\n    readOnly?: boolean;\r\n    invalid?: boolean;\r\n    compact?: boolean;\r\n    ribbonPosition?: RibbonPosition;\r\n    focusable?: boolean;\r\n    callbacks?: RichTextFieldCallbacks;\r\n    fileStorageService?: RichTextFileStorageService;\r\n    additionalExtensions?: Extensions;\r\n    strings?: Partial<RichTextFieldStrings>;\r\n    rootClassName?: string;\r\n    containerClassName?: string;\r\n}\r\n","/* istanbul ignore file */\r\n\r\nimport { createTheme, ITheme } from '@fluentui/theme';\r\nimport { CoreColors, DarkColors, ContrastColors, DefaultV2Colors, DarkV2Colors } from './teams-colors';\r\nimport { FontSizes } from './teams-sizes';\r\n\r\nconst iosBaseFont = '-apple-system, BlinkMacSystemFont';\r\nconst andoridBaseFontFont = 'Roboto';\r\nexport const IOS_FONT_FAMILY = `${iosBaseFont}, sans-serif`;\r\nexport const ANDROID_FONT_FAMILY = `${andoridBaseFontFont}, sans-serif`;\r\n\r\nconst defaultFontStyle = {\r\n    fontFamily: `${iosBaseFont}, \"Segoe UI\", system-ui, \"Apple Color Emoji\", \"Segoe UI Emoji\", ${andoridBaseFontFont} sans-serif`,\r\n};\r\n\r\nconst fonts = {\r\n    tiny: { fontSize: FontSizes.size10 },\r\n    xSmall: { fontSize: FontSizes.size10 },\r\n    small: { fontSize: FontSizes.size12 },\r\n    smallPlus: { fontSize: FontSizes.size12 },\r\n    medium: { fontSize: FontSizes.size14 },\r\n    mediumPlus: { fontSize: FontSizes.size16 },\r\n    large: { fontSize: FontSizes.size18 },\r\n    xLarge: { fontSize: FontSizes.size20 },\r\n    xLargePlus: { fontSize: FontSizes.size24 },\r\n    xxLarge: { fontSize: FontSizes.size28 },\r\n    xxLargePlus: { fontSize: FontSizes.size32 },\r\n    superLarge: { fontSize: FontSizes.size42 },\r\n    mega: { fontSize: FontSizes.size68 },\r\n};\r\n\r\n/**\r\n * Workaround for the missing colors in the palette of fluentui v8.\r\n * TODO: Remove this workaround once migrate to fluentui v9.\r\n */\r\ndeclare module '@fluentui/theme' {\r\n    interface IPalette {\r\n        redLight?: string;\r\n    }\r\n}\r\n\r\nexport const TeamsThemeDefault: ITheme = createTheme({\r\n    defaultFontStyle,\r\n    fonts,\r\n    palette: {\r\n        black: CoreColors.appBlack,\r\n        neutralDark: CoreColors.appGray02,\r\n        neutralPrimary: CoreColors.appGray03,\r\n        neutralPrimaryAlt: CoreColors.appGray03,\r\n        neutralSecondary: CoreColors.appGray04,\r\n        neutralTertiary: CoreColors.appGray06,\r\n\r\n        neutralTertiaryAlt: CoreColors.appGray08,\r\n        neutralQuaternary: CoreColors.appGray09,\r\n        neutralQuaternaryAlt: CoreColors.appGray09,\r\n        neutralLight: CoreColors.appGray10,\r\n        neutralLighter: CoreColors.appGray12,\r\n        neutralLighterAlt: CoreColors.appGray14,\r\n        white: CoreColors.appWhite,\r\n\r\n        // themeDark & ThemeDarkAlt has same color values, themeLighter & themeLighterAlt has same color values\r\n        themeDarker: CoreColors.appBrand02,\r\n        themeDark: CoreColors.appBrand04,\r\n        themeDarkAlt: CoreColors.appBrand04,\r\n        themePrimary: CoreColors.appBrand06,\r\n        themeSecondary: CoreColors.appBrand08,\r\n        themeTertiary: CoreColors.appBrand12,\r\n        themeLight: CoreColors.appBrand14,\r\n        themeLighter: CoreColors.appBrand16,\r\n        themeLighterAlt: CoreColors.appBrand16,\r\n\r\n        red: CoreColors.appRed,\r\n        redLight: CoreColors.appRedLight,\r\n        redDark: CoreColors.appRedDark,\r\n        green: CoreColors.appGreen,\r\n        greenLight: CoreColors.appGreenLight,\r\n        greenDark: CoreColors.appGreenDark,\r\n    },\r\n    semanticColors: {\r\n        inputText: CoreColors.appBrand06,\r\n        inputBackground: CoreColors.appBrand16,\r\n    },\r\n});\r\nTeamsThemeDefault.name = 'default';\r\n\r\nexport const TeamsThemeDark: ITheme = createTheme({\r\n    defaultFontStyle,\r\n    fonts,\r\n    palette: {\r\n        black: DarkColors.appBlack,\r\n        neutralDark: DarkColors.appGray02,\r\n        neutralPrimary: DarkColors.appGray03,\r\n        neutralPrimaryAlt: DarkColors.appGray03,\r\n        neutralSecondary: DarkColors.appGray04,\r\n        neutralTertiary: DarkColors.appGray06,\r\n\r\n        neutralTertiaryAlt: DarkColors.appGray08,\r\n        neutralQuaternary: DarkColors.appGray09,\r\n        neutralQuaternaryAlt: DarkColors.appGray09,\r\n        neutralLight: DarkColors.appGray10,\r\n        neutralLighter: DarkColors.appGray12,\r\n        neutralLighterAlt: DarkColors.appGray14,\r\n        white: DarkColors.appWhite,\r\n\r\n        // themeDark & ThemeDarkAlt has same color values, themeLighter & themeLighterAlt has same color values\r\n        themeDarker: DarkColors.appBrand02,\r\n        themeDark: DarkColors.appBrand04,\r\n        themeDarkAlt: DarkColors.appBrand04,\r\n        themePrimary: DarkColors.appBrand06,\r\n        themeSecondary: DarkColors.appBrand08,\r\n        themeTertiary: DarkColors.appBrand12,\r\n        themeLight: DarkColors.appBrand14,\r\n        themeLighter: DarkColors.appBrand16,\r\n        themeLighterAlt: DarkColors.appBrand16,\r\n\r\n        red: DarkColors.appRed,\r\n        redLight: DarkColors.appRedLight,\r\n        redDark: DarkColors.appRedDark,\r\n        green: DarkColors.appGreen,\r\n        greenLight: DarkColors.appGreenLight,\r\n        greenDark: DarkColors.appGreenDark,\r\n    },\r\n    semanticColors: {\r\n        inputText: DarkColors.appBrand06,\r\n        inputBackground: DarkColors.appBrand16,\r\n    },\r\n    isInverted: true,\r\n});\r\nTeamsThemeDark.name = 'dark';\r\nexport const TeamsThemeContrast: ITheme = createTheme({\r\n    defaultFontStyle,\r\n    fonts,\r\n    palette: {\r\n        black: ContrastColors.appBlack,\r\n        neutralDark: ContrastColors.appGray02,\r\n        neutralPrimary: ContrastColors.appGray03,\r\n        neutralPrimaryAlt: ContrastColors.appGray03,\r\n        neutralSecondary: ContrastColors.appGray04,\r\n        neutralTertiary: ContrastColors.appGray06,\r\n\r\n        neutralTertiaryAlt: ContrastColors.appGray08,\r\n        neutralQuaternary: ContrastColors.appGray09,\r\n        neutralQuaternaryAlt: ContrastColors.appGray09,\r\n        neutralLight: ContrastColors.appGray10,\r\n        neutralLighter: ContrastColors.appGray12,\r\n        neutralLighterAlt: ContrastColors.appGray14,\r\n        white: ContrastColors.appWhite,\r\n\r\n        // themeDark & ThemeDarkAlt has same color values, themeLighter & themeLighterAlt has same color values\r\n        themeDarker: ContrastColors.appBrand02,\r\n        themeDark: ContrastColors.appBrand04,\r\n        themeDarkAlt: ContrastColors.appBrand04,\r\n        themePrimary: ContrastColors.appBrand06,\r\n        themeSecondary: ContrastColors.appBrand08,\r\n        themeTertiary: ContrastColors.appBrand12,\r\n        themeLight: ContrastColors.appBrand14,\r\n        themeLighter: ContrastColors.appBrand16,\r\n        themeLighterAlt: ContrastColors.appBrand16,\r\n\r\n        red: ContrastColors.appRed,\r\n        redLight: ContrastColors.appRedLight,\r\n        redDark: ContrastColors.appRedDark,\r\n        green: ContrastColors.appGreen,\r\n        greenLight: ContrastColors.appGreenLight,\r\n        greenDark: ContrastColors.appGreenDark,\r\n    },\r\n    semanticColors: {\r\n        inputText: ContrastColors.appBrand06,\r\n        inputBackground: ContrastColors.appBrand16,\r\n        bodyText: ContrastColors.appBlack,\r\n    },\r\n});\r\nTeamsThemeContrast.name = 'contrast';\r\nexport const TeamsThemeDefaultV2: ITheme = createTheme({\r\n    defaultFontStyle,\r\n    fonts,\r\n    palette: {\r\n        black: DefaultV2Colors.appBlack,\r\n        neutralDark: DefaultV2Colors.appGray02,\r\n        neutralPrimary: DefaultV2Colors.appGray03,\r\n        neutralPrimaryAlt: DefaultV2Colors.appGray03,\r\n        neutralSecondary: DefaultV2Colors.appGray04,\r\n        neutralTertiary: DefaultV2Colors.appGray06,\r\n\r\n        neutralTertiaryAlt: DefaultV2Colors.appGray08,\r\n        neutralQuaternary: DefaultV2Colors.appGray09,\r\n        neutralQuaternaryAlt: DefaultV2Colors.appGray09,\r\n        neutralLight: DefaultV2Colors.appGray10,\r\n        neutralLighter: DefaultV2Colors.appGray12,\r\n        neutralLighterAlt: DefaultV2Colors.appGray14,\r\n        white: DefaultV2Colors.appWhite,\r\n\r\n        // themeDark & ThemeDarkAlt has same color values, themeLighter & themeLighterAlt has same color values\r\n        themeDarker: DefaultV2Colors.appBrand02,\r\n        themeDark: DefaultV2Colors.appBrand04,\r\n        themeDarkAlt: DefaultV2Colors.appBrand04,\r\n        themePrimary: DefaultV2Colors.appBrand06,\r\n        themeSecondary: DefaultV2Colors.appBrand08,\r\n        themeTertiary: DefaultV2Colors.appBrand12,\r\n        themeLight: DefaultV2Colors.appBrand14,\r\n        themeLighter: DefaultV2Colors.appBrand16,\r\n        themeLighterAlt: DefaultV2Colors.appBrand16,\r\n\r\n        red: DefaultV2Colors.appRed,\r\n        redLight: DefaultV2Colors.appRedLight,\r\n        redDark: DefaultV2Colors.appRedDark,\r\n        green: DefaultV2Colors.appGreen,\r\n        greenLight: DefaultV2Colors.appGreenLight,\r\n        greenDark: DefaultV2Colors.appGreenDark,\r\n    },\r\n    semanticColors: {\r\n        inputText: DefaultV2Colors.appBrand06,\r\n        inputBackground: DefaultV2Colors.appBrand16,\r\n    },\r\n});\r\nTeamsThemeDefaultV2.name = 'defaultV2';\r\n\r\nexport const TeamsThemeDarkV2: ITheme = createTheme({\r\n    defaultFontStyle,\r\n    fonts,\r\n    palette: {\r\n        black: DarkV2Colors.appBlack,\r\n        neutralDark: DarkV2Colors.appGray02,\r\n        neutralPrimary: DarkV2Colors.appGray03,\r\n        neutralPrimaryAlt: DarkV2Colors.appGray03,\r\n        neutralSecondary: DarkV2Colors.appGray04,\r\n        neutralTertiary: DarkV2Colors.appGray06,\r\n\r\n        neutralTertiaryAlt: DarkV2Colors.appGray08,\r\n        neutralQuaternary: DarkV2Colors.appGray09,\r\n        neutralQuaternaryAlt: DarkV2Colors.appGray09,\r\n        neutralLight: DarkV2Colors.appGray10,\r\n        neutralLighter: DarkV2Colors.appGray12,\r\n        neutralLighterAlt: DarkV2Colors.appGray14,\r\n        white: DarkV2Colors.appWhite,\r\n\r\n        // themeDark & ThemeDarkAlt has same color values, themeLighter & themeLighterAlt has same color values\r\n        themeDarker: DarkV2Colors.appBrand02,\r\n        themeDark: DarkV2Colors.appBrand04,\r\n        themeDarkAlt: DarkV2Colors.appBrand04,\r\n        themePrimary: DarkV2Colors.appBrand06,\r\n        themeSecondary: DarkV2Colors.appBrand08,\r\n        themeTertiary: DarkV2Colors.appBrand12,\r\n        themeLight: DarkV2Colors.appBrand14,\r\n        themeLighter: DarkV2Colors.appBrand16,\r\n        themeLighterAlt: DarkV2Colors.appBrand16,\r\n\r\n        red: DarkV2Colors.appRed,\r\n        redLight: DarkV2Colors.appRedLight,\r\n        redDark: DarkV2Colors.appRedDark,\r\n        green: DarkV2Colors.appGreen,\r\n        greenLight: DarkV2Colors.appGreenLight,\r\n        greenDark: DarkV2Colors.appGreenDark,\r\n    },\r\n    semanticColors: {\r\n        inputText: DarkV2Colors.appBrand06,\r\n        inputBackground: DarkV2Colors.appBrand16,\r\n    },\r\n    isInverted: true,\r\n});\r\nTeamsThemeDarkV2.name = 'darkV2';\r\n\r\n/**\r\n * Checks whether theme is dark or not.\r\n *\r\n * @param themeName the theme name\r\n * @returns true if the theme is dark, false otherwise.\r\n */\r\nexport function isDarkTheme(themeName?: string): boolean {\r\n    return themeName === 'dark';\r\n}\r\n\r\n/**\r\n * Checks whether theme is contrast or not.\r\n *\r\n * @param themeName the theme name\r\n * @returns true if the theme is contrast, false otherwise.\r\n */\r\nexport function isContrastTheme(themeName?: string): boolean {\r\n    return themeName === 'contrast';\r\n}\r\n\r\n/**\r\n * Checks whether theme is default or not.\r\n *\r\n * @param themeName the theme name\r\n * @returns true if the theme is default, false otherwise.\r\n */\r\nexport function isDefaultTheme(themeName?: string): boolean {\r\n    return themeName === 'default';\r\n}\r\n","import React from 'react';\r\nimport { mergeStyles } from '@fluentui/react';\r\nimport { ReactComponent as SpinnerSvg } from '../assets/spinner.svg';\r\nimport { useSpinnerStyles } from './Spinner.styles';\r\n\r\nexport enum SpinnerSize {\r\n    Small = 24,\r\n    Medium = 32,\r\n    Large = 48,\r\n}\r\n\r\nexport interface SpinnerProps extends React.HTMLAttributes<HTMLDivElement> {\r\n    size?: SpinnerSize | number;\r\n}\r\n\r\nexport const Spinner: React.FC<SpinnerProps> = ({ size = SpinnerSize.Medium, className, ...props }) => {\r\n    const styles = useSpinnerStyles();\r\n\r\n    return (\r\n        <div className={mergeStyles(styles.root, className)} role='progressbar' aria-busy {...props}>\r\n            <div className={mergeStyles(styles.bound, { width: size, height: size })}>\r\n                <SpinnerSvg className={styles.animated} />\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n","import {\r\n    ActionButton,\r\n    Checkbox,\r\n    DefaultButton,\r\n    IButtonProps,\r\n    IconButton,\r\n    mergeStyles,\r\n    PrimaryButton,\r\n} from '@fluentui/react';\r\nimport React, { MutableRefObject } from 'react';\r\nimport { CommonIcon, CommonIconProps } from '../CommonIcon';\r\nimport { CommonLoadingIndicator } from '../CommonLoadingIndicator';\r\nimport { useContentStyles, useShareSubmissionCardConsentStyles } from './CommonModal.styles';\r\n\r\nexport type ModalContentProps = React.PropsWithChildren<{\r\n    /**\r\n     * set header icon, title and description\r\n     */\r\n    headerProps?: CommonIconProps;\r\n    /**\r\n     * props for the PrimaryButton\r\n     */\r\n    primaryBtnProps?: IButtonProps;\r\n    /**\r\n     * props for the ActionButton\r\n     */\r\n    secondaryBtnProps?: IButtonProps;\r\n    /**\r\n     * props for the subsidiary ActionButton, which is close to the primary button\r\n     */\r\n    subsidiaryBtnProps?: IButtonProps;\r\n    /**\r\n     * Ref for content element\r\n     */\r\n    contentRef?: MutableRefObject<HTMLDivElement | null>;\r\n    closeButtonAriaLabel?: string;\r\n    onDismiss?: () => void;\r\n    titleId?: string;\r\n    subTitleId?: string;\r\n    contentClassName?: string;\r\n    headerClassName?: string;\r\n    footerClassName?: string;\r\n    isFetching?: boolean;\r\n    titleFarItem?: React.ReactNode;\r\n    footerItem?: React.ReactNode;\r\n    contentHidden?: boolean;\r\n    shareSubmissionCardConsentShow?: boolean;\r\n    shareSubmissionCardConsentOptionChecked?: boolean;\r\n    onShareSubmissionCardConsentOptionChange?: (isChecked: boolean) => void;\r\n    shareSubmissionCardConsentOptionLabel?: string;\r\n    placeHolderItem?: React.ReactNode;\r\n}>;\r\nexport const ModalContent: React.FC<ModalContentProps> = ({\r\n    headerProps,\r\n    secondaryBtnProps,\r\n    subsidiaryBtnProps,\r\n    primaryBtnProps,\r\n    children,\r\n    contentRef,\r\n    closeButtonAriaLabel,\r\n    onDismiss,\r\n    titleId,\r\n    subTitleId,\r\n    contentClassName,\r\n    headerClassName,\r\n    footerClassName,\r\n    isFetching,\r\n    titleFarItem,\r\n    footerItem,\r\n    shareSubmissionCardConsentShow,\r\n    shareSubmissionCardConsentOptionChecked,\r\n    onShareSubmissionCardConsentOptionChange,\r\n    shareSubmissionCardConsentOptionLabel,\r\n    placeHolderItem,\r\n}) => {\r\n    const styles = useContentStyles();\r\n    const shareSubmissionCardConsentStyles = useShareSubmissionCardConsentStyles();\r\n\r\n    return (\r\n        <>\r\n            <div role='alert' aria-busy={!headerProps} className={mergeStyles(styles.header, headerClassName)}>\r\n                <CommonIcon titleAs='h1' titleId={titleId} descriptionId={subTitleId} {...headerProps} />\r\n                {titleFarItem}\r\n                {onDismiss && (\r\n                    <IconButton\r\n                        iconProps={{ iconName: 'Cancel' }}\r\n                        ariaLabel={closeButtonAriaLabel}\r\n                        title={closeButtonAriaLabel}\r\n                        onClick={onDismiss}\r\n                    />\r\n                )}\r\n            </div>\r\n            <CommonLoadingIndicator isFetching={isFetching} />\r\n            <div className={mergeStyles(styles.content, contentClassName)} ref={contentRef} data-is-scrollable>\r\n                {placeHolderItem && <div className={styles.placeHolder}>{placeHolderItem}</div>}\r\n                {children}\r\n            </div>\r\n            <div className={mergeStyles(styles.footer, footerClassName)}>\r\n                {shareSubmissionCardConsentShow && (\r\n                    <Checkbox\r\n                        label={shareSubmissionCardConsentOptionLabel}\r\n                        checked={shareSubmissionCardConsentOptionChecked}\r\n                        onChange={(_, checked) => onShareSubmissionCardConsentOptionChange?.(checked!)}\r\n                        styles={shareSubmissionCardConsentStyles}\r\n                    />\r\n                )}\r\n                {secondaryBtnProps && <ActionButton {...secondaryBtnProps} />}\r\n                {footerItem}\r\n                {subsidiaryBtnProps && <DefaultButton {...subsidiaryBtnProps} />}\r\n                {primaryBtnProps && <PrimaryButton primary {...primaryBtnProps} />}\r\n            </div>\r\n        </>\r\n    );\r\n};\r\n","export * from './CollapsibleTextField';\r\n","import { parseFloatStrictly } from '@addressbook/utilities-core';\r\nimport {\r\n    FormEntry,\r\n    FormQuestionType,\r\n    TextNumberRestriction,\r\n    TextNumberRestrictionType,\r\n    Validation,\r\n    ValidationFailure,\r\n    Validator,\r\n} from '../../types';\r\nimport { createValidationSuccess } from '../../utilities';\r\n\r\n/**\r\n * A function that returns the error message by the given restriction.\r\n *\r\n * @param restriction The restriction.\r\n * @returns The error message.\r\n */\r\nexport type ErrorMessageByRestriction = (restriction: TextNumberRestriction) => string;\r\n\r\nexport interface NumberValidatorOptions {\r\n    errorMessageWhenNaN?: string;\r\n    errorMessageByRestriction?: ErrorMessageByRestriction;\r\n}\r\n\r\nconst defaultErrorMessageWhenNaN = 'Please enter a number';\r\nconst defaultErrorMessageByRestriction: ErrorMessageByRestriction = restriction => {\r\n    switch (restriction.type) {\r\n        case TextNumberRestrictionType.GreaterThan:\r\n            return `Please enter a number greater than ${restriction.min}`;\r\n        case TextNumberRestrictionType.GreaterThanOrEqualTo:\r\n            return `Please enter a number greater than or equal to ${restriction.min}`;\r\n        case TextNumberRestrictionType.LessThan:\r\n            return `Please enter a number less than ${restriction.max}`;\r\n        case TextNumberRestrictionType.LessThanOrEqualTo:\r\n            return `Please enter a number less than or equal to ${restriction.max}`;\r\n        case TextNumberRestrictionType.EqualTo:\r\n            return `Please enter a number equal to ${restriction.value}`;\r\n        case TextNumberRestrictionType.NotEqualTo:\r\n            return `Please enter a number not equal to ${restriction.value}`;\r\n        case TextNumberRestrictionType.Between:\r\n            return `Please enter a number between ${restriction.min} and ${restriction.max}`;\r\n        case TextNumberRestrictionType.NotBetween:\r\n            return `Please enter a number not between ${restriction.min} and ${restriction.max}`;\r\n    }\r\n};\r\n\r\nfunction follow(content: number, restriction: TextNumberRestriction): boolean {\r\n    switch (restriction.type) {\r\n        case TextNumberRestrictionType.GreaterThan:\r\n            return content > restriction.min;\r\n        case TextNumberRestrictionType.GreaterThanOrEqualTo:\r\n            return content >= restriction.min;\r\n        case TextNumberRestrictionType.LessThan:\r\n            return content < restriction.max;\r\n        case TextNumberRestrictionType.LessThanOrEqualTo:\r\n            return content <= restriction.max;\r\n        case TextNumberRestrictionType.EqualTo:\r\n            return content === restriction.value;\r\n        case TextNumberRestrictionType.NotEqualTo:\r\n            return content !== restriction.value;\r\n        case TextNumberRestrictionType.Between:\r\n            return content >= restriction.min && content <= restriction.max;\r\n        case TextNumberRestrictionType.NotBetween:\r\n            return content < restriction.min || content > restriction.max;\r\n    }\r\n}\r\n\r\n/**\r\n * A validator that checks if the answer is a number.\r\n * If the question is not a number question, this validator will always pass.\r\n * Otherwise, this validator will fail if the answer is not a number.\r\n */\r\nexport class NumberValidator implements Validator<FormEntry> {\r\n    private errorMessageWhenNaN: string;\r\n    private errorMessageByRestriction: ErrorMessageByRestriction;\r\n\r\n    /**\r\n     * Creates a number validator.\r\n     *\r\n     * @param options.errorMessageWhenNaN The error message if the answer content is not a number.\r\n     * @param options.errorMessageByRestriction The error message if the answer content violates a restriction.\r\n     * @returns A number validator.\r\n     */\r\n    constructor({\r\n        errorMessageWhenNaN = defaultErrorMessageWhenNaN,\r\n        errorMessageByRestriction = defaultErrorMessageByRestriction,\r\n    }: NumberValidatorOptions = {}) {\r\n        this.errorMessageWhenNaN = errorMessageWhenNaN;\r\n        this.errorMessageByRestriction = errorMessageByRestriction;\r\n    }\r\n\r\n    validate({ question, answer }: FormEntry): Validation {\r\n        // Filter out non-number questions, or no answer yet.\r\n        if (question.type !== FormQuestionType.Text || !question.number || !answer.content) {\r\n            return createValidationSuccess();\r\n        }\r\n\r\n        const content = parseFloatStrictly(answer.content as string);\r\n\r\n        // Check for NaN.\r\n        if (isNaN(content)) {\r\n            return this.createValidationFailure(this.errorMessageWhenNaN);\r\n        }\r\n\r\n        // Check for restrictions.\r\n        const restriction = question.restriction;\r\n        if (restriction && !follow(content, restriction)) {\r\n            return this.createValidationFailure(this.errorMessageByRestriction(restriction));\r\n        }\r\n\r\n        return createValidationSuccess();\r\n    }\r\n\r\n    private createValidationFailure(errorMessage: string): ValidationFailure {\r\n        return { valid: false, errorMessage };\r\n    }\r\n}\r\n","export * from './DesigningTrailingActions';\r\n","/*\r\n *  Copyright © Microsoft Corporation. All rights reserved.\r\n */\r\nimport { useBoolean } from '@fluentui/react-hooks';\r\nimport React from 'react';\r\nimport Sheet from 'react-modal-sheet';\r\nimport { FocusTrapZone } from '@fluentui/react';\r\nimport {\r\n    useMobileSheetBackdropStyles,\r\n    useMobileSheetContainerStyles,\r\n    useMobileSheetStyles,\r\n} from './MobileSheet.styles';\r\n\r\nexport interface MobileSheetProps {\r\n    onDismiss?: () => void;\r\n    content: React.ReactNode;\r\n    snapPoints?: number[];\r\n    initialSnap?: number;\r\n}\r\nexport const MobileSheet: React.FC<MobileSheetProps> = ({\r\n    onDismiss,\r\n    content,\r\n    snapPoints,\r\n    initialSnap,\r\n}: MobileSheetProps) => {\r\n    const styles = useMobileSheetStyles();\r\n    const containerStyles = useMobileSheetContainerStyles();\r\n    const backdropStyles = useMobileSheetBackdropStyles();\r\n    const [isOpen, { setFalse: onClose }] = useBoolean(true);\r\n\r\n    const keyEventName = 'keydown';\r\n    React.useEffect(() => {\r\n        const handleKeyDown = (event: KeyboardEvent): void => {\r\n            if (event.key === 'Escape') {\r\n                onClose();\r\n            }\r\n        };\r\n        document.addEventListener(keyEventName, handleKeyDown, true);\r\n\r\n        return () => {\r\n            document.removeEventListener(keyEventName, handleKeyDown, true);\r\n        };\r\n    }, [onClose]);\r\n\r\n    return (\r\n        <Sheet\r\n            snapPoints={snapPoints}\r\n            initialSnap={initialSnap}\r\n            isOpen={isOpen}\r\n            onClose={onClose}\r\n            onCloseEnd={onDismiss}\r\n            detent='content-height'>\r\n            <Sheet.Container style={containerStyles}>\r\n                <FocusTrapZone>\r\n                    <Sheet.Header>\r\n                        <div className={styles.header}>\r\n                            <div className={styles.handler} />\r\n                        </div>\r\n                    </Sheet.Header>\r\n                    <Sheet.Content>\r\n                        <div className={styles.content}>{content}</div>\r\n                    </Sheet.Content>\r\n                </FocusTrapZone>\r\n            </Sheet.Container>\r\n            <Sheet.Backdrop style={backdropStyles} onTap={onClose} />\r\n        </Sheet>\r\n    );\r\n};\r\n","import { FocusZone, mergeStyles } from '@fluentui/react';\r\nimport React from 'react';\r\nimport { RichTextFieldStrings, RichTextFieldTableSize } from '../../types';\r\nimport { useInsertTableStyles } from './InsertTable.styles';\r\n\r\nexport interface InsertTableProps extends React.HTMLAttributes<HTMLDivElement> {\r\n    maxTableSize: RichTextFieldTableSize;\r\n    onConfirm?: (tableSize: RichTextFieldTableSize) => void;\r\n    strings: Pick<RichTextFieldStrings, 'insertTableTitle'>;\r\n}\r\n\r\nexport const InsertTable: React.FC<InsertTableProps> = ({ maxTableSize, onConfirm, strings, className, ...props }) => {\r\n    const [tableSize, setTableSize] = React.useState<RichTextFieldTableSize>();\r\n    const title = React.useMemo(() => strings.insertTableTitle(tableSize), [strings, tableSize]);\r\n\r\n    const styles = useInsertTableStyles();\r\n    const gridStyle = React.useMemo(\r\n        () => ({ gridTemplate: `repeat(${maxTableSize.rows}, 1fr) / repeat(${maxTableSize.cols}, 1fr)` }),\r\n        [maxTableSize]\r\n    );\r\n\r\n    const gridCells = React.useMemo(\r\n        () =>\r\n            Array.from({ length: maxTableSize.rows }, (_, row) =>\r\n                Array.from({ length: maxTableSize.cols }, (_, col) => (\r\n                    <button\r\n                        key={`${row}-${col}`}\r\n                        className={mergeStyles(\r\n                            styles.cell,\r\n                            tableSize && row < tableSize.rows && col < tableSize.cols && styles.selecting\r\n                        )}\r\n                        onClick={onConfirm && (() => onConfirm(getTableSize(row, col)))}\r\n                        onFocus={() => setTableSize(getTableSize(row, col))}\r\n                        onPointerOver={event => event.currentTarget.focus()}\r\n                    />\r\n                ))\r\n            ),\r\n        [maxTableSize, onConfirm, styles, tableSize]\r\n    );\r\n\r\n    return (\r\n        <div className={mergeStyles(styles.root, className)} {...props}>\r\n            <div className={styles.header} role='alert' aria-live='polite'>\r\n                {title}\r\n            </div>\r\n            <FocusZone className={styles.table} style={gridStyle} role='grid' shouldFocusOnMount>\r\n                {gridCells}\r\n            </FocusZone>\r\n        </div>\r\n    );\r\n};\r\n\r\nfunction getTableSize(row: number, col: number): RichTextFieldTableSize {\r\n    return { rows: row + 1, cols: col + 1 };\r\n}\r\n","export * from './types';\r\nexport * from './utils';\r\n","export * from './ColorMenuItem';\r\n","import { OrderGenerator } from '../types';\r\n\r\nexport interface HalfOrderGeneratorFactoryOptions {\r\n    minOrder: number;\r\n    maxOrder: number;\r\n}\r\n\r\n/**\r\n * Gets a new half order generator, who generates between two orders that is not equal to either order.\r\n * The new order is the average of the two orders.\r\n * If the previous order is undefined or smaller than the minimum order, the minimum order is used.\r\n * If the next order is undefined or larger than the maximum order, the maximum order is used.\r\n *\r\n * @param options.minOrder The minimum order.\r\n * @param options.maxOrder The maximum order.\r\n * @returns A new order.\r\n * @example halfOrderGeneratorFactory({ minOrder: 0, maxOrder: 100 })(20, 80) // 50\r\n * @example halfOrderGeneratorFactory({ minOrder: 0, maxOrder: 100 })(-100, 200) // 50\r\n * @example halfOrderGeneratorFactory({ minOrder: 0, maxOrder: 100 })(50, undefined) // 75\r\n * @example halfOrderGeneratorFactory({ minOrder: 0, maxOrder: 100 })(undefined, 50) // 25\r\n * @example halfOrderGeneratorFactory({ minOrder: 0, maxOrder: 100 })(undefined, undefined) // 50\r\n */\r\nexport function halfOrderGeneratorFactory({ minOrder, maxOrder }: HalfOrderGeneratorFactoryOptions): OrderGenerator {\r\n    if (minOrder >= maxOrder) throw new Error('minOrder must be smaller than maxOrder');\r\n    return (prevOrder, nextOrder) => {\r\n        const safePrevOrder = Math.max(prevOrder ?? Number.MIN_VALUE, minOrder);\r\n        const safeNextOrder = Math.min(nextOrder ?? Number.MAX_VALUE, maxOrder);\r\n        return (safePrevOrder + safeNextOrder) / 2;\r\n    };\r\n}\r\n\r\nexport const halfOrderGenerator = halfOrderGeneratorFactory({ minOrder: 0, maxOrder: 1_000_000_000 });\r\n","import { PrimaryButton } from '@fluentui/react';\r\nimport React from 'react';\r\nimport { FormProps } from '../../../abstractions';\r\nimport { FormContext, FormFeature, QuestionAction } from '../../types';\r\nimport { addNewFormEntry } from '../../utilities';\r\nimport { useDesigningTrailingActionsStyles } from './DesigningTrailingActions.styles';\r\n\r\nexport function DesigningTrailingActions({\r\n    context,\r\n    onContextChange,\r\n    feature,\r\n}: FormProps<FormContext, FormFeature>): JSX.Element {\r\n    const { entries } = context;\r\n    const { comparator, idGenerator, orderGenerator, constants, strings } = feature;\r\n\r\n    const reachMaxEntries = entries.length >= constants.maxEntries;\r\n\r\n    const addEntry = React.useCallback(() => {\r\n        const trailingEntry = [...entries].sort(comparator).pop();\r\n        const trailingSlotOrder = orderGenerator(trailingEntry?.question.order, undefined);\r\n        const newEntries = addNewFormEntry(entries, { idGenerator, order: trailingSlotOrder, strings });\r\n        onContextChange?.({ ...context, entries: newEntries });\r\n    }, [comparator, context, entries, idGenerator, onContextChange, orderGenerator, strings]);\r\n\r\n    const styles = useDesigningTrailingActionsStyles();\r\n\r\n    return (\r\n        <div className={styles.root}>\r\n            <PrimaryButton\r\n                iconProps={{ iconName: 'Add' }}\r\n                text={strings.questionAction(QuestionAction.Add)}\r\n                onClick={addEntry}\r\n                disabled={reachMaxEntries}\r\n            />\r\n        </div>\r\n    );\r\n}\r\n","/*\r\n *  Copyright © Microsoft Corporation. All rights reserved.\r\n */\r\n\r\nexport * from './CommonSlideDots';\r\n","export * from './PeopleSelect';\r\nexport * from './PeopleSelect.types';\r\n","import React from 'react';\r\nimport { IconButton, ITextField, PrimaryButton, Stack, Text, TextField } from '@fluentui/react';\r\nimport { useContentStyles, useLinkPlaceTextFieldStyles } from './ContentCopyResponseModal.styles';\r\n\r\nexport type ContentCopyResponseProps = React.PropsWithChildren<{\r\n    copyRequestModalCloseButton: string;\r\n    copyRequestModalCopyButton: string;\r\n    copyLinkSuccessInfo: string;\r\n    generatedLink: string;\r\n    linkPermissionSettingText: string;\r\n    onDismiss?: () => void;\r\n    CopySuccessIcon: JSX.Element;\r\n    LinkPermissionSettingIcon: JSX.Element;\r\n    copyContentToClip?: () => void;\r\n}>;\r\nexport const ContentCopyRequestModalContent: React.FC<ContentCopyResponseProps> = ({\r\n    copyRequestModalCloseButton,\r\n    copyRequestModalCopyButton,\r\n    copyLinkSuccessInfo,\r\n    linkPermissionSettingText,\r\n    generatedLink,\r\n    onDismiss,\r\n    CopySuccessIcon,\r\n    LinkPermissionSettingIcon,\r\n    copyContentToClip,\r\n}) => {\r\n    const styles = useContentStyles();\r\n    const linkPlaceTextFieldStyles = useLinkPlaceTextFieldStyles();\r\n    const textFieldRef = React.useRef<ITextField>(null);\r\n    const focusTextField = (): void => {\r\n        textFieldRef.current?.focus();\r\n        if (copyContentToClip) {\r\n            copyContentToClip();\r\n        }\r\n    };\r\n    React.useEffect((): void => {\r\n        textFieldRef.current?.focus();\r\n    }, []);\r\n    return (\r\n        <>\r\n            <Stack horizontal reversed role='alert' className={styles.header}>\r\n                {onDismiss && (\r\n                    <IconButton\r\n                        iconProps={{ iconName: 'Cancel' }}\r\n                        ariaLabel={copyRequestModalCloseButton}\r\n                        title={copyRequestModalCloseButton}\r\n                        onClick={onDismiss}\r\n                    />\r\n                )}\r\n            </Stack>\r\n            <Stack className={styles.contents}>\r\n                <Stack horizontalAlign='center' className={styles.copySuccessIcon}>\r\n                    {CopySuccessIcon}\r\n                </Stack>\r\n                <Stack horizontal horizontalAlign='center' className={styles.copyTitle}>\r\n                    <Text block nowrap>\r\n                        {copyLinkSuccessInfo}\r\n                    </Text>\r\n                </Stack>\r\n                <Stack\r\n                    horizontal\r\n                    horizontalAlign='space-between'\r\n                    className={styles.copyContent}\r\n                    tokens={{ childrenGap: '4px' }}>\r\n                    <TextField\r\n                        underlined\r\n                        readOnly\r\n                        defaultValue={generatedLink}\r\n                        styles={linkPlaceTextFieldStyles}\r\n                        componentRef={textFieldRef}\r\n                        onFocus={e => e.target.select()}\r\n                        validateOnFocusIn\r\n                        validateOnLoad\r\n                    />\r\n                    <PrimaryButton primary text={copyRequestModalCopyButton} onClick={focusTextField} />\r\n                </Stack>\r\n                <Stack horizontal className={styles.linkPermissionSetting}>\r\n                    <Stack horizontalAlign='center' className={styles.linkPermissionSettingIcon}>\r\n                        {LinkPermissionSettingIcon}\r\n                    </Stack>\r\n                    <Text block className={styles.linkPermissionSettingTextStyles}>\r\n                        {linkPermissionSettingText}\r\n                    </Text>\r\n                </Stack>\r\n            </Stack>\r\n        </>\r\n    );\r\n};\r\n","import React from 'react';\r\nimport { RenderFunction } from '../../abstractions';\r\nimport { DesigningTrailingActions } from '../components';\r\nimport { FormContext, FormFeature, FormMode } from '../types';\r\n\r\nexport const defaultTrailingRender: RenderFunction<FormContext, FormFeature> = props => {\r\n    switch (props.context.mode) {\r\n        case FormMode.Designing:\r\n            return <DesigningTrailingActions {...props} />;\r\n        default:\r\n            return null;\r\n    }\r\n};\r\n","import {\r\n    DirectionalHint,\r\n    IPeoplePickerItemSelectedProps,\r\n    IPeoplePickerProps,\r\n    IPersonaProps,\r\n    IPickerItemProps,\r\n    Label,\r\n    mergeStyles,\r\n    NormalPeoplePicker,\r\n    PeoplePickerItem,\r\n    ValidationState,\r\n} from '@fluentui/react';\r\nimport { useId } from '@fluentui/react-hooks';\r\nimport React from 'react';\r\nimport { PeopleCoin } from '../PeopleCoin';\r\nimport { PeopleSelection, PeopleSelectionType, WithSelection } from '../types';\r\nimport { peopleSelectDefaultStrings, PeopleSelectStrings } from './PeopleSelect.strings';\r\nimport { usePeopleSelectStyles } from './PeopleSelect.styles';\r\nimport { PeopleSelectProps } from './PeopleSelect.types';\r\nimport {\r\n    extractSelectionFromPersonaProps,\r\n    filterSuggestions,\r\n    normalizeFilter,\r\n    resolvePeopleSelectionItems,\r\n    tryExpandPeopleSelection,\r\n    useMapPeopleSelectionToPersonaProps,\r\n} from './PeopleSelect.utils';\r\n\r\n/**\r\n * A component for selecting people.\r\n *\r\n * The component offers:\r\n * - Unified props based on PeopleSelection interface for both single and many selection.\r\n * - Expandable ManyPeopleSelection with factory and promise support.\r\n * - Validation support using validateSelections prop.\r\n * - Filter text normalization.\r\n * - Suggestions filtering based on selections.\r\n * - Prevent removal of unremovable items.\r\n * - Localized strings.\r\n */\r\nexport const PeopleSelect: React.FC<PeopleSelectProps> = ({\r\n    label,\r\n    hint,\r\n    required,\r\n    selections,\r\n    errorMessage,\r\n    suggestionsErrorMessage,\r\n    onSelectionsChange,\r\n    onErrorMessageChange,\r\n    onResolveSuggestions,\r\n    allowEmptySuggestions,\r\n    onRenderItem,\r\n    onExpandPeopleSelection,\r\n    onRenderMoreButtonMenu,\r\n    onRetrieveIcon,\r\n    describeSuggestion,\r\n    validateSelections,\r\n    strings,\r\n    formatName,\r\n    pickerClassName,\r\n    resolveDelay,\r\n    disabled,\r\n    itemLimit,\r\n    ...props\r\n}) => {\r\n    const stringsInternal = React.useMemo<PeopleSelectStrings>(\r\n        () => ({ ...peopleSelectDefaultStrings, ...strings }),\r\n        [strings]\r\n    );\r\n\r\n    const mapPeopleSelectionToPersonaProps = useMapPeopleSelectionToPersonaProps({\r\n        onRetrieveIcon,\r\n        describeSuggestion,\r\n    });\r\n\r\n    const selectionsRef = React.useRef(selections);\r\n    selectionsRef.current = selections;\r\n\r\n    React.useEffect(() => {\r\n        selectionsRef.current.map(resolvePeopleSelectionItems);\r\n    }, []);\r\n\r\n    const selectedItems = React.useMemo<WithSelection<IPersonaProps>[]>(\r\n        () => selections.map(mapPeopleSelectionToPersonaProps),\r\n        [mapPeopleSelectionToPersonaProps, selections]\r\n    );\r\n\r\n    const triggerChange = React.useCallback(\r\n        (selections: PeopleSelection[]) => {\r\n            const errorMessage =\r\n                required && !selections.length\r\n                    ? stringsInternal.requiredErrorMessage\r\n                    : validateSelections?.(selections);\r\n\r\n            onSelectionsChange?.(selections);\r\n            onErrorMessageChange?.(errorMessage);\r\n        },\r\n        [onErrorMessageChange, onSelectionsChange, required, stringsInternal.requiredErrorMessage, validateSelections]\r\n    );\r\n\r\n    const triggerChangeRef = React.useRef(triggerChange);\r\n    triggerChangeRef.current = triggerChange;\r\n\r\n    const onChange = React.useCallback<NonNullable<IPeoplePickerProps['onChange']>>((items = []) => {\r\n        const newSelections = items.map(item => extractSelectionFromPersonaProps(item));\r\n\r\n        // Prevent removal of unremovable items\r\n        const unremovableSelections = selectionsRef.current.filter(selection => selection.unremovable);\r\n        if (!unremovableSelections.every(selection => newSelections.includes(selection))) return;\r\n\r\n        triggerChangeRef.current(newSelections);\r\n    }, []);\r\n\r\n    const triggerResolveSuggestions = React.useCallback(\r\n        async (filter: string) => {\r\n            const normalizedFilter = normalizeFilter(filter);\r\n            const suggestions = await onResolveSuggestions(normalizedFilter);\r\n            const filteredSuggestions = filterSuggestions(suggestions, selectionsRef.current);\r\n            return filteredSuggestions.map(mapPeopleSelectionToPersonaProps);\r\n        },\r\n        [mapPeopleSelectionToPersonaProps, onResolveSuggestions]\r\n    );\r\n\r\n    const onResolveSuggestionsInternal = React.useCallback<IPeoplePickerProps['onResolveSuggestions']>(\r\n        filter => triggerResolveSuggestions(filter),\r\n        [triggerResolveSuggestions]\r\n    );\r\n\r\n    const onEmptyResolveSuggestionsInternal = React.useCallback<\r\n        NonNullable<IPeoplePickerProps['onEmptyResolveSuggestions']>\r\n    >(() => triggerResolveSuggestions(''), [triggerResolveSuggestions]);\r\n\r\n    const onItemSelected = React.useCallback<NonNullable<IPeoplePickerProps['onItemSelected']>>(selectedItem => {\r\n        if (!selectedItem) return null;\r\n\r\n        // Try to resolve the selection's items\r\n        const selection = extractSelectionFromPersonaProps(selectedItem);\r\n        resolvePeopleSelectionItems(selection);\r\n\r\n        return selectedItem;\r\n    }, []);\r\n\r\n    const onExpandPeopleSelectionRef = React.useRef(onExpandPeopleSelection);\r\n    onExpandPeopleSelectionRef.current = onExpandPeopleSelection;\r\n\r\n    const styles = usePeopleSelectStyles();\r\n    const onRenderItemInternal = React.useCallback<NonNullable<IPeoplePickerProps['onRenderItem']>>(\r\n        props => {\r\n            const selection = extractSelectionFromPersonaProps(props.item);\r\n            const moreButtonMenu = onRenderMoreButtonMenu?.(selection);\r\n            const newProps: IPeoplePickerItemSelectedProps & IPickerItemProps<IPersonaProps> = {\r\n                ...props,\r\n                item: {\r\n                    ...props.item,\r\n                    ValidationState: ValidationState.valid,\r\n                    onRenderPersonaCoin: props => (\r\n                        <>\r\n                            <PeopleCoin\r\n                                {...props}\r\n                                selection={selection}\r\n                                onRetrieveIcon={onRetrieveIcon}\r\n                                coinSize={24}\r\n                            />\r\n                            {selection.type !== PeopleSelectionType.User && selection.expandable && (\r\n                                <PeopleCoin\r\n                                    {...props}\r\n                                    selection={{ ...selection, icon: 'AddFilled' }}\r\n                                    onRetrieveIcon={onRetrieveIcon}\r\n                                    coinSize={24}\r\n                                    className={styles.expandableCoinOverlay}\r\n                                />\r\n                            )}\r\n                        </>\r\n                    ),\r\n                    onClick: () => {\r\n                        // Try to expand the selection\r\n                        const newSelections = tryExpandPeopleSelection(selectionsRef.current, selection);\r\n                        if (!newSelections) return;\r\n                        onExpandPeopleSelectionRef.current?.(selection);\r\n                        triggerChangeRef.current(newSelections);\r\n                    },\r\n                    text: formatName?.(selection) ?? selection.name,\r\n                    onRenderSecondaryText: moreButtonMenu ? () => moreButtonMenu : undefined,\r\n                },\r\n                className: mergeStyles(\r\n                    props.className,\r\n                    selection.unremovable && styles.unremovable,\r\n                    moreButtonMenu && styles.moreButtonMenu\r\n                ),\r\n            };\r\n\r\n            const item = <PeoplePickerItem {...newProps} />;\r\n            return onRenderItem?.(selection, item) ?? item;\r\n        },\r\n        [\r\n            onRenderMoreButtonMenu,\r\n            formatName,\r\n            styles.unremovable,\r\n            styles.moreButtonMenu,\r\n            styles.expandableCoinOverlay,\r\n            onRenderItem,\r\n            onRetrieveIcon,\r\n        ]\r\n    );\r\n\r\n    const labelId = useId('label');\r\n    const hintId = useId('hint');\r\n    const errorMessageId = useId('errorMessage');\r\n\r\n    return (\r\n        <div {...props}>\r\n            <Label id={labelId} className={styles.label} required={required}>\r\n                {label}\r\n            </Label>\r\n            <NormalPeoplePicker\r\n                className={mergeStyles(styles.picker, pickerClassName)}\r\n                selectedItems={selectedItems}\r\n                onChange={onChange}\r\n                onResolveSuggestions={onResolveSuggestionsInternal}\r\n                // This is intentionally disabled to avoid the suggestions taking the screen reader focus immediately\r\n                // after focus is moved to the input field. It used to cause the screen reader miss the picker label,\r\n                // placeholder, and other important information.\r\n                onEmptyResolveSuggestions={allowEmptySuggestions ? onEmptyResolveSuggestionsInternal : undefined}\r\n                onItemSelected={onItemSelected}\r\n                onRenderItem={onRenderItemInternal}\r\n                inputProps={{\r\n                    'aria-labelledby': labelId,\r\n                    ...(hint && { 'aria-describedby': hintId }),\r\n                    ...(selections.length === 0 && { placeholder: stringsInternal.inputPlaceholder }),\r\n                    ...(required && { 'aria-required': true, required: true }),\r\n                    ...(errorMessage && { 'aria-invalid': true, 'aria-errormessage': errorMessageId }),\r\n                }}\r\n                pickerCalloutProps={{\r\n                    directionalHint: DirectionalHint.bottomLeftEdge,\r\n                    directionalHintForRTL: DirectionalHint.bottomRightEdge,\r\n                    alignTargetEdge: true,\r\n                    styles: { root: { '.ms-Persona': { width: '236px' } } },\r\n                }}\r\n                pickerSuggestionsProps={{\r\n                    suggestionsHeaderText: stringsInternal.suggestionsHeaderText,\r\n                    noResultsFoundText: suggestionsErrorMessage || stringsInternal.noResultsFoundText,\r\n                    suggestionsAvailableAlertText: stringsInternal.suggestionsAvailableAlertText,\r\n                }}\r\n                removeButtonAriaLabel={stringsInternal.removeButtonAriaLabel}\r\n                resolveDelay={resolveDelay}\r\n                disabled={disabled}\r\n                itemLimit={itemLimit}\r\n            />\r\n            {hint && (\r\n                <div id={hintId} className={styles.hint}>\r\n                    {hint}\r\n                </div>\r\n            )}\r\n            {errorMessage && (\r\n                <div id={errorMessageId} className={styles.errorMessage} role='alert'>\r\n                    {errorMessage}\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n","const floatRegex = /^(\\+|-)?\\d+(\\.\\d+)?$/;\r\n\r\n/**\r\n * Parses a float strictly. The float string must be in the format like \"42\", \"42.7\" or \"-1.23\", or it will return NaN.\r\n *\r\n * @param floatString The float string to parse.\r\n * @returns The parsed float, or undefined if the float string is invalid.\r\n * @remarks This function is stricter than the built-in parseFloat function, which parses string \"42abc\" as 42.\r\n *\r\n * @example parseFloatStrictly(\"42\"); // 42\r\n * @example parseFloatStrictly(\"42.7\"); // 42.7\r\n * @example parseFloatStrictly(\"-1.23\"); // -1.23\r\n * @example parseFloatStrictly(\"42abc\"); // NaN\r\n */\r\nexport function parseFloatStrictly(floatString: string): number {\r\n    return floatRegex.test(floatString) ? parseFloat(floatString) : NaN;\r\n}\r\n\r\nconst intRegex = /^(\\+|-)?\\d+$/;\r\n\r\n/**\r\n * Parses an integer strictly. The integer string must be in the format like \"42\" or \"-7\", or it will return NaN.\r\n *\r\n * @param intString The integer string to parse.\r\n * @returns The parsed integer.\r\n * @remarks This function is stricter than the built-in parseInt function, which parses string \"42abc\" as 42.\r\n *\r\n * @example parseIntStrictly(\"42\"); // 42\r\n * @example parseIntStrictly(\"-7\"); // -7\r\n * @example parseIntStrictly(\"42abc\"); // NaN\r\n */\r\nexport function parseIntStrictly(intString: string): number | undefined {\r\n    return intRegex.test(intString) ? parseInt(intString, 10) : NaN;\r\n}\r\n","import { BaseFormAnswer, BaseFormEntry, BaseFormQuestion, FormQuestionType } from './base';\r\n\r\nexport enum ChoiceAppearance {\r\n    Radio,\r\n    Dropdown,\r\n    Checkbox,\r\n}\r\n\r\n/**\r\n * A choice question.\r\n *\r\n * @property choices The choices that the user can choose from.\r\n * @property appearance The appearance of the choices.\r\n * @property shuffle Whether to shuffle the choices.\r\n * @property allowOther Whether to allow the user to enter other value.\r\n */\r\nexport interface ChoiceQuestion extends BaseFormQuestion<FormQuestionType.Choice> {\r\n    choices: string[];\r\n    appearance: ChoiceAppearance;\r\n    shuffle?: boolean;\r\n    allowOther?: boolean;\r\n}\r\n\r\n/**\r\n * The content of a choice answer.\r\n *\r\n * @property chosen The chosen choices.\r\n * @property other The other value that the user entered. Only available if `allowOther` of the question is `true`.\r\n * If the user choose the other option, but did not enter any value, this property will be an empty string.\r\n * If the user did not choose the other option, this property will be `undefined`.\r\n */\r\nexport interface ChoiceAnswerContent {\r\n    chosen: string[];\r\n    other?: string;\r\n}\r\n\r\nexport type ChoiceAnswer = BaseFormAnswer<ChoiceAnswerContent>;\r\n\r\nexport type ChoiceEntry = BaseFormEntry<ChoiceQuestion, ChoiceAnswer>;\r\n","export * from './OneDSLogger';\r\nexport * from './common/interfaces';\r\nexport * from './common/types';\r\n","import { uuid } from '@addressbook/utilities-core';\r\nimport {\r\n    ILogger,\r\n    IScenarioEventData,\r\n    IScenarioLogger,\r\n    TelemetryScenarioStatus,\r\n    TelemetryScenarioStep,\r\n} from './common/interfaces';\r\n\r\n/**\r\n * There are some scenarios that will end in the service side, not in the client side.\r\n * Most notably, there is a platform limitation in which closing task module interrupts the logger calls.\r\n */\r\nexport class ScenarioLogger<TScenarioName extends string, TStepName extends string, TLogCategory extends string>\r\n    implements IScenarioLogger<TStepName>\r\n{\r\n    private id: string;\r\n    private name: string;\r\n    private eventData: IScenarioEventData;\r\n    private logger: ILogger<TScenarioName, TStepName, TLogCategory>;\r\n    private startTime: number;\r\n    private isScenarioComplete: boolean;\r\n    public elapsedTime: number;\r\n\r\n    constructor(logger: ILogger<TScenarioName, TStepName, TLogCategory>, name: string, dataBag?: any) {\r\n        this.id = uuid();\r\n        this.name = name;\r\n        this.logger = logger;\r\n        this.isScenarioComplete = false;\r\n        this.startTime = this.elapsedTime = performance.now();\r\n        this.eventData = {\r\n            elapsed: 0,\r\n        };\r\n\r\n        this.createMark(TelemetryScenarioStep.Start, TelemetryScenarioStatus.Init, { dataBag }, false);\r\n    }\r\n\r\n    public mark(stepName: TStepName, status?: TelemetryScenarioStatus, eventData?: Partial<IScenarioEventData>): void {\r\n        this.createMark(stepName, status ?? TelemetryScenarioStatus.Incomplete, eventData, false);\r\n    }\r\n\r\n    public stop(eventData?: Partial<IScenarioEventData>): void {\r\n        this.createMark(\r\n            TelemetryScenarioStep.Finish,\r\n            (eventData && eventData['Scenario.Status']) || TelemetryScenarioStatus.Success,\r\n            eventData,\r\n            true\r\n        );\r\n    }\r\n\r\n    public fail(eventData?: Partial<IScenarioEventData>): void {\r\n        this.createMark(TelemetryScenarioStep.Finish, TelemetryScenarioStatus.Failure, eventData, true);\r\n    }\r\n\r\n    public getCurrentElapsedTime(): number {\r\n        return performance.now() - this.elapsedTime;\r\n    }\r\n\r\n    private createMark(\r\n        stepName: string,\r\n        status: TelemetryScenarioStatus,\r\n        eventData: Partial<IScenarioEventData> | undefined | null,\r\n        completeScenario: boolean\r\n    ): void {\r\n        if (!this.isScenarioComplete) {\r\n            this.isScenarioComplete = completeScenario;\r\n\r\n            const timestamp = performance.now();\r\n\r\n            if (eventData) {\r\n                this.eventData = { ...this.eventData, ...eventData };\r\n            }\r\n\r\n            this.eventData.id = this.id;\r\n            this.eventData['Scenario.Step'] = stepName;\r\n            this.eventData['Scenario.Status'] = status;\r\n            this.eventData.elapsed = this.elapsedTime = timestamp - this.startTime;\r\n            this.eventData.stepElapsed = eventData?.stepElapsed;\r\n\r\n            this.logger.logScenario(this.name, this.eventData, completeScenario);\r\n        } else {\r\n            console.warn(\r\n                `Scenario: ${this.name}, Step: ${stepName}\r\n                is being called after scenario has completed.`\r\n            );\r\n        }\r\n    }\r\n}\r\n","import { FontSizes, isContrastTheme, makeStyles } from '@addressbook/components-fluentui-teams-theme';\r\n\r\nexport const usePeopleSelectStyles = makeStyles(theme => ({\r\n    label: {\r\n        fontSize: FontSizes.size14,\r\n        padding: '0 0 8px',\r\n    },\r\n    errorMessage: {\r\n        color: theme.palette.redDark,\r\n        padding: '4px 12px',\r\n        fontSize: FontSizes.size12,\r\n    },\r\n    hint: {\r\n        fontSize: FontSizes.size12,\r\n        color: isContrastTheme(theme.name) ? theme.palette.black : theme.palette.neutralPrimary,\r\n    },\r\n    picker: {\r\n        '.ms-TooltipHost': {\r\n            display: 'block',\r\n            overflow: 'hidden',\r\n            textOverflow: 'ellipsis',\r\n        },\r\n        '.ms-BasePicker-text': {\r\n            backgroundColor: theme.palette.neutralLight,\r\n            '.ms-PickerPersona-container': {\r\n                margin: '4px',\r\n                backgroundColor: theme.palette.white,\r\n            },\r\n            '.ms-BasePicker-input::placeholder': {\r\n                color: isContrastTheme(theme.name) ? theme.palette.black : theme.palette.neutralPrimary,\r\n            },\r\n        },\r\n        '.ms-PickerPersona-container:hover .ms-PickerItem-removeButton .ms-Button-icon': {\r\n            color: isContrastTheme(theme.name) ? theme.palette.white : undefined,\r\n            backgroundColor: isContrastTheme(theme.name) ? theme.palette.themeSecondary : undefined,\r\n        },\r\n        '.ms-PickerItem-removeButton .ms-Button-icon': {\r\n            color: isContrastTheme(theme.name) ? theme.palette.black : theme.palette.neutralPrimary,\r\n        },\r\n    },\r\n    unremovable: {\r\n        '.ms-PickerItem-removeButton': {\r\n            display: 'none',\r\n        },\r\n    },\r\n    moreButtonMenu: {\r\n        '.ms-Persona-details': {\r\n            flexDirection: 'row',\r\n        },\r\n        '.ms-Persona-secondaryText': {\r\n            display: 'flex',\r\n            marginRight: '-10px',\r\n        },\r\n        '.ms-Button--hasMenu': {\r\n            height: '20px',\r\n        },\r\n    },\r\n    expandableCoinOverlay: {\r\n        position: 'absolute',\r\n        visibility: 'hidden',\r\n        '.ms-Persona:hover &, .ms-Persona:focus-visible &': {\r\n            visibility: 'visible',\r\n        },\r\n    },\r\n}));\r\n","import { v4 } from 'uuid';\r\n\r\nexport const uuid = (): string => v4();\r\n","import React from 'react';\r\nimport { InsertLink, InsertLinkProps } from './InsertLink';\r\nimport { useInsertLinkMenuStyles } from './InsertLink.styles';\r\n\r\nexport type InsertLinkMenuProps = InsertLinkProps;\r\n\r\nexport const InsertLinkMenu: React.FC<InsertLinkMenuProps> = ({\r\n    initialLink,\r\n    onConfirm,\r\n    onCancel,\r\n    normalizeUrl,\r\n    strings,\r\n}) => {\r\n    const styles = useInsertLinkMenuStyles();\r\n    return (\r\n        <div className={styles.root}>\r\n            <div className={styles.header} role='heading'>\r\n                {strings.insertLinkTitle}\r\n            </div>\r\n            <InsertLink\r\n                initialLink={initialLink}\r\n                onConfirm={onConfirm}\r\n                onCancel={onCancel}\r\n                normalizeUrl={normalizeUrl}\r\n                strings={strings}\r\n            />\r\n        </div>\r\n    );\r\n};\r\n"],"mappings":";;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;ACdA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAOA;AACA;AACA;AACA;AAEA;AAoCA;AAIA;AAAA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAOA;AACA;AACA;AACA;;AAGA;AACA;AACA;AAIA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAKA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAKA;AACA;AAMA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;ACnaA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;;;;;;;;;;;;;;ACFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAcA;;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;;;;;;;;;AASA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;AAMA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;;;;;;;;;;AAUA;AACA;AAMA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AAGA;AACA;AAIA;AACA;AACA;AACA;AAEA;;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;AAQA;AACA;AACA;AACA;;AAIA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;AC3TA;AAAA;AAAA;AAAA;;;;;AAKA;AACA;AACA;AACA;AAEA;;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;AAKA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;AChCA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAEA;AAEA;AACA;AACA;AAMA;AACA;AAEA;AACA;;;;;;;;;;;;;AChBA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;;;;;;;;AAQA;AACA;AAMA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;ACtBA;AAAA;AAAA;;;;;AAKA;AACA;AACA;AACA;AAEA;;;;;;;;AAQA;AACA;AACA;AAAA;AAEA;AACA;AACA;AAAA;AAEA;AACA;;;;;;;;;;;;;;AC3BA;AAAA;AAAA;AASA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;ACzEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;ACvBA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACnBA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAcA;AAOA;AAEA;AAGA;AACA;AAeA;;;;;;;;;;;;;;AC5CA;AAAA;AAAA;AAAA;AAAA;AACA;;;;;;;;;;;;;;ACDA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;ACLA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;;;;;;;;;;;;;ACFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAEA;AAEA;AACA;AACA;AAmBA;AAQA;AAEA;AAOA;AACA;AAIA;AAGA;AAGA;;;;;;;;;;;;;;ACrDA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AAQA;AAEA;;AAMA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AAOA;AAIA;;AAKA;AAEA;AAIA;AAEA;AAGA;AACA;AAOA;AASA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACzEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAyBA;;AAEA;AACA;AAAA;AAKA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AAIA;AAKA;AACA;AAEA;AACA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAGA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AAEA;AACA;AAIA;AAEA;AACA;AACA;AAGA;AACA;AACA;AAGA;AAKA;AAIA;AAIA;AACA;AACA;AAKA;AAMA;AAQA;AAEA;AACA;AACA;AACA;AAEA;AAOA;;;;;;;;;;;;;;AC1KA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;ACAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAIA;;AAGA;AACA;AAEA;AACA;AAEA;AAAA;AACA;AACA;AACA;AAAA;AAEA;AACA;AAGA;AAEA;AAEA;AAYA;AAEA;;;AAGA;AACA;AAGA;AACA;AACA;AACA;AAEA;;;;;;AAMA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;ACtEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;ACdA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC/EA;AACA;AACA;AAaA;AACA;AAOA;;;;;AAKA;AACA;AAKA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AAEA;;;;AAIA;AACA;AACA;AACA;AAAA;AAEA;AACA;AAEA;;;;AAIA;AACA;AACA;AACA;AAAA;AAEA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACjFA;AACA;AACA;AAqBA;AAEA;;AAEA;AACA;AAGA;AAAA;AAFA;AAEA;AAEA;;;;;AAKA;AACA;AACA;AACA;AAEA;;;;;;AAMA;AACA;AACA;AACA;AAKA;AAEA;AACA;AAEA;;;;;AAKA;AACA;AACA;AAAA;AAEA;AACA;AACA;AAEA;;;;;AAKA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AAEA;;;;;AAKA;AACA;AACA;AAAA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAEA;;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAEA;;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AAEA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAEA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAEA;;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAEA;;AAKA;AAAA;AAEA;AACA;AACA;AAKA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;AAMA;AACA;AACA;AACA;;;;;;;;;;;;;;AChOA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;ACRA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;ACCA;AAAA;AAAA;AAMA;AAEA;;;;AAIA;AACA;AAGA;;;;;AAKA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;;;;;;;;;;;;;;ACvDA;AAAA;AAAA;AAqCA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAIA;AAIA;AAIA;AAGA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACtGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;AAKA;AACA;AAEA;;;;;AAKA;AACA;AACA;AACA;AAEA;;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;;;;;AAKA;AACA;AACA;AACA;AACA;AAEA;;;;;AAKA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AAEA;;;;;AAKA;AACA;;AACA;AACA;AAEA;;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AAaA;;;;;;AAMA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAEA;;;;;AAKA;AACA;AACA;AACA;AAEA;;AAEA;AACA;AAEA;;;;;;;AAOA;AACA;AACA;AACA;;;;;;;;;;;;;;ACjJA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACXA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAEA;AAEA;AAUA;AACA;AAgBA;AAUA;AACA;AAEA;AACA;AASA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAGA;;;;;;;;;;;;;;ACxFA;AAAA;AAAA;AAAA;;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;ACpBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAOA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAIA;;AAMA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAAA;AAEA;AAEA;AACA;AAEA;AAEA;AAMA;AAIA;AACA;AAGA;AAWA;AAEA;;AAEA;AACA;AAGA;AACA;AACA;AACA;AAEA;;;;;;AAMA;AACA;AACA;AAEA;AACA;AAEA;AACA;;;;;;;;;;;;;;ACrGA;AAAA;AAAA;AAAA;;;;;;;;;;;;;ACAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AASA;AACA;AAEA;AACA;AACA;AAEA;AASA;AAGA;AACA;AACA;AACA;AAEA;AAGA;;;;;;;;;;;;;;ACjDA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;ACxHA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACXA;AAAA;AAAA;;;;;;;;;;;;;ACAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAOA;;;;AAIA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;;;;;;;;;;;;;;ACvBA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;ACxBA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;ACRA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AA2BA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAIA;;;;;;;;;;;;;;AC7PA;AAAA;AAAA;AAsBA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAIA;AAIA;AACA;AACA;;;;;;;;;;;;;;AC5DA;AAAA;AAAA;AAEA;;;;AAIA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;;;;;;AAMA;AACA;AACA;AACA;AAEA;;;;;;;AAOA;AACA;AACA;AACA;AACA;AAEA;;;;;;;AAOA;AACA;AACA;AACA;AAEA;;;;;;;;;AASA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;ACrDA;;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;AAKA;AACA;;AACA;AAAA;AACA;AACA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;ACjBA;;;;AAIA;AACA;AAEA;;;;;AAKA;AACA;AACA;AACA;AAEA;;;;;;AAMA;AACA;;AAIA;AACA;AACA;AAAA;AACA;AACA;AAAA;AAEA;AACA;AACA;AAAA;;;;;;;;;;;;;AC/CA;AAAA;AAAA;AAAA;;;;;AAKA;AACA;AACA;AAAA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;;;;;;;;;;;;;AAaA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;AAOA;AACA;AACA;AACA;;;;;;;;;;;;;;AC5CA;AAAA;AACA;AAEA;;;;;AAKA;AACA;;AACA;AACA;;;;;;;;;;;;;;ACbA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAIA;;;;;;;;;;;;;;AC/CA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;;;;;;;;;;;;;;ACAA;AAAA;;;;AAIA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;;;;;;AAMA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;ACrBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAEA;AAEA;AACA;AACA;;;;;;;;;;;;;;ACNA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;ACPA;AAAA;AAAA;AAAA;;AAEA;AAGA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;AC3BA;;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;AC5BA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACRA;AAAA;AAAA;AAAA;AAQA;;;;;;;AAOA;AACA;AAKA;AACA;AAEA;AAEA;AAAA;AAEA;AACA;AAAA;AAEA;AAAA;AACA;AACA;AAIA;AACA;AAAA;AAEA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;;;;;;;;;;;;;AC3DA;AAAA;AAAA;AAAA;AACA;AAMA;AACA;AAEA;AACA;AAEA;;;;;;;;;;;AAWA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;;;;;;;;;;;;;;ACtCA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;ACAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AAEA;AAMA;AACA;AAEA;AAAA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AAEA;AACA;AAGA;AACA;AACA;AACA;AAKA;AAKA;AACA;AACA;AACA;AAEA;AAKA;AACA;AACA;AACA;AAEA;AAKA;AACA;AACA;AACA;AAIA;AAEA;AACA;AACA;AAIA;AACA;AACA;AACA;AAEA;AAMA;AAQA;AACA;AAKA;AACA;AACA;AAEA;AASA;;;;;;;;;;;;;;AC5HA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;ACrCA;;;;AAIA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;;;;;;;AAOA;AACA;;AACA;AACA;AACA;AAAA;AACA;;;;;;;;;;;;;ACvBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAEA;AACA;AACA;AACA;AACA;AAmBA;AAUA;AACA;AACA;AAEA;AAEA;AACA;AAKA;AAIA;AAEA;AAGA;AAOA;;;;;;;;;;;;;;AC/DA;AAAA;AAAA;AAAA;AAEA;AACA;AAEA;AAOA;;;;;;;;AAQA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAAA;AAEA;AACA;AAAA;AAEA;AACA;AAAA;AACA;AAEA;AAAA;AACA;AAEA;AACA;AAAA;AAEA;AACA;AAEA;AACA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAEA;AACA;AAAA;AAEA;AACA;AAAA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;;;;;;AAMA;AACA;AACA;AACA;AAEA;;;;;;AAMA;AACA;AACA;AACA;AAAA;AAEA;AACA;AAAA;AAEA;AACA;AAEA;;;;;;;;;;;;;AAaA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;AAIA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;ACpJA;AAAA;AAAA;;AAEA;AAEA;;;;;;;;;;;;;;ACJA;AAAA;AAAA;AAAA;AAGA;;;;AAIA;AACA;AAKA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;;AAEA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AAIA;AACA;AACA;AAAA;AAEA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;ACzCA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;ACAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;ACLA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AAEA;AAGA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAKA;AAIA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAMA;AAIA;AACA;AACA;AAGA;AAAA;AACA;AACA;AACA;AACA;AAQA;;;;;;;;;;;;;;AChEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUA;;;;;;AAMA;AACA;AAIA;AAEA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AAGA;AAIA;;;;;;AAMA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AAGA;AAEA;;;;;;;;AAQA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAOA;;;;;;AAMA;AACA;AACA;AACA;AAAA;AAEA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;;;;;;;;;;;;;;ACvHA;AAAA;AAAA;AAAA;;AAEA;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;AC9DA;AAAA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;AChBA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;ACLA;AAAA;AAAA;AAAA;AAAA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACDA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAUA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAAA;AAEA;AACA;AAGA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AAEA;AAcA;AAAA;AAEA;;AAEA;AACA;AAGA;AACA;AACA;AACA;AAEA;;;;;;AAMA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACzFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAqBA;AACA;AAcA;AACA;AAEA;AAEA;AASA;AAQA;AACA;AACA;AACA;AACA;AACA;AAEA;AAIA;;;;;;;;;;;;;;ACxEA;AAAA;AAAA;AAAA;AAYA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC7BA;AASA;AACA;AAEA;AACA;AAaA;AAAA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACnEA;AACA;AACA;AACA;AACA;AACA;AAGA;AAEA;AAAA;AAQA;AAKA;AAGA;AACA;AAIA;AACA;AACA;AAEA;AACA;AACA;AAGA;AAMA;;;;;;;;;;;;;;AC9CA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;ACVA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;AC3BA;AAAA;AAAA;;;;;;;;;;;;;ACAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAEA;;;;;;;;;;;;AAEA;AACA;AACA;AACA;AACA;AAOA;AAAA;AAKA;AACA;AACA;AACA;AAUA;AAGA;;;;;;;;;;;;;;ACpCA;AAAA;AAAA;AAAA;AAAA;;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;AC0MA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;ACtSA;AAAA;AAAA;AAAA;AAAA;;AAEA;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACnGA;AACA;AACA;AAGA;;;;;AAKA;AACA;AACA;AACA;AAEA;;;;;;;;;AASA;AACA;AACA;AACA;AAEA;;;;;;;;;AASA;AACA;AACA;AACA;AAEA;;;;;AAKA;AACA;;AACA;AAAA;AAEA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;;;;;;AAMA;AACA;AAIA;AAAA;AAEA;AACA;AAAA;AAEA;AACA;AACA;AAKA;AACA;AACA;AAKA;;;;;;AAMA;AACA;AAIA;AAEA;AACA;AACA;AACA;AACA;AAGA;AAGA;;;;;;;;;;;;;;AC9GA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAqBA;AACA;AAEA;AACA;AACA;;AACA;AAEA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;AClHA;AAAA;AAAA;AAAA;;AAEA;AAEA;;;;;;;;;;;;;;ACDA;AAAA;;;;;AAKA;AACA;;;;;;;;;;;;;;ACTA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;ACjCA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;;;;;;;;;;;;;;ACFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAiBA;AAgBA;AACA;AAEA;AAEA;AAGA;AAMA;AAOA;AAMA;AAcA;AAGA;;;;;;;;;;;;;ACjFA;AAAA;AAAA;AAAA;AAAA;AACA;;;;;;;;;;;;;;ACDA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;ACPA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AAIA;AAOA;AACA;AAEA;;AACA;AACA;AACA;AAIA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;;AAEA;AAAA;AAEA;AAGA;AAKA;AACA;AACA;AACA;AAIA;AAEA;AAMA;AAMA;AAMA;AAMA;AAOA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACtGA;AACA;AACA;AACA;AAEA;AA2BA;AAAA;AAYA;AAEA;AACA;AAEA;AAKA;;AACA;AAMA;AACA;AACA;AACA;AAGA;AAIA;;;;;;;;;;;;;;ACvEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;ACnCA;AAOA;;;;;;;AAOA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAWA;;AAEA;AACA;AAGA;;;;AAIA;AACA;AAAA;AAPA;AAOA;AAEA;;AACA;AAEA;AACA;AAAA;AAEA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;;;;;;;;;;;;;;AC5DA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACAA;AACA;AACA;AACA;AAeA;AAAA;AASA;AACA;AACA;AAEA;AACA;AAAA;AACA;AACA;AAEA;AAEA;AAAA;AACA;AAIA;AACA;AAEA;AAQA;AAMA;AACA;AACA;AAMA;;;;;;;;;;;;;;ACpEA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;ACAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAEA;AACA;AACA;AACA;AACA;AAsCA;;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAiBA;AAEA;AAEA;AAEA;AACA;AAUA;AACA;AAGA;AAGA;AACA;AACA;AAMA;AAKA;AAEA;AAEA;AAIA;AACA;AACA;AAIA;AAGA;AACA;AAcA;AAGA;;;;;;;;;;;;;;AClJA;AAAA;AAAA;AAAA;;AAEA;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;ACvEA;AAAA;AAAA;AAGA;;;;;;;;;;;;;;ACHA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAEA;AAEA;;;;;;;;;;;;;;ACJA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;ACAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;ACVA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;AC/NA;AAAA;AAAA;;;;;;AAMA;AACA;AAIA;AACA;AAEA;;;;;;AAMA;AACA;AAGA;AACA;AAEA;;;;;;AAMA;AACA;AAIA;AACA;;;;;;;;;;;;;ACzCA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACpDA;AACA;AAEA;AAEA;;;;AAIA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;;;;;;AAMA;AACA;AACA;AACA;AAEA;;;;;;AAMA;AACA;;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAEA;;;;;;AAMA;AACA;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AAEA;;;;;;;AAOA;AACA;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AAEA;;;;;;;;AAQA;AACA;AAAA;;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AAEA;;;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;;AACA;AAEA;;;;;;;AAOA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;AAKA;AACA;AAEA;;;;;;;;;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;AC3MA;AACA;AAGA;AACA;AAEA;AACA;AAAA;AAEA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAEA;;;;;AAKA;AACA;AACA;AACA;AAAA;AAEA;AACA;AAEA;;;;;;AAMA;AACA;AACA;AACA;AAAA;AAEA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAIA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;;;;;;;;;;;;;;ACtEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AACA;AACA;AAEA;;;;AAIA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;AAIA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;AAIA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;ACvIA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AChBA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAWA;AACA;AACA;;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAAA;AAEA;AACA;AAGA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAmBA;AAAA;AAEA;;AAEA;AACA;AAGA;AACA;AACA;AACA;AAEA;;;;;AAKA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;ACvFA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;ACrDA;AAAA;;;;;;AAMA;AACA;;;;;;;;;;;;;ACVA;AAAA;AAAA;AAAA;AAAA;;AAEA;AACA;AACA;;;;;;;;;;;;;ACJA;AAAA;AAAA;AAAA;AAAA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAgBA;AAAA;AAgBA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAGA;AAEA;AAEA;AAAA;AAgBA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAKA;AACA;AACA;AAGA;AACA;AACA;AAKA;AAGA;AACA;AACA;AAQA;AAGA;AAOA;AAAA;AAiBA;AAEA;AACA;AAAA;AACA;AAEA;AAKA;AACA;AAGA;AACA;AAUA;AAIA;AACA;AAKA;AAWA;AAQA;AAiBA;AAMA;AAAA;AACA;AACA;AAEA;AAEA;AASA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;;;;;;;;;;;;;;ACtPA;AAAA;AAAA;AAAA;;AAEA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACJA;AACA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;;AACA;AACA;AAAA;AACA;AACA;AAAA;AAEA;;AACA;AACA;AAAA;AACA;AACA;AAAA;;;;;;;;;;;;;AClIA;AAAA;AAAA;;AAEA;AAEA;;;;;;;;;;;;;;ACJA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;ACjDA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAOA;AAEA;AAEA;AAKA;AACA;AACA;AAEA;AAAA;AAEA;AACA;AACA;AACA;AAKA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAMA;AAEA;AAIA;AASA;AAKA;;;;;;;;;;;;;;AC7EA;AAAA;AAAA;AAAA;AAAA;AACA;;;;;;;;;;;;;;ACDA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;;;;;;;;;;;;;;AC/BA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;ACLA;AAAA;AAAA;AAAA;AAEA;;;;AAIA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC7BA;AACA;AACA;AACA;AAEA;AAuBA;AAAA;AAWA;AACA;AACA;AACA;AACA;AAEA;AAKA;AAEA;AAKA;AACA;AAQA;AAKA;AACA;AACA;AAQA;AAEA;AAYA;AACA;AAGA;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACnGA;AACA;AAEA;;;;;;AAMA;AACA;;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAGA;AACA;AAAA;AAEA;AACA;AAEA;AACA;AACA;AAIA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAOA;;;;;;AAMA;AACA;;AACA;AAAA;AAEA;AAEA;AACA;AACA;AAAA;AAEA;AACA;AAAA;AAQA;;;;;;;AAOA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;;;;;;;;;;;;;ACpGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAUA;AAOA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAIA;AAMA;AACA;AACA;AACA;AACA;AAMA;;;;;;;;;;;;;AC/CA;AAAA;AAAA;AAAA;AA8BA;AACA;AACA;AAEA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;ACnCA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;;;;;;AAMA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AAOA;;;;;AAKA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;;AA1CA;;AAEA;AACA;AA0CA;;;;;;AAMA;AACA;AACA;AAAA;AAEA;AACA;AACA;AAEA;;;;;;AAMA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;;;;;;;;;;;;;;AC7HA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;;;;;;;;;AASA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;AAMA;AACA;AAIA;AAGA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AAGA;AAUA;;;;;;AAMA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAGA;;;;;;;;;;;;;;ACtFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACRA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAQA;AAAA;AAOA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;;AACA;AACA;AACA;AACA;AAEA;AAEA;AAAA;AACA;AAIA;AACA;AACA;AACA;;AAaA;AAEA;AAgBA;AAUA;AACA;AAQA;AAIA;;;;;;;;;;;;;AC1GA;AAAA;AAAA;;AAEA;AACA;;;;;;;;;;;;;ACHA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAEA;AAEA;AACA;AACA;AAGA;AACA;AACA;AAEA;AAGA;;;;;;;;;;;;;;AChBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;AC1EA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;ACTA;AAAA;;AAEA;AACA;AACA;AAAA;AAAA;AAOA;;;;AAIA;AACA;AACA;AACA;AAEA;;;;;AAKA;AACA;AACA;AACA;;AAtBA;;AAEA;AACA;;;;;;;;;;;;;;ACTA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;;;;;;;;;;;;;;ACFA;AAAA;AAAA;AAsBA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAIA;AAIA;AACA;AACA;;;;;;;;;;;;;;AC7DA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;ACzCA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;;;;;;;;;;;;;;ACFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;;;;;;;;;;;;;ACDA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;AC3EA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;AC/BA;AAAA;AAAA;;AAEA;AAEA;;;;;;;;;;;;;;ACJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAaA;AAEA;AAEA;AAsxNA;AAAA;AAAA;AAOA;AAEA;;;;;AAKA;AACA;AAGA;AACA;AACA;;;;;;;;;;;;;;ACnBA;AAAA;AAAA;AAAA;AAAA;AAGA;AAIA;AAIA;;;;;;;;;;;;;;ACVA;AAAA;AAAA;AAAA;AACA;AAEA;;;;AAIA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;;;;;AAKA;AACA;AACA;AACA;AAEA;;;;;AAKA;AACA;AACA;AACA;AAEA;;;;;;AAMA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;AC3CA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAQA;AAEA;AACA;AACA;AACA;AAIA;;AAMA;AACA;AAEA;AACA;AACA;AAKA;AACA;AACA;AAEA;;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AAaA;AACA;AACA;AAEA;AAMA;;AACA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAOA;AAEA;;AAEA;AACA;AAGA;AACA;AACA;AACA;AAEA;;;;;;AAMA;AACA;AACA;AAEA;AACA;AAEA;AACA;;;;;;;;;;;;;;ACtHA;AAAA;AAAA;;;;;AAKA;AACA;AACA;AACA;AAEA;;;;;AAKA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;ACnBA;AAAA;AAAA;AAAA;;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAOA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;;;;AAYA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;;;;AAIA;AACA;AACA;AACA;;;;;;;;;;;;;;ACrFA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;ACAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;;;;;AAKA;AACA;AACA;AACA;AAAA;AACA;AACA;AAEA;;;;;;AAMA;AACA;AACA;AACA;AACA;AAEA;;;;;;AAMA;AACA;AACA;AACA;AACA;AAEA;;;;;;AAMA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACjDA;AAAA;AAAA;;AAEA;AAEA;;;;;;;;;;;;;;ACJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;ACJA;AAAA;AAAA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;ACdA;AAAA;AAAA;AAAA;AA2BA;;AAEA;AACA;AACA;AAEA;AAGA;AACA;AAAA;AAEA;AACA;AACA;AACA;AAIA;AAKA;AAEA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;AC9CA;;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAEA;;;;;AAKA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACxBA;AACA;AACA;AACA;AAOA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;;;;;;;;;;;;;;;;;;;;;;;;ACvBA;;AAEA;AACA;AAIA;;;;AAIA;AACA;AACA;AAAA;AAEA;AACA;AACA;AAEA;;AAEA;AACA;AACA;AACA;AAEA;;;;AAIA;AACA;;AACA;AAAA;AACA;AAEA;AACA;;AACA;AAAA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAEA;;;;;AAKA;AACA;;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;;;;;;;;;;;;;;AC3DA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;ACVA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;ACtBA;AAAA;AAAA;AAAA;AAEA;;;;;AAKA;AACA;AACA;AACA;AACA;AAEA;;;;;AAKA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;ACxBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;ACJA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAEA;;;;AAIA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;;;;;AAKA;AACA;AACA;AACA;AAEA;;;;;;AAMA;AACA;AACA;AACA;AAEA;;;;;;AAMA;AACA;AACA;AACA;AAEA;;;;;;AAMA;AACA;AACA;AACA;AAEA;;;;;;AAMA;AACA;AACA;AAIA;AACA;AAEA;;;;;AAKA;AACA;AACA;AACA;AAEA;;;;;;;;;;;;AAYA;AACA;AACA;AACA;;;;;;;;;;;;;;ACjGA;AAAA;AAAA;AAEA;;;;;AAKA;AACA;AAGA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;ACxBA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;ACAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAGA;AACA;AACA;AACA;AAEA;;AAGA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AAIA;AAEA;AAEA;AACA;AACA;AAEA;AAGA;;;;;;;;;;;;;;ACrCA;AAAA;AAAA;AAAA;;;;;;;;;;;;;ACAA;AAAA;AAAA;;AAEA;AAEA;;;;;;;;;;;;;ACJA;AAAA;AAAA;AAAA;AAQA;AAEA;;;;;;;AAOA;AACA;AAKA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AAEA;AAGA;AAAA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAEA;AACA;AAAA;AAEA;AACA;AACA;AAEA;AACA;AAAA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAEA;AACA;AAAA;AAEA;AACA;AAEA;AACA;AACA;AAAA;AAEA;AACA;AAEA;AACA;AACA;AAAA;AAEA;AACA;AAEA;AACA;AACA;AAAA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAYA;AACA;AACA;AAEA;AACA;AACA;;;;;;;;;;;;;;AC7IA;AAAA;AAAA;AAAA;AACA;AAOA;AACA;AAEA;;AAEA;AACA;AAIA;;;;;;AAMA;AACA;AAIA;AACA;AACA;AAEA;;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;;;;;;;;;;;;;;AC9DA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;AC1EA;AAAA;;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;AC1BA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;ACAA;AAAA;AAAA;;;;;;;;;;;;;;ACAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;AChBA;AAAA;AAAA;;AAEA;AAEA;;;;;;;;;;;;;;ACJA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACpBA;AACA;AACA;AACA;AACA;AAkCA;;AAEA;AACA;AACA;AACA;AAEA;AACA;AAGA;AACA;AACA;AACA;AACA;AAIA;AAEA;AAEA;AAOA;;;;;;;;;;;;;;ACpEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAQA;AACA;AAEA;AASA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACtBA;;;;;AAKA;AACA;;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;;AACA;AACA;AAAA;;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAEA;;;;;AAKA;AACA;;AACA;AACA;AACA;AACA;AAAA;AAEA;;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;AAMA;AACA;AACA;AAIA;AASA;AACA;AACA;AACA;AAEA;;;;;;;;;;;;;;;AAeA;AACA;AAIA;AAAA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAOA;;;;AAIA;AACA;AAEA;;;;;;;AAOA;AACA;AAIA;AACA;AAcA;;;;;;;;;;;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;;;AAWA;AACA;AACA;AACA;;;;;;;;;;;;;;ACtLA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;ACAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;ACAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAIA;AAOA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAIA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAKA;AASA;;;;;;;;;;;;;;AChDA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;AC/CA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;ACPA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;AC9IA;AAAA;AAAA;;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;AAKA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;AClCA;AAOA;;;;;;AAMA;AACA;AACA;AACA;AAAA;AAEA;AACA;AAAA;AAEA;AACA;AAAA;AAEA;AACA;AACA;AACA;AAaA;;AAEA;AACA;AAGA;;;;AAIA;AACA;AAAA;AAPA;AAOA;AAEA;;;AACA;;AACA;AAEA;;AACA;AACA;AAAA;AACA;;;;;;;;;;;;;;AC7DA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAGA;;AAEA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAEA;AAEA;AACA;AAGA;;;;;;;;;;;;;;AChCA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;ACPA;AAAA;AAAA;AAEA;;;;AAIA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;;;;;AAKA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;ACpBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAEA;;;;;;;;;;;;AAEA;AACA;AACA;AACA;AAOA;AAAA;AAKA;AACA;AAEA;AAGA;;;;;;;;;;;;;;ACzBA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;ACzCA;AAAA;AAAA;AAiBA;AACA;AAEA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;;;;;;;;;;;;;;ACvCA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;ACAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAGA;;;AAGA;AACA;AAkBA;;;;;AAKA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACpCA;AAAA;AAAA;AAAA;AAAA;AACA;AAQA;AAEA;;;;;AAKA;AACA;AAKA;AACA;AACA;AAAA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAIA;AACA;AACA;AACA;;;;;;;;;;;;;;ACzCA;AAAA;AAAA;AAwBA;AACA;AAGA;;;;AAIA;AACA;AAIA;;;;;;AAMA;AACA;AAIA;AACA;AACA;AAEA;;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;ACnFA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;ACAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;;;;;;;;;;;;;;ACFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAOA;AAMA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAKA;AAEA;;AAEA;AACA;AAGA;AACA;AACA;AACA;AAEA;;;;;;AAMA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;AC7FA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;ACrBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;ACzCA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;ACGA;;;;;;;;;AASA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;AClCA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAuBA;AACA;AAEA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;;;AAGA;AACA;AAyBA;;;;;;;AAOA;AACA;AAOA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AAEA;AACA;AACA;AAGA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAOA;AACA;AACA;AAMA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAMA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAKA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAOA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAMA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAMA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAaA;AACA;AACA;AAEA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;AClpBA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AClCA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AA+BA;AAEA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAUA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAKA;AAKA;AAOA;AAQA;AACA;AAOA;AAWA;;;;;;;;;;;;;AC7LA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAEA;;;;;;;;;;;;AAEA;AACA;AACA;AACA;AAOA;AAAA;AAKA;AACA;AAEA;AAGA;;;;;;;;;;;;;;ACvBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;AAIA;AACA;AACA;AACA;AAEA;;;;;;;;AAQA;AACA;;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;AAOA;AACA;AAKA;AACA;AAEA;AAEA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AAEA;;;;;;;AAOA;AACA;AAKA;AACA;AAEA;;;;;AAKA;AACA;AACA;AACA;AACA;AAEA;;;;;AAKA;AACA;AACA;AACA;AAEA;;;;;AAKA;AACA;AACA;AACA;;;;;;;;;;;;;;AC1GA;AAAA;AAAA;AAEA;AAuBA;;;;;;;;;;;;;ACzBA;AAAA;AAAA;AAAA;AAAA;AACA;;;;;;;;;;;;;;ACDA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AAIA;AACA;AAEA;AAKA;AAAA;AAEA;AAEA;AAOA;AACA;AACA;AAIA;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AAMA;;;;;;;;;;;;;;AC3DA;AAAA;;;;;;;;;;;;;;ACFA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;ACtHA;AACA;AASA;AAIA;AACA;AACA;AACA;AAEA;;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AAEA;;AACA;AACA;AACA;AAAA;AAEA;;AACA;AACA;AACA;AAAA;AACA;;;;;;;;;;;;;;ACnCA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAiBA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAGA;AAEA;AACA;AACA;AACA;AAGA;AAIA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAKA;AACA;AACA;AAsCA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AClHA;AAEA;AAUA;AAEA;;;;;;;AAOA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;AC9CA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;AC1CA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAEA;AAEA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAGA;;;;;;;;;;;;;;ACvBA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAGA;AAEA;AAGA;AAEA;AAEA;AACA;AAGA;;;;;;;;;;;;;;ACjBA;AAAA;AAAA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACFA;AACA;AAEA;AAEA;;;AAGA;AACA;AACA;AACA;AACA;AAIA;;;;;AAKA;AACA;;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAEA;;;;;AAKA;AACA;AAGA;AACA;AAEA;;AAEA;AACA;AACA;AACA;;;;;;;;;;;;;;AChDA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAOA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAIA;AAMA;AACA;AAEA;AACA;AACA;AAKA;AAEA;AACA;AAEA;;AAAA;AAWA;AAEA;AASA;;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AASA;AAEA;;AAEA;AACA;AAGA;AACA;AACA;AACA;AAEA;;;;;;AAMA;AACA;AACA;AAEA;AACA;AAEA;AACA;;;;;;;;;;;;;ACjHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAEA;AAEA;AACA;AACA;AACA;AAWA;AACA;AACA;AAEA;AAOA;AAGA;AAKA;;;;;;;;;;;;;;ACrCA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;;;;;;;;;;;;;;ACFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;;;;;;;;;;;;;ACpCA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAWA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAAA;AAEA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;ACxCA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;ACHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;;;;;;ACrOA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAYA;AAUA;AAEA;AAEA;AACA;AAMA;AASA;AACA;AACA;AAGA;AAIA;AAIA;;;;;;;;;;;;;;ACxDA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;ACVA;AAAA;AAAA;AAAA;AACA;AAIA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;ACdA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;AC3BA;AAAA;AAAA;AAAA;AAAA;AACA;AAGA;;;;AAIA;AACA;AAKA;AACA;AACA;AAEA;AAKA;AAEA;AAGA;AAGA;;;;;;;;;;;;;;;;;;;;;;;;;;AC5BA;AACA;AAEA;;;;AAIA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;;;;;AAKA;AACA;AACA;AACA;AAEA;;;;;AAKA;AACA;AACA;AACA;AAEA;;;;;;AAMA;AACA;AACA;AACA;AAEA;;;;;AAKA;AACA;;;AACA;AACA;AAEA;;AACA;AAEA;;;;;AAKA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;;;;;;AAMA;AACA;;;AACA;AACA;AACA;;AACA;AACA;;;;;;;;;;;;;;AC5BA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACjFA;AACA;AACA;AAQA;;AAEA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AAEA;AAKA;AACA;AACA;AAMA;;;;;;;;;;;;;;;;;;;;;;;;AC1CA;;;;;AAKA;AACA;;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AACA;AACA;AAAA;;;;;;;;;;;;;;AC7BA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;;;;;;;;;;;;;;AC3BA;AAAA;AAAA;AAAA;;;;;;;;;;;;AAYA;AACA;;AACA;AACA;AAEA;;;;;;;AAOA;AACA;AACA;AACA;AAEA;;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;AAOA;AACA;AACA;AACA;;;;;;;;;;;;;;AC5DA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAEA;AAGA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;ACzEA;AAAA;AAAA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;ACTA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAYA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;AAKA;AACA;AACA;AACA;AAEA;;;;;AAKA;AACA;AACA;AACA;AAEA;;;;;AAKA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AClSA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AAMA;AAAA;AACA;AAEA;AAEA;AACA;AAIA;;;;;;;;;;;;;;ACzBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AASA;AACA;AACA;AACA;AAwCA;AAuBA;AACA;AAEA;AAEA;AACA;AACA;AACA;AASA;AACA;AACA;AACA;AAEA;AACA;AAQA;AACA;AACA;AACA;AAIA;;;;;;;;;;;;;ACjHA;AAAA;AAAA;;;;;;;;;;;;;;ACAA;AAAA;AAAA;AAAA;AAAA;AACA;AASA;AAeA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;AAIA;AACA;AAIA;;;;;;AAMA;AACA;AAIA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;;;;;;;;;;;;;;ACrHA;AAAA;AAAA;AAAA;;;;;;;;;;;;;ACAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;AAYA;AAMA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAQA;AACA;AACA;AACA;AACA;AAGA;AACA;AAIA;AAGA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACnEA;AACA;AAEA;AAQA;AAAA;AACA;AACA;AAEA;AACA;AAKA;AAmBA;AAEA;AAGA;AAKA;AAEA;AACA;AACA;;;;;;;;;;;;;;ACtDA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;;;;;;;;;;;;;ACDA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;ACOA;AAAA;AAAA;;;;;;;;;;;;;;AAcA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;;;;;;AC/BA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AAEA;AAKA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AAQA;;;;;;;;;;;;;ACpCA;AAAA;AAAA;;AAEA;AAEA;;;;;;;;;;;;;ACJA;AAAA;AAAA;AAAA;AAAA;AACA;;;;;;;;;;;;;;ACDA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAaA;AAWA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AAEA;AAUA;AACA;AAGA;AACA;AAIA;AAKA;AAUA;AAEA;AACA;AAGA;AAOA;;;;;;;;;;;;;;ACvFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACZA;AAYA;AACA;AACA;AACA;AACA;AACA;AAEA;AASA;;;;;;;;;;;AAWA;AACA;AAAA;AAyBA;AAKA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AAKA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AAIA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAAA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAIA;AAKA;AAIA;AACA;AAAA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;;AAEA;AACA;AACA;AAOA;AAMA;;AAYA;AACA;AACA;AAAA;AACA;AACA;AACA;AAWA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AAEA;AAEA;AAGA;AAKA;AACA;AACA;AACA;AAWA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAMA;AAKA;AAOA;;;;;;;;;;;;;;ACpQA;AAAA;AAAA;AAEA;;;;;;;;;;;AAWA;AACA;AACA;AACA;AAEA;AAEA;;;;;;;;;;AAUA;AACA;AACA;AACA;;;;;;;;;;;;;;AC/BA;AAAA;AAAA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;ACNA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;ACFA;AAAA;AAAA;AAAA;AACA;AAQA;;;AAGA;AACA;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAMA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAMA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AAEA;AAEA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;ACvFA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;AChEA;AAAA;AAAA;AAEA;;;;;;;;;;;;;;ACFA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAIA;AAOA;AACA;AAEA;AAGA;AASA;;;;;A","sourceRoot":""}