{"version":3,"file":"dist/js/featureRelatedFiles~main~mobile.js","sources":["webpack:///./src/locales lazy ^\\.\\/.*\\/.*\\.json$ include: strings\\.json$ exclude: en\\-US\\.strings namespace object","webpack:///./src/service/axios.ts","webpack:///./src/service/tokenCache.ts","webpack:///./src/service/queryCache.ts","webpack:///./src/service/RequestError.ts","webpack:///./src/service/index.ts","webpack:///./src/service/GlobalServiceClient.ts","webpack:///./src/service/gen/reportServiceClient.ts","webpack:///./src/locales/localeKeys.ts","webpack:///./src/service/queryClient.ts","webpack:///./src/service/gen/index.ts","webpack:///./src/locales/supportedLngs.ts"],"sourcesContent":["var map = {\n\t\"./dev/strings.json\": [\n\t\t\"DqxR\",\n\t\t\"dev-strings-json\"\n\t],\n\t\"./en-US/strings.json\": [\n\t\t\"eXG7\",\n\t\t\"en-US-strings-json\"\n\t],\n\t\"./zh-CN/strings.json\": [\n\t\t\"GB1s\",\n\t\t\"zh-CN-strings-json\"\n\t],\n\t\"./zh-TW/strings.json\": [\n\t\t\"rTTZ\",\n\t\t\"zh-TW-strings-json\"\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\treturn Promise.resolve().then(function() {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\n\tvar ids = map[req], id = ids[0];\n\treturn __webpack_require__.e(ids[1]).then(function() {\n\t\treturn __webpack_require__.t(id, 3);\n\t});\n}\nwebpackAsyncContext.keys = function webpackAsyncContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackAsyncContext.id = \"8/2k\";\nmodule.exports = webpackAsyncContext;","import { IHttpInfo } from '@addressbook/components-logger';\r\nimport { getAuthToken, getTeamsContext, TeamsError } from '@addressbook/components-metaos-host';\r\nimport { uuid } from '@addressbook/utilities-core';\r\nimport Axios, {\r\n    AxiosError,\r\n    AxiosHeaders,\r\n    AxiosResponse,\r\n    AxiosResponseHeaders,\r\n    InternalAxiosRequestConfig,\r\n    RawAxiosResponseHeaders,\r\n} from 'axios';\r\nimport { HEADER_CLIENT_REQUEST_ID, HEADER_RESPONSE_CORRELATION_ID, HEADER_ROUTE_KEY } from '../common/Constants';\r\nimport { ADDRESSBOOK_APP_RESOURCE_URL } from '../common/env';\r\nimport { LogCategory, logger } from '../logger';\r\nimport { tryParseAfdRefFromHeaders } from '../utilities/Utils';\r\nimport { ClientErrorCodes, RequestError } from './RequestError';\r\n\r\nexport interface ExtAxiosConfig {\r\n    _startRequestTime?: number;\r\n    _getTeamsContextTime?: number;\r\n    _getAuthTokenTime?: number;\r\n}\r\n\r\n/**\r\n * check statusCode is validate (2xx)\r\n *\r\n * @param status\r\n * @returns\r\n */\r\nconst isValidateStatus = (status: number): boolean => status >= 200 && status < 300;\r\n\r\nexport const axiosInstance = Axios.create({\r\n    validateStatus: isValidateStatus,\r\n    paramsSerializer: {\r\n        serialize: params =>\r\n            new URLSearchParams(\r\n                Object.entries(params).filter((v): v is [string, string] => v[1] !== undefined)\r\n            ).toString(),\r\n    },\r\n});\r\n\r\naxiosInstance.interceptors.request.use(transformRequest);\r\naxiosInstance.interceptors.response.use(transformResponse, transformError);\r\n\r\nasync function transformRequest(\r\n    config: InternalAxiosRequestConfig & ExtAxiosConfig\r\n): Promise<InternalAxiosRequestConfig> {\r\n    if (!config.headers) {\r\n        config.headers = new AxiosHeaders({\r\n            [HEADER_CLIENT_REQUEST_ID]: uuid(),\r\n        });\r\n    } else if (!config.headers[HEADER_CLIENT_REQUEST_ID]) {\r\n        config.headers[HEADER_CLIENT_REQUEST_ID] = uuid();\r\n    }\r\n    logger.logTraceDebug(LogCategory.APIRequest, `Calling getAuthToken for ${ADDRESSBOOK_APP_RESOURCE_URL}`);\r\n\r\n    config._getTeamsContextTime = performance.now();\r\n    const context = await getTeamsContext();\r\n    config._getAuthTokenTime = performance.now();\r\n    config.headers.authorization = `Bearer ${await getAuthToken(ADDRESSBOOK_APP_RESOURCE_URL)}`;\r\n    config.headers[HEADER_ROUTE_KEY] = context.user?.tenant?.id;\r\n    config._startRequestTime = performance.now();\r\n    return config;\r\n}\r\n\r\nfunction getRequestId(config?: InternalAxiosRequestConfig): string | undefined {\r\n    return config?.headers?.[HEADER_CLIENT_REQUEST_ID] as string;\r\n}\r\nfunction getHttpInfo(\r\n    config: InternalAxiosRequestConfig,\r\n    responseHeaders?: RawAxiosResponseHeaders | AxiosResponseHeaders\r\n): IHttpInfo {\r\n    const url = config.url || '';\r\n    const getTeamsContextTime = (config as ExtAxiosConfig)?._getTeamsContextTime || performance.now();\r\n    const getAuthTokenTime = (config as ExtAxiosConfig)?._getAuthTokenTime || performance.now();\r\n    const startRequestTime = (config as ExtAxiosConfig)?._startRequestTime || performance.now();\r\n    const getTeamsContextLatency = getAuthTokenTime - getTeamsContextTime;\r\n    const getAuthTokenLatency = startRequestTime - getAuthTokenTime;\r\n    const latency = performance.now() - startRequestTime;\r\n    const clientRequestId = getRequestId(config)!;\r\n    const correlationId = responseHeaders?.[HEADER_RESPONSE_CORRELATION_ID] as string;\r\n    const edgeRef = tryParseAfdRefFromHeaders(responseHeaders);\r\n    return {\r\n        url,\r\n        getTeamsContextLatency,\r\n        getAuthTokenLatency,\r\n        latency,\r\n        clientRequestId,\r\n        correlationId,\r\n        apiName: new URL(url, config.baseURL || location.origin).pathname,\r\n        requestMethod: config.method || 'GET',\r\n        edgeRef,\r\n    };\r\n}\r\nexport function transformResponse<T>(response: AxiosResponse<T>): T {\r\n    const { status = 0, config } = response;\r\n    const httpInfo = getHttpInfo(config, response.headers);\r\n    if (!isValidateStatus(status)) {\r\n        // log http exception\r\n        logger.logTraceHttpException(\r\n            httpInfo.apiName || '',\r\n            (response.data as any)?.Message || response.statusText,\r\n            status\r\n        );\r\n    } else {\r\n        logger.logTraceDebug(LogCategory.APIRequest, `success for ${response.config.url}`);\r\n    }\r\n    const httpRequest: IHttpInfo = {\r\n        ...httpInfo,\r\n        responseCode: status,\r\n        responseText: response.statusText,\r\n    };\r\n\r\n    logger.logHttp(httpRequest);\r\n    return response.data;\r\n}\r\n\r\nasync function transformError(error: AxiosError): Promise<never> {\r\n    if (error?.code === AxiosError.ERR_NETWORK) {\r\n        logger.logTraceError(LogCategory.NetworkError, `NetworkError ${error?.config?.url} ${error.message}`);\r\n        if (error.config) {\r\n            logger.logHttp(getHttpInfo(error.config));\r\n        }\r\n        throw new RequestError(error, ClientErrorCodes.network, getRequestId(error.config));\r\n    } else if (error?.response) {\r\n        // get response from server will log a http error\r\n        const response = error.response;\r\n\r\n        if (response?.data instanceof Blob && response?.data.type === 'application/json') {\r\n            try {\r\n                const errorString = JSON.parse(await response?.data.text());\r\n                response.data = errorString;\r\n            } catch (e) {\r\n                logger.logTraceError(LogCategory.APIRequest, `Invalid JSON response from Blob: ${response?.data}`);\r\n            }\r\n        }\r\n        transformResponse(response);\r\n        throw new RequestError(response, undefined, getRequestId(error.config));\r\n    } else if (Axios.isCancel(error) as any) {\r\n        logger.logTraceInfo(LogCategory.APIRequest, `Cancel ${error?.config?.url}`);\r\n    } else if (error?.config) {\r\n        // no response\r\n        // usually network connection error\r\n        const logCategory = getAxiosErrorLogCategory(error?.code);\r\n        logger.logTraceError(logCategory, `NetworkError ${error?.config?.url} ${error.message}`);\r\n        logger.logHttp(getHttpInfo(error.config));\r\n        throw new RequestError(error, ClientErrorCodes.network, getRequestId(error.config));\r\n    } else if (error instanceof Error) {\r\n        const isTeamsSDKError = error instanceof TeamsError;\r\n        // runtime error\r\n        logger.logTraceException(isTeamsSDKError ? LogCategory.TeamsSDKError : LogCategory.RuntimeError, {\r\n            error,\r\n            message: `${error.name} ${error?.config?.url}`,\r\n        });\r\n        throw new RequestError(error, isTeamsSDKError ? ClientErrorCodes.teamsSDK : ClientErrorCodes.runtime);\r\n    } else {\r\n        logger.logTraceError(LogCategory.UnknownRequestError, `UnknownError ${error}`);\r\n    }\r\n\r\n    throw new RequestError(error);\r\n}\r\n\r\n// https://github.com/axios/axios/blob/main/lib/adapters/xhr.js\r\nfunction getAxiosErrorLogCategory(errorCode?: string): LogCategory {\r\n    switch (errorCode) {\r\n        case AxiosError.ERR_NETWORK:\r\n            return LogCategory.NetworkError;\r\n        case AxiosError.ETIMEDOUT:\r\n            return LogCategory.TimeoutExceeded;\r\n        case AxiosError.ECONNABORTED:\r\n            return LogCategory.RequestAborted;\r\n        default:\r\n            return LogCategory.APIRequest;\r\n    }\r\n}\r\n","import jwt_decode from 'jwt-decode';\r\nimport { AccessToken, ResourceType } from './gen';\r\nimport { SERVICE_CLIENT } from './GlobalServiceClient';\r\n// const msal = require('@azure/msal-node');\r\nconst tokenCache = new Map<string, Promise<AccessToken>>();\r\n\r\n/**\r\n * find page query cache.\r\n *\r\n * @param resourceType resource type\r\n * @returns return the access token for target resource\r\n */\r\nexport async function getResourceToken(resourceType: ResourceType, resourceUrl?: string): Promise<string> {\r\n    const cacheKey = getCacheKey(resourceType, resourceUrl);\r\n\r\n    let getTokenPromise = tokenCache.get(cacheKey);\r\n    if (getTokenPromise) {\r\n        const cachedToken = await getToken(getTokenPromise, cacheKey);\r\n        if (cachedToken && new Date(cachedToken.expiresOn) > new Date()) {\r\n            return cachedToken.token;\r\n        }\r\n    }\r\n    getTokenPromise = SERVICE_CLIENT.tokenExchangeVersion_Exchange({\r\n        input: { ResourceType: resourceType, ResourceUrl: resourceUrl },\r\n    });\r\n\r\n    tokenCache.set(cacheKey, getTokenPromise);\r\n    const accessToken = await getToken(getTokenPromise, cacheKey);\r\n\r\n    interface DecodedToken {\r\n        scp?: string;\r\n        tid?: string;\r\n        [key: string]: any;\r\n    }\r\n\r\n    const decodedToken = jwt_decode<DecodedToken>(accessToken.token);\r\n\r\n    // console.log('decodedToken:', decodedToken);\r\n\r\n    // const scopeList = decodedToken?.scp?.split(' ') ?? [];\r\n\r\n    // if (!checkUserRequiredConsent(scopeList)) {\r\n    //     console.log('need consent');\r\n    //     const tenantId = decodedToken?.tid;\r\n    //     const consentUrl = `https://login.microsoftonline.com/${tenantId}/oauth2/v2.0/authorize?client_id=92b01672-d7de-4a9e-9775-1289109e3222&response_type=code&scope=.default&response_mode=query&prompt=consent`;\r\n    //     const width = 600;\r\n    //     const height = 600;\r\n    //     const top = window.innerHeight / 2 - height / 2 + window.screenY;\r\n    //     const left = window.innerWidth / 2 - width / 2 + window.screenX;\r\n\r\n    //     window.open(consentUrl, 'consentPopup', `width=${width},height=${height},top=${top},left=${left}`);\r\n    // }\r\n\r\n    return accessToken.token;\r\n}\r\n\r\nconst checkUserRequiredConsent = (userScopeList: string[]): boolean => {\r\n    return userRequiredScopeList.every(scope => userScopeList.includes(scope));\r\n};\r\n\r\nconst checkAdminRequiredScopes = (userScopeList: string[]): boolean => {\r\n    // 使用 every() 检查是否包含所有需要的权限\r\n    return adminRequiredScopeList.every(scope => userScopeList.includes(scope));\r\n};\r\n\r\nconst userRequiredScopeList = ['email', 'profile', 'openid', 'offline_access', 'Presence.Read.All'];\r\n\r\nconst adminRequiredScopeList = ['User.ReadWrite.All', 'Group.ReadWrite.All', 'GroupMember.ReadWrite.All'];\r\n\r\nasync function getToken(getTokenPromise: Promise<AccessToken>, cacheKey: string): Promise<AccessToken> {\r\n    try {\r\n        return await getTokenPromise;\r\n    } catch (error) {\r\n        tokenCache.delete(cacheKey);\r\n        return Promise.reject(error);\r\n    }\r\n}\r\n\r\nfunction getCacheKey(resourceType: ResourceType, resourceUrl?: string): string {\r\n    return `${resourceType}${resourceUrl ? `_${resourceUrl}` : ''}`;\r\n}\r\n","import { InfiniteData, QueryClient } from 'react-query';\r\nimport { queryClient as defaultQueryClient } from '../service/queryClient';\r\nimport { PagedFunctionInClass, ServiceClientClasses } from './gen';\r\n\r\n/**\r\n * update page query cache.\r\n *\r\n * @param queryClient query client\r\n * @param funcs paged SERVICE_CLIENT.method array - service client API function @see SERVICE_CLIENT\r\n * @param id id to search, if undefined return the first query cache\r\n * @param update cache update function\r\n */\r\nexport function updateReactPageQueryCache<T extends PagedFunctionInClass<ServiceClientClasses>>(\r\n    funcs: T[],\r\n    id: string,\r\n    update: (item: Awaited<ReturnType<T>>['results'][number]) => Awaited<ReturnType<T>>['results'][number] | undefined,\r\n    queryClient: QueryClient = defaultQueryClient\r\n): void {\r\n    const funcNames = funcs.map(f => f.name);\r\n    const dataList = queryClient.getQueriesData<InfiniteData<Awaited<ReturnType<T>>>>({\r\n        predicate: query => funcNames.some(k => query.queryKey.includes(k)),\r\n    });\r\n\r\n    for (const queryData of dataList.reverse()) {\r\n        if (queryData[1]?.pages) {\r\n            for (const [pageIndex, page] of queryData[1].pages.entries()) {\r\n                // eslint-disable-next-line @typescript-eslint/no-unsafe-call\r\n                const itemIndex = page.results?.findIndex(i => i?.id === id);\r\n                if (itemIndex >= 0) {\r\n                    const [key, data] = queryData;\r\n                    const items = data.pages[pageIndex].results;\r\n                    const newItem = update(items[itemIndex]);\r\n                    items.splice(itemIndex, 1, newItem as any);\r\n                    queryClient.setQueryData(key, { ...data });\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n","import type { AxiosResponse } from 'axios';\r\nexport const CLIENT_ERROR_PRIX = 'C_ERR_';\r\n/**\r\n * all code starts with `C_ERR` @see CLIENT_ERROR_PRIX\r\n * meaning `Client defined ERRor `\r\n */\r\nexport enum ClientErrorCodes {\r\n    unknown = 'C_ERR_UNKNOWN',\r\n    /**\r\n     * uncatched server down exception, user can try later\r\n     */\r\n    unknownServerInternal = 'C_ERR_UNKNOWN_SERVER_INTERNAL',\r\n    /**\r\n     * uncatched Error for paths or AFD routing\r\n     */\r\n    unknownServerRequest = 'C_ERR_UNKNOWN_SERVER_REQUEST',\r\n    /**\r\n     * uncatched\r\n     */\r\n    unknownRuntime = 'C_ERR_UNKNOWN_RUNTIME',\r\n    /**\r\n     * Network Connection Error\r\n     */\r\n    network = 'C_ERR_NETWORK',\r\n    /**\r\n     * Teams SDK Errors\r\n     */\r\n    teamsSDK = 'C_ERR_TEAMS_SDK',\r\n    /**\r\n     * JS Runtime error\r\n     */\r\n    runtime = 'C_ERR_RUNTIME',\r\n}\r\n\r\nexport const enum ErrorCategory {}\r\n\r\n/**\r\n * RequstError\r\n * - parse normal server error body {Code:string,Message:string}\r\n * - parse unknown server error\r\n * - warpper common error\r\n */\r\nexport class RequestError extends Error implements DetailedError {\r\n    name = 'RequestError';\r\n    /**\r\n     * Unique Error Code String\r\n     *\r\n     * @todo repalce `string` with server code type\r\n     */\r\n    code: ClientErrorCodes | string;\r\n\r\n    /**\r\n     * can user retry it or not\r\n     */\r\n    isRetriable: boolean;\r\n    /**\r\n     * Status Code\r\n     */\r\n    status?: number;\r\n    /**\r\n     * response headers\r\n     */\r\n    headers: { [key: string]: any } = {};\r\n\r\n    /**\r\n     * full response data\r\n     */\r\n    response: { Code: string; category: string; Message: string } | string | undefined;\r\n\r\n    /**\r\n     * Client Request Id\r\n     */\r\n    requestId?: string;\r\n\r\n    /**\r\n     * additional Error Message\r\n     */\r\n    additionalErrorMessage?: AdditionalErrorMessage;\r\n\r\n    /**\r\n     * detailed Errors\r\n     */\r\n    detailedErrors?: DetailedError[];\r\n\r\n    constructor(res: AxiosResponse | Error, code?: ClientErrorCodes, requestId?: string) {\r\n        super();\r\n\r\n        this.requestId = requestId;\r\n        if (res instanceof Error) {\r\n            this.code = code || ClientErrorCodes.unknown;\r\n            this.message = `Request Erorr: ${res.message}`;\r\n            this.isRetriable = this.code !== ClientErrorCodes.runtime && this.code !== ClientErrorCodes.unknownRuntime;\r\n            this.stack = res.stack;\r\n        } else if (res.status) {\r\n            // AxiosResponse\r\n            const data = res.data;\r\n            if (data?.Code) {\r\n                // Server Cached error\r\n                this.code = data.Code;\r\n            } else if (res.status >= 500) {\r\n                this.code = ClientErrorCodes.unknownServerInternal;\r\n            } else if (res.status >= 400) {\r\n                this.code = ClientErrorCodes.unknownServerRequest;\r\n            } else {\r\n                this.code = ClientErrorCodes.unknownServerRequest;\r\n            }\r\n\r\n            this.message =\r\n                typeof data === 'string'\r\n                    ? data\r\n                    : data?.Message || res.statusText || 'An unexpected server error occurred';\r\n            this.status = res.status;\r\n            this.headers = res.headers;\r\n            this.response = data;\r\n            // isRetriable in response body first, otherwise using status code\r\n            this.isRetriable = data?.IsRetriable ?? res.status >= 500;\r\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-call\r\n            this.additionalErrorMessage = data?.AdditionalMessage?.map(\r\n                (item: {\r\n                    UserNames: string[];\r\n                    UserIds: string[];\r\n                    EntityNames: string[];\r\n                    EntityIds: string[];\r\n                    HelpLink: string;\r\n                }) => {\r\n                    return convertAdditionMessage(item);\r\n                }\r\n            );\r\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-call\r\n            this.detailedErrors = data?.DetailedErrors?.map(\r\n                (item: { Code: string; Message: string; IsRetriable: boolean; AdditionalMessage: [] }) => {\r\n                    return {\r\n                        code: item.Code,\r\n                        message: item.Message,\r\n                        isRetriable: item.IsRetriable,\r\n                        additionalErrorMessage: convertAdditionMessage(item.AdditionalMessage),\r\n                    };\r\n                }\r\n            );\r\n        } else {\r\n            // others data\r\n            this.code = code || ClientErrorCodes.unknown;\r\n            this.message = `${(res as any as Error)?.message || res}` || 'An unexpected server error occurred';\r\n            this.isRetriable = true;\r\n        }\r\n    }\r\n}\r\n\r\nfunction convertAdditionMessage(additionalMessage: any): AdditionalErrorMessage {\r\n    return {\r\n        userNames: additionalMessage.UserNames,\r\n        userIds: additionalMessage.UserIds,\r\n        entityNames: additionalMessage.EntityNames,\r\n        entityIds: additionalMessage.EntityIds,\r\n        helpLink: additionalMessage.HelpLink,\r\n    };\r\n}\r\n\r\nexport interface DetailedError {\r\n    code: string;\r\n    message?: string;\r\n    isRetriable: boolean;\r\n    additionalErrorMessage?: AdditionalErrorMessage;\r\n}\r\n\r\nexport interface AdditionalErrorMessage {\r\n    userNames?: string[];\r\n    userIds?: string[];\r\n    entityNames?: string[];\r\n    entityIds?: string[];\r\n    helpLink?: string;\r\n}\r\n","export * from './axios';\r\nexport * from './external';\r\nexport * from './gen';\r\nexport * from './GlobalServiceClient';\r\nexport * from './queryCache';\r\nexport * from './queryClient';\r\nexport * from './RequestError';\r\nexport * from './tokenCache';\r\n","import { axiosInstance } from './axios';\r\nimport type { ServiceClientClasses } from './gen';\r\nimport * as ServiceClientsClassMap from './gen';\r\n\r\n/**\r\n * Clients For all REST API Call\r\n *\r\n * @ref ServiceClientClasses\r\n */\r\nexport const SERVICE_CLIENT: ServiceClientClasses = {} as ServiceClientClasses;\r\nObject.entries(ServiceClientsClassMap)\r\n    .filter(([key]: [string, any]): boolean => key.endsWith('ServiceClient'))\r\n    .forEach(([_, ClientClass]: [string, any]): void => {\r\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-call\r\n        const client = new ClientClass('', axiosInstance);\r\n        Object.getOwnPropertyNames(ClientClass.prototype).forEach(\r\n            (funcName: keyof ServiceClientClasses | 'constructor' | string): void => {\r\n                if (funcName !== 'constructor') {\r\n                    // eslint-disable-next-line @typescript-eslint/no-unsafe-call\r\n                    SERVICE_CLIENT[funcName] = client[funcName].bind(client);\r\n                }\r\n            }\r\n        );\r\n    });\r\n","//----------------------\r\n// <auto-generated>\r\n//     Generated using the NSwag toolchain v13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)\r\n// </auto-generated>\r\n//----------------------\r\n\r\n/* tslint:disable */\r\n/* eslint-disable */\r\n// ReSharper disable InconsistentNaming\r\n\r\nimport type { AxiosInstance, AxiosRequestConfig } from 'axios';\r\nimport axios, { AxiosError } from 'axios';\r\n// import { UserView } from '../query';\r\n\r\nexport class ReportServiceClient {\r\n    private instance: AxiosInstance;\r\n    private baseUrl: string;\r\n    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;\r\n\r\n    constructor(baseUrl?: string, instance?: AxiosInstance) {\r\n        this.instance = instance ? instance : axios.create();\r\n\r\n        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : '';\r\n    }\r\n\r\n    fetchGetAllUserMembersByDepartment(\r\n        {\r\n            departmentId,\r\n            isRootDepartment,\r\n            top,\r\n            skipToken,\r\n        }: {\r\n            departmentId?: string;\r\n            isRootDepartment: boolean;\r\n            top?: number | undefined;\r\n            skipToken?: string | undefined;\r\n        },\r\n        signal?: AbortSignal | undefined\r\n    ): Promise<PaginationResultOfUserView> {\r\n        let url_ = 'https://hierarchicaladdressbook20241114184550.azurewebsites.net/api/Department/GetAllUserMembers';\r\n        const params = {\r\n            Top: top,\r\n            SkipToken: skipToken,\r\n            isRootDepartment,\r\n            departmentId,\r\n        };\r\n\r\n        let options_: AxiosRequestConfig = {\r\n            method: 'GET',\r\n            url: url_,\r\n            params,\r\n            headers: {\r\n                Accept: 'application/json',\r\n            },\r\n            signal,\r\n        };\r\n\r\n        return this.instance.request(options_);\r\n    }\r\n\r\n    fetchGetDirectUserMembersByDepartment(\r\n        {\r\n            departmentId,\r\n            isRootDepartment,\r\n            top,\r\n            skipToken,\r\n        }: {\r\n            departmentId?: string;\r\n            isRootDepartment: boolean;\r\n            top?: number | undefined;\r\n            skipToken?: string | undefined;\r\n        },\r\n        signal?: AbortSignal | undefined\r\n    ): Promise<PaginationResultOfUserView> {\r\n        let url_ =\r\n            'https://hierarchicaladdressbook20241114184550.azurewebsites.net/api/Department/GetUserMembersNotAssignedToAnySubDepartments';\r\n        const params = {\r\n            Top: top,\r\n            SkipToken: skipToken,\r\n            IsRootDepartment: isRootDepartment,\r\n            departmentId,\r\n        };\r\n\r\n        let options_: AxiosRequestConfig = {\r\n            method: 'GET',\r\n            url: url_,\r\n            params,\r\n            headers: {\r\n                Accept: 'application/json',\r\n            },\r\n            signal,\r\n        };\r\n\r\n        return this.instance.request(options_);\r\n    }\r\n\r\n    fetchSearchUser(\r\n        {\r\n            userDisplayName,\r\n            top,\r\n            skipToken,\r\n        }: {\r\n            userDisplayName: string;\r\n            top?: number | undefined;\r\n            skipToken?: string | undefined;\r\n        },\r\n        signal?: AbortSignal | undefined\r\n    ): Promise<PaginationResultOfUserView> {\r\n        let url_ = 'https://hierarchicaladdressbook20241114184550.azurewebsites.net/api/User/SearchUsers';\r\n        const params = {\r\n            Top: top,\r\n            SkipToken: skipToken,\r\n            userDisplayName,\r\n        };\r\n\r\n        let options_: AxiosRequestConfig = {\r\n            method: 'GET',\r\n            url: url_,\r\n            params,\r\n            headers: {\r\n                Accept: 'application/json',\r\n            },\r\n            signal,\r\n        };\r\n\r\n        return this.instance.request(options_);\r\n    }\r\n\r\n    /**\r\n     * Exchange token for specific resource\r\n     * @param input The input.\r\n     * @return The output AccessToken.\r\n     */\r\n    tokenExchangeVersion_Exchange(\r\n        { input }: { input: TokenExchangeInput },\r\n        signal?: AbortSignal | undefined\r\n    ): Promise<AccessToken> {\r\n        let url_ = 'https://hierarchicaladdressbook20241114184550.azurewebsites.net/api/TokenExchange';\r\n        const params = {};\r\n\r\n        const content_ = JSON.stringify(input);\r\n\r\n        let options_: AxiosRequestConfig = {\r\n            data: content_,\r\n            method: 'POST',\r\n            url: url_,\r\n            params,\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                Accept: 'application/json',\r\n            },\r\n            signal,\r\n        };\r\n\r\n        return this.instance.request(options_);\r\n    }\r\n\r\n    /**\r\n     * @return The output DepartmentView.\r\n     */\r\n    fetchDepartmentNav({}: {}, signal?: AbortSignal | undefined): Promise<DepartmentView> {\r\n        let url_ = 'https://hierarchicaladdressbook20241114184550.azurewebsites.net/api/Department/GetAllDepartments';\r\n        const params = {};\r\n\r\n        let options_: AxiosRequestConfig = {\r\n            method: 'Get',\r\n            url: url_,\r\n            params,\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                Accept: 'application/json',\r\n            },\r\n            signal,\r\n        };\r\n\r\n        return this.instance.request(options_);\r\n    }\r\n\r\n    clearCache({}: {}, signal?: AbortSignal | undefined): Promise<void> {\r\n        let url_ = 'https://hierarchicaladdressbook20241114184550.azurewebsites.net/api/Department/ClearCache';\r\n        const params = {};\r\n\r\n        let options_: AxiosRequestConfig = {\r\n            method: 'Get', // Wait Xin change it to Post.\r\n            url: url_,\r\n            params,\r\n            headers: {\r\n                Accept: 'application/json',\r\n            },\r\n            signal,\r\n        };\r\n\r\n        return this.instance.request(options_);\r\n    }\r\n}\r\n\r\n/** Data model of PaginationResult. */\r\n\r\nexport interface PaginationResultOfUserView {\r\n    /** Gets or sets the result list of the pagination result. */\r\n    results: UserView[];\r\n    /** Gets or sets the SkipToken, which can be used to fetch next page. */\r\n    skipToken?: string | undefined;\r\n    /** Gets or sets the TotalRecordCount. */\r\n    totalRecordCount?: number | undefined;\r\n    /** Gets or sets the TotalRecordCountLimitExceeded. */\r\n    totalRecordCountLimitExceeded?: boolean | undefined;\r\n}\r\n\r\n/** The data model of Graph resource 'DirectoryObject'.            Reference: https://docs.microsoft.com/en-us/graph/api/resources/directoryobject?view=graph-rest-1.0. */\r\nexport interface DirectoryObject {\r\n    /** Gets or sets the Id of the object. */\r\n    Id: string;\r\n    /** Gets or sets the display name of the object. */\r\n    DisplayName?: string | undefined;\r\n    /** Gets or sets the email address of the object. */\r\n    Mail?: string | undefined;\r\n    /** Gets the type of the object. */\r\n    Type: DirectoryObjectType;\r\n}\r\n\r\nexport interface DepartmentView {\r\n    id: string;\r\n    mail: string;\r\n    parentId: string;\r\n    name: string;\r\n    description: string;\r\n    seniorityIndex: number | null;\r\n    subDepartments: DepartmentView[];\r\n}\r\n\r\n/** Data model for AAD User. */\r\nexport interface User extends DirectoryObject {\r\n    /** Gets the type of the object. */\r\n    Type: DirectoryObjectType;\r\n    /** Gets or sets the UserPrincipalName(UPN). */\r\n    UserPrincipalName?: string | undefined;\r\n    /** Gets or sets userType. */\r\n    UserType: UserType;\r\n    /** Gets or sets Thumbnail. */\r\n    Thumbnail?: string | undefined;\r\n}\r\n\r\n/** The user type including guest and member. */\r\n// export enum UserType {\r\n//     Member = 0,\r\n//     Guest = 1,\r\n//     Unknown = 2,\r\n// }\r\n\r\n/** The data model when refering a DirectoryObject in input. */\r\nexport interface DirectoryObjectInput {\r\n    /** Gets or sets the Id. */\r\n    Id: string;\r\n    /** Gets or sets the Type. */\r\n    Type: DirectoryObjectType;\r\n    /** Gets or sets the display name of the object. */\r\n    DisplayName?: string | undefined;\r\n}\r\n\r\n/** The enum definition of DirectoryObject's type. There are many object types in AAD world, in our system, we only care about User and Group.            Reference: https://docs.microsoft.com/en-us/graph/api/resources/directoryobject?view=graph-rest-1.0. */\r\nexport enum DirectoryObjectType {\r\n    User = 0,\r\n    Group = 1,\r\n    TeamworkTag = 2,\r\n}\r\n\r\n/** expand value for GetTeamTagDetailController. */\r\nexport enum ExpandValue {\r\n    Members = 1,\r\n    MembersWithPhoto = 3,\r\n}\r\n\r\n/** Data model of access token. */\r\nexport interface AccessToken {\r\n    /** Gets or sets token. */\r\n    token: string;\r\n    /** Gets or sets token. */\r\n    expiresOn: string;\r\n}\r\n\r\n/** Data model of TokenExchangeInput. */\r\nexport interface TokenExchangeInput {\r\n    /** Gets or sets resource type. */\r\n    ResourceType: ResourceType;\r\n    /** Gets or sets resource url. */\r\n    ResourceUrl?: string | undefined;\r\n}\r\n\r\n/** The resource type enum */\r\n// export enum ResourceType {\r\n//     Graph = 0,\r\n//     WorkHub = 1,\r\n// }\r\n\r\nexport interface FileResponse {\r\n    data: Blob;\r\n    status: number;\r\n    fileName?: string;\r\n    headers?: { [name: string]: any };\r\n}\r\n\r\nexport interface UserView {\r\n    id: string;\r\n    userType: UserType;\r\n    displayName: string;\r\n    mail: string;\r\n    mobilePhone: string;\r\n    jobTitle: string;\r\n    officeLocation: string;\r\n    userPrincipalName: string;\r\n    departmentPaths: Record<string, string>;\r\n}\r\n\r\nexport enum UserType {\r\n    Member = 0,\r\n    Guest = 1,\r\n    Unknown = 2,\r\n}\r\n\r\nexport interface AccessToken {\r\n    token: string;\r\n    expiresOn: string;\r\n    refreshOn: string | null;\r\n    tokenType: string;\r\n}\r\n\r\n// export interface TokenExchangeInput {\r\n//     resourceType: ResourceType;\r\n//     resourceUrl: string;\r\n// }\r\n\r\nexport enum ResourceType {\r\n    Graph,\r\n    WorkHub,\r\n}\r\n\r\nexport class ServiceException extends Error {\r\n    override message: string;\r\n    status: number;\r\n    response: string;\r\n    headers: { [key: string]: any };\r\n    result: any;\r\n\r\n    constructor(message: string, status: number, response: string, headers: { [key: string]: any }, result: any) {\r\n        super();\r\n\r\n        this.message = message;\r\n        this.status = status;\r\n        this.response = response;\r\n        this.headers = headers;\r\n        this.result = result;\r\n    }\r\n\r\n    protected isServiceException = true;\r\n\r\n    static isServiceException(obj: any): obj is ServiceException {\r\n        return obj.isServiceException === true;\r\n    }\r\n}\r\n\r\nfunction throwException(\r\n    message: string,\r\n    status: number,\r\n    response: string,\r\n    headers: { [key: string]: any },\r\n    result?: any\r\n): any {\r\n    if (result !== null && result !== undefined) throw result;\r\n    else throw new ServiceException(message, status, response, headers, null);\r\n}\r\n\r\nfunction isAxiosError(obj: any | undefined): obj is AxiosError {\r\n    return obj && obj.isAxiosError === true;\r\n}\r\n","/**\n * NOTE: THIS IS A GENERATED FILE. PLEASE DO NOT EDIT !!\n *\n * Interface for the strings in locale file for type safety.\n * You can generate this file with \"yarn scripts localization\"\n */\n\n/**\n * all keys for translation\n */\nexport enum Strings {\n    /**\n     *\n     * @default \"Hierarchical Addres Book\"\n     * @argument ppe : \"Hierarchical Addres Book (Dogfood)\"\n     * @argument int : \"Hierarchical Addres Book (Int)\"\n     * @argument dev : \"Hierarchical Addres Book (Dev)\"\n     */\n    appName = 'appName',\n\n    /**\n     *\n     * @default \"Show current and sub-department members\"\n     */\n    dropDownForDepartDefault = 'dropDownForDepartDefault',\n\n    /**\n     *\n     * @default \"Show only current department members\"\n     */\n    dropDownForDepartOption1 = 'dropDownForDepartOption1',\n\n    /**\n     *\n     * @default \"Search by name\"\n     */\n    searchPlaceholder = 'searchPlaceholder',\n\n    /**\n     *\n     * @default \"Name\"\n     */\n    peopleListColumnForName = 'peopleListColumnForName',\n\n    /**\n     *\n     * @default \"Email\"\n     */\n    peopleListColumnForEmail = 'peopleListColumnForEmail',\n\n    /**\n     *\n     * @default \"Phone number\"\n     */\n    peopleListColumnForPhone = 'peopleListColumnForPhone',\n\n    /**\n     *\n     * @default \"Department\"\n     */\n    peopleListColumnForDepart = 'peopleListColumnForDepart',\n\n    /**\n     *\n     * @default \"Job title\"\n     */\n    peopleListColumnForJob = 'peopleListColumnForJob',\n\n    /**\n     *\n     * @default \"No members in the current department\"\n     */\n    errorTitleForNotContract = 'errorTitleForNotContract',\n\n    /**\n     *\n     * @default \"No department members available to display. Please select another department to view.\"\n     */\n    errorMessageForNotContract = 'errorMessageForNotContract',\n\n    /**\n     *\n     * @default \"Exit search\"\n     */\n    exitSearchLabel = 'exitSearchLabel',\n\n    /**\n     *\n     * @default \"The search results of \\\"{{searchResult}}\\\"\"\n     */\n    searchResultLabel = 'searchResultLabel',\n\n    /**\n     * @description Aria label for loading icon (a state for loading data)\n     * @default \"loading\"\n     */\n    loadingAriaLabel = 'loadingAriaLabel',\n\n    /**\n     * @description Default message for unknown errors\n     * @default \"Something went wrong\"\n     */\n    errorTitle = 'errorTitle',\n\n    /**\n     * @description The retry tips for user when error happens. Correlation Id is a code for investigation\n     * @default \"Correlation ID: {{correlationId}}.\"\n     */\n    errorDescription = 'errorDescription',\n\n    /**\n     * @description Action to Reload the App, when errors\n     * @default \"Try again\"\n     */\n    errorAction = 'errorAction',\n\n    /**\n     * @description The label for return to home\n     * @default \"Return to homepage\"\n     */\n    returnToHomePage = 'returnToHomePage',\n}\n","import { onlineManager, QueryClient, setLogger } from 'react-query';\r\nimport { createWebStoragePersistor } from 'react-query/createWebStoragePersistor-experimental';\r\nimport { persistQueryClient } from 'react-query/persistQueryClient-experimental';\r\nimport { initQuery, isDev, URIParam } from '../common/env';\r\nimport { LogCategory, logger } from '../logger';\r\nimport { RequestError } from './RequestError';\r\n\r\n/**\r\n * the global query client\r\n * https://react-query.tanstack.com/reference/useQuery#_top\r\n */\r\nexport const queryClient = /* #__PURE__ */ new QueryClient({\r\n    defaultOptions: {\r\n        queries: {\r\n            cacheTime: 24 * 60 * 60 * 1000, // 24 hours\r\n            staleTime: 1 * 5 * 60 * 1000, // 5 minute for data stale\r\n            refetchInterval: false, // auto refresh every 5 mins\r\n            refetchIntervalInBackground: false, // don't refresh in background\r\n            refetchOnWindowFocus: false,\r\n            retryDelay(retry: number) {\r\n                const delayTime = 1500;\r\n                return retry * delayTime;\r\n            },\r\n            retry: (failureCount, error) => {\r\n                // Need explicit error type, because error defaults to unknown type and our error is always the specific type.\r\n                // https://github.com/TanStack/query/discussions/2757\r\n                if (error instanceof Error) {\r\n                    const genericError = error as RequestError;\r\n                    return (\r\n                        failureCount < 3 &&\r\n                        genericError.status !== 404 &&\r\n                        genericError.status !== 429 &&\r\n                        genericError?.status !== 403\r\n                    );\r\n                }\r\n                return false; // No auto-retry\r\n            },\r\n        },\r\n    },\r\n});\r\n\r\nconst userObjectId = initQuery.get(URIParam.UserId)!;\r\n\r\nconst key = 'REACT_QUERY_OFFLINE_CACHE';\r\nconst persistor = createWebStoragePersistor({ storage: window.localStorage, key });\r\nexport const clearQueryClientPersistor = (): void => window.localStorage.removeItem(key);\r\n\r\npersistQueryClient({\r\n    queryClient,\r\n    persistor,\r\n    maxAge: 7 * 24 * 60 * 60 * 1000,\r\n    buster: (userObjectId ? 'APICache-' + userObjectId : 'CommonAPICache') + '-V3',\r\n});\r\n\r\n// Always set to react query online state to true, to avoid pausing request sending and error handling.\r\nwindow.ononline = () => {\r\n    onlineManager.setOnline(true);\r\n};\r\n\r\nwindow.onoffline = () => {\r\n    onlineManager.setOnline(true);\r\n};\r\n\r\nsetLogger(\r\n    isDev\r\n        ? console\r\n        : {\r\n              log: args => {\r\n                  logger.logTraceInfo(LogCategory.ReactQuery, JSON.stringify(args));\r\n              },\r\n              warn: args => {\r\n                  logger.logTraceWarning(LogCategory.ReactQuery, JSON.stringify(args));\r\n              },\r\n              error: args => {\r\n                  logger.logTraceError(LogCategory.ReactQuery, JSON.stringify(args));\r\n              },\r\n          }\r\n);\r\n","import { ReportServiceClient } from './reportServiceClient';\r\n\r\nexport * from './reportServiceClient';\r\n\r\nexport type ServiceClientClasses = ReportServiceClient;\r\n\r\nexport type FunctionInClass<T> = {\r\n    // eslint-disable-next-line @typescript-eslint/ban-types\r\n    [K in keyof T]: T[K] extends Function ? T[K] : never;\r\n}[keyof T];\r\n\r\nexport type NoParamFunctionInClass<T> = {\r\n    [K in keyof T]: T[K] extends (p1?: AbortSignal | undefined) => any ? T[K] : never;\r\n}[keyof T];\r\n\r\nexport type PagedFunctionInClass<T> = {\r\n    [K in keyof T]: T[K] extends ({}: any) => Promise<{ results: any[]; skipToken?: string }> ? T[K] : never;\r\n}[keyof T];\r\n\r\nexport type APIFunctions = FunctionInClass<ServiceClientClasses>;\r\n","/**\n * NOTE: THIS IS A GENERATED FILE. PLEASE DO NOT EDIT !!\n *\n * Interface for the strings in locale file for type safety.\n * You can generate this file with \"yarn scripts localization\"\n */\n\n/**\n * All supported languages tag\n * generated from locale folder name\n */\nexport const supportedLngs = ['en-US', 'zh-CN', 'zh-TW'] as const;\n"],"mappings":";;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACnCA;AACA;AACA;AAQA;AACA;AACA;AACA;AACA;AAQA;;;;;AAKA;AACA;AAEA;AACA;AACA;AACA;AAIA;AACA;AAEA;AACA;AAEA;;;AAGA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AAEA;;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AAKA;AAAA;AACA;AACA;AACA;AAMA;AACA;AACA;AAEA;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAEA;;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;AC9KA;AAEA;AACA;AACA;AAEA;;;;;AAKA;AACA;;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAQA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAAA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AAEA;;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;;;;;;;;;;;;;AC/EA;AAAA;AAAA;AAGA;;;;;;;AAOA;AACA;;AAMA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;ACrCA;AAAA;AAAA;AAAA;AAAA;AACA;;;AAGA;AACA;AAAA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AAEA;AAAA;AAAA;AAEA;;;;;AAKA;AACA;AA0CA;;AACA;AA1CA;AAgBA;;AAEA;AACA;AAyBA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAQA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;AC5JA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;ACPA;AAAA;AAAA;AAAA;AAEA;AAEA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;;;;;;ACvBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAOA;AACA;AAEA;AAKA;AAFA;AAGA;AAEA;AACA;AAEA;AAcA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAcA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAYA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;;;;AAIA;AACA;AAIA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAkEA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AACA;AACA;AA2CA;AAAA;AACA;AACA;AACA;AACA;AASA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AAEA;AAOA;AACA;AASA;AAPA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AAEA;AAOA;AAAA;;AACA;AACA;AAEA;AACA;AACA;;;;;;;;;;;;;;ACtXA;AAAA;;;;;AAKA;AAEA;;AAEA;AACA;AAAA;AACA;;;;;;AAMA;AACA;AAEA;;;AAGA;AACA;AAEA;;;AAGA;AACA;AAEA;;;AAGA;AACA;AAEA;;;AAGA;AACA;AAEA;;;AAGA;AACA;AAEA;;;AAGA;AACA;AAEA;;;AAGA;AACA;AAEA;;;AAGA;AACA;AAEA;;;AAGA;AACA;AAEA;;;AAGA;AACA;AAEA;;;AAGA;AACA;AAEA;;;AAGA;AACA;AAEA;;;AAGA;AACA;AAEA;;;AAGA;AACA;AAEA;;;AAGA;AACA;AAEA;;;AAGA;AACA;AAEA;;;AAGA;AACA;AACA;;;;;;;;;;;;;;ACzHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAGA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;AC1EA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;ACFA;AAAA;;;;;AAKA;AAEA;;;AAGA;AACA;;;;;A","sourceRoot":""}