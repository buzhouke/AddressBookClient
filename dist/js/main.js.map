{"version":3,"file":"dist/js/main.js","sources":["webpack:///./src/views/common/CommonDetailsList/index.ts","webpack:///./src/views/components/AddressBookAppHeader/AddressBookAppHeader.styles.ts","webpack:///./src/hooks/actions/useNewChatEffect.ts","webpack:///./src/views/components/index.ts","webpack:///./src/views/components/RefreshButton/RefreshButton.tsx","webpack:///./src/hooks/actions/index.ts","webpack:///./src/views/containers/SearchResult/SearchResult.styles.ts","webpack:///./src/hooks/useReactPageQuery.ts","webpack:///./src/views/components/PeopleCard/PeopleCard.styles.ts","webpack:///./src/hooks/useFluentUIThemeWithRTL.ts","webpack:///./src/common/flag.ts","webpack:///./src/views/common/index.ts","webpack:///./src/views/components/LoadingPage/LoadingPage.tsx","webpack:///./src/hooks/actions/useListComponentStatusChange.ts","webpack:///./src/views/components/PeopleCard/PeopleCard.tsx","webpack:///./src/hooks/paths/usePageTitle.ts","webpack:///./src/views/components/SearchPeopleField/SearchPeopleField.tsx","webpack:///./src/routes/desktopRoutes.tsx","webpack:///./src/hooks/people.ts","webpack:///./src/views/components/ErrorStatus/index.ts","webpack:///./src/ecs/index.ts","webpack:///./src/views/containers/DefaultPage/MobileDefaultPage.tsx","webpack:///./src/views/containers/index.ts","webpack:///./src/hooks/useReactQuery.ts","webpack:///./src/views/components/SearchPeopleField/SearchPeopleField.styles.ts","webpack:///./src/ecs/EcsFlags.ts","webpack:///./src/styles/theme-provider.ts","webpack:///./src/views/components/ErrorStatus/ErrorStatus.tsx","webpack:///./src/views/containers/DefaultPage/DesktopDefaultPage.tsx","webpack:///./src/entries/desktop.tsx","webpack:///./src/utilities/quickAppUtils.ts","webpack:///./src/views/components/PeopleCard/index.ts","webpack:///./src/views/containers/DefaultPage/index.ts","webpack:///./src/views/common/CommonDetailsList/CommonDetailsList.tsx","webpack:///./src/views/common/LoadingIndicatorWrapper/index.ts","webpack:///./src/hooks/components/index.ts","webpack:///./src/views/containers/SearchResult/SearchResult.tsx","webpack:///./src/utilities/peopleUtils.ts","webpack:///./src/views/components/PeopleList/index.ts","webpack:///./src/hooks/actions/useTabContentAction.ts","webpack:///./src/views/common/CommonCardList/CommonCardList.component.tsx","webpack:///./src/views/components/EmptyStatus/index.ts","webpack:///./src/views/common/CommonCardList/index.ts","webpack:///./src/views/components/EmptyStatus/EmptyStatus.styles.ts","webpack:///./src/ecs/ECSConfigProvider.tsx","webpack:///./src/views/containers/HomePage/HomePageQuery.ts","webpack:///./src/hooks/useLanguage.ts","webpack:///./src/styles/index.ts","webpack:///./src/views/components/AddressBookAppHeader/AddressBookAppHeader.tsx","webpack:///./src/views/common/LoadingIndicatorWrapper/LoadingIndicatorWrapper.component.tsx","webpack:///./src/hooks/index.ts","webpack:///./src/views/components/EmptyStatus/EmptyStatus.tsx","webpack:///./src/views/components/PeopleList/PeopleList.tsx","webpack:///./src/views/App.tsx","webpack:///./src/views/containers/HomePage/HomePage.styles.ts","webpack:///./src/hooks/paths/useTopLevelPath.ts","webpack:///./src/hooks/usePageParams.ts","webpack:///./src/hooks/actions/useDataFlag.ts","webpack:///./src/ecs/loadEcsConfig.ts","webpack:///./src/hooks/components/people.tsx","webpack:///./src/views/index.ts","webpack:///./src/views/containers/HomePage/index.ts","webpack:///./src/views/components/LoadingPage/index.ts","webpack:///./src/hooks/paths/index.ts","webpack:///./src/views/components/PeopleList/PeopleList.styles.ts","webpack:///./src/views/components/LoadingPage/LoadingPage.styles.ts","webpack:///./src/views/containers/SearchResult/index.ts","webpack:///./src/hooks/actions/useFlagStatus.ts","webpack:///./src/views/containers/HomePage/HomePage.tsx"],"sourcesContent":["/*\r\n *  Copyright Â© Microsoft Corporation. All rights reserved.\r\n */\r\n\r\nexport * from './CommonDetailsList';\r\n","import { makeStyles } from '@addressbook/components-fluentui-teams-theme';\r\n\r\nexport const useAppHeaderStyles = makeStyles(() => ({\r\n    navContainer: {\r\n        display: 'flex',\r\n        flexDirection: 'row',\r\n        gap: '4px',\r\n        alignItems: 'center',\r\n    },\r\n}));\r\n","import { getTeamsContext } from '@addressbook/components-metaos-host';\r\nimport { useEffect } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { generateURL, Paths } from '../../routes/Paths';\r\nimport { isNewChat } from '../../utilities/Utils';\r\nimport { SpecialErrorType } from '../../views/components/ErrorStatus';\r\n\r\n/**\r\n * check is new chat and auto redirect to error page\r\n * will skip channel for channel ID\r\n */\r\nexport function useNewChatEffect(): void {\r\n    const navigate = useNavigate();\r\n\r\n    useEffect(() => {\r\n        return () => {\r\n            getTeamsContext().then(context => {\r\n                const { chat, team, channel } = context || {};\r\n                if (isNewChat(chat?.id, team?.groupId, channel?.id)) {\r\n                    navigate(generateURL(Paths.HomePage, { errorType: SpecialErrorType.newChat }), {\r\n                        replace: true,\r\n                    });\r\n                }\r\n            });\r\n        };\r\n    }, [navigate]);\r\n}\r\n","export * from './EmptyStatus';\r\nexport * from './ErrorStatus';\r\nexport * from './LoadingPage';\r\nexport * from './PeopleCard';\r\n\r\n","import { ActionButton } from '@fluentui/react';\r\nimport React from 'react';\r\nimport { clearQueryClientPersistor, queryClient } from '../../../service';\r\n\r\nexport const RefreshButton = (): JSX.Element => {\r\n    const onClick = (): void => {\r\n        // Clear the cache and refetch the data\r\n        queryClient.clear(); // Clear the cache from memory\r\n        clearQueryClientPersistor(); // Clear the cache from local storage\r\n        window.location.reload();\r\n        return;\r\n    };\r\n    return (\r\n        <>\r\n            <ActionButton iconProps={{ iconName: 'Refresh' }} onClick={onClick} />\r\n        </>\r\n    );\r\n};\r\n","export * from './useDataFlag';\r\nexport * from './useFlagStatus';\r\nexport * from './useListComponentStatusChange';\r\nexport * from './useNewChatEffect';\r\nexport * from './useTabContentAction';\r\n","import { isContrastTheme, makeStyles } from '@addressbook/components-fluentui-teams-theme';\r\n\r\nexport const useSearchResultStyles = makeStyles(theme => ({\r\n    root: { height: '100%', display: 'flex', flexDirection: 'column' },\r\n    topSearchSection: {\r\n        display: 'flex',\r\n        justifyContent: 'flex-end',\r\n        padding: '30px',\r\n    },\r\n    field: {\r\n        flex: 1,\r\n        '.ms-Label': {\r\n            padding: '0 0 4px',\r\n            whiteSpace: 'nowrap',\r\n        },\r\n    },\r\n    peopleSection: {\r\n        display: 'flex',\r\n        alignItems: 'stretch',\r\n        height: '100%',\r\n        ...(isContrastTheme(theme.name) && {\r\n            borderTop: `1px solid ${theme.palette.black}`,\r\n            borderBottom: `1px solid ${theme.palette.black}`,\r\n        }),\r\n    },\r\n    textFieldIcon1: {\r\n        position: 'absolute',\r\n        left: '6px',\r\n        top: '50%',\r\n        transform: 'translateY(-50%)',\r\n        pointerEvents: 'none',\r\n        // height: '20px',\r\n        // width: '20px',\r\n    },\r\n    inputField: {\r\n        flex: 1,\r\n        '.ms-Label': {\r\n            padding: '0 0 4px',\r\n            whiteSpace: 'nowrap',\r\n        },\r\n        '.ms-TextField-field': {\r\n            paddingLeft: '36px',\r\n            backgroundColor: theme.palette.white,\r\n            paddingRight: '36px',\r\n        },\r\n    },\r\n    left: {\r\n        flex: 1,\r\n        width: 0,\r\n        backgroundColor: theme.palette.neutralLighterAlt,\r\n        borderRight: `1px solid ${\r\n            isContrastTheme(theme.name) ? theme.palette.black : theme.palette.neutralTertiaryAlt\r\n        }`,\r\n    },\r\n    main: {\r\n        padding: '24px 80px 24px 80px',\r\n        backgroundColor: theme.palette.white,\r\n        height: '100%',\r\n        overflowY: 'auto',\r\n    },\r\n    topText: {\r\n        color: theme.palette.black,\r\n    },\r\n    top: {\r\n        display: 'flex',\r\n        justifyContent: 'space-between',\r\n        alignItems: 'center',\r\n        // marginBottom: '20px',\r\n    },\r\n    dropdown: {\r\n        width: '200px',\r\n        marginBottom: '20px',\r\n    },\r\n    iconCell: {\r\n        padding: 0,\r\n        fontSize: '16px',\r\n        // top: '2px',\r\n        marginRight: '4px',\r\n        height: '16px',\r\n        width: '16px',\r\n    },\r\n}));\r\n","import { useInfiniteQuery, UseInfiniteQueryOptions, UseInfiniteQueryResult } from 'react-query';\r\nimport type { PagedFunctionInClass, ServiceClientClasses } from '../service/gen';\r\nimport type { RequestError } from '../service/RequestError';\r\n\r\n/**\r\n * The default size of query page.\r\n */\r\nconst PAGE_SIZE = 10;\r\n\r\n/**\r\n * hook for client page query with parameters,\r\n * - **never** use `new XXXServiceClient().someMethod`;\r\n * - use `SERVICE_CLIENT.someMethod` instead.\r\n *\r\n * @example\r\n * ```ts\r\n *  useReactPageQuery(SERVICE_CLIENT.helloWorld_Get, { a: 'a', b: 1 });\r\n * ```\r\n * @param  func SERVICE_CLIENT.method - service client API function @see SERVICE_CLIENT\r\n * @param  params service client API params\r\n * @param  options UseInfiniteQueryOptions\r\n */\r\nfunction useReactPageQuery<T extends PagedFunctionInClass<ServiceClientClasses>>(\r\n    func: T,\r\n    params: Parameters<T>[0],\r\n    options?: Omit<UseInfiniteQueryOptions<Awaited<ReturnType<T>>, RequestError>, 'queryKey' | 'queryFn'>\r\n): Omit<UseInfiniteQueryResult<Awaited<ReturnType<T>>['results'], RequestError>, 'data'> &\r\n    UseReactPageQueryResult<Awaited<ReturnType<T>>['results']> {\r\n    const res = useInfiniteQuery<Awaited<ReturnType<T>>, RequestError>({\r\n        queryFn: ({ queryKey, signal, pageParam }) => {\r\n            const params = pageParam ? { ...(queryKey[1] as object), skipToken: pageParam } : queryKey[1] ?? {};\r\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-call\r\n            return (func as any)(params, signal);\r\n        },\r\n        queryKey: [func.name, params],\r\n        getNextPageParam: lastPage =>\r\n            lastPage.skipToken && lastPage.results?.length >= (params?.top ?? PAGE_SIZE)\r\n                ? lastPage.skipToken\r\n                : undefined,\r\n        ...options,\r\n    });\r\n    console.log('useReactPageQuery:', res);\r\n\r\n    return Object.assign(res, {\r\n        loadMore: () => res.fetchNextPage(),\r\n        canLoadMore: res.isFetched && res.hasNextPage,\r\n        totalCount: res.data?.pages?.[0]?.totalRecordCount,\r\n        data: res.data?.pages\r\n            ?.reduce((pre, cur) => pre.concat(cur.results as any), [])\r\n            .filter(v => v !== null && v !== undefined) as any,\r\n    }) as any;\r\n}\r\n\r\ninterface UseReactPageQueryResult<T> {\r\n    data?: T;\r\n    loadMore: () => any;\r\n    canLoadMore?: boolean;\r\n    totalCount?: number;\r\n}\r\n\r\nexport { useReactPageQuery };\r\nexport type { UseReactPageQueryResult };\r\n","/*\r\n *  Copyright Â© Microsoft Corporation. All rights reserved.\r\n */\r\n\r\nimport { isDarkTheme, makeStyles } from '@addressbook/components-fluentui-teams-theme';\r\n\r\nexport const usePeopleCardStyles = makeStyles(theme => ({\r\n    root: {\r\n        fontSize: theme.fonts.small.fontSize,\r\n        display: 'flex',\r\n        gap: '12px',\r\n        flexDirection: 'column',\r\n    },\r\n    header: {\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        gap: '4px',\r\n    },\r\n    main: {\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        gap: '12px',\r\n        overflowY: 'auto',\r\n    },\r\n    subHeaderText: {\r\n        fontSize: theme.fonts.medium.fontSize,\r\n        fontWeight: 'bold',\r\n        color: theme.palette.black,\r\n    },\r\n    subHeader: {\r\n        display: 'flex',\r\n        flexDirection: 'row',\r\n        gap: '2px',\r\n        alignItems: 'center',\r\n    },\r\n    presence: {\r\n        display: 'flex',\r\n        flexDirection: 'row',\r\n        gap: '16px',\r\n        alignItems: 'center',\r\n        padding: '12px 16px 12px 16px',\r\n        border: isDarkTheme(theme.name) ? '1px solid #3D3D3D' : '1px solid #F0F0F0',\r\n    },\r\n    ContractInfo: {\r\n        display: 'flex',\r\n        flexDirection: 'row',\r\n        gap: '8px',\r\n        alignItems: 'center',\r\n    },\r\n    icon: {\r\n        width: '20px',\r\n        height: '20px',\r\n        color: theme.palette.black,\r\n        position: 'relative',\r\n        // top: '2px',\r\n        // left: '2px',\r\n    },\r\n    ManagerInfo: {},\r\n    boldText: {\r\n        fontSize: theme.fonts.mediumPlus.fontSize,\r\n        fontWeight: 'bold',\r\n        color: theme.palette.black,\r\n    },\r\n    peopleWithIcon: {\r\n        display: 'flex',\r\n        flexDirection: 'row',\r\n        gap: '16px',\r\n    },\r\n    peopleWithPresenceInfo: {\r\n        position: 'relative',\r\n        width: '64px',\r\n        height: '64px',\r\n    },\r\n    presenceInfo: {\r\n        position: 'absolute',\r\n        bottom: 0,\r\n        borderRadius: '100%',\r\n        border: `2px solid ${theme.palette.white}`,\r\n        backgroundColor: theme.palette.white,\r\n        right: 0,\r\n        width: '20px',\r\n        height: '20px',\r\n    },\r\n    info: {\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        gap: '4px',\r\n    },\r\n    quickHeader: {\r\n        display: 'flex',\r\n        flexDirection: 'row',\r\n        gap: '20px',\r\n    },\r\n    callout: {\r\n        width: 320,\r\n        padding: '20px 24px',\r\n    },\r\n    divider: {\r\n        border: isDarkTheme(theme.name) ? '1px solid #3D3D3D' : '1px solid #F0F0F0',\r\n    },\r\n}));\r\n","import { ITheme, setRTL } from '@fluentui/react';\r\nimport { getTeamsTheme } from '@addressbook/components-fluentui-teams-theme';\r\nimport { coerceTeamsTheme, useTeamsTheme } from '@addressbook/components-metaos-host';\r\nimport { useEffect, useMemo } from 'react';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { initQuery, isDevBrowser, URIParam } from '../common/env';\r\nimport { i18n } from '../localization';\r\nimport { LogCategory, logger } from '../logger';\r\n\r\n/**\r\n * a hook to get ITheme with RTL support for FluentUI ThemeProvider\r\n *\r\n * @returns An ITheme object\r\n */\r\nexport function useFluentUIThemeWithRTL(isMobile?: boolean): ITheme {\r\n    const themeName = useTeamsTheme() || initQuery.get(URIParam.Theme);\r\n    const { i18n: currentI18n } = useTranslation(undefined, { useSuspense: false });\r\n    const lang = currentI18n.resolvedLanguage || currentI18n.languages?.[0];\r\n\r\n    useEffect(() => {\r\n        if (isDevBrowser) {\r\n            document.body.style.backgroundColor = '#F5F5F5';\r\n        } else {\r\n            document.body.style.backgroundColor = 'transparent';\r\n        }\r\n        if (themeName) {\r\n            logger.logTraceInfo(LogCategory.AppBoot, `Rendered app host with theme: ${themeName}.`);\r\n            const className = `is-${themeName}Theme`;\r\n            document.body.classList.add(className);\r\n            return () => document.body.classList.remove(className);\r\n        }\r\n    }, [themeName]);\r\n\r\n    return useMemo(() => {\r\n        const teamsTheme = getTeamsTheme(coerceTeamsTheme(themeName ?? ''), isMobile);\r\n        if (lang) {\r\n            const dir = i18n.dir();\r\n            const rtl = dir === 'rtl';\r\n            setRTL(rtl);\r\n            return { ...teamsTheme, rtl };\r\n        }\r\n        return teamsTheme;\r\n    }, [themeName, lang, isMobile]);\r\n}\r\n","/**\r\n * All enumerations of flag\r\n */\r\nexport enum Flag {\r\n    OnboardingModal = 'OnboardingModal',\r\n    WriteBubble = 'WriteBubble',\r\n    RequestBubble = 'RequestBubble',\r\n    SubmitBubble = 'SubmitBubble',\r\n    ReviewBubble = 'ReviewBubble',\r\n    SubmitGuidesBubble = 'SubmitGuidesBubble',\r\n    ReviewGuidesBubble = 'ReviewGuidesBubble',\r\n    TaskModuleHomeBubble = 'TaskModuleHomeBubble',\r\n    TaskModuleHomeSimpleFRE = 'TaskModuleHomeSimpleFRE',\r\n    TaskModuleHomeSimplePreviewBubble = 'TaskModuleHomeSimplePreviewBubble',\r\n    TaskModuleHomeSimpleRuleSettingsBubble = 'TaskModuleHomeSimpleRuleSettingsBubble',\r\n    MobileSubmitBubble = 'MobileSubmitBubble',\r\n    MobileReviewBubble = 'MobileReviewBubble',\r\n    FeedbackInAppBubble = 'FeedbackInAppBubble',\r\n    FeedbackInTaskModuleBubble = 'FeedbackInTaskModuleBubble',\r\n}\r\n\r\n/**\r\n * Relationship binding\r\n * key: a flag that requires pre-items\r\n * value: all dependencies\r\n */\r\nexport const flagDependency: {\r\n    [key in Flag]?: Flag[];\r\n} = {\r\n    [Flag.WriteBubble]: [Flag.OnboardingModal],\r\n    [Flag.RequestBubble]: [Flag.WriteBubble, Flag.OnboardingModal],\r\n\r\n    [Flag.SubmitBubble]: [Flag.RequestBubble, Flag.OnboardingModal],\r\n    [Flag.SubmitGuidesBubble]: [Flag.SubmitBubble, Flag.OnboardingModal],\r\n\r\n    [Flag.ReviewBubble]: [Flag.RequestBubble, Flag.OnboardingModal],\r\n    [Flag.ReviewGuidesBubble]: [Flag.ReviewBubble, Flag.OnboardingModal],\r\n\r\n    [Flag.FeedbackInAppBubble]: [Flag.SubmitGuidesBubble, Flag.OnboardingModal],\r\n\r\n    [Flag.TaskModuleHomeBubble]: [Flag.OnboardingModal],\r\n\r\n    [Flag.MobileSubmitBubble]: [Flag.OnboardingModal],\r\n    [Flag.MobileReviewBubble]: [Flag.MobileSubmitBubble],\r\n};\r\n","export * from './CommonCardList';\r\nexport * from './CommonDetailsList';\r\nexport * from './LoadingIndicatorWrapper';\r\n","/*\r\n *  Copyright Â© Microsoft Corporation. All rights reserved.\r\n */\r\nimport { mergeStyles, Stack, Text } from '@fluentui/react';\r\nimport { useId } from '@fluentui/react-hooks';\r\nimport { Spinner } from '@addressbook/components-shared';\r\nimport React from 'react';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { LOADING_TIMEOUT_IN_SECONDS } from '../../../common/Constants';\r\nimport { Strings } from '../../../localization';\r\nimport { LogCategory, logger } from '../../../logger';\r\nimport { useLoadingStyles } from './LoadingPage.styles';\r\n\r\nexport interface LoadingPageProps {\r\n    className?: string;\r\n    message?: string;\r\n}\r\n\r\nexport const LoadingPage: React.FC<LoadingPageProps> = ({ message, className }) => {\r\n    const { t, ready } = useTranslation('strings', { useSuspense: false });\r\n    const styles = useLoadingStyles();\r\n    const id = useId('LoadingLabel');\r\n\r\n    React.useEffect((): any => {\r\n        const loadingTimeout = setTimeout((): void => {\r\n            logger.logTraceError(\r\n                LogCategory.LoadingTimeout,\r\n                `${LOADING_TIMEOUT_IN_SECONDS} seconds loading timeout happens in page: ${window.location.href}`\r\n            );\r\n        }, LOADING_TIMEOUT_IN_SECONDS * 1000);\r\n\r\n        return (): void => clearTimeout(loadingTimeout);\r\n    }, []);\r\n\r\n    return (\r\n        <Stack\r\n            verticalFill\r\n            verticalAlign='center'\r\n            horizontalAlign='center'\r\n            className={`${mergeStyles(styles.root, className)} loading-page`}\r\n            role='alert'\r\n            aria-atomic>\r\n            <Spinner aria-label={ready ? t(Strings.loadingAriaLabel) : 'Loading'} aria-describedby={message && id} />\r\n            {message && (\r\n                <Text id={id} className={styles.message}>\r\n                    {message}\r\n                </Text>\r\n            )}\r\n        </Stack>\r\n    );\r\n};\r\n","import React from 'react';\r\n\r\nexport enum ListComponentStatus {\r\n    Loading = 'loading',\r\n    Error = 'error',\r\n    Empty = 'empty',\r\n    NonEmpty = 'nonEmpty',\r\n}\r\n\r\nexport const useListComponentStatusChange = (\r\n    items?: unknown[],\r\n    error?: Error | null,\r\n    queryStatus?: { isFetching?: boolean },\r\n    onStatusChange?: (status: ListComponentStatus) => void\r\n): void => {\r\n    const isEmptyList = items ? items.length === 0 : undefined;\r\n    React.useEffect(() => {\r\n        if (onStatusChange) {\r\n            const status = error\r\n                ? ListComponentStatus.Error\r\n                : isEmptyList && !(queryStatus?.isFetching === true)\r\n                ? ListComponentStatus.Empty\r\n                : isEmptyList === false\r\n                ? ListComponentStatus.NonEmpty\r\n                : ListComponentStatus.Loading;\r\n            onStatusChange(status);\r\n        }\r\n    }, [error, isEmptyList, onStatusChange, queryStatus?.isFetching]);\r\n};\r\n","import { PeopleCoin } from '@addressbook/components-people';\r\nimport { ActionButton, Callout, FontIcon, mergeStyles, Target } from '@fluentui/react';\r\nimport React from 'react';\r\nimport { PRESENCE_ICONS } from '../../../common/icons';\r\nimport {\r\n    retrievePeopleManagerByGraph,\r\n    retrievePeoplePresenceByGraph,\r\n    retrievePeopleSelectionIcon,\r\n} from '../../../hooks';\r\nimport { IPeople } from '../../../utilities/peopleUtils';\r\nimport { OpenCallById, OpenChatById, OpenOrgExplorerApp, OpenVideoCallById } from '../../../utilities/quickAppUtils';\r\nimport { usePeopleCardStyles } from './PeopleCard.styles';\r\n\r\ninterface PeopleCardProps {\r\n    people: IPeople;\r\n    onDismiss: () => void;\r\n    target?: HTMLElement | Target;\r\n}\r\n\r\nexport const PeopleCard = ({ people, onDismiss, target }: PeopleCardProps): JSX.Element => {\r\n    const peopleCardStyles = usePeopleCardStyles();\r\n    const [presence, setPresence] = React.useState<string | undefined>(undefined);\r\n    const [manager, setManager] = React.useState<IPeople | undefined>(undefined);\r\n    React.useEffect(() => {\r\n        const fetchPresence = async (): Promise<void> => {\r\n            const presence = await retrievePeoplePresenceByGraph(people.id);\r\n            setPresence(presence);\r\n        };\r\n        fetchPresence();\r\n    }, [people.id]);\r\n\r\n    React.useEffect(() => {\r\n        const fetchPresence = async (): Promise<void> => {\r\n            const manager = await retrievePeopleManagerByGraph(people.id);\r\n            setManager(manager);\r\n        };\r\n        fetchPresence();\r\n    }, [people.id]);\r\n\r\n    return (\r\n        <Callout\r\n            role='dialog'\r\n            className={peopleCardStyles.callout}\r\n            gapSpace={20}\r\n            target={target}\r\n            isBeakVisible={false}\r\n            onDismiss={onDismiss}\r\n            setInitialFocus>\r\n            <div className={peopleCardStyles.root}>\r\n                <div className={peopleCardStyles.info}>\r\n                    <div className={peopleCardStyles.peopleWithIcon}>\r\n                        <div className={peopleCardStyles.peopleWithPresenceInfo}>\r\n                            <PeopleCoin\r\n                                selection={{ id: people.id, name: people.name, type: 0 }}\r\n                                onRetrieveIcon={retrievePeopleSelectionIcon}\r\n                                coinSize={64}\r\n                            />\r\n                            {presence && (\r\n                                <div className={peopleCardStyles.presenceInfo}>\r\n                                    <FontIcon\r\n                                        aria-label='Mail'\r\n                                        iconName={PRESENCE_ICONS[presence].name}\r\n                                        className={mergeStyles(peopleCardStyles.icon, {\r\n                                            color: PRESENCE_ICONS[presence].color,\r\n                                        })}\r\n                                    />\r\n                                </div>\r\n                            )}\r\n                        </div>\r\n                        <div className={peopleCardStyles.info}>\r\n                            <span className={peopleCardStyles.boldText}>{people.name}</span>\r\n                            <span>{people.role}</span>\r\n                            <span>\r\n                                {Object.entries(people.departmentPaths)\r\n                                    .map(([_, value]) => value)\r\n                                    .join('; ')}\r\n                            </span>\r\n                        </div>\r\n                    </div>\r\n                    <div className={peopleCardStyles.quickHeader}>\r\n                        <ActionButton\r\n                            iconProps={{\r\n                                iconName: 'Chat',\r\n                                styles: {\r\n                                    root: {\r\n                                        fontSize: '20px',\r\n                                    },\r\n                                },\r\n                            }}\r\n                            title='Chat'\r\n                            ariaLabel='Chat'\r\n                            // className={styles.hoverShowButton}\r\n                            onClick={() => OpenChatById(people.id)}\r\n                        />\r\n                        <ActionButton\r\n                            iconProps={{\r\n                                iconName: 'Organization',\r\n                                styles: {\r\n                                    root: {\r\n                                        fontSize: '20px',\r\n                                    },\r\n                                },\r\n                            }}\r\n                            title='OpenOrgExplorerApp'\r\n                            ariaLabel='OpenOrgExplorerApp'\r\n                            onClick={() => OpenOrgExplorerApp()}\r\n                        />\r\n                        <ActionButton\r\n                            iconProps={{\r\n                                iconName: 'Call',\r\n                                styles: {\r\n                                    root: {\r\n                                        fontSize: '20px',\r\n                                        padding: 0,\r\n                                    },\r\n                                },\r\n                            }}\r\n                            title='OpenCall'\r\n                            ariaLabel='OpenCall'\r\n                            // className={styles.hoverShowButton}\r\n                            onClick={() => OpenCallById(people.id)}\r\n                        />\r\n                        <ActionButton\r\n                            iconProps={{\r\n                                iconName: 'Video',\r\n                                styles: {\r\n                                    root: {\r\n                                        fontSize: '20px',\r\n                                    },\r\n                                },\r\n                            }}\r\n                            title='OpenVideoCall'\r\n                            ariaLabel='OpenVideoCall'\r\n                            // className={styles.hoverShowButton}\r\n                            onClick={() => OpenVideoCallById(people.id)}\r\n                        />\r\n                    </div>\r\n                    <div className={peopleCardStyles.divider}></div>\r\n                </div>\r\n                <div className={peopleCardStyles.main}>\r\n                    {presence && (\r\n                        <div className={peopleCardStyles.presence}>\r\n                            <FontIcon\r\n                                aria-label='Mail'\r\n                                iconName={PRESENCE_ICONS[presence].name}\r\n                                className={mergeStyles(peopleCardStyles.icon, {\r\n                                    color: PRESENCE_ICONS[presence].color,\r\n                                })}\r\n                            />\r\n                            <span className={peopleCardStyles.subHeaderText}>{presence}</span>\r\n                        </div>\r\n                    )}\r\n                    <div className={peopleCardStyles.subHeader}>\r\n                        <span className={peopleCardStyles.subHeaderText}>èç³»äºº</span>\r\n                        <FontIcon aria-label='ChevronRight' iconName='ChevronRight' className={peopleCardStyles.icon} />\r\n                    </div>\r\n                    {people.mail && (\r\n                        <div className={peopleCardStyles.ContractInfo}>\r\n                            <FontIcon aria-label='Mail' iconName='Mail' className={peopleCardStyles.icon} />\r\n                            <span>{people.mail}</span>\r\n                        </div>\r\n                    )}\r\n                    {people.phone && (\r\n                        <div className={peopleCardStyles.ContractInfo}>\r\n                            <FontIcon aria-label='Call' iconName='Call' className={peopleCardStyles.icon} />\r\n                            <span>{people.phone}</span>\r\n                        </div>\r\n                    )}\r\n\r\n                    {people.officeLocation && (\r\n                        <div className={peopleCardStyles.ContractInfo}>\r\n                            <FontIcon aria-label='Location' iconName='Location' className={peopleCardStyles.icon} />\r\n                            <span>{people.officeLocation}</span>\r\n                        </div>\r\n                    )}\r\n                    {manager && (\r\n                        <>\r\n                            <div className={peopleCardStyles.subHeader}>\r\n                                <span className={peopleCardStyles.subHeaderText}>ç´å±é¢å¯¼</span>\r\n                                <FontIcon\r\n                                    aria-label='ChevronRight'\r\n                                    iconName='ChevronRight'\r\n                                    className={peopleCardStyles.icon}\r\n                                />\r\n                            </div>\r\n                            <div className={peopleCardStyles.peopleWithIcon}>\r\n                                <div className={peopleCardStyles.info}>\r\n                                    <PeopleCoin\r\n                                        selection={{ id: manager.id, name: manager.name, type: 0 }}\r\n                                        onRetrieveIcon={retrievePeopleSelectionIcon}\r\n                                        coinSize={32}\r\n                                    />\r\n                                </div>\r\n                                <div>\r\n                                    <span>{manager.name}</span>\r\n                                    <br></br>\r\n                                    <span>{manager.role}</span>\r\n                                </div>\r\n                            </div>\r\n                        </>\r\n                    )}\r\n                </div>\r\n            </div>\r\n        </Callout>\r\n    );\r\n};\r\n","import { useTranslation } from 'react-i18next';\r\nimport { Paths } from '../../routes/Paths';\r\n\r\n/**\r\n * hook for page title\r\n *\r\n * @param path\r\n * @returns path title\r\n */\r\nexport const usePageTitle = (path: Paths): string => {\r\n    const { t } = useTranslation();\r\n\r\n    switch (path) {\r\n        default:\r\n            return '';\r\n    }\r\n};\r\n","import { TextField } from '@fluentui/react';\r\nimport React, { useCallback, useState } from 'react';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { Strings } from '../../../localization';\r\nimport { generateURL, Paths } from '../../../routes/Paths';\r\nimport { useSearchFieldStyles } from './SearchPeopleField.styles';\r\n\r\nexport interface SearchPeopleFieldProps {\r\n    searchText?: string;\r\n}\r\n\r\nexport const SearchPeopleField = ({ searchText }: SearchPeopleFieldProps): JSX.Element => {\r\n    const { t } = useTranslation();\r\n    const [inputValue, setInputValue] = useState(searchText || '');\r\n    const onChange = useCallback((_: unknown, value?: string) => {\r\n        setInputValue(value || '');\r\n    }, []);\r\n\r\n    const styles = useSearchFieldStyles();\r\n    const navigate = useNavigate();\r\n\r\n    const iconProps = {\r\n        iconName: 'Search',\r\n        className: styles.textFieldIcon1,\r\n        styles: {\r\n            root: {\r\n                fontSize: '20px',\r\n            },\r\n        },\r\n    };\r\n    return (\r\n        <>\r\n            <form noValidate autoComplete='off'>\r\n                <TextField\r\n                    className={styles.inputField}\r\n                    placeholder={t(Strings.searchPlaceholder)}\r\n                    iconProps={iconProps}\r\n                    value={inputValue}\r\n                    onChange={onChange}\r\n                    onKeyDown={event => {\r\n                        if (event.key === 'Enter') {\r\n                            navigate(\r\n                                generateURL(Paths.SearchResults, undefined, {\r\n                                    searchText: inputValue,\r\n                                })\r\n                            );\r\n                        }\r\n                    }}\r\n                />\r\n            </form>\r\n        </>\r\n    );\r\n};\r\n","/*\r\n *  Copyright Â© Microsoft Corporation. All rights reserved.\r\n */\r\n\r\nimport React from 'react';\r\nimport { Route } from 'react-router-dom';\r\nimport { DesktopDefaultPage, HomePage, SearchResults } from '../views';\r\nimport { Paths } from './Paths';\r\n\r\nexport const desktopRoutes = [\r\n    // personal app\r\n    <Route key={Paths.HomePage} path={Paths.HomePage} element={<HomePage />} />,\r\n    <Route key={Paths.SearchResults} path={Paths.SearchResults} element={<SearchResults />} />,\r\n    <Route key={Paths.DepartmentTeam} path={Paths.DepartmentTeam} element={<HomePage />} />,\r\n\r\n    // home\r\n    <Route key='*' path='*' element={<DesktopDefaultPage />} />,\r\n];\r\n","import { getAuthToken, getTeamsContext } from '@addressbook/components-metaos-host';\r\nimport { PeopleSelection, PeopleSelectionType } from '@addressbook/components-people';\r\nimport jwtDecode from 'jwt-decode';\r\nimport { useQuery } from 'react-query';\r\nimport { ADDRESSBOOK_APP_RESOURCE_URL } from '../common/env';\r\nimport { UserPayload } from '../utilities';\r\n\r\nconst ANYONE_SELECTION_ID = 'anyone';\r\n\r\n/**\r\n * A hook that returns the current user selection.\r\n *\r\n * @returns The current user selection.\r\n */\r\nexport function useCurrentUserSelection(): PeopleSelection | undefined {\r\n    const { data } = useQuery<PeopleSelection>({\r\n        queryKey: getCurrentUserSelection.name,\r\n        queryFn: getCurrentUserSelection,\r\n        staleTime: Infinity,\r\n    });\r\n\r\n    return data;\r\n}\r\n\r\nasync function getCurrentUserSelection(): Promise<PeopleSelection> {\r\n    const teamsContext = await getTeamsContext();\r\n\r\n    const user = teamsContext.user;\r\n    if (!user) throw new Error('User not found in Teams context.');\r\n\r\n    const selection = {\r\n        type: PeopleSelectionType.User,\r\n        id: user.id,\r\n        name: user.displayName ?? '',\r\n        mail: user.userPrincipalName,\r\n    };\r\n\r\n    // Patch name if absent in Teams context.\r\n    // We need remove the fallback after the issue has been fixed by the Teams. Relevant issue discussion: https://github.com/OfficeDev/microsoft-teams-library-js/issues/2330\r\n    if (!selection.name) {\r\n        const token = await getAuthToken(ADDRESSBOOK_APP_RESOURCE_URL);\r\n        const jwt = jwtDecode<UserPayload>(token);\r\n        if (jwt && jwt.name) selection.name = jwt.name;\r\n    }\r\n\r\n    return selection;\r\n}\r\n\r\n// /**\r\n//  * A hook that returns the contextual everyone selection for the current context.\r\n//  * The items of selection are sorted by name alphabetically.\r\n//  *\r\n//  * @returns The contextual everyone selection.\r\n//  */\r\n// export function useContextualEveryoneSelection(): PeopleSelection | undefined {\r\n//     const { t } = useTranslation();\r\n//     const teamsContext = useTeamsContext();\r\n//     const chatId = teamsContext?.chat?.id;\r\n//     const groupId = teamsContext?.team?.groupId;\r\n\r\n//     const chatUsersResult = useReactQuery(\r\n//         SERVICE_CLIENT.peopleSearchVersion_GetUsersFromChat,\r\n//         { chatId: chatId! },\r\n//         { enabled: Boolean(chatId), select: uniqueAndSortUsersToSinglePeopleSelections }\r\n//     );\r\n\r\n//     const groupUsersResult = useReactQuery(\r\n//         SERVICE_CLIENT.peopleSearchVersion_GetUsersFromGroup,\r\n//         { groupId: groupId! },\r\n//         { enabled: Boolean(groupId), select: uniqueAndSortUsersToSinglePeopleSelections }\r\n//     );\r\n\r\n//     const result = chatId ? chatUsersResult : groupId ? groupUsersResult : undefined;\r\n\r\n//     const refetch = result?.refetch;\r\n//     const everyoneItems = result?.data;\r\n//     const everyoneItemsRef = React.useRef(everyoneItems);\r\n//     everyoneItemsRef.current = everyoneItems;\r\n\r\n//     return React.useMemo(() => {\r\n//         if (!refetch) return;\r\n\r\n//         return {\r\n//             type: PeopleSelectionType.Unspecific,\r\n//             id: EVERYONE_SELECTION_ID,\r\n//             name: t(Strings.peoplePickerEveryoneItemText),\r\n//             get items() {\r\n//                 return everyoneItemsRef.current;\r\n//             },\r\n//             resolveItems: async () => (await refetch({ throwOnError: true })).data!,\r\n//             icon: IconName.ContactCard,\r\n//             expandable: true,\r\n//         };\r\n//     }, [refetch, t]);\r\n// }\r\n","/*\r\n *  Copyright Â© Microsoft Corporation. All rights reserved.\r\n */\r\n\r\nexport * from './ErrorStatus';\r\n","/*\r\n *  Copyright Â© Microsoft Corporation. All rights reserved.\r\n */\r\n\r\nexport * from './EcsFlags';\r\nexport * from './ECSConfigProvider';\r\nexport * from './loadEcsConfig';\r\n","/*\r\n *  Copyright Â© Microsoft Corporation. All rights reserved.\r\n */\r\n\r\nimport React, { useEffect } from 'react';\r\nimport { Navigate } from 'react-router-dom';\r\nimport { LogCategory, logger } from '../../../logger';\r\nimport { Paths } from '../../../routes/Paths';\r\n\r\nexport const MobileDefaultPage: React.FC = (): JSX.Element => {\r\n    const href = window.location.href;\r\n    useEffect(() => {\r\n        logger.logTraceWarning(LogCategory.Navigate, `Redirect to mobile default page. original url:${href}`);\r\n    }, [href]);\r\n\r\n    return <Navigate to={Paths.HomePage} replace />;\r\n};\r\n","export * from './DefaultPage';\r\nexport * from './ErrorBoundary';\r\nexport * from './HomePage';\r\nexport * from './SearchResult';\r\n","import { useQuery, UseQueryOptions, UseQueryResult } from 'react-query';\r\nimport type { APIFunctions } from '../service/gen';\r\nimport type { RequestError } from '../service/RequestError';\r\n\r\n/**\r\n * @param func service client API function\r\n * @param params service client API params\r\n * @param options UseQueryOptions\r\n */\r\nfunction useReactQuery<T extends APIFunctions, TData = Awaited<ReturnType<T>>>(\r\n    func: T,\r\n    params: Parameters<T>[0],\r\n    options?: Omit<UseQueryOptions<Awaited<ReturnType<T>>, RequestError, TData>, 'queryKey' | 'queryFn'>\r\n): UseQueryResult<TData, RequestError> {\r\n    return useQuery<Awaited<ReturnType<T>>, RequestError, TData>({\r\n        queryFn: ({ queryKey, signal }): any => {\r\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-call\r\n            return queryKey[1] ? (func as any)(queryKey[1], signal) : (func as any)(signal);\r\n        },\r\n        queryKey: [func.name, params],\r\n        ...options,\r\n    });\r\n}\r\n\r\nexport { useReactQuery };\r\n","import { makeStyles } from '@addressbook/components-fluentui-teams-theme';\r\n\r\nexport const useSearchFieldStyles = makeStyles(theme => ({\r\n    inputField: {\r\n        flex: 1,\r\n        '.ms-Label': {\r\n            padding: '0 0 4px',\r\n            whiteSpace: 'nowrap',\r\n        },\r\n        '.ms-TextField-field': {\r\n            paddingLeft: '36px',\r\n            // backgroundColor: theme.palette.white,\r\n            backgroundColor: theme.palette.neutralLight,\r\n\r\n            paddingRight: '36px',\r\n        },\r\n    },\r\n    textFieldIcon1: {\r\n        position: 'absolute',\r\n        left: '6px',\r\n        top: '50%',\r\n        transform: 'translateY(-50%)',\r\n        pointerEvents: 'none',\r\n    },\r\n}));\r\n","/*\r\n *  Copyright Â© Microsoft Corporation. All rights reserved.\r\n */\r\n\r\n/**\r\n * flags here that you specify in ECS\r\n * Make sure to copy over the state specified in this field over to the initialState down below as well.\r\n */\r\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\r\nexport interface ECSFlags {\r\n    /**\r\n     * NPS Feedback Enabled Time Range, such as 2024-01-31/2024-02-08\r\n     */\r\n    NPSFeedbackEnabledTimeRange?: string;\r\n\r\n    /**\r\n     * Feedback bubble enabled Time Range, such as 2024-01-31/2024-02-08\r\n     */\r\n    FeedbackBubbleEnabledTimeRange?: string;\r\n}\r\n\r\nexport interface EcsHeaders {\r\n    CountryCode: string;\r\n    ETag: string;\r\n    Expires: string;\r\n    StatusCode: string;\r\n}\r\nexport interface EcsResponseBase {\r\n    Headers: EcsHeaders;\r\n}\r\n\r\nexport interface IECSConfigState extends EcsResponseBase {\r\n    MWTWorkReport: ECSFlags;\r\n}\r\n\r\nexport enum EcsConfigType {\r\n    Default = 0,\r\n    User = 1,\r\n}\r\n\r\nexport interface EcsConfig<T extends EcsResponseBase> {\r\n    config: T;\r\n    configType: EcsConfigType;\r\n    eTag: string;\r\n    expiration: number;\r\n    cacheUpdateTime: number;\r\n    lastFetchTokenHash: number | undefined;\r\n    appVersion: string | undefined;\r\n}\r\n\r\n/**\r\n * initial state to be used when ECS fetch fails.\r\n * Note: Please change the initialState after your feature complete rollout on ECS\r\n */\r\nexport const initialState: Required<ECSFlags> = {\r\n    NPSFeedbackEnabledTimeRange: '',\r\n    FeedbackBubbleEnabledTimeRange: '2024-09-18/2024-10-10',\r\n};\r\n","import { mergeStyles } from '@fluentui/react';\r\n\r\nexport const themeProviderClassName = mergeStyles({ width: '100%', height: '100%' });\r\n","import { DefaultButton, PrimaryButton, useTheme } from '@fluentui/react';\r\nimport { EmptyState } from '@addressbook/components-shared';\r\nimport React from 'react';\r\nimport { useTranslation } from 'react-i18next';\r\nimport FileEmpty from '../../../assets/emptyStatus/file-empty.svg';\r\nimport ItemDisabled from '../../../assets/errorStatus/itemdisabled.svg';\r\nimport NewChatImg from '../../../assets/errorStatus/newchat.svg';\r\nimport NoAccess from '../../../assets/errorStatus/noaccess.svg';\r\nimport OfflineImage from '../../../assets/errorStatus/offline.svg';\r\nimport Warning from '../../../assets/errorStatus/warning.svg';\r\nimport { Strings } from '../../../localization';\r\nimport { LogCategory, logger } from '../../../logger';\r\nimport { ClientErrorCodes, RequestError } from '../../../service/RequestError';\r\n\r\nexport interface ErrorStatusProps {\r\n    img?: string;\r\n    error?: Error;\r\n    errorCode?: SpecialErrorType;\r\n    /**\r\n     * @deprecated use error or errorCode\r\n     */\r\n    title?: string;\r\n    /**\r\n     * @deprecated use error or errorCode\r\n     */\r\n    message?: string;\r\n    /**\r\n     * Prefer associate with error code\r\n     */\r\n    actionText?: string;\r\n    onAction?: () => void;\r\n    className?: string;\r\n    hideImg?: boolean;\r\n    onReturnToHome?: () => void;\r\n}\r\n\r\nexport enum SpecialErrorType {\r\n    noReport = 'noReport',\r\n    noPermission = 'noPermission',\r\n    newChat = 'newChat',\r\n    guestUser = 'guestUser',\r\n    solutionNotUpgrade = 'SolutionNotUpgrade',\r\n    ReportDefinitionDisabled = 'ReportDefinitionDisabled',\r\n    NotDefinitionSubmitter = 'NotDefinitionSubmitter',\r\n    DefinitionReviewer = 'DefinitionReviewer',\r\n    DefinitionOwner = 'DefinitionOwner',\r\n    FormsResponseNotFound = 'FormsResponseNotFound',\r\n    FormsPrincipalDisabled = 'FormsPrincipalDisabled',\r\n    UserNotEnabled = 'UserNotEnabled',\r\n    NotProvisioned = 'NotProvisioned',\r\n    ExecutedSimilarManualReminderRecently = 'ExecutedSimilarManualReminderRecently',\r\n    Retry = 'retry',\r\n    EnvironmentNotFound = 'EnvironmentNotFound',\r\n    ItemNotFound = 'ItemNotFound',\r\n    BAPBatchAddUserFail = 'BAPBatchAddUserFail',\r\n    MultiUserOperationConflict = 'MultiUserOperationConflict',\r\n}\r\n\r\nconst ImageMap = {\r\n    [SpecialErrorType.noReport]: FileEmpty,\r\n    [SpecialErrorType.noPermission]: NoAccess,\r\n    [SpecialErrorType.newChat]: NewChatImg,\r\n    [SpecialErrorType.guestUser]: NoAccess,\r\n    [SpecialErrorType.solutionNotUpgrade]: NewChatImg,\r\n    [SpecialErrorType.ReportDefinitionDisabled]: ItemDisabled,\r\n    [SpecialErrorType.NotDefinitionSubmitter]: NoAccess,\r\n    [SpecialErrorType.FormsResponseNotFound]: Warning,\r\n    [SpecialErrorType.FormsPrincipalDisabled]: Warning,\r\n    [SpecialErrorType.NotProvisioned]: NoAccess,\r\n    [ClientErrorCodes.network]: OfflineImage,\r\n    [ClientErrorCodes.teamsSDK]: OfflineImage,\r\n    [SpecialErrorType.DefinitionReviewer]: FileEmpty,\r\n    [SpecialErrorType.DefinitionOwner]: FileEmpty,\r\n    [SpecialErrorType.ItemNotFound]: ItemDisabled,\r\n    [SpecialErrorType.MultiUserOperationConflict]: NewChatImg,\r\n};\r\n\r\n/**\r\n * show error status with localized messages and image\r\n *\r\n * @param param0\r\n * @returns\r\n */\r\nexport const ErrorStatus = ({\r\n    img,\r\n    title,\r\n    message,\r\n    actionText,\r\n    onAction,\r\n    className,\r\n    error,\r\n    errorCode,\r\n    hideImg,\r\n    onReturnToHome,\r\n    children,\r\n}: React.PropsWithChildren<ErrorStatusProps>): JSX.Element => {\r\n    const theme = useTheme();\r\n    const { t } = useTranslation();\r\n    const code = errorCode || (error as RequestError)?.code;\r\n    const image = hideImg ? '' : img || ImageMap[code];\r\n    // using requestId for requestError and {sessionId} for others\r\n    const correlationId = (error as RequestError)?.requestId || `{${logger.sessionId}}`;\r\n    const action = actionText ?? (onAction && t(Strings.errorAction, { context: code }));\r\n    const returnToHomepageAction = code === SpecialErrorType.MultiUserOperationConflict;\r\n    React.useEffect(() => {\r\n        if (error && !(error instanceof RequestError)) {\r\n            // log all display error except for RequestError\r\n            // (Request error already logged)\r\n            logger.logTraceException(LogCategory.ErrorStatus, { error });\r\n        }\r\n    }, [error, code]);\r\n\r\n    if (error instanceof RequestError && !message) {\r\n        message = (error.detailedErrors ?? [error])\r\n            .map(errorDetail =>\r\n                t(Strings.errorDescription, {\r\n                    context: errorDetail.code,\r\n                    correlationId,\r\n                    count: errorDetail.additionalErrorMessage?.userNames?.length ?? 0,\r\n                    ...errorDetail.additionalErrorMessage,\r\n                })\r\n            )\r\n            .join('\\n');\r\n    }\r\n\r\n    return (\r\n        <EmptyState\r\n            image={image}\r\n            role='alert'\r\n            title={title ?? t(Strings.errorTitle, { context: code })}\r\n            message={message}\r\n            actionText={action}\r\n            height='100%'\r\n            background='transparent'\r\n            color={theme.palette.black}\r\n            className={`${className} empty-state`}>\r\n            <div style={{ display: 'flex', justifyContent: 'center', gap: '20px' }}>\r\n                {action && <DefaultButton text={action} onClick={onAction} />}\r\n                {returnToHomepageAction && onReturnToHome && (\r\n                    <PrimaryButton text={t(Strings.returnToHomePage)} onClick={onReturnToHome} />\r\n                )}\r\n            </div>\r\n            {children}\r\n        </EmptyState>\r\n    );\r\n};\r\n","/*\r\n *  Copyright Â© Microsoft Corporation. All rights reserved.\r\n */\r\n\r\nimport React, { useEffect } from 'react';\r\nimport { Navigate } from 'react-router-dom';\r\nimport { LogCategory, logger } from '../../../logger';\r\nimport { Paths } from '../../../routes/Paths';\r\n\r\nexport const DesktopDefaultPage: React.FC = (): JSX.Element => {\r\n    const href = window.location.href;\r\n    useEffect(() => {\r\n        logger.logTraceWarning(LogCategory.Navigate, `Redirect to desktop default page. original url:${href}`);\r\n    }, [href]);\r\n\r\n    return <Navigate to={Paths.DepartmentTeam} replace />;\r\n};\r\n","/*\r\n *  Copyright Â© Microsoft Corporation. All rights reserved.\r\n */\r\n\r\nimport '../styles/global.css';\r\nimport '../common/csp-inject';\r\n\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { TeamsHostProvider } from '@addressbook/components-metaos-host';\r\nimport { App } from '../views/App';\r\nimport { ErrorBoundary } from '../views/containers/ErrorBoundary';\r\nimport { init } from '../common/init';\r\nimport { logger, LogCategory, ScenarioName, StepName } from '../logger';\r\n\r\ninit(false);\r\nReactDOM.render(\r\n    <ErrorBoundary>\r\n        <TeamsHostProvider>\r\n            <App />\r\n        </TeamsHostProvider>\r\n    </ErrorBoundary>,\r\n    document.getElementById('root'),\r\n    () => {\r\n        logger.markScenario(ScenarioName.AppBoot, StepName.AppBootReactRendered);\r\n        logger.logTraceInfo(LogCategory.AppBoot, 'React rendered desktop APP');\r\n    }\r\n);\r\n","import { executeDeepLink } from '@addressbook/components-metaos-host';\r\n\r\nexport function OpenChat(userEmail: string): void {\r\n    // executeDeepLink(`https://teams.microsoft.com/l/chat/0/0?users=${userEmail}`);\r\n    // https://teams.microsoft.com/multi-window/chats/\r\n\r\n    executeDeepLink(`https://teams.microsoft.com/multi-window/chats/users=${userEmail}`);\r\n    // way1: executeDeepLink(`https://teams.microsoft.com/l/chat/0/0?users=${userEmail}`);\r\n    // way2: window.open(`https://teams.microsoft.com/l/chat/0/0?users=${userEmail}`, '_blank');\r\n    // openChat(request);\r\n    // way3:\r\n    // const request = {\r\n    //     user: userEmail,\r\n    //     message: '',\r\n    // };\r\n    // openChat(request);\r\n    // way4:\r\n    // startTask(\r\n    //     {\r\n    //         url: `https://teams.microsoft.com/l/chat/0/0?users=${userEmail}`,\r\n    //         // url: 'https://happy-field-nwrxt4j-8080.asse.devtunnels.ms/#/homePage',\r\n    //         title: 'new Chat',\r\n    //         size: { width: 600, height: 400 },\r\n    //     },\r\n    //     result => {\r\n    //         if (result) {\r\n    //             console.log('startTask æ¶å°æ¥èªå¯¹è¯æ¡çæ°æ®ï¼', result);\r\n    //         } else {\r\n    //             console.log('startTask å¯¹è¯æ¡è¢«å³é­ï¼æ²¡æè¿åæ°æ®ã');\r\n    //         }\r\n    //     }\r\n    // );\r\n}\r\n\r\nexport function OpenChatById(userId: string): void {\r\n    // executeDeepLink(`https://teams.microsoft.com/l/chat/0/0?users=8:orgid:${userId}`);\r\n    executeDeepLink(\r\n        'https://teams.microsoft.com/multi-window/chats/19:b82b1112-95cf-49ff-b773-82b43964c9ca_f710e772-b3ec-4b3c-aca4-0628a7dd296a@unq.gbl.spaces'\r\n    );\r\n}\r\n\r\nexport function OpenCallByEmail(userEmail: string): void {\r\n    executeDeepLink(`https://teams.microsoft.com/l/call/0/0?users=${userEmail}`);\r\n}\r\n\r\nexport function OpenVideoCallByEmail(userEmail: string): void {\r\n    executeDeepLink(`https://teams.microsoft.com/l/call/0/0?users=${userEmail}`);\r\n}\r\n\r\nexport function OpenCallById(userId: string): void {\r\n    executeDeepLink(`https://teams.microsoft.com/l/call/0/0?users=8:orgid:${userId}`);\r\n}\r\n\r\nexport function OpenVideoCallById(userId: string): void {\r\n    executeDeepLink(`https://teams.microsoft.com/l/call/0/0?users=8:orgid:${userId}`);\r\n}\r\n\r\nexport function OpenOrgExplorerApp(): void {\r\n    executeDeepLink('https://teams.microsoft.com/l/app/1f8c20f5-d70f-4f8e-93e1-31d8fce0c8c9');\r\n}\r\n","/*\r\n *  Copyright Â© Microsoft Corporation. All rights reserved.\r\n */\r\n\r\nexport * from './PeopleCard';\r\n","/*\r\n *  Copyright Â© Microsoft Corporation. All rights reserved.\r\n */\r\n\r\nexport * from './DesktopDefaultPage';\r\nexport * from './MobileDefaultPage';\r\n","/*\r\n *  Copyright Â© Microsoft Corporation. All rights reserved.\r\n */\r\n\r\nimport { CommonIcon } from '@addressbook/components-shared';\r\nimport {\r\n    Announced,\r\n    ConstrainMode,\r\n    DetailsHeader,\r\n    DetailsListLayoutMode,\r\n    DetailsRow,\r\n    IColumn,\r\n    IDetailsHeaderProps,\r\n    IDetailsRowProps,\r\n    IGroup,\r\n    IGroupRenderProps,\r\n    mergeStyles,\r\n    SelectionMode,\r\n    ShimmeredDetailsList,\r\n} from '@fluentui/react';\r\nimport React from 'react';\r\nimport useInfiniteScroll from 'react-infinite-scroll-hook';\r\n\r\nexport interface CommonDetailsListProps<T> {\r\n    items?: T[];\r\n    columns?: IColumn[];\r\n    className?: string;\r\n    queryStatus?: { isLoading?: boolean; canLoadMore?: boolean; loadMore?: () => void };\r\n    ariaLabel?: string;\r\n    shimmerLines?: number;\r\n    rowClass?: (props: IDetailsRowProps) => string;\r\n    onRenderRow?: (props?: IDetailsRowProps) => JSX.Element;\r\n    onItemClick?: (item: T) => void;\r\n    isHeaderVisible?: boolean;\r\n    groupProps?: IGroupRenderProps;\r\n    groups?: IGroup[];\r\n    announcedMessage?: string;\r\n}\r\nexport const CommonDetailsList = <T,>({\r\n    items,\r\n    columns,\r\n    className,\r\n    rowClass,\r\n    queryStatus,\r\n    ariaLabel,\r\n    onItemClick,\r\n    shimmerLines,\r\n    onRenderRow,\r\n    isHeaderVisible = true,\r\n    groupProps,\r\n    groups,\r\n    announcedMessage,\r\n}: CommonDetailsListProps<T>): JSX.Element => {\r\n    const [sentryRef] = useInfiniteScroll({\r\n        loading: !!queryStatus?.isLoading,\r\n        hasNextPage: !!queryStatus?.canLoadMore,\r\n        // eslint-disable-next-line @typescript-eslint/no-empty-function\r\n        onLoadMore: queryStatus?.loadMore ?? (() => {}),\r\n        disabled: !queryStatus,\r\n    });\r\n\r\n    const onRenderRowDefault = React.useCallback(\r\n        (props?: IDetailsRowProps): JSX.Element =>\r\n            props ? (\r\n                <DetailsRow\r\n                    {...props}\r\n                    className={mergeStyles(rowClass && rowClass(props))}\r\n                    data-selection-invoke\r\n                    role='row'\r\n                    data-testid='DetailsRow'\r\n                    aria-rowindex={props.itemIndex}\r\n                />\r\n            ) : (\r\n                <></>\r\n            ),\r\n        [rowClass]\r\n    );\r\n\r\n    const onRenderDetailsHeader = React.useCallback(\r\n        (props?: IDetailsHeaderProps): JSX.Element | null =>\r\n            props ? (\r\n                <>\r\n                    <DetailsHeader {...props} />\r\n                    {announcedMessage && <Announced message={announcedMessage} />}\r\n                </>\r\n            ) : null,\r\n        [announcedMessage]\r\n    );\r\n\r\n    return (\r\n        <ShimmeredDetailsList\r\n            selectionMode={SelectionMode.none}\r\n            constrainMode={ConstrainMode.unconstrained}\r\n            layoutMode={DetailsListLayoutMode.justified}\r\n            enableShimmer={!items}\r\n            columns={columns}\r\n            items={(queryStatus?.isLoading || queryStatus?.canLoadMore) && items ? [...items, null] : items || []}\r\n            isHeaderVisible={isHeaderVisible}\r\n            onRenderRow={onRenderRow ?? onRenderRowDefault}\r\n            onItemInvoked={onItemClick && (item => onItemClick(item))}\r\n            onRenderDetailsFooter={() => <div ref={sentryRef} />}\r\n            className={className}\r\n            ariaLabelForGrid={ariaLabel}\r\n            shimmerLines={shimmerLines}\r\n            role='table'\r\n            groups={groups}\r\n            groupProps={groupProps}\r\n            onRenderDetailsHeader={onRenderDetailsHeader}\r\n        />\r\n    );\r\n};\r\n\r\nexport const onRenderReportDefinitionColumn = (\r\n    title: string,\r\n    iconBackgroundColor?: string,\r\n    icon?: string,\r\n    description?: string\r\n): JSX.Element => {\r\n    return (\r\n        <CommonIcon\r\n            title={title}\r\n            iconBackgroundColor={iconBackgroundColor}\r\n            icon={icon}\r\n            styles={{ title: { fontWeight: 'inherit' } }}\r\n            description={description}\r\n        />\r\n    );\r\n};\r\n","/*\r\n *  Copyright Â© Microsoft Corporation. All rights reserved.\r\n */\r\n\r\nexport { LoadingIndicatorWrapperComponent as LoadingIndicatorWrapper } from './LoadingIndicatorWrapper.component';\r\n","// export * from './collapsible-text-fields';\r\n// export * from './date-pickers';\r\n// export * from './form-facades';\r\nexport * from './people';\r\n// export * from './rich-text-fields';\r\n","import { DefaultButton } from '@fluentui/react';\r\nimport React, { useState } from 'react';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { usePageParams, useReactPageQuery } from '../../../hooks';\r\nimport { Strings } from '../../../localization';\r\nimport { ModuleName } from '../../../logger';\r\nimport { Paths } from '../../../routes/Paths';\r\nimport { SERVICE_CLIENT } from '../../../service';\r\nimport { mapUserViewToPeople } from '../../../utilities/peopleUtils';\r\nimport { EmptyStatus, ErrorStatus, LoadingPage } from '../../components';\r\nimport { AddressBookAppHeader } from '../../components/AddressBookAppHeader/AddressBookAppHeader';\r\nimport { PeopleList } from '../../components/PeopleList';\r\nimport { useSearchResultStyles } from './SearchResult.styles';\r\n\r\nexport const SearchResults = (): JSX.Element => {\r\n    const styles = useSearchResultStyles();\r\n    const iconProps = {\r\n        iconName: 'Search',\r\n        className: styles.textFieldIcon1,\r\n        styles: {\r\n            root: {\r\n                fontSize: '20px',\r\n            },\r\n        },\r\n    };\r\n    const { t } = useTranslation();\r\n    const { params } = usePageParams<Paths.SearchResults>();\r\n    const { searchText } = params;\r\n\r\n    const [inputValue, setInputValue] = useState(searchText);\r\n\r\n    const onChange = React.useCallback((_: unknown, value?: string) => {\r\n        setInputValue(value || '');\r\n    }, []);\r\n    const navigate = useNavigate();\r\n\r\n    const {\r\n        data: searchMembers,\r\n        error: membersError,\r\n        isLoading: membersLoading,\r\n        ...membersQueryStatus\r\n    } = useReactPageQuery(\r\n        SERVICE_CLIENT.fetchSearchUser,\r\n        { top: 10, userDisplayName: searchText },\r\n        { enabled: searchText !== '' }\r\n    );\r\n    return (\r\n        <div className={styles.root}>\r\n            <AddressBookAppHeader moduleName={ModuleName.SearchResult} searchText={searchText} />\r\n            {/* <div className={styles.topSearchSection}>\r\n                <form noValidate autoComplete='off'>\r\n                    <TextField\r\n                        className={styles.inputField}\r\n                        placeholder={t(Strings.searchPlaceholder)}\r\n                        iconProps={iconProps}\r\n                        value={inputValue}\r\n                        onChange={onChange}\r\n                        onKeyDown={event => {\r\n                            if (event.key === 'Enter') {\r\n                                navigate(\r\n                                    generateURL(Paths.SearchResults, undefined, {\r\n                                        searchText: inputValue,\r\n                                    })\r\n                                );\r\n                            }\r\n                        }}\r\n                    />\r\n                </form>\r\n            </div> */}\r\n            <div className={styles.main}>\r\n                <div className={styles.top}>\r\n                    <h2 className={styles.topText}>{t(Strings.searchResultLabel, { searchResult: searchText })}</h2>\r\n                    <DefaultButton onClick={() => navigate(Paths.DepartmentTeam)} text={t(Strings.exitSearchLabel)} />\r\n                </div>\r\n\r\n                {searchMembers && searchMembers.length > 0 && (\r\n                    <PeopleList\r\n                        items={searchMembers.map(data => mapUserViewToPeople(data))}\r\n                        queryStatus={membersQueryStatus}\r\n                        moduleName={ModuleName.SearchResult}\r\n                    />\r\n                )}\r\n                {searchMembers?.length === 0 && (\r\n                    <EmptyStatus\r\n                        title={t(Strings.errorTitleForNotContract)}\r\n                        message={t(Strings.errorMessageForNotContract)}\r\n                        img='NoMessage'\r\n                    />\r\n                )}\r\n                {membersLoading && <LoadingPage />}\r\n                {membersError && <ErrorStatus error={membersError} />}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n","import { User } from '@microsoft/microsoft-graph-types';\r\nimport { UserView } from '../service/query';\r\n\r\nexport function mapUserViewToPeople(user: UserView): IPeople {\r\n    return {\r\n        id: user.id,\r\n        key: user.id,\r\n        mail: user.mail ?? user.userPrincipalName,\r\n        manager: undefined,\r\n        name: user.displayName,\r\n        officeLocation: user.officeLocation,\r\n        phone: user.mobilePhone,\r\n        role: user.jobTitle,\r\n        departmentPaths: user.departmentPaths,\r\n    };\r\n}\r\n\r\nexport function mapUserToPeople(user: User): IPeople {\r\n    return {\r\n        id: user.id ?? '',\r\n        key: user.id ?? '',\r\n        mail: user.mail ?? user.userPrincipalName ?? '',\r\n        manager: undefined,\r\n        name: user.displayName ?? '',\r\n        officeLocation: user.officeLocation ?? '',\r\n        phone: user.mobilePhone ?? '',\r\n        role: user.jobTitle ?? '',\r\n        departmentPaths: {},\r\n    };\r\n}\r\n\r\nexport interface IPeople {\r\n    key: string;\r\n    id: string;\r\n    name: string;\r\n    mail: string;\r\n    phone: string;\r\n    role: string;\r\n    officeLocation: string;\r\n    manager: IPeople | undefined;\r\n    departmentPaths: Record<string, string>;\r\n}\r\n\r\nexport function getDepartmentIdFromFullId(fullId: string): string {\r\n    return fullId?.split('/').pop() ?? '';\r\n}\r\n\r\nexport function getDepartmentNameFromFullName(fullName: string): string {\r\n    return fullName?.split('/').pop() ?? '';\r\n}\r\n","export * from './PeopleList';\r\n","import { useEffect, useState } from 'react';\r\nimport { useDataFlag } from './useDataFlag';\r\nimport { ListComponentStatus } from './useListComponentStatusChange';\r\n\r\nexport type ReportListType = 'Received' | 'Submitted' | 'ComposeExtension';\r\n\r\n/**\r\n * hook for get report list actions\r\n *\r\n * @param reportListType is submitted report list or received report list\r\n * @returns actions\r\n */\r\nexport function useTabContentAction(\r\n    reportListType: ReportListType,\r\n    hasExtraList?: boolean\r\n): {\r\n    setExtraCardListStatus: (status: ListComponentStatus) => void;\r\n    setTimeSensitiveCardListStatus: (status: ListComponentStatus) => void;\r\n    setAdhocCardListStatus: (status: ListComponentStatus) => void;\r\n    setReportListStatus: (status: ListComponentStatus) => void;\r\n    showLoading: boolean;\r\n    isAllEmpty: boolean;\r\n} {\r\n    const { hasFlag, setFlag, delFlag } = useDataFlag(reportListType);\r\n\r\n    const [extraCardListStatus, setExtraCardListStatus] = useState<ListComponentStatus>();\r\n    const [timeSensitiveCardListStatus, setTimeSensitiveCardListStatus] = useState<ListComponentStatus>();\r\n    const [adhocCardListStatus, setAdhocCardListStatus] = useState<ListComponentStatus>();\r\n    const [reportListStatus, setReportListStatus] = useState<ListComponentStatus>();\r\n\r\n    const statusList = [];\r\n    if (hasExtraList) statusList.push(extraCardListStatus);\r\n    statusList.push(timeSensitiveCardListStatus, adhocCardListStatus);\r\n    if (reportListType !== 'ComposeExtension') statusList.push(reportListStatus);\r\n\r\n    const isAllEmpty = statusList.every(s => s === ListComponentStatus.Empty);\r\n    const hasNonEmpty = statusList.some(s => s === ListComponentStatus.NonEmpty);\r\n    const hasError = statusList.some(s => s === ListComponentStatus.Error);\r\n    const showLoading = !(hasFlag || isAllEmpty || hasNonEmpty || hasError);\r\n\r\n    useEffect(() => {\r\n        if (isAllEmpty && hasFlag) delFlag();\r\n        if (hasNonEmpty && !hasFlag) setFlag();\r\n    }, [delFlag, hasNonEmpty, hasFlag, isAllEmpty, setFlag]);\r\n\r\n    return {\r\n        setExtraCardListStatus,\r\n        setTimeSensitiveCardListStatus,\r\n        setAdhocCardListStatus,\r\n        setReportListStatus,\r\n        showLoading,\r\n        isAllEmpty,\r\n    };\r\n}\r\n","/*\r\n *  Copyright Â© Microsoft Corporation. All rights reserved.\r\n */\r\n\r\nimport React from 'react';\r\nimport useInfiniteScroll from 'react-infinite-scroll-hook';\r\n\r\nexport interface CommonCardListProps {\r\n    items?: JSX.Element[];\r\n    number?: number;\r\n    queryStatus?: { isLoading?: boolean; canLoadMore?: boolean; loadMore?: () => void };\r\n    CardShimmerComponent: JSX.Element;\r\n    shimmerCount?: number;\r\n}\r\n\r\nexport const CommonCardList: React.FC<CommonCardListProps> = (props: CommonCardListProps): JSX.Element => {\r\n    const { items, CardShimmerComponent, number, queryStatus, shimmerCount = 8 } = props;\r\n\r\n    const [sentryRef] = useInfiniteScroll({\r\n        loading: !!queryStatus?.isLoading,\r\n        hasNextPage: !!queryStatus?.canLoadMore,\r\n        // eslint-disable-next-line @typescript-eslint/no-empty-function\r\n        onLoadMore: queryStatus?.loadMore ?? (() => {}),\r\n        disabled: !queryStatus,\r\n    });\r\n\r\n    return (\r\n        <>\r\n            {items?.slice(0, number) ??\r\n                Array.from({ length: number ?? shimmerCount }, (_v, i) => (\r\n                    <React.Fragment key={i}>{CardShimmerComponent}</React.Fragment>\r\n                ))}\r\n            {(queryStatus?.isLoading || queryStatus?.canLoadMore) && items && (\r\n                <div ref={sentryRef} style={{ width: '100%' }} aria-hidden>\r\n                    {CardShimmerComponent}\r\n                </div>\r\n            )}\r\n        </>\r\n    );\r\n};\r\n","/*\r\n *  Copyright Â© Microsoft Corporation. All rights reserved.\r\n */\r\n\r\nexport * from './EmptyStatus';\r\n","/*\r\n *  Copyright Â© Microsoft Corporation. All rights reserved.\r\n */\r\n\r\nexport * from './CommonCardList.component';\r\n","import { makeStyles } from '@addressbook/components-fluentui-teams-theme';\r\n\r\nexport const useEmptyStatusStyles = makeStyles(() => ({\r\n    root: {\r\n        img: {\r\n            width: '200px',\r\n            height: '200px',\r\n            objectFit: 'contain',\r\n        },\r\n        '&.is-small': {\r\n            gap: '0 !important',\r\n            img: {\r\n                width: '100px',\r\n                height: '100px',\r\n            },\r\n        },\r\n        '> button': {\r\n            flexShrink: 0,\r\n        },\r\n    },\r\n}));\r\n","import { useTeamsContext } from '@addressbook/components-metaos-host';\r\nimport React from 'react';\r\nimport { QueryClient, QueryClientProvider, useQuery, UseQueryResult } from 'react-query';\r\nimport { initQuery, URIParam } from '../common/env';\r\nimport { ECSFlags, IECSConfigState } from './EcsFlags';\r\nimport { defaultECSFlags, getECSParams, loadEcsConfig } from './loadEcsConfig';\r\n\r\nconst ecsConfigQueryKey = 'GetECSConfigs';\r\n\r\nconst ecsQueryClient = new QueryClient({\r\n    defaultOptions: {\r\n        queries: {\r\n            staleTime: Infinity,\r\n            cacheTime: Infinity,\r\n        },\r\n    },\r\n});\r\n\r\ntype ECSContextType = Partial<UseQueryResult<ECSFlags>>;\r\nconst ECSContext = React.createContext<ECSContextType>({ data: defaultECSFlags });\r\n\r\nfunction ECSConfigProviderInner({\r\n    children,\r\n    defaultValue,\r\n    value,\r\n}: React.PropsWithChildren<{ defaultValue?: ECSFlags; value?: ECSFlags }>): JSX.Element {\r\n    const userObjectId = initQuery.get(URIParam.UserId)!;\r\n    const tid = initQuery.get(URIParam.TenantId)!;\r\n    const ringId = initQuery.get(URIParam.RingId)!;\r\n    const hostClientType = initQuery.get(URIParam.ClientType)!;\r\n    const teamsContext = useTeamsContext();\r\n    const ecsParams = getECSParams({\r\n        userObjectId,\r\n        tid,\r\n        ringId,\r\n        hostClientType,\r\n        ...teamsContext,\r\n    });\r\n    const result = useQuery([ecsConfigQueryKey, ecsParams], (): Promise<IECSConfigState> => loadEcsConfig(ecsParams), {\r\n        select: data => data.MWTWorkReport,\r\n        placeholderData: { MWTWorkReport: defaultValue || defaultECSFlags, Headers: {} as any },\r\n        enabled: !value && !!ecsParams,\r\n    });\r\n\r\n    return React.createElement(ECSContext.Provider, { value: value ? { data: value } : result }, children);\r\n}\r\n\r\nexport function ECSConfigProvider({\r\n    children,\r\n    defaultValue,\r\n    value,\r\n}: React.PropsWithChildren<{ defaultValue?: ECSFlags; value?: ECSFlags }>): JSX.Element {\r\n    return (\r\n        <QueryClientProvider client={ecsQueryClient}>\r\n            <ECSConfigProviderInner defaultValue={defaultValue} value={value}>\r\n                {children}\r\n            </ECSConfigProviderInner>\r\n        </QueryClientProvider>\r\n    );\r\n}\r\n\r\nexport function useECSConfig(): ECSContextType {\r\n    return React.useContext(ECSContext);\r\n}\r\n","import { INavLink } from '@fluentui/react';\r\nimport { UseInfiniteQueryResult } from 'react-query';\r\nimport { useReactPageQuery, UseReactPageQueryResult } from '../../../hooks';\r\nimport { generateURL, Paths } from '../../../routes/Paths';\r\nimport { DepartmentView, RequestError, SERVICE_CLIENT } from '../../../service';\r\nimport { UserView } from '../../../service/query';\r\n\r\nexport function mapDepartmentToNavLink(\r\n    department: DepartmentView,\r\n    currentDepartmentId: string, // ç¨äºè·¯ç±çæ V1\r\n    currentDepartmentName: string, // ç¨äºè·¯ç±çæ V2\r\n    selectedDepartmentName: string // ç¨äºå¤æ­å½åé¨é¨æ¯å¦å±å¼\r\n): INavLink {\r\n    const departmentFullId = currentDepartmentId === '' ? department.id : `${currentDepartmentId}/${department.id}`;\r\n    // departmentFullId æ¯å½åé¨é¨çå®æ´ IDï¼ç¨äºçæ URLï¼ æ è¯åªä¸é¡µåexpandï¼æ è¯å½åé¨é¨\r\n    // å ä¸ºå¨HomePageçPeopleListéï¼ä¸æ¯æç¨<Guid, <string, string>>çç»ææ¥è¡¨æDepartmentId, DepartmentFullName, DepartmentFullId,æä»¥è·¯ç±æ¹æ¢æä½¿ç¨DepartmentFullNameåDepartmentId\r\n\r\n    // æ´æ°ï¼v3ä½¿ç¨departmentFullIdådepartmentFullNameï¼å¶ä¸­keyæ¯departmentFullIdï¼å¥½å¤æ¯ä¸ç¨æå¿FullNameçå¯ä¸æ§åç¹æ®å­ç¬¦ï¼ä»¥åæ¿å°æå¨çæ°æ®ï¼FullIdè¡¨ç¤ºå±çº§ç»æï¼FullNameè¡¨ç¤ºé¨é¨åç§°\r\n    const departmentFullName =\r\n        currentDepartmentName === '' ? department.name : `${currentDepartmentName}/${department.name}`;\r\n    const link: INavLink = {\r\n        name: department.name,\r\n        url: generateURL(Paths.DepartmentTeam, undefined, {\r\n            departmentFullName,\r\n            departmentFullId,\r\n        }),\r\n        key: departmentFullId,\r\n        expandAriaLabel: department.name,\r\n        isExpanded: selectedDepartmentName?.includes(department.name),\r\n        // isExpanded: true,\r\n        links: department.subDepartments.length\r\n            ? department.subDepartments.map(subDepartment =>\r\n                  mapDepartmentToNavLink(subDepartment, departmentFullId, departmentFullName, selectedDepartmentName)\r\n              )\r\n            : undefined, // å¦ææå­é¨é¨ï¼åéå½å¤çï¼å¦åä¸º undefined\r\n    };\r\n    return link;\r\n}\r\n\r\n/**\r\n * hook for get user member list\r\n *\r\n * @param type is all member list or direct member list\r\n * @param top page query page size\r\n * @returns page query result\r\n */\r\nexport function useMemberListByDepartment(\r\n    type: MemberType,\r\n    isRootDepartment: boolean,\r\n    departmentId?: string,\r\n    top?: number,\r\n    skipToken?: string\r\n): Omit<UseInfiniteQueryResult<UserView[], RequestError>, 'data'> & UseReactPageQueryResult<UserView[]> {\r\n    const isAllMember = type === 'AllMember';\r\n    const func = isAllMember\r\n        ? SERVICE_CLIENT.fetchGetAllUserMembersByDepartment\r\n        : SERVICE_CLIENT.fetchGetDirectUserMembersByDepartment;\r\n\r\n    const params = {\r\n        departmentId,\r\n        isRootDepartment,\r\n        top,\r\n        skipToken,\r\n    };\r\n    return useReactPageQuery(func, params, { enabled: !!departmentId });\r\n}\r\n\r\n// export type MemberType = 'AllMember' | 'DirectMember';\r\n\r\nexport enum MemberType {\r\n    AllMember = 'AllMember',\r\n    DirectMember = 'DirectMember',\r\n}\r\n","import { useTeamsContext } from '@addressbook/components-metaos-host';\r\nimport { useTranslation } from 'react-i18next';\r\n\r\n/**\r\n * A hook to get the current language.\r\n *\r\n * @returns The current language.\r\n */\r\nexport function useLanguage(): string {\r\n    const context = useTeamsContext();\r\n    const { i18n } = useTranslation(undefined, { useSuspense: false });\r\n    return context?.app?.locale || i18n.resolvedLanguage || i18n.languages?.[0] || i18n.language;\r\n}\r\n","export * from './theme-provider';\r\n","/*\r\n *  Copyright Â© Microsoft Corporation. All rights reserved.\r\n */\r\n\r\nimport { AppHeader } from '@addressbook/components-shared';\r\nimport * as React from 'react';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { ENVIRONMENT } from '../../../common/env';\r\nimport { Strings } from '../../../localization';\r\nimport { RefreshButton } from '../RefreshButton/RefreshButton';\r\nimport { SearchPeopleField } from '../SearchPeopleField/SearchPeopleField';\r\nimport { useAppHeaderStyles } from './AddressBookAppHeader.styles';\r\n\r\nexport interface AddressBookAppHeaderProps {\r\n    title?: string;\r\n    items?: JSX.Element;\r\n    farItems?: JSX.Element;\r\n    moduleName?: string;\r\n    searchText?: string;\r\n}\r\n\r\nexport const AddressBookAppHeader = ({\r\n    items,\r\n    farItems,\r\n    title,\r\n    moduleName,\r\n    searchText,\r\n}: AddressBookAppHeaderProps): JSX.Element => {\r\n    const { t } = useTranslation();\r\n    const styles = useAppHeaderStyles();\r\n    const finalFarItems = React.useMemo(() => {\r\n        return !farItems ? (\r\n            <div className={styles.navContainer}>\r\n                <SearchPeopleField searchText={searchText} />\r\n                <RefreshButton />\r\n            </div>\r\n        ) : (\r\n            farItems\r\n        );\r\n    }, [farItems, searchText, styles.navContainer]);\r\n\r\n    return (\r\n        <AppHeader\r\n            title={title === undefined ? t(Strings.appName, { context: ENVIRONMENT }) : title}\r\n            items={items}\r\n            farItems={finalFarItems}\r\n            moduleName={moduleName}\r\n        />\r\n    );\r\n};\r\n","/*\r\n *  Copyright Â© Microsoft Corporation. All rights reserved.\r\n */\r\n\r\nimport { CommonLoadingIndicator } from '@addressbook/components-shared/src/CommonLoadingIndicator';\r\nimport React from 'react';\r\nimport { useIsFetching } from 'react-query';\r\nimport { Paths } from '../../../routes/Paths';\r\n\r\nexport interface LoadingIndicatorWrapperProps {\r\n    isMobile?: boolean;\r\n}\r\n\r\nexport const LoadingIndicatorWrapperComponent: React.FC<LoadingIndicatorWrapperProps> = ({ isMobile }): JSX.Element => {\r\n    const isFetching = useIsFetching() > 0;\r\n    const hideProgressIndicator = !isMobile && window.location.pathname.indexOf(Paths.HomePage) > 0;\r\n\r\n    return <>{!hideProgressIndicator && <CommonLoadingIndicator isFetching={isFetching} />}</>;\r\n};\r\n","export * from './actions';\r\nexport * from './components';\r\nexport * from './paths';\r\nexport * from './people';\r\nexport * from './useFluentUIThemeWithRTL';\r\nexport * from './useLanguage';\r\nexport * from './usePageParams';\r\nexport * from './useReactPageQuery';\r\nexport * from './useReactQuery';\r\n","import { EmptyState } from '@addressbook/components-shared';\r\nimport { mergeStyles, PrimaryButton, useTheme } from '@fluentui/react';\r\nimport React, { useMemo } from 'react';\r\n\r\nimport FileEmpty from '../../../assets/emptyStatus/file-empty.svg';\r\nimport NoMessage from '../../../assets/emptyStatus/no-message.svg';\r\nimport NoUnsubmitted from '../../../assets/emptyStatus/no-unsubmitted.svg';\r\nimport Optimizing from '../../../assets/emptyStatus/optimizing.svg';\r\nimport Submitted from '../../../assets/emptyStatus/submitted.svg';\r\nimport { useEmptyStatusStyles } from './EmptyStatus.styles';\r\n\r\nexport interface EmptyStatusProps {\r\n    img?: 'FileEmpty' | 'Optimizing' | 'Submitted' | 'NoUnsubmitted' | 'NoMessage'; // c:\\teams-verticals-workreport\\Source\\Clients\\web-apps\\WorkReport\\src\\assets\\emptyStatus\\no-message.svg\r\n    title?: string;\r\n    message?: string;\r\n    actionText?: string;\r\n    isSmall?: boolean;\r\n    onAction?: () => void;\r\n    className?: string;\r\n    role?: React.AriaRole;\r\n}\r\n\r\nexport const EmptyStatus = ({\r\n    img,\r\n    title,\r\n    message,\r\n    actionText,\r\n    onAction,\r\n    className,\r\n    isSmall,\r\n    children,\r\n    role,\r\n}: React.PropsWithChildren<EmptyStatusProps>): JSX.Element => {\r\n    const theme = useTheme();\r\n    const styles = useEmptyStatusStyles();\r\n    const imgFile = useMemo(\r\n        () =>\r\n            img === 'FileEmpty'\r\n                ? FileEmpty\r\n                : img === 'Optimizing'\r\n                ? Optimizing\r\n                : img === 'Submitted'\r\n                ? Submitted\r\n                : img === 'NoUnsubmitted'\r\n                ? NoUnsubmitted\r\n                : img === 'NoMessage'\r\n                ? NoMessage\r\n                : '',\r\n        [img]\r\n    );\r\n\r\n    return (\r\n        <EmptyState\r\n            role={role}\r\n            className={mergeStyles(styles.root, isSmall && 'is-small', className)}\r\n            image={imgFile}\r\n            title={title ?? ''}\r\n            message={message}\r\n            height='100%'\r\n            background='transparent'\r\n            color={theme.palette.black}>\r\n            {actionText && <PrimaryButton text={actionText} onClick={onAction} />}\r\n            {children}\r\n        </EmptyState>\r\n    );\r\n};\r\n","import { PeopleCoin } from '@addressbook/components-people';\r\nimport { ActionButton, DirectionalHint, ITooltipProps, Link, TooltipDelay, TooltipHost } from '@fluentui/react';\r\nimport React, { useState } from 'react';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { retrievePeopleSelectionIcon } from '../../../hooks';\r\nimport { Strings } from '../../../localization';\r\nimport { logger, ModuleName, ScenarioName, ScenarioType } from '../../../logger';\r\nimport { generateURL, Paths } from '../../../routes/Paths';\r\nimport { getDepartmentNameFromFullName, IPeople } from '../../../utilities/peopleUtils';\r\nimport { OpenCallById, OpenChatById } from '../../../utilities/quickAppUtils';\r\nimport { CommonDetailsList } from '../../common';\r\nimport { PeopleCard } from '../PeopleCard';\r\nimport { usePeopleListStyles } from './PeopleList.styles';\r\n\r\ninterface PeopleListProps {\r\n    items: IPeople[] | undefined;\r\n    moduleName: ModuleName;\r\n    queryStatus?: { isLoading?: boolean; canLoadMore?: boolean; loadMore?: () => void };\r\n}\r\n\r\nexport const PeopleList = ({ items, queryStatus }: PeopleListProps): JSX.Element => {\r\n    const styles = usePeopleListStyles();\r\n\r\n    // People Card:\r\n    const [calloutTarget, setCalloutTarget] = useState<HTMLElement | undefined>(undefined);\r\n    const [peopleShow, setPeopleShow] = useState<IPeople | undefined>(undefined);\r\n    const [openCardId, setOpenCardId] = useState('');\r\n\r\n    const navigate = useNavigate();\r\n    const { t } = useTranslation();\r\n    // const tooltipId = useId('tooltip');\r\n    const columns = [\r\n        {\r\n            key: 'name',\r\n            name: t(Strings.peopleListColumnForName),\r\n            fieldName: 'name',\r\n            // minWidth: 200,\r\n            // maxWidth: 300,\r\n            minWidth: 264,\r\n            maxWidth: 264,\r\n            isResizable: false,\r\n            iconName: 'ContactCard',\r\n            iconClassName: styles.iconCell,\r\n            className: styles.cellTitle,\r\n            onRender: (item: IPeople) => {\r\n                return (\r\n                    <div className={styles.nameField}>\r\n                        <div\r\n                            className={styles.nameShow}\r\n                            // When Click the user name, show the PeopleCard\r\n                            onClick={event => {\r\n                                setOpenCardId(item.id);\r\n                                const targetElement = event.target as HTMLElement;\r\n                                setPeopleShow(item);\r\n                                setCalloutTarget(targetElement);\r\n                                logger.logUserBiAction(\r\n                                    ScenarioName.PeopleCard,\r\n                                    ScenarioType.OpenPeopleCard,\r\n                                    'moduleName',\r\n                                    {}\r\n                                );\r\n                            }}>\r\n                            <PeopleCoin\r\n                                selection={{ id: item.id, name: item.name, type: 0 }}\r\n                                onRetrieveIcon={retrievePeopleSelectionIcon}\r\n                                coinSize={24}\r\n                            />\r\n                            <div className={styles.nameSpan} title={item.name}>\r\n                                {item.name}\r\n                            </div>\r\n                        </div>\r\n                        <div className={styles.hoverShowButtonContainer}>\r\n                            <ActionButton\r\n                                iconProps={{\r\n                                    iconName: 'Chat',\r\n                                    styles: {\r\n                                        root: {\r\n                                            fontSize: '20px',\r\n                                        },\r\n                                    },\r\n                                }}\r\n                                title='Chat'\r\n                                ariaLabel='Chat'\r\n                                className={styles.hoverShowButton}\r\n                                onClick={() => OpenChatById(item.id)}\r\n                            />\r\n                            <ActionButton\r\n                                iconProps={{\r\n                                    iconName: 'Call',\r\n                                    styles: {\r\n                                        root: {\r\n                                            fontSize: '20px',\r\n                                            padding: 0,\r\n                                        },\r\n                                    },\r\n                                }}\r\n                                title='Emoji'\r\n                                ariaLabel='Emoji'\r\n                                className={styles.hoverShowButton}\r\n                                onClick={() => OpenCallById(item.id)}\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                );\r\n            },\r\n        },\r\n        {\r\n            key: 'mail',\r\n            name: t(Strings.peopleListColumnForEmail),\r\n            fieldName: 'mail',\r\n            minWidth: 200,\r\n            maxWidth: 300,\r\n            isResizable: false,\r\n            iconName: 'Mail',\r\n            iconClassName: styles.iconCell,\r\n            onRender: (item: IPeople) => {\r\n                return (\r\n                    <div title={item.mail} className={styles.span}>\r\n                        {item.mail}\r\n                    </div>\r\n                );\r\n            },\r\n        },\r\n        {\r\n            key: 'phone',\r\n            name: t(Strings.peopleListColumnForPhone),\r\n            fieldName: 'phone',\r\n            minWidth: 100,\r\n            width: 120,\r\n            maxWidth: 150,\r\n            isResizable: false,\r\n            iconName: 'Call',\r\n            iconClassName: styles.iconCell,\r\n            onRender: (item: IPeople) => {\r\n                return (\r\n                    <div title={item.phone} className={styles.span}>\r\n                        {item.phone}\r\n                    </div>\r\n                );\r\n            },\r\n        },\r\n        {\r\n            key: 'depart',\r\n            name: t(Strings.peopleListColumnForDepart),\r\n            fieldName: 'depart',\r\n            minWidth: 200,\r\n            maxWidth: 300,\r\n            isResizable: false,\r\n            iconName: 'Location',\r\n            iconClassName: styles.iconCell,\r\n            onRender: (item: IPeople) => {\r\n                const tooltipProps: ITooltipProps = {\r\n                    onRenderContent: () => (\r\n                        <ol style={{ margin: '0 5px 0 0', padding: '0 0 0 20px' }}>\r\n                            {Object.entries(item.departmentPaths).map(([_departmentFullId, departmentFullName]) => (\r\n                                <li>{departmentFullName}</li>\r\n                            ))}\r\n                        </ol>\r\n                    ),\r\n                };\r\n\r\n                return (\r\n                    <>\r\n                        <TooltipHost\r\n                            tooltipProps={tooltipProps}\r\n                            delay={TooltipDelay.zero}\r\n                            // id={tooltipId}\r\n                            directionalHint={DirectionalHint.leftCenter}>\r\n                            <div>\r\n                                {Object.entries(item.departmentPaths).map(\r\n                                    ([departmentFullId, departmentFullName], index) => (\r\n                                        <>\r\n                                            <Link\r\n                                                key={departmentFullId} // ä½¿ç¨ url ä½ä¸ºå¯ä¸ key\r\n                                                onClick={() =>\r\n                                                    navigate(\r\n                                                        generateURL(Paths.DepartmentTeam, undefined, {\r\n                                                            departmentFullName,\r\n                                                            departmentFullId,\r\n                                                        })\r\n                                                    )\r\n                                                }>\r\n                                                {getDepartmentNameFromFullName(departmentFullName)}\r\n                                            </Link>\r\n                                            {index < Object.entries(item.departmentPaths).length - 1 && <span>; </span>}\r\n                                        </>\r\n                                    )\r\n                                )}\r\n                            </div>\r\n                        </TooltipHost>\r\n                    </>\r\n                );\r\n            },\r\n        },\r\n        {\r\n            key: 'role',\r\n            name: t(Strings.peopleListColumnForJob),\r\n            fieldName: 'role',\r\n            minWidth: 100,\r\n            width: 120,\r\n            maxWidth: 150,\r\n            isResizable: true,\r\n            iconName: 'Desk',\r\n            iconClassName: styles.iconCell,\r\n            onRender: (item: IPeople) => {\r\n                return (\r\n                    <div title={item.role} className={styles.span}>\r\n                        {item.role}\r\n                    </div>\r\n                );\r\n            },\r\n        },\r\n    ];\r\n\r\n    return (\r\n        <>\r\n            <CommonDetailsList\r\n                className={styles.list}\r\n                columns={columns}\r\n                items={items}\r\n                queryStatus={queryStatus}\r\n                shimmerLines={10}\r\n            />\r\n            {peopleShow !== undefined && peopleShow.id === openCardId && (\r\n                <PeopleCard people={peopleShow} onDismiss={() => setOpenCardId('')} target={calloutTarget} />\r\n            )}\r\n        </>\r\n    );\r\n};\r\n","/*\r\n *  Copyright Â© Microsoft Corporation. All rights reserved.\r\n */\r\n\r\nimport { ThemeProvider } from '@fluentui/react';\r\nimport React from 'react';\r\nimport { QueryClientProvider } from 'react-query';\r\nimport { ReactQueryDevtools } from 'react-query/devtools';\r\nimport { unstable_HistoryRouter as HistoryRouter, Routes } from 'react-router-dom';\r\nimport { STYLE_NONCE } from '../common/env';\r\nimport { ECSConfigProvider } from '../ecs';\r\nimport { useFluentUIThemeWithRTL } from '../hooks';\r\nimport { LogCategory, logger } from '../logger';\r\nimport { desktopRoutes } from '../routes/desktopRoutes';\r\nimport { history } from '../routes/history';\r\nimport { queryClient } from '../service';\r\nimport { themeProviderClassName } from '../styles';\r\nimport { LoadingIndicatorWrapper } from './common';\r\nimport { LoadingPage } from './components';\r\n\r\nexport const App: React.FC = (): JSX.Element => {\r\n    const theme = useFluentUIThemeWithRTL();\r\n    // Register a handler to flush out theme change and triggers a re-rendering immediately\r\n    React.useEffect((): any => {\r\n        // Component mounted\r\n        logger.logTraceInfo(LogCategory.AppBoot, 'Rendered app host');\r\n        return (): void => {\r\n            // Component will unmount\r\n            logger.logTraceInfo(LogCategory.AppBoot, 'Closing the app host');\r\n        };\r\n    }, []);\r\n\r\n    return (\r\n        <ThemeProvider theme={theme} applyTo='body' className={themeProviderClassName}>\r\n            <React.Suspense fallback={<LoadingPage />}>\r\n                <ECSConfigProvider>\r\n                    <QueryClientProvider client={queryClient}>\r\n                        <LoadingIndicatorWrapper />\r\n                        <HistoryRouter history={history}>\r\n                            <Routes>{desktopRoutes}</Routes>\r\n                        </HistoryRouter>\r\n                        <ReactQueryDevtools position='bottom-right' styleNonce={STYLE_NONCE} />\r\n                    </QueryClientProvider>\r\n                </ECSConfigProvider>\r\n            </React.Suspense>\r\n        </ThemeProvider>\r\n    );\r\n};\r\n","import { isContrastTheme, makeStyles } from '@addressbook/components-fluentui-teams-theme';\r\nimport { INavStyleProps, INavStyles } from '@fluentui/react';\r\n\r\nexport const useHomePageStyles = makeStyles(theme => ({\r\n    root: {\r\n        height: '100%',\r\n        overflowY: 'hidden',\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        backgroundColor: theme.palette.neutralLighterAlt,\r\n    },\r\n    topSearchSection: {\r\n        display: 'flex',\r\n        justifyContent: 'flex-end',\r\n        padding: '5px 30px 5px 0',\r\n    },\r\n\r\n    peopleSection: {\r\n        display: 'flex',\r\n        alignItems: 'stretch',\r\n        backgroundColor: theme.palette.white,\r\n        height: '100%',\r\n        // overflowY: 'auto',\r\n        ...(isContrastTheme(theme.name) && {\r\n            borderTop: `1px solid ${theme.palette.black}`,\r\n            borderBottom: `1px solid ${theme.palette.black}`,\r\n        }),\r\n    },\r\n    peopleList: {\r\n        height: '80%',\r\n        overflowY: 'auto',\r\n        overflowX: 'hidden',\r\n    },\r\n    left: {\r\n        flex: 1,\r\n        width: 0,\r\n        backgroundColor: theme.palette.neutralLighterAlt,\r\n        borderRight: `1px solid ${\r\n            isContrastTheme(theme.name) ? theme.palette.black : theme.palette.neutralTertiaryAlt\r\n        }`,\r\n    },\r\n    main: {\r\n        backgroundColor: theme.palette.white,\r\n        flex: 4,\r\n        width: 0,\r\n        padding: '20px',\r\n        columnGap: '20px',\r\n        // overflowY: 'auto',\r\n    },\r\n\r\n    dropdown: {\r\n        width: '400px',\r\n        marginBottom: '20px',\r\n        '.ms-Dropdown-caretDown': {\r\n            fontSize: '16px',\r\n            color: theme.palette.neutralPrimary,\r\n        },\r\n    },\r\n}));\r\nexport const useNavStyles = (props: INavStyleProps): Partial<INavStyles> => ({\r\n    chevronIcon: [\r\n        {\r\n            fontSize: 20,\r\n            left: '4px',\r\n            top: '10px',\r\n        },\r\n        props.isExpanded && {\r\n            transform: '',\r\n        },\r\n        !props.isExpanded && {\r\n            transform: 'rotate(-90deg)',\r\n        },\r\n    ],\r\n});\r\n","import { Paths } from '../../routes/Paths';\r\n\r\nexport const useTopLevelPath = (path: Paths): Paths => {\r\n    const slashIndex = path.indexOf('/', 1);\r\n    return slashIndex > 0 ? (path.slice(0, slashIndex) as Paths) : path;\r\n};\r\n","import { useMemo } from 'react';\r\nimport { useSearchParams } from 'react-router-dom';\r\nimport type { AllPageParams, PageParams } from '../routes/Paths';\r\n\r\n/**\r\n * a strong type wrapper for useSearchParams\r\n */\r\nexport function usePageParams<T extends keyof AllPageParams>(): {\r\n    /**\r\n     * params object\r\n     */\r\n    params: PageParams<T>;\r\n    setParams: (\r\n        nextInit: PageParams<T>,\r\n        navigateOptions?: {\r\n            replace?: boolean | undefined;\r\n            state?: any;\r\n        }\r\n    ) => void;\r\n    /**\r\n     * reset the params\r\n     */\r\n    reset: () => void;\r\n} {\r\n    const [params, setParams] = useSearchParams();\r\n    return useMemo(\r\n        () =>\r\n            ({\r\n                params: Object.fromEntries(params),\r\n                setParams,\r\n                reset: () => setParams({}, { replace: true }),\r\n            } as any),\r\n        [params, setParams]\r\n    );\r\n}\r\n","import { useMemo } from 'react';\r\n\r\nfunction generateKey(key: string, suffix?: string): string {\r\n    return `$_${key}${suffix ? `.${suffix}` : ''}`;\r\n}\r\n\r\nconst FLAG_STORAGE_KEY = 'hasdata';\r\n\r\n/**\r\n * get / set flag for data\r\n *\r\n * @param reportListType\r\n * @returns\r\n */\r\nexport function useDataFlag(reportListType: 'Received' | 'Submitted' | 'ComposeExtension'): {\r\n    hasFlag: boolean;\r\n    setFlag: () => void;\r\n    delFlag: () => void;\r\n} {\r\n    return useMemo(() => {\r\n        const storageKey = generateKey(FLAG_STORAGE_KEY, reportListType);\r\n        const hasFlag = !!localStorage.getItem(storageKey);\r\n        return {\r\n            hasFlag,\r\n            setFlag: () => localStorage.setItem(storageKey, 'true'),\r\n            delFlag: () => localStorage.removeItem(storageKey),\r\n        };\r\n    }, [reportListType]);\r\n}\r\n","import axios, { AxiosError, AxiosRequestConfig } from 'axios';\r\nimport { ECS_BASIC_URL } from '../common/Constants';\r\nimport { logger, LogCategory } from '../logger';\r\nimport { ExtAxiosConfig, transformResponse } from '../service/axios';\r\nimport { ENVIRONMENT } from '../common/env';\r\nimport { ECSFlags, IECSConfigState, initialState } from './EcsFlags';\r\n\r\nexport type ECSParams = {\r\n    agents: string;\r\n    ClientEnvironment: string;\r\n    TeamsRing: string;\r\n    HostClientType: string;\r\n    TenantID: string;\r\n    UserID: string;\r\n};\r\n\r\nexport function getECSParams(context?: {\r\n    ringId?: string;\r\n    hostClientType?: string;\r\n    tid?: string;\r\n    userObjectId?: string;\r\n}): ECSParams | undefined {\r\n    if (!context) {\r\n        return undefined;\r\n    }\r\n\r\n    return {\r\n        agents: 'MWTWorkReport',\r\n        ClientEnvironment: ENVIRONMENT,\r\n        TeamsRing: context.ringId || '',\r\n        HostClientType: context.hostClientType || '',\r\n        TenantID: context.tid || '',\r\n        UserID: context.userObjectId || '',\r\n    };\r\n}\r\n\r\nexport const ECS_STORAGE_KEY = 'EcsConfig';\r\n// try to get ECS config from local storage\r\nconst localeECS: Partial<ECSFlags> = (() => {\r\n    try {\r\n        return JSON.parse(localStorage.getItem(ECS_STORAGE_KEY) || '{}');\r\n    } catch (error) {\r\n        return {};\r\n    }\r\n})();\r\n\r\n/**\r\n * default ECS config\r\n * merge with local storage ECS config\r\n */\r\nexport const defaultECSFlags = {\r\n    ...initialState,\r\n    ...localeECS,\r\n};\r\n\r\nexport function loadEcsConfig(params?: ECSParams): Promise<IECSConfigState> {\r\n    // add start time for performance logging\r\n    const config: AxiosRequestConfig & ExtAxiosConfig = { params, _startRequestTime: performance.now() };\r\n\r\n    return axios\r\n        .get(ECS_BASIC_URL, config)\r\n        .then(response => {\r\n            const ecs = transformResponse<IECSConfigState>(response);\r\n            // cache ecs config\r\n            localStorage.setItem(ECS_STORAGE_KEY, JSON.stringify(ecs.MWTWorkReport));\r\n            return ecs;\r\n        })\r\n        .catch((error: AxiosError): IECSConfigState => {\r\n            logger.logTraceError(LogCategory.ECSRequest, `EcsCallError ${error?.config?.url} ${error.message}`);\r\n            // fallback to default value\r\n            return { MWTWorkReport: defaultECSFlags, Headers: {} as any };\r\n        });\r\n}\r\n","import { FontSizes, isContrastTheme, makeStyles } from '@addressbook/components-fluentui-teams-theme';\r\nimport {\r\n    PeopleSelection,\r\n    PeopleSelectionType,\r\n    PeopleSelectProps,\r\n    PeopleViewProps,\r\n} from '@addressbook/components-people';\r\nimport BethDaviesAvatar from '../../assets/avatars/beth-davies.png';\r\nimport DaisyPhillipsAvatar from '../../assets/avatars/daisy-phillips.png';\r\nimport EricNasonAvatar from '../../assets/avatars/eric-nason.png';\r\nimport JoshuaVanburenAvatar from '../../assets/avatars/joshua-vanburen.png';\r\nimport MonaKaneAvatar from '../../assets/avatars/mona-kane.png';\r\nimport { graphServiceClient } from '../../service';\r\nimport { IPeople, mapUserToPeople } from '../../utilities/peopleUtils';\r\n\r\n/**\r\n * The options for the people select source.\r\n *\r\n * @property groupsInTenant - Whether to include groups in the tenant.\r\n * @property tagsInGroup - Whether to include tags in the group.\r\n * @property emptySuggestions - The suggestions to show when the input is empty.\r\n * @property fixedSuggestions - The suggestions to show at the top of the suggestions list, when input is not empty.\r\n * @property excludingSuggestions - The suggestions to exclude from the suggestions list.\r\n */\r\nexport interface PeopleSelectSourceOptions {\r\n    groupsInTenant?: boolean;\r\n    tagsInGroup?: boolean;\r\n    excludingSuggestions?: PeopleSelection[];\r\n    emptySuggestions?: PeopleSelection[];\r\n    fixedSuggestions?: PeopleSelection[];\r\n}\r\n\r\nexport interface UsePeopleSelectPropsOptions {\r\n    sourceOptions?: PeopleSelectSourceOptions;\r\n}\r\n\r\nexport type UsePeopleSelectPropsResult = Pick<\r\n    PeopleSelectProps,\r\n    | 'onResolveSuggestions'\r\n    | 'suggestionsErrorMessage'\r\n    | 'strings'\r\n    | 'onRenderItem'\r\n    | 'onRetrieveIcon'\r\n    | 'describeSuggestion'\r\n    | 'resolveDelay'\r\n>;\r\n\r\n/**\r\n * A hook to obtain the properties for PeopleSelect.\r\n *\r\n * @property sourceOptions The options for the people select source.\r\n * @returns The properties for PeopleSelect.\r\n */\r\n// export function usePeopleSelectProps({\r\n//     sourceOptions = {},\r\n// }: UsePeopleSelectPropsOptions = {}): UsePeopleSelectPropsResult {\r\n//     const { t } = useTranslation();\r\n//     const placeholder = usePeopleSelectPlaceholder(sourceOptions);\r\n//     const { querySuggestions, errorMessage } = useQuerySuggestions(sourceOptions);\r\n\r\n//     const stableProps = React.useMemo<\r\n//         Omit<UsePeopleSelectPropsResult, 'suggestionsErrorMessage' | 'onResolveSuggestions'>\r\n//     >(\r\n//         () => ({\r\n//             strings: {\r\n//                 inputPlaceholder: placeholder,\r\n//                 requiredErrorMessage: t(Strings.errorMessageRequired),\r\n//                 removeButtonAriaLabel: t(Strings.buttonTextRemove),\r\n//                 suggestionsHeaderText: t(Strings.peoplePickerSuggestionHeaderText),\r\n//                 noResultsFoundText: t(Strings.peoplePickerNoResultText),\r\n//                 suggestionsAvailableAlertText: t(Strings.peoplePickerSuggestionAriaLabel),\r\n//             },\r\n//             onRenderItem: (selection, item) => {\r\n//                 if (selection.type !== PeopleSelectionType.User && selection.expandable) {\r\n//                     return (\r\n//                         <HoverCard\r\n//                             type={HoverCardType.plain}\r\n//                             plainCardProps={{\r\n//                                 onRenderPlainCard: () => <ManyPeopleSelectionCard selection={selection} />,\r\n//                             }}>\r\n//                             {item}\r\n//                         </HoverCard>\r\n//                     );\r\n//                 }\r\n\r\n//                 return item;\r\n//             },\r\n//             onRetrieveIcon: retrievePeopleSelectionIcon,\r\n//             describeSuggestion: selection => {\r\n//                 switch (selection.type) {\r\n//                     case PeopleSelectionType.User:\r\n//                         return selection.mail;\r\n//                     case PeopleSelectionType.Tag:\r\n//                         return t(Strings.teamTagMembersDescription, { totalNumber: selection.count });\r\n//                 }\r\n//             },\r\n//             resolveDelay: PEOPLE_SUGGESTIONS_RESOLVE_DELAY_TIME_MS,\r\n//         }),\r\n//         [placeholder, t]\r\n//     );\r\n\r\n//     return { onResolveSuggestions: querySuggestions, suggestionsErrorMessage: errorMessage, ...stableProps };\r\n// }\r\n\r\n// function usePeopleSelectPlaceholder({\r\n//     groupsInTenant,\r\n//     tagsInGroup,\r\n// }: Pick<PeopleSelectSourceOptions, 'groupsInTenant' | 'tagsInGroup'>): string {\r\n//     const { t } = useTranslation();\r\n//     const teamsContext = useTeamsContext();\r\n//     const chatId = teamsContext?.chat?.id;\r\n//     const groupId = teamsContext?.team?.groupId;\r\n\r\n//     return React.useMemo(() => {\r\n//         // These two types are always available, which are for users' names and emails.\r\n//         const typeKeys = ['name', 'email'];\r\n\r\n//         // See useQuerySuggestions for the conditions of group and tag types.\r\n//         if (groupsInTenant && !(groupId || chatId)) typeKeys.push('group');\r\n//         if (tagsInGroup && groupId) typeKeys.push('tag');\r\n\r\n//         const types = typeKeys.map(type => t(Strings.peoplePickerPlaceholderType, { context: type }));\r\n//         return t(Strings.peoplePickerPlaceholderWithTypes, { types });\r\n//     }, [chatId, groupId, groupsInTenant, t, tagsInGroup]);\r\n// }\r\n\r\ninterface UseQuerySuggestionsResult {\r\n    querySuggestions: NonNullable<PeopleSelectProps['onResolveSuggestions']>;\r\n    errorMessage?: string;\r\n}\r\n\r\n// function useQuerySuggestions({\r\n//     groupsInTenant,\r\n//     tagsInGroup,\r\n//     excludingSuggestions = [],\r\n//     emptySuggestions = [],\r\n//     fixedSuggestions = [],\r\n// }: PeopleSelectSourceOptions): UseQuerySuggestionsResult {\r\n//     const teamsContext = useTeamsContext();\r\n//     const chatId = teamsContext?.chat?.id;\r\n//     const groupId = teamsContext?.team?.groupId;\r\n\r\n//     const { t } = useTranslation();\r\n//     const [errorMessage, setErrorMessage] = React.useState<string>();\r\n\r\n//     const querySuggestions = React.useCallback<NonNullable<PeopleSelectProps['onResolveSuggestions']>>(\r\n//         async filter => {\r\n//             if (!filter) return emptySuggestions;\r\n\r\n//             const fetchingSuggestions: Promise<PeopleSelection[]>[] = [];\r\n\r\n//             // Fetch users and groups in chat or group if applicable.\r\n//             const fetchingUsersAndGroups = chatId\r\n//                 ? SERVICE_CLIENT.peopleSearchVersion_QueryUsersInChat({ chatId, input: { QueryText: filter } })\r\n//                 : groupId\r\n//                 ? SERVICE_CLIENT.peopleSearchVersion_QueryUsersInGroup({ groupId, input: { QueryText: filter } })\r\n//                 : groupsInTenant\r\n//                 ? SERVICE_CLIENT.peopleSearchVersion_QueryUsersAndGroupsInTenantWide({ input: { QueryText: filter } })\r\n//                 : SERVICE_CLIENT.peopleSearchVersion_QueryPeopleAndUsersInTenantWide({ input: { QueryText: filter } });\r\n\r\n//             fetchingSuggestions.push(\r\n//                 fetchingUsersAndGroups.then(objects => objects.map(mapDirectoryObjectToPeopleSelection))\r\n//             );\r\n\r\n//             // Fetch tags in group if applicable.\r\n//             if (tagsInGroup && groupId) {\r\n//                 const fetchingTags = SERVICE_CLIENT.teamTagVersion_SearchTeamTagResults({\r\n//                     teamId: groupId,\r\n//                     input: { QueryText: filter },\r\n//                 });\r\n\r\n//                 fetchingSuggestions.push(fetchingTags.then(tags => tags.map(mapTeamTagResultToManyPeopleSelection)));\r\n//             }\r\n\r\n//             const results = await Promise.allSettled(fetchingSuggestions);\r\n\r\n//             // Collect suggestions from all sources and tolerate errors.\r\n//             const suggestions = results.flatMap(result => {\r\n//                 if (result.status !== 'fulfilled') return [];\r\n//                 // Add resolveItems method to group selections and make them expandable.\r\n//                 return result.value.map(selection =>\r\n//                     selection.type === PeopleSelectionType.Group ? populateGroupPeopleSelection(selection) : selection\r\n//                 );\r\n//             });\r\n\r\n//             // Collect error message from all sources.\r\n//             setErrorMessage(\r\n//                 results\r\n//                     .map(result => {\r\n//                         if (result.status !== 'rejected') return;\r\n\r\n//                         // At this time, we only handle AAD errors.\r\n//                         const error = result.reason;\r\n//                         if (!(error instanceof RequestError && error.code.includes('AADSTS'))) return;\r\n\r\n//                         return t(Strings.errorDescription, { context: error.code });\r\n//                     })\r\n//                     .filter(isDefined)[0]\r\n//             );\r\n\r\n//             // Unique and sort suggestions.\r\n//             const sortedSuggestions = uniqueAndSortPeopleSelections(suggestions);\r\n\r\n//             // Filter out fixed suggestions and excluding suggestions.\r\n//             const filteredSuggestions = sortedSuggestions.filter(\r\n//                 suggestion =>\r\n//                     !fixedSuggestions.some(fixed => fixed.id === suggestion.id) &&\r\n//                     !excludingSuggestions.includes(suggestion)\r\n//             );\r\n\r\n//             // Merge fixed suggestions and sorted suggestions.\r\n//             const mergedSuggestions = [...fixedSuggestions, ...filteredSuggestions];\r\n\r\n//             return mergedSuggestions;\r\n//         },\r\n//         [chatId, emptySuggestions, excludingSuggestions, fixedSuggestions, groupId, groupsInTenant, t, tagsInGroup]\r\n//     );\r\n\r\n//     return { querySuggestions, errorMessage };\r\n// }\r\n\r\n// const ManyPeopleSelectionCard: React.FC<{ selection: ManyPeopleSelection }> = ({ selection }) => {\r\n//     const { t } = useTranslation();\r\n//     const styles = useManyPeopleSelectionCardCardStyles();\r\n\r\n//     return (\r\n//         <div className={styles.root}>\r\n//             <div className={styles.primary}>\r\n//                 <PeopleCoin selection={selection} coinSize={72} onRetrieveIcon={retrievePeopleSelectionIcon} />\r\n//                 <div className={styles.overview}>\r\n//                     <div className={styles.name}>{selection.name}</div>\r\n//                     {selection.type === PeopleSelectionType.Tag && (\r\n//                         <div className={styles.badge}>{t(Strings.teamTagCardSign)}</div>\r\n//                     )}\r\n//                     {Array.isArray(selection.items) && (\r\n//                         <div className={styles.description}>\r\n//                             {t(Strings.membersCountDescription, { count: selection.items.length })}\r\n//                         </div>\r\n//                     )}\r\n//                 </div>\r\n//             </div>\r\n//             {Array.isArray(selection.items) ? (\r\n//                 <PeopleList\r\n//                     className={styles.secondary}\r\n//                     label={t(Strings.membersListDescription, { count: selection.items.length })}\r\n//                     selections={selection.items}\r\n//                     onRetrieveIcon={retrievePeopleSelectionIcon}\r\n//                 />\r\n//             ) : (\r\n//                 <Spinner className={styles.secondary} aria-label={t(Strings.loadingAriaLabel)} />\r\n//             )}\r\n//         </div>\r\n//     );\r\n// };\r\n\r\nconst useManyPeopleSelectionCardCardStyles = makeStyles(theme => ({\r\n    root: {\r\n        width: '320px',\r\n        maxHeight: '400px',\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n    },\r\n    primary: {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        gap: '16px',\r\n        padding: '24px',\r\n    },\r\n    secondary: {\r\n        flex: 1,\r\n        padding: '24px',\r\n        borderTop: `1px solid ${isContrastTheme(theme.name) ? theme.palette.black : theme.palette.neutralLight}`,\r\n        overflowY: 'auto',\r\n    },\r\n    overview: {\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        gap: '4px',\r\n    },\r\n    name: {\r\n        fontSize: FontSizes.size14,\r\n        fontWeight: 700,\r\n        lineHeight: FontSizes.size20,\r\n    },\r\n    badge: {\r\n        padding: '2px 6px',\r\n        borderRadius: '4px',\r\n        backgroundColor: theme.palette.themeLighter,\r\n        border: isContrastTheme(theme.name) ? `1px solid ${theme.palette.themePrimary}` : 'none',\r\n        color: theme.palette.themePrimary,\r\n    },\r\n    description: {\r\n        fontSize: FontSizes.size12,\r\n        fontWeight: 400,\r\n    },\r\n}));\r\n\r\nenum PeoplePickerErrorContext {\r\n    /**\r\n     * The error context of writer exceed the max count.\r\n     */\r\n    overWriters = 'overWriters',\r\n\r\n    /**\r\n     * The error context of user exceed the max count.\r\n     */\r\n    overUser = 'overUser',\r\n\r\n    /**\r\n     * The error context of group exceed the max count.\r\n     */\r\n    overGroup = 'overGroup',\r\n\r\n    /**\r\n     * The error context of receiver exceed the max count.\r\n     */\r\n    overReceivers = 'overReceivers',\r\n\r\n    /**\r\n     * The error context of comanager exceed the max count.\r\n     */\r\n    overComanagers = 'overComanagers',\r\n}\r\n\r\n// export function useValidateSubmitters(): NonNullable<PeopleSelectProps['validateSelections']> {\r\n//     const { t } = useTranslation();\r\n//     return React.useCallback(\r\n//         selections => {\r\n//             const overUser = countUsersOfPeopleSelections(selections) > MAX_DEFINITION_USER_SUBMITTERS;\r\n//             const overGroup = countGroupsOfPeopleSelections(selections) > MAX_DEFINITION_GROUP_SUBMITTERS;\r\n\r\n//             if (!overUser && !overGroup) return;\r\n\r\n//             return t(Strings.errorMessagePeoplePicker, {\r\n//                 context:\r\n//                     overUser && overGroup\r\n//                         ? PeoplePickerErrorContext.overWriters\r\n//                         : overUser\r\n//                         ? PeoplePickerErrorContext.overUser\r\n//                         : PeoplePickerErrorContext.overGroup,\r\n//             });\r\n//         },\r\n//         [t]\r\n//     );\r\n// }\r\n\r\n// export function useValidateReceivers(): NonNullable<PeopleSelectProps['validateSelections']> {\r\n//     const { t } = useTranslation();\r\n//     return React.useCallback(\r\n//         selections =>\r\n//             countUsersOfPeopleSelections(selections) > MAX_REPORT_USER_RECEIVERS\r\n//                 ? t(Strings.errorMessagePeoplePicker, { context: PeoplePickerErrorContext.overReceivers })\r\n//                 : undefined,\r\n//         [t]\r\n//     );\r\n// }\r\n\r\n// export function useValidateComanagers(): NonNullable<PeopleSelectProps['validateSelections']> {\r\n//     const { t } = useTranslation();\r\n//     return React.useCallback(\r\n//         selections =>\r\n//             countUsersOfPeopleSelections(selections) > MAX_DEFINITION_USER_OWNERS + MAX_DEFINITION_USER_COLLABORATORS\r\n//                 ? t(Strings.errorMessagePeoplePicker, { context: PeoplePickerErrorContext.overComanagers })\r\n//                 : undefined,\r\n//         [t]\r\n//     );\r\n// }\r\n\r\nexport interface UsePeopleViewPropsOptions {\r\n    maxCompactParts?: number;\r\n}\r\n\r\nexport type UsePeopleViewPropsResult = Required<Pick<PeopleViewProps, 'formatNames'>>;\r\n\r\n// export function usePeopleViewProps({ maxCompactParts = 3 }: UsePeopleViewPropsOptions = {}): UsePeopleViewPropsResult {\r\n//     const { t } = useTranslation();\r\n\r\n//     return React.useMemo(\r\n//         () => ({\r\n//             formatNames: names => {\r\n//                 const compactNames = [...names];\r\n//                 if (compactNames.length > maxCompactParts) {\r\n//                     const exposed = maxCompactParts - 1;\r\n//                     const remaining = compactNames.length - exposed;\r\n//                     compactNames.splice(exposed, remaining, t(Strings.userDisplayNamesOther, { count: remaining }));\r\n//                 }\r\n//                 return {\r\n//                     normal: t(Strings.userDisplayNamesList, { val: names }),\r\n//                     compact: t(Strings.userDisplayNamesList, { val: compactNames }),\r\n//                 };\r\n//             },\r\n//         }),\r\n//         [maxCompactParts, t]\r\n//     );\r\n// }\r\n\r\n/**\r\n * Retrieves the icon of a people selection. If the icon is not available, it returns undefined.\r\n * Mocked icons and icons from Graph API are supported.\r\n *\r\n * @param selection The people selection.\r\n * @param signal The abort signal.\r\n * @returns The icon of the people selection.\r\n */\r\nexport async function retrievePeopleSelectionIcon(\r\n    selection: PeopleSelection,\r\n    signal?: AbortSignal\r\n): Promise<Blob | undefined> {\r\n    // const mockedIcon = await retrieveMockedPeopleSelectionIcon(selection, signal);\r\n    // if (mockedIcon !== null) return mockedIcon;\r\n\r\n    return retrievePeopleSelectionIconByGraph(selection, signal);\r\n}\r\n\r\nasync function retrievePeopleSelectionIconByGraph(\r\n    selection: PeopleSelection,\r\n    signal?: AbortSignal\r\n): Promise<Blob | undefined> {\r\n    const resource =\r\n        selection.type === PeopleSelectionType.User\r\n            ? graphServiceClient.users(selection.id)\r\n            : selection.type === PeopleSelectionType.Group\r\n            ? graphServiceClient.groups(selection.id)\r\n            : undefined;\r\n\r\n    if (!resource) return;\r\n\r\n    try {\r\n        return await resource.photos(64).download(signal);\r\n    } catch {\r\n        return;\r\n    }\r\n}\r\n\r\nexport async function retrievePeoplePresenceByGraph(id: string): Promise<string> {\r\n    return await graphServiceClient.users(id).getPresence();\r\n}\r\n\r\nexport async function retrievePeopleManagerByGraph(id: string): Promise<IPeople | undefined> {\r\n    const user = await graphServiceClient.users(id).getManager();\r\n\r\n    return mapUserToPeople(user);\r\n}\r\n\r\nasync function retrieveMockedPeopleSelectionIcon(\r\n    selection: PeopleSelection,\r\n    signal?: AbortSignal\r\n): Promise<Blob | undefined | null> {\r\n    if (!mockedPeopleSelectionIconUrls.has(selection.id)) return null;\r\n\r\n    const url = mockedPeopleSelectionIconUrls.get(selection.id);\r\n    if (!url) return;\r\n\r\n    try {\r\n        const response = await fetch(url, { signal });\r\n        return await response.blob();\r\n    } catch {\r\n        return;\r\n    }\r\n}\r\n\r\n/**\r\n * Mocked people selection icons for template users.\r\n *\r\n * @see \\Source\\Common\\Business\\ReportDefinitionTemplateHandler.cs\r\n */\r\nconst mockedPeopleSelectionIconUrls: Map<string, string | undefined> = new Map([\r\n    ['', undefined],\r\n    ['4f197574-c487-4ab8-ac2e-c3584026d646', BethDaviesAvatar],\r\n    ['da3647a2-cdeb-4b72-a31d-f4a184d8e727', JoshuaVanburenAvatar],\r\n    ['8af34f36-a407-4b16-9b7e-14dcea93fb09', undefined],\r\n    ['1a9ecbd6-05c1-42f1-ac1e-1534500be7d1', DaisyPhillipsAvatar],\r\n    ['ea126a6e-8e86-4401-8d5a-c168a8ee1e36', EricNasonAvatar],\r\n    ['da3c2255-d519-4ee2-a586-932f8b6d88af', MonaKaneAvatar],\r\n]);\r\n","export * from './common';\r\nexport * from './components';\r\nexport * from './containers';\r\n","export * from './HomePage';\r\n","/*\r\n *  Copyright Â© Microsoft Corporation. All rights reserved.\r\n */\r\n\r\nexport * from './LoadingPage';\r\n","export * from './usePageTitle';\r\nexport * from './useTopLevelPath';\r\n","import { makeStyles } from '@addressbook/components-fluentui-teams-theme';\r\nimport { ellipsisStyles } from '@addressbook/components-shared';\r\n\r\nexport const usePeopleListStyles = makeStyles(theme => ({\r\n    iconCell: {\r\n        padding: 0,\r\n        fontSize: '16px',\r\n        marginRight: '4px',\r\n        height: '20px',\r\n        width: '20px',\r\n    },\r\n    cellTitle: {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        gap: '4px',\r\n        flexDirection: 'row',\r\n    },\r\n    nameShow: {\r\n        display: 'flex',\r\n        flexDirection: 'row',\r\n        gap: '4px',\r\n        alignItems: 'center',\r\n        cursor: 'pointer',\r\n    },\r\n    nameField: {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        gap: '4px',\r\n        flexDirection: 'row',\r\n    },\r\n    hoverShowButton: {\r\n        height: '100%',\r\n        width: '100%',\r\n        padding: '0',\r\n        ':hover,:focus-within': {\r\n            color: theme.palette.themePrimary,\r\n        },\r\n    },\r\n    hoverShowButtonContainer: {\r\n        display: 'none',\r\n        '*:hover > &, *:focus-within > &': {\r\n            display: 'flex',\r\n            position: 'relative',\r\n            alignSelf: 'flex-end',\r\n            left: '20px',\r\n        },\r\n    },\r\n    nameSpan: [ellipsisStyles(1), { maxWidth: '160px' }],\r\n    span: ellipsisStyles(1),\r\n    list: {\r\n        'ms-DetailsRow': {\r\n            cursor: 'default',\r\n        },\r\n        '.ms-Nav': {\r\n            transition: 'none !important' /* ç¦ç¨ä¸å¿è¦çè¿æ¸¡ææ */,\r\n        },\r\n\r\n        // 'ms-DetailsList-contentWrapper': {\r\n        //     overflowY: 'auto',\r\n        // },\r\n        'ms-DetailsHeader-cellTitle': { display: 'flex', alignItems: 'center', gap: '4px', flexDirection: 'row' },\r\n    },\r\n}));\r\n","import { FontWeights } from '@fluentui/react';\r\nimport { makeStyles } from '@addressbook/components-fluentui-teams-theme';\r\n\r\nexport const useLoadingStyles = makeStyles(theme => ({\r\n    root: {\r\n        height: '100%',\r\n        padding: '0 2em',\r\n    },\r\n    message: {\r\n        fontSize: '1.2em',\r\n        fontWeight: FontWeights.bold,\r\n        color: theme.palette.black,\r\n        whiteSpace: 'pre-line',\r\n        textAlign: 'center',\r\n    },\r\n}));\r\n","export * from './SearchResult';\r\n","import { useMemo, useState, useEffect } from 'react';\r\nimport { useReactiveVar } from 'react-reactive-var';\r\nimport { Subject } from 'rxjs';\r\nimport { Flag, flagDependency } from '../../common/flag';\r\nimport { modalShowingVar } from '../../reactiveVariables/CommonVars';\r\n\r\ntype FlagState = true | null;\r\n\r\n/**\r\n * the state of component\r\n * true: visible\r\n * false: invisible(It has already been shown, or the preconditions are not met)\r\n */\r\ntype FlagStatus = true | false;\r\n\r\nconst FLAG_STORAGE_KEY = 'flag';\r\n\r\nconst states: { [key in Flag]?: FlagState } = {};\r\n\r\nconst subject = new Subject<Flag>();\r\n\r\nfunction generateKey(key: string, suffix?: string): string {\r\n    return `$_${key}${suffix ? `.${suffix}` : ''}`;\r\n}\r\nfunction getFlagTrue(flag: Flag): boolean {\r\n    const storageKey = generateKey(FLAG_STORAGE_KEY, flag);\r\n    if (!(flag in states)) states[flag] = localStorage.getItem(storageKey) ? true : null;\r\n    return states[flag] === null;\r\n}\r\n\r\nfunction getFlagState(flag: Flag): FlagStatus {\r\n    getFlagTrue(flag);\r\n    if (flagDependency[flag]) {\r\n        const isComplete = !flagDependency[flag]?.some(flag => getFlagTrue(flag));\r\n        return isComplete ? !states[flag] : false;\r\n    }\r\n    return !states[flag];\r\n}\r\n\r\nfunction setFlagState(flag: Flag): void {\r\n    states[flag] = true;\r\n    const storageKey = generateKey(FLAG_STORAGE_KEY, flag);\r\n    localStorage.setItem(storageKey, 'true');\r\n    subject.next(flag);\r\n}\r\n\r\n/**\r\n * set\r\n *\r\n * @param flag flag of component meaning whether or not it can be displayed\r\n * @param autoCleanup cleanup the shown component when the window is closed\r\n * @returns [value, setValue]\r\n */\r\nexport function useFlagStatus(flag: Flag, autoCleanup: boolean): [isEnabled: FlagStatus, disable: () => void] {\r\n    const [value, setValue] = useState<FlagStatus>(() => getFlagState(flag));\r\n    const modalShowing = useReactiveVar(modalShowingVar);\r\n    autoCleanup = !modalShowing && autoCleanup;\r\n\r\n    useEffect(() => {\r\n        const subscriber = subject.subscribe(updateFlag => {\r\n            if (flagDependency[flag]?.includes(updateFlag)) {\r\n                setValue(getFlagState(flag));\r\n            }\r\n        });\r\n        return () => subscriber.unsubscribe();\r\n    }, [flag]);\r\n\r\n    useEffect(() => {\r\n        if (autoCleanup) {\r\n            const storageKey = generateKey(FLAG_STORAGE_KEY, flag);\r\n            const callback = (): void => {\r\n                if (getFlagState(flag)) localStorage.setItem(storageKey, 'true');\r\n            };\r\n            window.addEventListener('beforeunload', callback);\r\n            return () => {\r\n                window.removeEventListener('beforeunload', callback);\r\n            };\r\n        }\r\n    }, [flag, autoCleanup]);\r\n\r\n    return useMemo<[isEnabled: FlagStatus, disable: () => void]>(\r\n        () => [\r\n            !modalShowing && value,\r\n            () => {\r\n                setValue(false);\r\n                setFlagState(flag);\r\n            },\r\n        ],\r\n        [modalShowing, value, flag]\r\n    );\r\n}\r\n","import { Dropdown, IDropdownOption, Nav } from '@fluentui/react';\r\nimport React, { useEffect } from 'react';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { usePageParams, useReactQuery } from '../../../hooks';\r\nimport { Strings } from '../../../localization';\r\nimport { ModuleName } from '../../../logger';\r\nimport { generateURL, Paths } from '../../../routes/Paths';\r\nimport { SERVICE_CLIENT } from '../../../service';\r\nimport { getDepartmentIdFromFullId, mapUserViewToPeople } from '../../../utilities/peopleUtils';\r\nimport { EmptyStatus, ErrorStatus, LoadingPage } from '../../components';\r\nimport { AddressBookAppHeader } from '../../components/AddressBookAppHeader/AddressBookAppHeader';\r\nimport { PeopleList } from '../../components/PeopleList';\r\nimport { useHomePageStyles, useNavStyles } from './HomePage.styles';\r\nimport { mapDepartmentToNavLink, MemberType, useMemberListByDepartment } from './HomePageQuery';\r\n\r\nexport const HomePage = (): JSX.Element => {\r\n    const styles = useHomePageStyles();\r\n\r\n    const { t } = useTranslation();\r\n    const { params } = usePageParams<Paths.DepartmentTeam>();\r\n    // const { departmentFullId, departmentName } = params; v1\r\n    const { departmentFullName, departmentFullId } = params; // v2\r\n\r\n    const navigate = useNavigate();\r\n\r\n    // mock data\r\n    // const navLinkGroups: INavLinkGroup[] = [\r\n    //     {\r\n    //         links: [\r\n    //             {\r\n    //                 name: 'å¨å¬å¸',\r\n    //                 url: baseUrl + generateURL(Paths.DepartmentTeam),\r\n    //                 key: 'key1',\r\n    //                 expandAriaLabel: 'Show more Parent link 1',\r\n    //                 isExpanded: departmentId !== undefined,\r\n    //                 links: [\r\n    //                     {\r\n    //                         name: 'STCA',\r\n    //                         url:\r\n    //                             baseUrl +\r\n    //                             generateURL(Paths.DepartmentTeam, undefined, {\r\n    //                                 departmentId: 'STCA',\r\n    //                             }),\r\n    //                         key: 'STCA',\r\n    //                         expandAriaLabel: 'Show more Child link 1',\r\n    //                         isExpanded: departmentId?.includes('STCA'),\r\n    //                         links: [\r\n    //                             {\r\n    //                                 name: 'Teams Platform',\r\n    //                                 url:\r\n    //                                     baseUrl +\r\n    //                                     generateURL(Paths.DepartmentTeam, undefined, {\r\n    //                                         departmentId: 'STCA/Teams Platform',\r\n    //                                     }),\r\n    //                                 key: 'STCA/Teams Platform',\r\n    //                             },\r\n    //                             {\r\n    //                                 name: 'M365',\r\n    //                                 key: 'STCA/M365',\r\n    //                                 url:\r\n    //                                     baseUrl +\r\n    //                                     generateURL(Paths.DepartmentTeam, undefined, { departmentId: 'STCA/M365' }),\r\n    //                             },\r\n    //                         ],\r\n    //                     },\r\n    //                     {\r\n    //                         name: 'C+AI',\r\n    //                         url:\r\n    //                             baseUrl +\r\n    //                             generateURL(Paths.DepartmentTeam, undefined, {\r\n    //                                 departmentId: 'C+AI',\r\n    //                             }),\r\n    //                         key: 'C+AI',\r\n    //                         isExpanded: departmentId?.includes('C+AI'),\r\n    //                         expandAriaLabel: 'Show more Child link 2',\r\n    //                         links: [\r\n    //                             {\r\n    //                                 name: 'Windows',\r\n    //                                 key: 'C+AI/Windows',\r\n    //                                 url:\r\n    //                                     baseUrl +\r\n    //                                     generateURL(Paths.DepartmentTeam, undefined, {\r\n    //                                         departmentId: 'C+AI/Windows',\r\n    //                                     }),\r\n    //                             },\r\n    //                             {\r\n    //                                 name: 'AI Platform',\r\n    //                                 key: 'C+AI/AI Platform',\r\n    //                                 url:\r\n    //                                     baseUrl +\r\n    //                                     generateURL(Paths.DepartmentTeam, undefined, {\r\n    //                                         departmentId: 'C+AI/AI Platform',\r\n    //                                     }),\r\n    //                             },\r\n    //                         ],\r\n    //                         // isExpanded: true,\r\n    //                     },\r\n    //                     {\r\n    //                         name: 'CSS',\r\n    //                         key: 'CSS',\r\n    //                         url:\r\n    //                             baseUrl +\r\n    //                             generateURL(Paths.DepartmentTeam, undefined, {\r\n    //                                 departmentId: 'CSS',\r\n    //                             }),\r\n    //                     },\r\n    //                 ],\r\n    //                 // isExpanded: true,\r\n    //             },\r\n    //         ],\r\n    //     },\r\n    // ];\r\n\r\n    // mock data\r\n    // const items: IPeople[] = useMemo(() => mockPeopleList, []);\r\n    // const departmentMembers = useMemo(() => {\r\n    //     return departmentFullId === undefined\r\n    //         ? items\r\n    //         : items.filter(item => item.departs.filter(depart => depart.includes(departmentFullId)).length > 0);\r\n    // }, [departmentFullId, items]);\r\n\r\n    // const reportSlotResult = useReactPageQuery(\r\n    //     SERVICE_CLIENT.occurrencesVersion_ListReportSlotByReportDefinitionAndSubmitter,\r\n    //     { reportDefinitionId: definitionId!, top: REPORT_SLOT_PAGINATION_LIMIT },\r\n    //     { enabled: !!definitionId, cacheTime: REPORT_SLOT_CACHE_TIME }\r\n    // );\r\n\r\n    const options: IDropdownOption[] = [\r\n        { key: MemberType.AllMember, text: t(Strings.dropDownForDepartDefault) },\r\n        { key: MemberType.DirectMember, text: t(Strings.dropDownForDepartOption1) },\r\n    ];\r\n\r\n    // const [filteredItems, setFilteredItems] = useState<IPeople[]>();\r\n\r\n    // useEffect(() => {\r\n    //     setFilteredItems(departmentMembers);\r\n    // }, [departmentMembers]);\r\n\r\n    const [selectedMemberType, setSelectedMemberType] = React.useState<MemberType>(MemberType.AllMember);\r\n\r\n    const onOptionChange = (event: React.FormEvent<HTMLDivElement>, option?: IDropdownOption): void => {\r\n        if (option !== undefined) {\r\n            setSelectedMemberType(option.key as MemberType);\r\n        }\r\n    };\r\n\r\n    const {\r\n        data: navData,\r\n        isLoading: loadingNav,\r\n        error: navDataError,\r\n    } = useReactQuery(\r\n        SERVICE_CLIENT.fetchDepartmentNav,\r\n        {},\r\n        {\r\n            staleTime: 1 * 30 * 60 * 1000, // 30 minutes\r\n            cacheTime: 1 * 30 * 60 * 1000, // 30 minutes\r\n        }\r\n    );\r\n\r\n    const currentDepartmentId = departmentFullId ? getDepartmentIdFromFullId(departmentFullId) : navData?.id;\r\n\r\n    const {\r\n        data: members,\r\n        error: membersError,\r\n        isLoading: membersLoading,\r\n        ...membersQueryStatus\r\n    } = useMemberListByDepartment(selectedMemberType, currentDepartmentId === navData?.id, currentDepartmentId, 20);\r\n\r\n    const navLinkGroups = React.useMemo(() => {\r\n        return navData ? [{ links: [mapDepartmentToNavLink(navData, '', '', departmentFullName)] }] : [];\r\n    }, [navData, departmentFullName]);\r\n\r\n    useEffect(() => {\r\n        if ((!departmentFullId || departmentFullId === '') && navData?.id && navData?.name) {\r\n            navigate(\r\n                generateURL(Paths.DepartmentTeam, undefined, {\r\n                    departmentFullName: navData.name,\r\n                    departmentFullId: navData.id,\r\n                })\r\n            );\r\n        }\r\n    }, [departmentFullId, members, navData?.id, navData?.name, navigate]);\r\n\r\n    return (\r\n        <div className={styles.root}>\r\n            <AddressBookAppHeader moduleName={ModuleName.HomePage} />\r\n\r\n            <div className={styles.peopleSection}>\r\n                <div className={styles.left}>\r\n                    {loadingNav && <LoadingPage />}\r\n                    {navData && (\r\n                        <Nav\r\n                            ariaLabel=''\r\n                            styles={useNavStyles}\r\n                            groups={navLinkGroups}\r\n                            selectedKey={departmentFullId}\r\n                            // onLinkExpandClick={}\r\n                            onLinkClick={(ev, item) => {\r\n                                ev?.preventDefault(); // é»æ­¢é»è®¤ç URL è·³è½¬è¡ä¸º\r\n                                if (item?.url) {\r\n                                    navigate(item.url); // ä½¿ç¨ React Router çè·¯ç±è·³è½¬\r\n                                }\r\n                            }}\r\n                        />\r\n                    )}\r\n                    {navDataError && <div> {navDataError?.message} </div>}\r\n                </div>\r\n                <div className={styles.main}>\r\n                    <h2>{departmentFullName ?? navData?.name}</h2>\r\n                    <div>\r\n                        <Dropdown\r\n                            className={styles.dropdown}\r\n                            placeholder='Select an option'\r\n                            options={options}\r\n                            selectedKey={selectedMemberType}\r\n                            onChange={onOptionChange}\r\n                        />\r\n                    </div>\r\n                    <div className={styles.peopleList}>\r\n                        {members && members.length > 0 && (\r\n                            <PeopleList\r\n                                items={members.map(data => mapUserViewToPeople(data))}\r\n                                queryStatus={membersQueryStatus}\r\n                                moduleName={ModuleName.HomePage}\r\n                            />\r\n                        )}\r\n                        {members?.length === 0 && (\r\n                            <EmptyStatus\r\n                                title={t(Strings.errorTitleForNotContract)}\r\n                                message={t(Strings.errorMessageForNotContract)}\r\n                                img='NoMessage'\r\n                            />\r\n                        )}\r\n                        {membersLoading && <LoadingPage />}\r\n                        {membersError && <ErrorStatus error={membersError} />}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n"],"mappings":";;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;;AAEA;AAEA;;;;;;;;;;;;;;ACJA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACTA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;;;AAGA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;AC1BA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;;;;;;;;;;;;;;ACHA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAGA;;;;;;;;;;;;;ACjBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;ACJA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;ACjFA;AAAA;AAAA;AAIA;;AAEA;AACA;AAEA;;;;;;;;;;;;AAYA;AACA;;AAMA;;AAEA;AACA;AACA;AACA;;AAGA;AACA;AACA;AAAA;AAGA;AAEA;AACA;AACA;AACA;AACA;AAGA;AACA;AASA;;;;;;;;;;;;;;AC5DA;AAAA;AAAA;AAAA;;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;ACpGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;AAIA;AACA;;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;AC3CA;AAAA;AAAA;;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;AAIA;AACA;AAGA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AAEA;AAEA;AACA;AACA;;;;;;;;;;;;;;AC5CA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;;;;;;;;;;;;;;ACFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAOA;AACA;AACA;AACA;AAEA;AACA;AACA;AAIA;AAEA;AACA;AAEA;AAQA;AACA;AAOA;;;;;;;;;;;;;;AClDA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC5BA;AACA;AACA;AACA;AACA;AAMA;AACA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AASA;AACA;AACA;AACA;AACA;AAKA;AAEA;AAIA;AACA;AAKA;AACA;AACA;AACA;AAEA;AACA;AAIA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AAGA;AAEA;AACA;AAEA;AAIA;AACA;AAEA;AAGA;AACA;AACA;AAEA;AAEA;AACA;AAGA;AAEA;AACA;AAIA;AAEA;AACA;AAGA;AAEA;AACA;AACA;AAMA;AACA;AACA;AAMA;AACA;AACA;AACA;AASA;;;;;;;;;;;;;AC7MA;AAAA;AAAA;AAGA;;;;;AAKA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;AChBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAOA;AACA;AAEA;AACA;AAEA;AACA;AAKA;;;;;;;;;;;;;;ACrDA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACjBA;AACA;AACA;AACA;AACA;AAGA;AAEA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;;;AACA;AAEA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAEA;;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;AC9FA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAEA;AAEA;;;;;;;;;;;;;;ACJA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAEA;AAEA;AACA;AACA;;;;;;;;;;;;;ACNA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;;;;;;;;;;;;;;AChBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;;;;;;;;;;;;;;ACHA;AAAA;AAAA;AAIA;;;;AAIA;AACA;AAKA;AAEA;AACA;AACA;AAIA;AAEA;;;;;;;;;;;;;;ACxBA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;ACxBA;AAAA;AAAA;;AAEA;AAiCA;AAAA;AACA;AACA;AACA;AAYA;;;AAGA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;ACzDA;AAAA;AAAA;AAEA;;;;;;;;;;;;;;ACFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAwBA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;AAKA;AACA;;AAaA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;;AACA;AAKA;AAEA;AACA;AAEA;AAWA;AACA;AACA;AAIA;AAGA;;;;;;;;;;;;;;ACjJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;;;;;;;;;;;;;;AChBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAKA;AACA;AACA;;;;;;;;;;;;;;AC1BA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAGA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;;;;;;;;;;;;;;AC3DA;AAAA;AAAA;AAAA;;AAEA;AAEA;;;;;;;;;;;;;;ACJA;AAAA;AAAA;AAAA;AAAA;;AAEA;AAEA;AACA;;;;;;;;;;;;;;ACLA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAEA;AAEA;AACA;AAeA;AACA;AAiBA;;AAeA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAiBA;AAIA;AACA;AAMA;AAqBA;AAEA;AAMA;AASA;;;;;;;;;;;;;;AC/HA;AAAA;AAAA;AAAA;;AAEA;AAEA;;;;;;;;;;;;;;ACJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AAUA;AAEA;AAqBA;AACA;AACA;AACA;AAGA;AAOA;AAOA;AACA;AAIA;;;;;;;;;;;;;;AC5FA;AAAA;AAAA;AAAA;AAAA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAcA;;AACA;AACA;AAEA;;AACA;AACA;;;;;;;;;;;;;;ACjDA;AAAA;AAAA;AAAA;;;;;;;;;;;;;ACAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAIA;;;;;AAKA;AACA;AAWA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACrDA;AAAA;AAAA;AAAA;AAAA;;AAEA;AAEA;AACA;AAUA;;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAMA;AAOA;;;;;;;;;;;;;;ACvCA;AAAA;AAAA;AAAA;;AAEA;AAEA;;;;;;;;;;;;;ACJA;AAAA;AAAA;;AAEA;AAEA;;;;;;;;;;;;;;ACJA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;ACpBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAEA;AAKA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAKA;AAEA;AAKA;AAEA;AACA;AACA;;;;;;;;;;;;;;AC7DA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAGA;AAGA;AACA;;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAEA;;;;;;AAMA;AACA;AAOA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAAA;AACA;AACA;AACA;;;;;;;;;;;;;ACxEA;AAAA;AAAA;AAAA;AACA;AAEA;;;;AAIA;AACA;;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;ACZA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;ACAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAUA;AAOA;AACA;AACA;AACA;AAEA;AACA;AAKA;AAEA;AAQA;;;;;;;;;;;;;;ACjDA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAEA;AAEA;AACA;AACA;AACA;AAMA;AACA;AACA;AAEA;AACA;;;;;;;;;;;;;;AClBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;ACRA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAaA;AAWA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AAUA;AACA;AAGA;;;;;;;;;;;;;;ACjEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAQA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AACA;AAKA;AAIA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAOA;AAEA;AAEA;AAGA;AACA;AACA;AAIA;AAKA;AACA;AACA;AAKA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AAEA;AAEA;AAOA;AAKA;;;;;;;;;;;;;;ACrOA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAMA;;;;;;;;;;;;;;AC/CA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAOA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACvEA;AAAA;AACA;AACA;AACA;;;;;;;;;;;;;;ACLA;AAAA;AAAA;AAAA;AAAA;AACA;AAGA;;AAEA;AACA;AAiBA;AACA;AAGA;AACA;AACA;AACA;AAGA;;;;;;;;;;;;;;AClCA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAEA;AAEA;;;;;AAKA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;AC5BA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAWA;AAMA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;;;AAGA;AACA;AAKA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACxEA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AAsoDA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;AAOA;AACA;;AAIA;AACA;AAEA;AACA;AAAA;AAEA;;AAIA;AAEA;AACA;AACA;AACA;AAEA;AAAA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAEA;;AACA;AACA;AAAA;AAEA;;AACA;AAEA;AACA;AAAA;AAEA;;AAIA;AAAA;AAEA;AACA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAEA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;AC1dA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;;;;;;;;;;;;;;ACFA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;ACAA;AAAA;AAAA;AAAA;;AAEA;AAEA;;;;;;;;;;;;;ACJA;AAAA;AAAA;AAAA;AAAA;AACA;;;;;;;;;;;;;;ACDA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;AC9DA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;ACfA;AAAA;AAAA;AAAA;;;;;;;;;;;;;ACAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAWA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAEA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;AAMA;AACA;AACA;AACA;AACA;AAEA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAGA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC1FA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAQA;AACA;AACA;AAGA;AAEA;AAOA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAQA;AACA;AAOA;AAOA;AACA;AAMA;;;;;A","sourceRoot":""}