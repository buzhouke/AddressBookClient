{"version":3,"file":"dist/js/package~main.js","sources":["webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-rich-text-tiptap/src/components/RichTextRibbon/RichTextRibbon.items.tsx","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-forms/src/implementations/index.ts","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-forms/src/implementations/utilities/designing.ts","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-fluentui-teams-theme/src/teams/styles/dialog.styles.ts","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-forms/src/implementations/feature/strings.ts","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-forms/src/implementations/feature/default.ts","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-rich-text-tiptap/src/components/RichTextRibbon/index.ts","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-forms/src/implementations/components/DesigningDecorator/PrimarySettings/PrimarySettings.tsx","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-forms/src/implementations/components/RenderingField/RenderingField.tsx","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-fields/src/DecimalTextField/index.ts","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-forms/src/implementations/feature/descriptors/TextDescriptor.tsx","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-forms/src/implementations/components/DesigningDecorator/DesigningDecorator.styles.ts","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-fluentui-teams-theme/src/teams/styles/checkbox.styles.ts","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-rich-text-tiptap/src/extensions/file/sessions.ts","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-forms/src/implementations/types/context.ts","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-forms/src/implementations/components/DesigningDecorator/SecondarySettings/index.ts","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-forms/src/implementations/feature/validators/RequiredValidator.ts","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-rich-text-tiptap/src/extensions/link.ts","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-fluentui-teams-theme/src/teams/styles/label.styles.ts","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-forms/src/implementations/components/DesigningDecorator/SecondarySettings/SecondarySettings.styles.ts","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-forms/src/implementations/feature/descriptors/DropdownChoiceDescriptor.tsx","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-fluentui-teams-theme/src/teams/styles/modal.styles.ts","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-forms/src/implementations/types/entries/text.ts","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-forms/src/facade/index.ts","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-fluentui-teams-theme/src/teams/styles/choice-group-option.styles.ts","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-fluentui-teams-theme/src/teams/styles/icon-button.styles.ts","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-forms/src/facade/FormFacade.styles.ts","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-rich-text-tiptap/src/extensions/background-color.ts","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-forms/src/implementations/components/DesigningDecorator/DesigningDecorator.active.tsx","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-forms/src/abstractions/index.ts","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-forms/src/implementations/components/DesigningTrailingActions/DesigningTrailingActions.styles.ts","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-rich-text-tiptap/src/extensions/hack.ts","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-fluentui-teams-theme/src/teams/styles/breadcrumb.styles.ts","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-forms/src/implementations/components/DesigningDecorator/MockedField/index.ts","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-forms/src/implementations/components/DesigningDecorator/ChoiceSettings/ChoiceSettings.tsx","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-forms/src/implementations/components/DesigningDecorator/RestrictionSettings/RestrictionSettings.styles.ts","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-fluentui-teams-theme/src/teams/styles/search-box.styles.ts","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-forms/src/implementations/utilities/hooks.ts","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-forms/src/abstractions/FormFragment.tsx","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-fluentui-teams-theme/src/teams/styles/command-bar.styles.ts","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-fluentui-teams-theme/src/teams/styles/date-picker.styles.ts","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-rich-text-tiptap/src/extensions/file/index.ts","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-forms/src/implementations/utilities/index.ts","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-forms/src/implementations/components/DesigningDecorator/SecondarySettings/SecondarySettings.tsx","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-rich-text-tiptap/src/extensions/file/utils.tsx","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-fluentui-teams-theme/src/teams/teams-shadow-levels.ts","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-fields/src/index.ts","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-forms/src/implementations/feature/descriptors/DateTimeDescriptor.tsx","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-forms/src/implementations/components/PreviewingDecorator/PreviewingDecorator.styles.ts","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-fluentui-teams-theme/src/teams-palette.ts","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-forms/src/implementations/components/DesigningDecorator/PrimarySettings/PrimarySettings.styles.ts","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-rich-text-tiptap/src/extensions/defaults.ts","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-fluentui-teams-theme/src/teams/styles/toggle.styles.ts","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-forms/src/implementations/feature/keyExtractors.ts","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-forms/src/index.ts","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-rich-text-tiptap/src/extensions/index.ts","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-forms/src/implementations/components/DesigningDecorator/DesigningActions.tsx","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-rich-text-tiptap/src/components/InsertLink/InsertLink.styles.ts","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-rich-text-tiptap/src/components/InsertLink/InsertLink.tsx","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-forms/src/implementations/components/DesigningDecorator/RestrictionSettings/index.ts","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-forms/src/implementations/feature/idGenerators.ts","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-fluentui-teams-theme/src/teams/styles/default-button.styles.ts","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-forms/src/implementations/components/RenderingField/index.ts","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-fluentui-teams-theme/src/teams/styles/details-list.styles.ts","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-forms/src/implementations/feature/index.ts","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-rich-text-tiptap/src/extensions/customized-mention.ts","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-fluentui-teams-theme/src/teams/styles/people-picker.styles.ts","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-forms/src/implementations/feature/descriptors/RichTextDescriptor.tsx","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-rich-text-tiptap/src/types.ts","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-forms/src/implementations/feature/comparators.ts","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-rich-text-tiptap/src/extensions/file/view.image.tsx","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-rich-text-tiptap/src/utils.ts","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-fields/src/CollapsibleTextField/CollapsibleTextField.styles.ts","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-fluentui-teams-theme/src/teams/styles/message-bar.styles.ts","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-forms/src/implementations/components/DesigningDecorator/RestrictionSettings/RestrictionSettings.tsx","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-forms/src/implementations/types/entries/index.ts","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-forms/src/implementations/utilities/choice.ts","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-forms/src/implementations/feature/descriptors/index.ts","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-fields/src/CollapsibleTextField/CollapsibleTextField.tsx","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-fluentui-teams-theme/src/teams/styles/search-well.styles.ts","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-rich-text-tiptap/src/index.ts","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-rich-text-tiptap/src/extensions/font-size.ts","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-rich-text-tiptap/src/components/ColorMenuItem/ColorMenuItem.styles.ts","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-rich-text-tiptap/src/components/InsertLink/index.ts","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-rich-text-tiptap/src/components/RichTextField/index.ts","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-rich-text-tiptap/src/components/RichTextRibbon/RichTextRibbon.styles.ts","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-fluentui-teams-theme/src/teams/styles/suggestion.styles.ts","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-rich-text-tiptap/src/extensions/file/extension.ts","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-forms/src/implementations/feature/descriptors/RadioChoiceDescriptor.tsx","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-fluentui-teams-theme/src/teams/teams-styles.ts","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-fluentui-teams-theme/src/teams/styles/tooltip-host.styles.ts","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-fluentui-teams-theme/src/teams/styles/callout.styles.ts","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-forms/src/implementations/feature/validators/index.ts","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-rich-text-tiptap/src/extensions/file/view.fallback.tsx","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-forms/src/implementations/feature/validators/default.ts","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-fluentui-teams-theme/src/teams/styles/icon.styles.ts","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-rich-text-tiptap/src/extensions/utils.ts","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-forms/src/implementations/components/PreviewingDecorator/index.ts","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-fluentui-teams-theme/src/teams/styles/scrollable-pane.styles.ts","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-fluentui-teams-theme/src/teams/styles/tooltip.styles.ts","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-forms/src/implementations/components/DesigningDecorator/DesigningDecorator.tsx","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-fluentui-teams-theme/src/teams/styles/action-button.styles.ts","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-fluentui-teams-theme/src/teams/styles/persona.styles.ts","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-forms/src/implementations/feature/validators/RichTextValidator.ts","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-fluentui-teams-theme/src/teams/styles/document-card.styles.ts","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-rich-text-tiptap/src/components/index.ts","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-forms/src/implementations/feature/descriptors/default.ts","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-fluentui-teams-theme/src/teams/styles/combo-box.styles.ts","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-forms/src/facade/FormFacade.tsx","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-rich-text-tiptap/src/components/ColorMenuItem/ColorMenuItem.tsx","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-forms/src/implementations/components/DesigningDecorator/index.ts","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-forms/src/implementations/components/DesigningDecorator/PrimarySettings/index.ts","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-rich-text-tiptap/src/components/InsertLink/InsertLink.dialog.tsx","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-forms/src/implementations/components/DesigningDecorator/ChoiceSettings/ChoiceSettings.styles.ts","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-rich-text-tiptap/src/extensions/file/styles.ts","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-fluentui-teams-theme/src/teams/styles/pivot.styles.ts","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-rich-text-tiptap/src/components/RichTextRibbon/RichTextRibbon.tsx","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-fluentui-teams-theme/src/teams/styles/shimmer.styles.ts","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-forms/src/implementations/components/RenderingField/RenderingField.styles.ts","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-rich-text-tiptap/src/extensions/misc.ts","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-fluentui-teams-theme/src/teams/styles/constants.ts","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-forms/src/implementations/components/DesigningDecorator/ChoiceSettings/index.ts","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-forms/src/implementations/feature/descriptors/BaseDescriptor.tsx","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-forms/src/implementations/feature/validators/LengthValidator.ts","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-rich-text-tiptap/src/components/InsertTable/index.ts","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-forms/src/implementations/components/index.ts","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-forms/src/implementations/feature/descriptors/FallbackViewingDescriptor.tsx","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-forms/src/implementations/components/DesigningDecorator/MockedField/MockedField.styles.ts","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-forms/src/implementations/types/entries/base.ts","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-fluentui-teams-theme/src/teams/styles/contextual-menu.styles.ts","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-rich-text-tiptap/src/components/RichTextField/RichTextField.tsx","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-forms/src/implementations/utilities/validation.ts","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-fluentui-teams-theme/src/teams/styles/text-field.styles.ts","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-fluentui-teams-theme/src/teams/styles/panel.styles.ts","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-fluentui-teams-theme/src/teams/styles/primary-button.styles.ts","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-forms/src/implementations/components/DesigningDecorator/MockedField/MockedField.tsx","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-forms/src/implementations/feature/sanitizers.ts","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-rich-text-tiptap/src/components/RichTextField/RichTextField.styles.ts","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-rich-text-tiptap/src/extensions/file/view.tsx","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-forms/src/implementations/components/PreviewingDecorator/PreviewingDecorator.tsx","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-forms/src/implementations/feature/descriptors/CheckboxChoiceDescriptor.tsx","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-fluentui-teams-theme/src/teams/styles/teaching-bubble.styles.ts","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-forms/src/implementations/types/index.ts","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-rich-text-tiptap/src/components/RichTextRibbon/RichTextRibbon.utils.ts","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-forms/src/implementations/utilities/styles.ts","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-forms/src/implementations/feature/constants.ts","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-rich-text-tiptap/src/components/InsertTable/InsertTable.styles.ts","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-forms/src/abstractions/Form.tsx","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-forms/src/implementations/types/feature.ts","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-fields/src/DecimalTextField/DecimalTextField.tsx","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-rich-text-tiptap/src/components/RichTextField/RichTextField.types.ts","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-fluentui-teams-theme/src/teams/styles/dropdown.styles.ts","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-fluentui-teams-theme/src/teams/styles/compound-button.styles.ts","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-fields/src/CollapsibleTextField/index.ts","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-forms/src/implementations/feature/validators/NumberValidator.ts","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-forms/src/implementations/components/DesigningTrailingActions/index.ts","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-rich-text-tiptap/src/components/InsertTable/InsertTable.tsx","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-rich-text-tiptap/src/components/ColorMenuItem/index.ts","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-forms/src/implementations/feature/orderGenerators.ts","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-forms/src/implementations/components/DesigningTrailingActions/DesigningTrailingActions.tsx","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-fluentui-teams-theme/src/teams/styles/command-bar-button.styles.ts","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-forms/src/implementations/feature/trailingRenders.tsx","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-fluentui-teams-theme/src/teams-customizations.ts","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-forms/src/implementations/types/entries/choice.ts","webpack:///C:/Users/wangweiwei/source/repos/address-book/Source/Clients/packages/components-rich-text-tiptap/src/components/InsertLink/InsertLink.menu.tsx"],"sourcesContent":["import { ICommandBarItemProps } from '@fluentui/react';\r\nimport { Editor } from '@tiptap/core';\r\nimport Blockquote from '@tiptap/extension-blockquote';\r\nimport Bold from '@tiptap/extension-bold';\r\nimport BulletList from '@tiptap/extension-bullet-list';\r\nimport CodeBlock from '@tiptap/extension-code-block';\r\nimport Color from '@tiptap/extension-color';\r\nimport Italic from '@tiptap/extension-italic';\r\nimport ListItem from '@tiptap/extension-list-item';\r\nimport OrderedList from '@tiptap/extension-ordered-list';\r\nimport Strike from '@tiptap/extension-strike';\r\nimport Table from '@tiptap/extension-table';\r\nimport Underline from '@tiptap/extension-underline';\r\nimport { selectFile } from '@addressbook/utilities-core';\r\nimport { UseRenderingsResult } from '@addressbook/utilities-hooks';\r\nimport React from 'react';\r\nimport { BackgroundColor, File, FontSize, Link } from '../../extensions';\r\nimport {\r\n    RichTextFieldBackgroundColor,\r\n    RichTextFieldButton,\r\n    RichTextFieldFontSize,\r\n    RichTextFieldStrings,\r\n    RichTextFieldTextColor,\r\n} from '../../types';\r\nimport { backgroundColorValues, fontSizeValues, textColorValues } from '../../utils';\r\nimport { ColorMenuItem } from '../ColorMenuItem';\r\nimport { InsertLinkDialog, InsertLinkMenu } from '../InsertLink';\r\nimport { InsertTable } from '../InsertTable';\r\nimport { RichTextFieldRibbonCallbacks } from './RichTextRibbon.types';\r\nimport {\r\n    colorMenuCalloutClassName,\r\n    getCurrentLink,\r\n    hasExtensionByName,\r\n    maxTableSize,\r\n    menuCalloutClassName,\r\n} from './RichTextRibbon.utils';\r\n\r\nexport interface RibbonItemParams extends Pick<UseRenderingsResult, 'render' | 'unrender'> {\r\n    editor: Editor;\r\n    compact?: boolean;\r\n    callbacks: RichTextFieldRibbonCallbacks;\r\n    strings: Pick<\r\n        RichTextFieldStrings,\r\n        | 'button'\r\n        | 'backgroundColor'\r\n        | 'fontSize'\r\n        | 'textColor'\r\n        | 'insertLinkTitle'\r\n        | 'insertLinkDisplayAs'\r\n        | 'insertLinkUrl'\r\n        | 'insertTableTitle'\r\n    >;\r\n}\r\n\r\nexport interface RibbonItemDescriptor {\r\n    key: string;\r\n    text: (params: RibbonItemParams) => string;\r\n    icon: string;\r\n    supported: (params: RibbonItemParams) => boolean;\r\n    checked?: (params: RibbonItemParams) => boolean;\r\n    disabled?: (params: RibbonItemParams) => boolean;\r\n    onClick?: (params: RibbonItemParams) => void;\r\n    props?: (params: RibbonItemParams) => Partial<ICommandBarItemProps>;\r\n}\r\n\r\nexport function getItemProps(\r\n    { key, text, icon, supported, checked, disabled, onClick, props }: RibbonItemDescriptor,\r\n    params: RibbonItemParams\r\n): ICommandBarItemProps | undefined {\r\n    if (!supported(params)) return;\r\n\r\n    const patch = props?.(params);\r\n\r\n    const subMenuProps = patch?.subMenuProps;\r\n    if (subMenuProps) {\r\n        // If customized menu list is provided, we restore the default focus zone behavior and set focus on mount.\r\n        if (subMenuProps.onRenderMenuList) {\r\n            subMenuProps.shouldFocusOnMount = false;\r\n            subMenuProps.focusZoneProps = { shouldFocusOnMount: true };\r\n        }\r\n    }\r\n\r\n    const textResult = text(params);\r\n    const result: ICommandBarItemProps = {\r\n        key,\r\n        text: textResult,\r\n        ariaLabel: textResult,\r\n        iconProps: { iconName: icon },\r\n        iconOnly: true,\r\n        ...(checked && {\r\n            role: 'menuitemcheckbox',\r\n            canCheck: true,\r\n            checked: checked(params),\r\n        }),\r\n        disabled: disabled?.(params),\r\n        onClick: () => {\r\n            onClick?.(params);\r\n            params.callbacks.onRibbonButtonClicked?.(key);\r\n        },\r\n        ...patch,\r\n    };\r\n\r\n    return result;\r\n}\r\n\r\nconst bold: RibbonItemDescriptor = {\r\n    key: 'bold',\r\n    text: params => params.strings.button(RichTextFieldButton.Bold),\r\n    icon: 'Bold',\r\n    supported: ({ editor }) => hasExtensionByName(editor, Bold.name),\r\n    checked: params => params.editor.isActive(Bold.name),\r\n    disabled: params => !params.editor.can().toggleBold(),\r\n    onClick: params => params.editor.chain().focus().toggleBold().run(),\r\n};\r\n\r\nconst italic: RibbonItemDescriptor = {\r\n    key: 'italic',\r\n    text: params => params.strings.button(RichTextFieldButton.Italic),\r\n    icon: 'Italic',\r\n    supported: ({ editor }) => hasExtensionByName(editor, Italic.name),\r\n    checked: params => params.editor.isActive(Italic.name),\r\n    disabled: params => !params.editor.can().toggleItalic(),\r\n    onClick: params => params.editor.chain().focus().toggleItalic().run(),\r\n};\r\n\r\nconst underline: RibbonItemDescriptor = {\r\n    key: 'underline',\r\n    text: params => params.strings.button(RichTextFieldButton.Underline),\r\n    icon: 'Underline',\r\n    supported: ({ editor }) => hasExtensionByName(editor, Underline.name),\r\n    checked: params => params.editor.isActive(Underline.name),\r\n    disabled: params => !params.editor.can().toggleUnderline(),\r\n    onClick: params => params.editor.chain().focus().toggleUnderline().run(),\r\n};\r\n\r\nconst strikethrough: RibbonItemDescriptor = {\r\n    key: 'strikethrough',\r\n    text: params => params.strings.button(RichTextFieldButton.Strikethrough),\r\n    icon: 'Strikethrough',\r\n    supported: ({ editor }) => hasExtensionByName(editor, Strike.name),\r\n    checked: params => params.editor.isActive(Strike.name),\r\n    disabled: params => !params.editor.can().toggleStrike(),\r\n    onClick: params => params.editor.chain().focus().toggleStrike().run(),\r\n};\r\n\r\nconst backgroundColor: RibbonItemDescriptor = {\r\n    key: 'background-color',\r\n    text: params => params.strings.button(RichTextFieldButton.BackgroundColor),\r\n    icon: 'FabricTextHighlight',\r\n    supported: ({ editor }) => hasExtensionByName(editor, BackgroundColor.name),\r\n    props: ({ editor, strings }) => ({\r\n        subMenuProps: {\r\n            calloutProps: { className: colorMenuCalloutClassName, calloutWidth: 120 },\r\n            items: backgroundColorValues.map(([key, value]) => ({\r\n                key: RichTextFieldBackgroundColor[key],\r\n                onRender: () => (\r\n                    <ColorMenuItem\r\n                        text={strings.backgroundColor(key)}\r\n                        color={value}\r\n                        onClick={() =>\r\n                            // The first focus is to close the callout. The second focus is to focus back.\r\n                            value\r\n                                ? editor.chain().focus().focusLater(2).setBackgroundColor(value).run()\r\n                                : editor.chain().focus().focusLater(2).unsetBackgroundColor().run()\r\n                        }\r\n                    />\r\n                ),\r\n            })),\r\n        },\r\n    }),\r\n};\r\n\r\nconst textColor: RibbonItemDescriptor = {\r\n    key: 'text-color',\r\n    text: params => params.strings.button(RichTextFieldButton.TextColor),\r\n    icon: 'FontColor',\r\n    supported: ({ editor }) => hasExtensionByName(editor, Color.name),\r\n    props: ({ editor, strings }) => ({\r\n        subMenuProps: {\r\n            calloutProps: { className: colorMenuCalloutClassName, calloutWidth: 120 },\r\n            items: textColorValues.map(([key, value]) => ({\r\n                key: RichTextFieldTextColor[key],\r\n                onRender: () => (\r\n                    <ColorMenuItem\r\n                        text={strings.textColor(key)}\r\n                        color={value}\r\n                        onClick={() =>\r\n                            // The first focus is to close the callout. The second focus is to focus back.\r\n                            value\r\n                                ? editor.chain().focus().focusLater(2).setColor(value).run()\r\n                                : editor.chain().focus().focusLater(2).unsetColor().run()\r\n                        }\r\n                    />\r\n                ),\r\n            })),\r\n        },\r\n    }),\r\n};\r\n\r\nconst fontSize: RibbonItemDescriptor = {\r\n    key: 'font-size',\r\n    text: params => params.strings.button(RichTextFieldButton.FontSize),\r\n    icon: 'FontSize',\r\n    supported: ({ editor }) => hasExtensionByName(editor, FontSize.name),\r\n    props: ({ editor, strings }) => ({\r\n        subMenuProps: {\r\n            calloutProps: { calloutWidth: 120 },\r\n            items: fontSizeValues.map(([key, value]) => ({\r\n                key: RichTextFieldFontSize[key],\r\n                text: strings.fontSize(key),\r\n                onClick: () =>\r\n                    // The first focus is to close the callout. The second focus is to focus back.\r\n                    value\r\n                        ? editor.chain().focus().focusLater(2).setFontSize(value).run()\r\n                        : editor.chain().focus().focusLater(3).unsetFontSize().run(),\r\n            })),\r\n        },\r\n    }),\r\n};\r\n\r\nconst bulletedList: RibbonItemDescriptor = {\r\n    key: 'bulleted-list',\r\n    text: params => params.strings.button(RichTextFieldButton.BulletedList),\r\n    icon: 'BulletedList',\r\n    supported: ({ editor }) => hasExtensionByName(editor, BulletList.name),\r\n    checked: params => params.editor.isActive(BulletList.name),\r\n    onClick: params => params.editor.chain().focus().toggleBulletList().run(),\r\n};\r\n\r\nconst numberedList: RibbonItemDescriptor = {\r\n    key: 'numbered-list',\r\n    text: params => params.strings.button(RichTextFieldButton.NumberedList),\r\n    icon: 'NumberedList',\r\n    supported: ({ editor }) => hasExtensionByName(editor, OrderedList.name),\r\n    checked: params => params.editor.isActive(OrderedList.name),\r\n    onClick: params => params.editor.chain().focus().toggleOrderedList().run(),\r\n};\r\n\r\nconst decreaseIndent: RibbonItemDescriptor = {\r\n    key: 'decrease-indent',\r\n    text: params => params.strings.button(RichTextFieldButton.DecreaseIndent),\r\n    icon: 'DecreaseIndentLegacy',\r\n    supported: ({ editor }) => hasExtensionByName(editor, ListItem.name) && hasExtensionByName(editor, Blockquote.name),\r\n    disabled: params =>\r\n        !params.editor\r\n            .can()\r\n            .chain()\r\n            .first([({ commands }) => commands.liftListItem('listItem'), ({ commands }) => commands.unsetBlockquote()])\r\n            .run(),\r\n    onClick: params =>\r\n        params.editor\r\n            .chain()\r\n            .focus()\r\n            .first([({ commands }) => commands.liftListItem('listItem'), ({ commands }) => commands.unsetBlockquote()])\r\n            .run(),\r\n};\r\n\r\nconst increaseIndent: RibbonItemDescriptor = {\r\n    key: 'increase-indent',\r\n    text: params => params.strings.button(RichTextFieldButton.IncreaseIndent),\r\n    icon: 'IncreaseIndentLegacy',\r\n    supported: ({ editor }) => hasExtensionByName(editor, ListItem.name) && hasExtensionByName(editor, Blockquote.name),\r\n    disabled: params =>\r\n        !params.editor\r\n            .can()\r\n            .chain()\r\n            .first([({ commands }) => commands.sinkListItem('listItem'), ({ commands }) => commands.setBlockquote()])\r\n            .run(),\r\n    onClick: params =>\r\n        params.editor\r\n            .chain()\r\n            .focus()\r\n            .first([({ commands }) => commands.sinkListItem('listItem'), ({ commands }) => commands.setBlockquote()])\r\n            .run(),\r\n};\r\n\r\nconst clearFormat: RibbonItemDescriptor = {\r\n    key: 'clear-format',\r\n    text: params => params.strings.button(RichTextFieldButton.ClearFormat),\r\n    icon: 'ClearFormatting',\r\n    supported: () => true,\r\n    onClick: params => params.editor.chain().focus().clearNodes().unsetAllMarks().run(),\r\n};\r\n\r\nconst insertLinkKey = 'insert-link';\r\nconst insertLink: RibbonItemDescriptor = {\r\n    key: insertLinkKey,\r\n    text: params => params.strings.button(RichTextFieldButton.InsertLink),\r\n    icon: 'Link',\r\n    supported: ({ editor }) => hasExtensionByName(editor, Link.name),\r\n    props: ({ editor, compact, strings, callbacks, render, unrender }) => {\r\n        if (compact) {\r\n            return {\r\n                onClick: () => {\r\n                    render(\r\n                        insertLinkKey,\r\n                        <InsertLinkDialog\r\n                            initialLink={getCurrentLink(editor)}\r\n                            onConfirm={link => {\r\n                                // The first focus is to close the callout. The second focus is to focus back.\r\n                                editor\r\n                                    .chain()\r\n                                    .focus()\r\n                                    .focusLater(2)\r\n                                    .insertLink(link.displayText, { href: link.url })\r\n                                    .run();\r\n                                unrender(insertLinkKey);\r\n                            }}\r\n                            onCancel={() => {\r\n                                editor.chain().focus().run();\r\n                                unrender(insertLinkKey);\r\n                            }}\r\n                            normalizeUrl={callbacks.normalizeUrl}\r\n                            strings={strings}\r\n                        />\r\n                    );\r\n                },\r\n            };\r\n        }\r\n\r\n        return {\r\n            subMenuProps: {\r\n                calloutProps: { className: menuCalloutClassName, calloutWidth: 320 },\r\n                items: [{ key: insertLinkKey }],\r\n                onRenderMenuList: () => (\r\n                    <InsertLinkMenu\r\n                        strings={strings}\r\n                        initialLink={getCurrentLink(editor)}\r\n                        onConfirm={link =>\r\n                            // The first focus is to close the callout. The second focus is to focus back.\r\n                            editor.chain().focus().focusLater(2).insertLink(link.displayText, { href: link.url }).run()\r\n                        }\r\n                        onCancel={() => editor.chain().focus().run()}\r\n                        normalizeUrl={callbacks.normalizeUrl}\r\n                    />\r\n                ),\r\n            },\r\n        };\r\n    },\r\n};\r\n\r\nconst insertImage: RibbonItemDescriptor = {\r\n    key: 'insert-image',\r\n    text: params => params.strings.button(RichTextFieldButton.InsertImage),\r\n    icon: 'Image',\r\n    supported: ({ editor }) => hasExtensionByName(editor, File.name),\r\n    props: ({ editor }) => ({\r\n        onClick: () => {\r\n            selectFile({ accept: 'image/*' }).then(\r\n                file => editor.chain().focus().insertFile(file).run(),\r\n                () => editor.chain().focus().run()\r\n            );\r\n        },\r\n    }),\r\n};\r\n\r\nconst insertFile: RibbonItemDescriptor = {\r\n    key: 'insert-file',\r\n    text: params => params.strings.button(RichTextFieldButton.InsertFile),\r\n    icon: 'Attach',\r\n    supported: ({ editor }) => hasExtensionByName(editor, File.name),\r\n    props: ({ editor }) => ({\r\n        onClick: () => {\r\n            selectFile().then(\r\n                file => editor.chain().focus().insertFile(file).run(),\r\n                () => editor.chain().focus().run()\r\n            );\r\n        },\r\n    }),\r\n};\r\n\r\nconst insertTable: RibbonItemDescriptor = {\r\n    key: 'insert-table',\r\n    text: params => params.strings.button(RichTextFieldButton.InsertTable),\r\n    icon: 'Table',\r\n    supported: ({ editor }) => hasExtensionByName(editor, Table.name),\r\n    props: ({ editor, strings }) => ({\r\n        subMenuProps: {\r\n            calloutProps: { className: menuCalloutClassName },\r\n            items: [{ key: 'insert-table' }],\r\n            onRenderMenuList: () => (\r\n                <InsertTable\r\n                    maxTableSize={maxTableSize}\r\n                    strings={strings}\r\n                    onConfirm={tableSize =>\r\n                        // The first focus is to close the callout. The second focus is to focus back.\r\n                        editor\r\n                            .chain()\r\n                            .focus()\r\n                            .focusLater(2)\r\n                            .insertTable({ ...tableSize, withHeaderRow: false })\r\n                            .run()\r\n                    }\r\n                />\r\n            ),\r\n        },\r\n    }),\r\n};\r\n\r\nconst code: RibbonItemDescriptor = {\r\n    key: 'code',\r\n    text: params => params.strings.button(RichTextFieldButton.Code),\r\n    icon: 'Code',\r\n    supported: ({ editor }) => hasExtensionByName(editor, CodeBlock.name),\r\n    checked: params => params.editor.isActive(CodeBlock.name),\r\n    onClick: params => params.editor.chain().focus().toggleCodeBlock().run(),\r\n};\r\n\r\nexport const defaultRibbonItemGroups: RibbonItemDescriptor[][] = [\r\n    [bold, italic, underline, strikethrough],\r\n    [backgroundColor, textColor, fontSize],\r\n    [bulletedList, numberedList, decreaseIndent, increaseIndent],\r\n    [insertLink, insertImage, insertFile, insertTable, code, clearFormat],\r\n];\r\n\r\nexport const compactRibbonItemGroups: RibbonItemDescriptor[][] = [\r\n    [bold, italic, underline],\r\n    [bulletedList, numberedList],\r\n    [insertLink, clearFormat],\r\n];\r\n","export * from './components';\r\nexport * from './feature';\r\nexport * from './types';\r\nexport * from './utilities';\r\n","import { IDropdownOption } from '@fluentui/react';\r\nimport {\r\n    BaseFormQuestion,\r\n    ChoiceAppearance,\r\n    FormConstants,\r\n    FormEntry,\r\n    FormFeature,\r\n    FormQuestion,\r\n    FormQuestionType,\r\n    FormStrings,\r\n    QuestionDisplayType,\r\n    TextNumberRestriction,\r\n    TextNumberRestrictionType,\r\n} from '../types';\r\n\r\n/**\r\n * Gets the display type options for a form question.\r\n *\r\n * @param strings The strings to use for the options.\r\n * @returns The display type options.\r\n */\r\nexport function getDisplayTypeOptions(strings: FormStrings): IDropdownOption[] {\r\n    return [\r\n        {\r\n            key: QuestionDisplayType.ShortText,\r\n            text: strings.questionDisplayTypeOption(QuestionDisplayType.ShortText),\r\n            data: 'TextField',\r\n        },\r\n        {\r\n            key: QuestionDisplayType.MultilineText,\r\n            text: strings.questionDisplayTypeOption(QuestionDisplayType.MultilineText),\r\n            data: 'Textbox',\r\n            hidden: true,\r\n            disabled: true,\r\n        },\r\n        {\r\n            key: QuestionDisplayType.RichText,\r\n            text: strings.questionDisplayTypeOption(QuestionDisplayType.RichText),\r\n            data: 'TextParagraph',\r\n        },\r\n        {\r\n            key: QuestionDisplayType.Number,\r\n            text: strings.questionDisplayTypeOption(QuestionDisplayType.Number),\r\n            data: 'NumberSymbol',\r\n        },\r\n        {\r\n            key: QuestionDisplayType.MultipleChoice,\r\n            text: strings.questionDisplayTypeOption(QuestionDisplayType.MultipleChoice),\r\n            data: 'CheckboxChecked',\r\n        },\r\n        {\r\n            key: QuestionDisplayType.SingleChoice,\r\n            text: strings.questionDisplayTypeOption(QuestionDisplayType.SingleChoice),\r\n            data: 'RadioButton',\r\n        },\r\n        {\r\n            key: QuestionDisplayType.Dropdown,\r\n            text: strings.questionDisplayTypeOption(QuestionDisplayType.Dropdown),\r\n            data: 'ChevronCircleDown',\r\n        },\r\n        {\r\n            key: QuestionDisplayType.Date,\r\n            text: strings.questionDisplayTypeOption(QuestionDisplayType.Date),\r\n            data: 'Calendar',\r\n        },\r\n    ];\r\n}\r\n\r\n/**\r\n * Gets the display type for a form question.\r\n *\r\n * @param question The form question.\r\n * @returns The display type.\r\n */\r\nexport function getDisplayType(question: FormQuestion): QuestionDisplayType {\r\n    switch (question.type) {\r\n        case FormQuestionType.Text:\r\n            return question.number\r\n                ? QuestionDisplayType.Number\r\n                : question.multiline\r\n                ? QuestionDisplayType.MultilineText\r\n                : QuestionDisplayType.ShortText;\r\n        case FormQuestionType.RichText:\r\n            return QuestionDisplayType.RichText;\r\n        case FormQuestionType.Choice:\r\n            switch (question.appearance) {\r\n                case ChoiceAppearance.Radio:\r\n                    return QuestionDisplayType.SingleChoice;\r\n                case ChoiceAppearance.Dropdown:\r\n                    return QuestionDisplayType.Dropdown;\r\n                case ChoiceAppearance.Checkbox:\r\n                    return QuestionDisplayType.MultipleChoice;\r\n            }\r\n        case FormQuestionType.DateTime:\r\n            return QuestionDisplayType.Date;\r\n    }\r\n}\r\n\r\nexport type NewFormEntryProps = Pick<FormQuestion, 'order'> & Pick<FormFeature, 'idGenerator' | 'strings'>;\r\n\r\n/**\r\n * Add a new form entry to existing form entries and return the new form entries.\r\n * This function will deactivate all existing form entries and activate the new form entry.\r\n *\r\n * @param entries The form entries to add the new form entry to.\r\n * @param props.order The order of the new form entry.\r\n * @param props.idGenerator The id generator to use for the new form entry.\r\n * @param props.strings The strings to use for the new form entry.\r\n * @returns The new form entries with the new form entry added.\r\n */\r\nexport function addNewFormEntry(entries: FormEntry[], { order, idGenerator, strings }: NewFormEntryProps): FormEntry[] {\r\n    const newEntries = entries.map(entry => {\r\n        if (!entry.active) return entry;\r\n        const newEntry = { ...entry };\r\n        delete newEntry.active;\r\n        return newEntry;\r\n    });\r\n\r\n    newEntries.push({\r\n        question: {\r\n            type: FormQuestionType.Text,\r\n            id: idGenerator(),\r\n            order,\r\n            title: strings.questionNewTitle,\r\n        },\r\n        answer: {},\r\n        active: true,\r\n    });\r\n\r\n    return newEntries;\r\n}\r\n\r\nfunction deriveBaseFormQuestion(question: FormQuestion): BaseFormQuestion<FormQuestionType> {\r\n    const base: BaseFormQuestion<FormQuestionType> = {\r\n        type: question.type,\r\n        id: question.id,\r\n        familyId: question.familyId,\r\n        eTag: question.eTag,\r\n        order: question.order,\r\n        title: question.title,\r\n        rtTitle: question.rtTitle,\r\n        subtitle: question.subtitle,\r\n        rtSubtitle: question.rtSubtitle,\r\n        required: question.required,\r\n        tooltip: question.tooltip,\r\n        placeholder: question.placeholder,\r\n    };\r\n\r\n    Object.keys(base).forEach(key => {\r\n        if (base[key] === undefined) delete base[key];\r\n    });\r\n\r\n    return base;\r\n}\r\n\r\nfunction getFormQuestionTypeFromDisplayType(displayType: QuestionDisplayType): FormQuestionType {\r\n    switch (displayType) {\r\n        case QuestionDisplayType.ShortText:\r\n        case QuestionDisplayType.MultilineText:\r\n        case QuestionDisplayType.Number:\r\n            return FormQuestionType.Text;\r\n        case QuestionDisplayType.RichText:\r\n            return FormQuestionType.RichText;\r\n        case QuestionDisplayType.MultipleChoice:\r\n        case QuestionDisplayType.SingleChoice:\r\n        case QuestionDisplayType.Dropdown:\r\n            return FormQuestionType.Choice;\r\n        case QuestionDisplayType.Date:\r\n            return FormQuestionType.DateTime;\r\n    }\r\n}\r\n\r\n/**\r\n * Gets a new choice that is not already in the list of choices.\r\n *\r\n * @param strings The strings to use for the new choice.\r\n * @param choices The list of choices to check against.\r\n * @returns A new choice.\r\n */\r\nexport function getNewChoice(strings: FormStrings, choices: string[]): string {\r\n    let index = 0;\r\n    while (true) {\r\n        const newChoice = strings.choiceNew(index);\r\n        if (!choices.includes(newChoice)) return newChoice;\r\n        index++;\r\n    }\r\n}\r\n\r\n/**\r\n * Derives a new form question by a display type from an existing question.\r\n * If the display type is the same as the question's display type, the question is returned.\r\n * Otherwise, a new question is returned with the any common properties copied from the original question.\r\n *\r\n * @param displayType The display type to derive by.\r\n * @param question The question to derive from.\r\n * @param strings The strings to use for the new question.\r\n * @param constants The constants to use for the new question.\r\n * @returns A new form question.\r\n */\r\nexport function deriveFormQuestion(\r\n    displayType: QuestionDisplayType,\r\n    question: FormQuestion,\r\n    strings: FormStrings,\r\n    constants: FormConstants\r\n): FormQuestion {\r\n    if (displayType === getDisplayType(question)) return question;\r\n\r\n    const base = deriveBaseFormQuestion(question);\r\n    base.type = getFormQuestionTypeFromDisplayType(displayType);\r\n    switch (base.type) {\r\n        case FormQuestionType.Text:\r\n            return {\r\n                ...(base as BaseFormQuestion<FormQuestionType.Text>),\r\n                ...(displayType === QuestionDisplayType.Number && { number: true }),\r\n                ...(displayType === QuestionDisplayType.MultilineText && { multiline: true }),\r\n            };\r\n        case FormQuestionType.RichText:\r\n            return base as BaseFormQuestion<FormQuestionType.RichText>;\r\n        case FormQuestionType.Choice:\r\n            return {\r\n                ...(base as BaseFormQuestion<FormQuestionType.Choice>),\r\n                appearance:\r\n                    displayType === QuestionDisplayType.SingleChoice\r\n                        ? ChoiceAppearance.Radio\r\n                        : displayType === QuestionDisplayType.Dropdown\r\n                        ? ChoiceAppearance.Dropdown\r\n                        : ChoiceAppearance.Checkbox,\r\n                choices:\r\n                    question.type === FormQuestionType.Choice\r\n                        ? question.choices\r\n                        : Array.from({ length: constants.initialChoices }, (_, i) => strings.choiceNew(i)),\r\n                ...(question.type === FormQuestionType.Choice && question.allowOther && { allowOther: true }),\r\n                ...(question.type === FormQuestionType.Choice && question.shuffle && { shuffle: true }),\r\n            };\r\n        case FormQuestionType.DateTime:\r\n            return base as BaseFormQuestion<FormQuestionType.DateTime>;\r\n    }\r\n}\r\n\r\n/**\r\n * Gets the options for the text number restriction dropdown.\r\n *\r\n * @param strings The strings to use for the options.\r\n * @returns The options for the text number restriction dropdown.\r\n */\r\nexport function getTextNumberRestrictionOptions(strings: FormStrings): IDropdownOption[] {\r\n    return [\r\n        {\r\n            key: TextNumberRestrictionType.GreaterThan,\r\n            text: strings.restrictionOption(TextNumberRestrictionType.GreaterThan),\r\n        },\r\n        {\r\n            key: TextNumberRestrictionType.GreaterThanOrEqualTo,\r\n            text: strings.restrictionOption(TextNumberRestrictionType.GreaterThanOrEqualTo),\r\n        },\r\n        {\r\n            key: TextNumberRestrictionType.LessThan,\r\n            text: strings.restrictionOption(TextNumberRestrictionType.LessThan),\r\n        },\r\n        {\r\n            key: TextNumberRestrictionType.LessThanOrEqualTo,\r\n            text: strings.restrictionOption(TextNumberRestrictionType.LessThanOrEqualTo),\r\n        },\r\n        {\r\n            key: TextNumberRestrictionType.EqualTo,\r\n            text: strings.restrictionOption(TextNumberRestrictionType.EqualTo),\r\n        },\r\n        {\r\n            key: TextNumberRestrictionType.NotEqualTo,\r\n            text: strings.restrictionOption(TextNumberRestrictionType.NotEqualTo),\r\n        },\r\n        {\r\n            key: TextNumberRestrictionType.Between,\r\n            text: strings.restrictionOption(TextNumberRestrictionType.Between),\r\n        },\r\n        {\r\n            key: TextNumberRestrictionType.NotBetween,\r\n            text: strings.restrictionOption(TextNumberRestrictionType.NotBetween),\r\n        },\r\n    ];\r\n}\r\n\r\n/**\r\n * Derives a text number restriction from a type and an optional restriction.\r\n * If the restriction is provided, a new restriction is returned with any compatible properties copied from the original\r\n * restriction. Otherwise, a new restriction is returned with default values.\r\n *\r\n * @param type The type to derive by.\r\n * @param restriction The restriction to derive from.\r\n * @returns A new text number restriction.\r\n */\r\n// Justification: This function contains a switch statement and many fallbacks.\r\n// eslint-disable-next-line complexity\r\nexport function deriveTextNumberRestriction(\r\n    type: TextNumberRestrictionType,\r\n    restriction?: TextNumberRestriction\r\n): TextNumberRestriction {\r\n    const value = restriction && 'value' in restriction ? restriction.value : undefined;\r\n    const min = restriction && 'min' in restriction ? restriction.min : undefined;\r\n    const max = restriction && 'max' in restriction ? restriction.max : undefined;\r\n\r\n    switch (type) {\r\n        case TextNumberRestrictionType.GreaterThan:\r\n        case TextNumberRestrictionType.GreaterThanOrEqualTo:\r\n            return { type, min: min ?? max ?? value ?? 0 };\r\n        case TextNumberRestrictionType.LessThan:\r\n        case TextNumberRestrictionType.LessThanOrEqualTo:\r\n            return { type, max: max ?? min ?? value ?? 100 };\r\n        case TextNumberRestrictionType.EqualTo:\r\n        case TextNumberRestrictionType.NotEqualTo:\r\n            return { type, value: value ?? min ?? max ?? 0 };\r\n        case TextNumberRestrictionType.Between:\r\n        case TextNumberRestrictionType.NotBetween:\r\n            return { type, min: min ?? 0, max: max ?? 100 };\r\n    }\r\n}\r\n","/* istanbul ignore file */\r\n\r\nimport { IDialogContentStyles, IDialogFooterStyles, FontWeights, IRawStyle, ITheme } from '@fluentui/react';\r\n\r\nimport { FontSizes } from '../teams-sizes';\r\nimport { isContrastTheme } from '../teams-theme';\r\n\r\nexport const getDialogContentStyles = (themeName: string, theme: ITheme): Partial<IDialogContentStyles> => {\r\n    const styles = {\r\n        title: {\r\n            fontSize: FontSizes.size18,\r\n            fontWeight: FontWeights.bold,\r\n            padding: '27px 54px 8px 32px',\r\n            lineHeight: FontSizes.size24,\r\n            color: theme.palette.black,\r\n        },\r\n        topButton: {\r\n            padding: '23px 22px 4px 0',\r\n            fontSize: FontSizes.size14,\r\n            selectors: {\r\n                '.ms-Dialog-button': {\r\n                    color: theme.palette.neutralDark,\r\n                },\r\n                '.ms-Dialog-button:hover': {\r\n                    color: theme.palette.themePrimary,\r\n                    backgroundColor: 'transparent',\r\n                    selectors: {\r\n                        i: {\r\n                            fontWeight: FontWeights.bold,\r\n                        },\r\n                    },\r\n                },\r\n                '.ms-Dialog-button:active': {\r\n                    color: theme.palette.themePrimary,\r\n                },\r\n            },\r\n        },\r\n        inner: {\r\n            padding: '1px 32px 32px 32px',\r\n            color: theme.palette.neutralDark,\r\n            selectors: {\r\n                '.ms-Label': {\r\n                    color: theme.palette.neutralDark,\r\n                },\r\n            },\r\n        },\r\n        innerContent: {\r\n            paddingTop: '4px',\r\n            marginBottom: '20px',\r\n            selectors: {\r\n                ':last-child': {\r\n                    marginBottom: 0,\r\n                },\r\n            },\r\n        },\r\n        subText: {\r\n            color: theme.palette.neutralDark,\r\n            fontWeight: FontWeights.regular,\r\n            fontSize: FontSizes.size14,\r\n            lineHeight: FontSizes.size20,\r\n            paddingTop: 0,\r\n        },\r\n    } as Partial<IDialogContentStyles>;\r\n\r\n    // Contrast theme overrides\r\n    if (isContrastTheme(themeName)) {\r\n        ((styles.topButton as Required<IRawStyle>).selectors['.ms-Dialog-button:hover'] as IRawStyle).color =\r\n            theme.palette.themeDark;\r\n        ((styles.topButton as Required<IRawStyle>).selectors['.ms-Dialog-button:active'] as IRawStyle).color =\r\n            theme.palette.themeDark;\r\n\r\n        (styles.inner as IRawStyle).color = theme.palette.black;\r\n        ((styles.inner as Required<IRawStyle>).selectors['.ms-Label'] as IRawStyle).color = theme.palette.black;\r\n    }\r\n    return styles;\r\n};\r\n\r\nexport const getDialogFooterStyles = (_themeName: string, _theme: ITheme): Partial<IDialogFooterStyles> => {\r\n    const styles = {\r\n        actions: {\r\n            margin: '16px 0 0',\r\n        },\r\n    } as Partial<IDialogFooterStyles>;\r\n\r\n    return styles;\r\n};\r\n","import {\r\n    ChoiceAction,\r\n    FormStrings,\r\n    QuestionAction,\r\n    QuestionDisplayType,\r\n    TextNumberRestrictionType,\r\n    TextNumberRestrictionValueKey,\r\n} from '../types';\r\n\r\nexport const defaultFormStrings: FormStrings = {\r\n    questionHint: (question, active) =>\r\n        active\r\n            ? `Editing question \"${question.title}\". Press Tab and Shift+Tab to navigate between questions and option sections. Press arrow keys to navigate between options. Press Escape or Space to exit editing.`\r\n            : `Question \"${question.title}\". Press Tab and Shift+Tab to navigate between questions. Press Enter or Space to edit.`,\r\n    questionAction: action => defaultQuestionActionStrings[action],\r\n    questionMockedFieldDefaultPlaceholder: type =>\r\n        type === QuestionDisplayType.Dropdown ? 'Select your response' : 'Enter your response',\r\n    questionDisplayTypeOption: type => defaultQuestionDisplayTypeOptionStrings[type],\r\n    questionNewTitle: 'Question',\r\n    questionTitle: 'Title',\r\n    questionSubtitle: 'Subtitle (optional)',\r\n    questionRequired: 'Required',\r\n    questionRestriction: 'Restriction',\r\n    questionShuffle: 'Shuffle',\r\n    choiceAction: action => defaultChoiceActionStrings[action],\r\n    choiceNew: index => `Option ${index + 1}`,\r\n    choiceOther: 'Other',\r\n    choicePlaceholder: 'Option',\r\n    restrictionOption: type => defaultRestrictionOptionStrings[type],\r\n    restrictionValuePlaceholder: key => defaultRestrictionValuePlaceholderStrings[key],\r\n};\r\n\r\nconst defaultQuestionActionStrings: Record<QuestionAction, string> = {\r\n    [QuestionAction.Add]: 'Add question',\r\n    [QuestionAction.Copy]: 'Copy question',\r\n    [QuestionAction.Delete]: 'Delete question',\r\n    [QuestionAction.MoveUp]: 'Move question up',\r\n    [QuestionAction.MoveDown]: 'Move question down',\r\n};\r\n\r\nconst defaultQuestionDisplayTypeOptionStrings: Record<QuestionDisplayType, string> = {\r\n    [QuestionDisplayType.ShortText]: 'Short text',\r\n    [QuestionDisplayType.MultilineText]: 'Long text',\r\n    [QuestionDisplayType.RichText]: 'Rich text',\r\n    [QuestionDisplayType.Number]: 'Number',\r\n    [QuestionDisplayType.MultipleChoice]: 'Multiple choice',\r\n    [QuestionDisplayType.SingleChoice]: 'Single choice',\r\n    [QuestionDisplayType.Dropdown]: 'Dropdown',\r\n    [QuestionDisplayType.Date]: 'Date',\r\n};\r\n\r\nconst defaultChoiceActionStrings: Record<ChoiceAction, string> = {\r\n    [ChoiceAction.Add]: 'Add option',\r\n    [ChoiceAction.AddOther]: 'Add \"other\" option',\r\n    [ChoiceAction.Delete]: 'Delete option',\r\n    [ChoiceAction.MoveUp]: 'Move option up',\r\n    [ChoiceAction.MoveDown]: 'Move option down',\r\n};\r\n\r\nconst defaultRestrictionOptionStrings: Record<TextNumberRestrictionType, string> = {\r\n    [TextNumberRestrictionType.GreaterThan]: 'Greater than',\r\n    [TextNumberRestrictionType.GreaterThanOrEqualTo]: 'Greater than or equal to',\r\n    [TextNumberRestrictionType.LessThan]: 'Less than',\r\n    [TextNumberRestrictionType.LessThanOrEqualTo]: 'Less than or equal to',\r\n    [TextNumberRestrictionType.EqualTo]: 'Equal to',\r\n    [TextNumberRestrictionType.NotEqualTo]: 'Not equal to',\r\n    [TextNumberRestrictionType.Between]: 'Between',\r\n    [TextNumberRestrictionType.NotBetween]: 'Not between',\r\n};\r\n\r\nconst defaultRestrictionValuePlaceholderStrings: Record<TextNumberRestrictionValueKey, string> = {\r\n    min: 'Min',\r\n    max: 'Max',\r\n    value: 'Value',\r\n};\r\n","import { FormFeature } from '../types';\r\nimport { orderComparator } from './comparators';\r\nimport { defaultFormConstants } from './constants';\r\nimport { defaultDescriptors } from './descriptors';\r\nimport { uuidIdGenerator } from './idGenerators';\r\nimport { idKeyExtractor } from './keyExtractors';\r\nimport { halfOrderGenerator } from './orderGenerators';\r\nimport { identitySanitizer } from './sanitizers';\r\nimport { defaultFormStrings } from './strings';\r\nimport { defaultTrailingRender } from './trailingRenders';\r\nimport { defaultValidators } from './validators';\r\n\r\nexport const defaultFormFeature: FormFeature = {\r\n    comparator: orderComparator,\r\n    keyExtractor: idKeyExtractor,\r\n    trailingRender: defaultTrailingRender,\r\n    descriptors: defaultDescriptors,\r\n    validators: defaultValidators,\r\n    sanitizer: identitySanitizer,\r\n    idGenerator: uuidIdGenerator,\r\n    orderGenerator: halfOrderGenerator,\r\n    constants: defaultFormConstants,\r\n    strings: defaultFormStrings,\r\n};\r\n","export * from './RichTextRibbon';\r\nexport * from './RichTextRibbon.types';\r\n","import { Dropdown, Icon, ResponsiveMode, TextField } from '@fluentui/react';\r\nimport React from 'react';\r\nimport { QuestionDisplayType } from '../../../types';\r\nimport {\r\n    deriveFormQuestion,\r\n    getDisplayType,\r\n    getDisplayTypeOptions,\r\n    useDropdownStyles,\r\n    useTextFieldStyles,\r\n} from '../../../utilities';\r\nimport { QuestionSettingsProps } from '../types';\r\nimport { usePrimarySettingsStyles } from './PrimarySettings.styles';\r\n\r\nexport function PrimarySettings({\r\n    question,\r\n    onQuestionChange,\r\n    constants,\r\n    strings,\r\n}: QuestionSettingsProps): JSX.Element {\r\n    const styles = usePrimarySettingsStyles();\r\n    const textFieldStyles = useTextFieldStyles();\r\n    const dropdownStyles = useDropdownStyles();\r\n\r\n    const selectedDisplayType = getDisplayType(question);\r\n    const displayTypeOptions = getDisplayTypeOptions(strings);\r\n\r\n    return (\r\n        <>\r\n            <div className={styles.row}>\r\n                <TextField\r\n                    value={question.title ?? ''}\r\n                    onChange={(_, value) => onQuestionChange({ ...question, rtTitle: '', title: value })}\r\n                    maxLength={constants.maxTitleLength}\r\n                    placeholder={strings.questionTitle}\r\n                    styles={textFieldStyles}\r\n                />\r\n                <Dropdown\r\n                    selectedKey={selectedDisplayType}\r\n                    onChange={(_, option) =>\r\n                        option &&\r\n                        onQuestionChange(\r\n                            deriveFormQuestion(option.key as QuestionDisplayType, question, strings, constants)\r\n                        )\r\n                    }\r\n                    options={displayTypeOptions}\r\n                    onRenderTitle={(options, defaultRender) => (\r\n                        <div className={styles.optionRow}>\r\n                            <Icon\r\n                                className={styles.optionIcon}\r\n                                iconName={options?.find(({ key }) => key === selectedDisplayType)?.data}\r\n                            />\r\n                            {defaultRender?.(options)}\r\n                        </div>\r\n                    )}\r\n                    onRenderOption={(option, defaultRender) => (\r\n                        <div className={styles.optionRow}>\r\n                            <Icon className={styles.optionIcon} iconName={option?.data} />\r\n                            {defaultRender?.(option)}\r\n                        </div>\r\n                    )}\r\n                    responsiveMode={ResponsiveMode.unknown}\r\n                    styles={dropdownStyles}\r\n                />\r\n            </div>\r\n            <TextField\r\n                value={question.subtitle ?? ''}\r\n                onChange={(_, value) => onQuestionChange({ ...question, rtSubtitle: '', subtitle: value })}\r\n                maxLength={constants.maxSubtitleLength}\r\n                placeholder={strings.questionSubtitle}\r\n                styles={textFieldStyles}\r\n            />\r\n        </>\r\n    );\r\n}\r\n","import { DirectionalHint, Icon, mergeStyles, TooltipHost } from '@fluentui/react';\r\nimport { useId } from '@fluentui/react-hooks';\r\nimport React from 'react';\r\nimport { FieldProps } from '../../../abstractions';\r\nimport { FormContext, FormEntry, FormFeature, FormMode } from '../../types';\r\nimport { mergeValidations } from '../../utilities';\r\nimport { DesigningDecorator } from '../DesigningDecorator';\r\nimport { PreviewingDecorator } from '../PreviewingDecorator';\r\nimport { useRenderingFieldStyles } from './RenderingField.styles';\r\n\r\ntype DelegatedAriaAttributes = Pick<\r\n    React.AriaAttributes,\r\n    'aria-labelledby' | 'aria-describedby' | 'aria-required' | 'aria-readonly' | 'aria-errormessage' | 'aria-invalid'\r\n>;\r\n\r\ninterface DelegatedFieldComponentProps extends DelegatedAriaAttributes {\r\n    readOnly?: boolean;\r\n    invalid?: boolean;\r\n}\r\n\r\ninterface FieldComponentProps<CoercedEntry extends FormEntry>\r\n    extends FieldProps<FormEntry, FormContext, FormFeature, CoercedEntry> {\r\n    delegatedProps: DelegatedFieldComponentProps;\r\n    showPlaceholder?: boolean;\r\n}\r\n\r\nexport type FieldComponentType<CoercedEntry extends FormEntry> = React.ComponentType<FieldComponentProps<CoercedEntry>>;\r\n\r\nexport interface RenderingComponentProps<CoercedEntry extends FormEntry>\r\n    extends FieldProps<FormEntry, FormContext, FormFeature, CoercedEntry> {\r\n    Component: FieldComponentType<CoercedEntry>;\r\n}\r\n\r\n/**\r\n * This component renders the provided field component with some delegated props, and handles validation.\r\n */\r\nexport function RenderingField<CoercedEntry extends FormEntry>({\r\n    Component,\r\n    onEntryChange,\r\n    ...props\r\n}: RenderingComponentProps<CoercedEntry>): JSX.Element {\r\n    const { entry, context, feature } = props;\r\n    const { mode } = context;\r\n    const { validators, sanitizer } = feature;\r\n    const { question, answer, errorMessage } = entry;\r\n    const { title, rtTitle, subtitle, rtSubtitle, required, tooltip } = question;\r\n\r\n    const styles = useRenderingFieldStyles();\r\n\r\n    const labelId = useId('label');\r\n    const descriptionId = useId('description');\r\n    const errorMessageId = useId('errormessage');\r\n\r\n    const safeRtTitle = React.useMemo(\r\n        () => (rtTitle ? { __html: sanitizer(rtTitle) } : undefined),\r\n        [rtTitle, sanitizer]\r\n    );\r\n    const safeRtSubtitle = React.useMemo(\r\n        () => (rtSubtitle ? { __html: sanitizer(rtSubtitle) } : undefined),\r\n        [rtSubtitle, sanitizer]\r\n    );\r\n\r\n    const readOnly = mode !== FormMode.Filling;\r\n    const invalid = mode === FormMode.Filling && Boolean(errorMessage);\r\n\r\n    const showPlaceholder = mode !== FormMode.Viewing;\r\n    const delegatedProps: DelegatedFieldComponentProps = React.useMemo(\r\n        () => ({\r\n            ...(readOnly && { readOnly: true, 'aria-readonly': true }),\r\n            ...((title || safeRtTitle) && { 'aria-labelledby': labelId }),\r\n            ...(required && { 'aria-required': true }),\r\n            ...((subtitle || safeRtSubtitle) && { 'aria-describedby': descriptionId }),\r\n            ...(invalid && { invalid: true, 'aria-invalid': true, 'aria-errormessage': errorMessageId }),\r\n        }),\r\n        [\r\n            readOnly,\r\n            title,\r\n            safeRtTitle,\r\n            labelId,\r\n            required,\r\n            subtitle,\r\n            safeRtSubtitle,\r\n            descriptionId,\r\n            invalid,\r\n            errorMessageId,\r\n        ]\r\n    );\r\n\r\n    const handleEntryChange = React.useMemo(\r\n        () =>\r\n            onEntryChange &&\r\n            ((newEntry: FormEntry): void => {\r\n                // Use the validators to validate the new entry.\r\n                const validation = mergeValidations(validators.map(validator => validator.validate(newEntry)));\r\n\r\n                // Set the entry's validity based on the failures.\r\n                newEntry.invalid = !validation.valid;\r\n\r\n                // If any validator fails and filling the form, set the error message and prevent change if necessary.\r\n                delete newEntry.errorMessage;\r\n                if (mode === FormMode.Filling && !validation.valid) {\r\n                    newEntry.errorMessage = validation.errorMessage;\r\n                    if (validation.preventChange) newEntry.answer = answer;\r\n                }\r\n\r\n                onEntryChange(newEntry);\r\n            }),\r\n        [onEntryChange, answer, validators, mode]\r\n    );\r\n\r\n    const field = (\r\n        <div>\r\n            <div className={styles.headerContainer}>\r\n                <div className={styles.labelContainer}>\r\n                    <label\r\n                        id={labelId}\r\n                        className={mergeStyles(styles.label, required && styles.requiredLabel)}\r\n                        // Justification: The label is sanitized before being rendered.\r\n                        // eslint-disable-next-line react/no-danger\r\n                        dangerouslySetInnerHTML={safeRtTitle}>\r\n                        {safeRtTitle ? undefined : title}\r\n                    </label>\r\n                    {tooltip && (\r\n                        <TooltipHost\r\n                            content={tooltip}\r\n                            directionalHint={DirectionalHint.rightCenter}\r\n                            directionalHintForRTL={DirectionalHint.leftCenter}>\r\n                            <Icon tabIndex={0} aria-hidden={false} iconName='Info' />\r\n                        </TooltipHost>\r\n                    )}\r\n                </div>\r\n                {(subtitle || safeRtSubtitle) && (\r\n                    <div\r\n                        id={descriptionId}\r\n                        className={styles.description}\r\n                        // Justification: The subtitle is sanitized before being rendered.\r\n                        // eslint-disable-next-line react/no-danger\r\n                        dangerouslySetInnerHTML={safeRtSubtitle}>\r\n                        {safeRtSubtitle ? undefined : subtitle}\r\n                    </div>\r\n                )}\r\n            </div>\r\n            <Component\r\n                {...props}\r\n                onEntryChange={handleEntryChange}\r\n                showPlaceholder={showPlaceholder}\r\n                delegatedProps={delegatedProps}\r\n            />\r\n            {invalid && (\r\n                <div id={errorMessageId} className={styles.errorMessage} role='alert'>\r\n                    {errorMessage}\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n\r\n    const Decorator =\r\n        mode === FormMode.Previewing\r\n            ? PreviewingDecorator\r\n            : mode === FormMode.Designing\r\n            ? DesigningDecorator\r\n            : undefined;\r\n\r\n    return Decorator ? (\r\n        <Decorator {...props} onEntryChange={handleEntryChange}>\r\n            {field}\r\n        </Decorator>\r\n    ) : (\r\n        field\r\n    );\r\n}\r\n","export * from './DecimalTextField';\r\n","import { TextField } from '@fluentui/react';\r\nimport React from 'react';\r\nimport { FormContext, FormEntry, FormMode, FormQuestionType, TextEntry } from '../../types';\r\nimport { useTextFieldStyles } from '../../utilities';\r\nimport { BaseDescriptor, FieldComponentTypeFactory } from './BaseDescriptor';\r\n\r\nconst defaultOptions = {\r\n    defaultPlaceholder: 'Enter your response',\r\n};\r\n\r\nexport type TextDescriptorOptions = Partial<typeof defaultOptions>;\r\n\r\nconst makeFieldComponent: FieldComponentTypeFactory<TextDescriptorOptions & typeof defaultOptions, TextEntry> =\r\n    ({ defaultPlaceholder }) =>\r\n    ({ entry, onEntryChange, showPlaceholder, delegatedProps }) => {\r\n        const { question, answer } = entry;\r\n        const { multiline, number } = question;\r\n\r\n        const value = answer.content ?? '';\r\n        const onChange = React.useCallback(\r\n            (_: unknown, value?: string) => {\r\n                if (number) value = value?.trim();\r\n                const newAnswer = { ...entry.answer };\r\n                newAnswer.content = value;\r\n                if (!newAnswer.content) delete newAnswer.content;\r\n\r\n                onEntryChange?.({ ...entry, answer: newAnswer });\r\n            },\r\n            [entry, number, onEntryChange]\r\n        );\r\n        const placeholder = showPlaceholder ? question.placeholder || defaultPlaceholder : undefined;\r\n\r\n        const textFieldStyles = useTextFieldStyles();\r\n\r\n        return (\r\n            <TextField\r\n                {...delegatedProps}\r\n                value={value}\r\n                onChange={onChange}\r\n                placeholder={placeholder}\r\n                multiline={multiline}\r\n                inputMode={number ? 'decimal' : 'text'}\r\n                resizable={false}\r\n                styles={textFieldStyles}\r\n            />\r\n        );\r\n    };\r\n\r\n/**\r\n * The descriptor that renders a text field for text entries.\r\n * It supports both single-line and multi-line text fields, either with or without number restrictions.\r\n */\r\nexport class TextDescriptor extends BaseDescriptor<TextEntry> {\r\n    protected readonly FieldComponent;\r\n\r\n    constructor(options?: TextDescriptorOptions) {\r\n        super();\r\n        this.FieldComponent = makeFieldComponent({ ...defaultOptions, ...options });\r\n    }\r\n\r\n    /**\r\n     * Tests whether the entry is a text entry, and the form is not in viewing mode.\r\n     *\r\n     * @param entry The entry to test.\r\n     * @param context The context.\r\n     * @returns Passes the test or not.\r\n     */\r\n    test(entry: FormEntry, context: FormContext): entry is TextEntry {\r\n        return entry.question.type === FormQuestionType.Text && context.mode !== FormMode.Viewing;\r\n    }\r\n}\r\n","import { isContrastTheme, makeStyles } from '@addressbook/components-fluentui-teams-theme';\r\nimport { fieldClassNames } from '../../utilities';\r\n\r\nconst actionsWidth = 48;\r\nconst horizontalExtendingMargin = 6;\r\nconst verticalExtendingMargin = 16;\r\n\r\nexport const useDesigningDecoratorStyles = makeStyles(theme => ({\r\n    root: {\r\n        margin: `-${horizontalExtendingMargin}px -${verticalExtendingMargin}px `,\r\n    },\r\n    inactive: {\r\n        marginInlineEnd: `${actionsWidth - horizontalExtendingMargin}px`,\r\n        padding: '15px',\r\n        border: '1px solid transparent',\r\n        ':hover, :focus': {\r\n            backgroundColor: isContrastTheme(theme.name) ? theme.palette.white : theme.palette.neutralLighter,\r\n            borderColor: isContrastTheme(theme.name) ? theme.palette.black : 'transparent',\r\n            [fieldClassNames]: {\r\n                backgroundColor: `${theme.palette.white} !important`,\r\n            },\r\n        },\r\n        borderRadius: '8px',\r\n        cursor: 'pointer',\r\n    },\r\n}));\r\n\r\nexport const useActiveDesigningDecoratorStyles = makeStyles(theme => ({\r\n    root: {\r\n        display: 'flex',\r\n        flexDirection: 'row',\r\n\r\n        overflow: 'hidden',\r\n        borderRadius: '8px',\r\n\r\n        borderWidth: '1px',\r\n        borderStyle: 'solid',\r\n        borderColor: isContrastTheme(theme.name) ? theme.palette.black : 'transparent',\r\n\r\n        borderInlineStartWidth: '4px',\r\n        borderInlineStartStyle: 'solid',\r\n        borderInlineStartColor: theme.palette.themePrimary,\r\n\r\n        [fieldClassNames]: {\r\n            backgroundColor: `${theme.palette.white} !important`,\r\n        },\r\n    },\r\n    settings: {\r\n        flexGrow: 1,\r\n\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        padding: '15px', // 16px - 1px (parent border)\r\n        paddingInlineStart: '12px', // 16px - 4px (parent border)\r\n        gap: '12px',\r\n        backgroundColor: isContrastTheme(theme.name) ? theme.palette.white : theme.palette.neutralLighter,\r\n\r\n        borderInlineEndWidth: '1px',\r\n        borderInlineEndStyle: 'solid',\r\n        borderInlineEndColor: isContrastTheme(theme.name) ? theme.palette.black : 'transparent',\r\n    },\r\n    separator: {\r\n        height: '1px',\r\n        marginBlock: '7.5px',\r\n        backgroundColor: theme.palette.neutralTertiaryAlt,\r\n    },\r\n    actions: {\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        alignItems: 'center',\r\n        gap: '8px',\r\n\r\n        padding: '7px', // 8px - 1px (parent border)\r\n        paddingInlineStart: '8px',\r\n\r\n        backgroundColor: theme.palette.neutralLighterAlt,\r\n        '.ms-Button-menuIcon': {\r\n            display: 'none',\r\n        },\r\n    },\r\n}));\r\n","/* istanbul ignore file */\r\n\r\nimport { ICheckboxStyleProps, ICheckboxStyles, ITheme, IStyleFunctionOrObject } from '@fluentui/react';\r\nimport { FontSizes } from '../teams-sizes';\r\nimport { isContrastTheme } from '../teams-theme';\r\nimport { teamsBorderRadius } from './constants';\r\n\r\nexport function getCheckboxStyles(\r\n    themeName: string,\r\n    _theme: ITheme\r\n): IStyleFunctionOrObject<ICheckboxStyleProps, ICheckboxStyles> {\r\n    return (props: ICheckboxStyleProps): Partial<ICheckboxStyles> => {\r\n        const { disabled, checked, theme } = props;\r\n        const { palette } = theme;\r\n\r\n        let CHECKBOX_BORDER_COLOR = palette.neutralTertiary;\r\n        let CHECKBOX_BORDER_HOVER_COLOR = palette.black;\r\n        let CHECKBOX_MARK_HOVER_COLOR = palette.black;\r\n        const CHECKBOX_LABEL_COLOR = palette.black;\r\n        let CHECKBOX_DISABLED_LABEL_COLOR = palette.neutralTertiary;\r\n\r\n        const CHECKBOX_COLOR = palette.themePrimary;\r\n        const CHECKBOX_CHECKED_HOVER_COLOR = palette.black;\r\n        const CHECKMARK_COLOR = palette.white;\r\n\r\n        if (isContrastTheme(themeName)) {\r\n            CHECKBOX_BORDER_COLOR = 'green';\r\n            CHECKBOX_DISABLED_LABEL_COLOR = 'green';\r\n            CHECKBOX_BORDER_HOVER_COLOR = palette.accent;\r\n            CHECKBOX_MARK_HOVER_COLOR = palette.accent;\r\n        }\r\n\r\n        const styles = {\r\n            input: {\r\n                // Work around for fluentui button focus outline not showing in iOS Safari.\r\n                ':focus-visible + label, .ms-Fabric--isFocusVisible &:focus + label': {\r\n                    '::before': {\r\n                        content: '\"\"',\r\n                        position: 'absolute',\r\n                        inset: 0,\r\n                        outline: `1px solid ${theme.palette.black}`,\r\n                        borderRadius: teamsBorderRadius,\r\n                    },\r\n                },\r\n            },\r\n            checkbox: [\r\n                {\r\n                    borderRadius: 4,\r\n                    height: 17,\r\n                    width: 17,\r\n                },\r\n                !disabled &&\r\n                    !checked && {\r\n                        borderColor: palette.black,\r\n                    },\r\n                disabled && {\r\n                    borderColor: CHECKBOX_BORDER_COLOR,\r\n                },\r\n                checked &&\r\n                    disabled && {\r\n                        background: CHECKBOX_BORDER_COLOR,\r\n                        borderColor: CHECKBOX_BORDER_COLOR,\r\n                    },\r\n                !disabled &&\r\n                    checked && {\r\n                        background: palette.themePrimary,\r\n                    },\r\n            ],\r\n            checkmark: [\r\n                {\r\n                    fontWeight: 'bold',\r\n                    fontSize: FontSizes.size12,\r\n                    border: 'none',\r\n                    background: 'none',\r\n                    color: CHECKMARK_COLOR,\r\n                },\r\n            ],\r\n            root: [\r\n                {\r\n                    color: palette.neutralDark,\r\n                    selectors: {\r\n                        a: {\r\n                            color: 'inherit',\r\n                            selectors: {\r\n                                ':link': {\r\n                                    color: 'inherit',\r\n                                },\r\n                                ':visited': {\r\n                                    color: 'inherit',\r\n                                },\r\n                                ':hover': {\r\n                                    color: 'inherit',\r\n                                },\r\n                            },\r\n                        },\r\n                    },\r\n                },\r\n                !disabled &&\r\n                    checked && {\r\n                        color: palette.black,\r\n                        selectors: {\r\n                            '.ms-Checkbox-checkbox': {\r\n                                background: CHECKBOX_COLOR,\r\n                                borderColor: CHECKBOX_COLOR,\r\n                            },\r\n                            '.ms-Checkbox-text': {\r\n                                color: CHECKBOX_CHECKED_HOVER_COLOR,\r\n                            },\r\n                            ':hover': {\r\n                                color: palette.black,\r\n                                selectors: {\r\n                                    '.ms-Checkbox-checkbox': {\r\n                                        background: CHECKBOX_COLOR,\r\n                                        borderColor: CHECKBOX_COLOR,\r\n                                    },\r\n                                    '.ms-Checkbox-text': {\r\n                                        color: CHECKBOX_CHECKED_HOVER_COLOR,\r\n                                    },\r\n                                },\r\n                            },\r\n                        },\r\n                    },\r\n                !disabled &&\r\n                    !checked && {\r\n                        color: palette.neutralDark,\r\n                        selectors: {\r\n                            ':hover': {\r\n                                selectors: {\r\n                                    '.ms-Checkbox-text': {\r\n                                        color: palette.neutralDark,\r\n                                    },\r\n                                    '.ms-Checkbox-checkbox': {\r\n                                        border: `1px solid ${CHECKBOX_BORDER_HOVER_COLOR}`,\r\n                                    },\r\n                                    '.ms-Checkbox-checkmark': {\r\n                                        color: CHECKBOX_MARK_HOVER_COLOR,\r\n                                    },\r\n                                },\r\n                            },\r\n                        },\r\n                    },\r\n            ],\r\n            label: [\r\n                {\r\n                    alignItems: 'center',\r\n                },\r\n            ],\r\n            text: [\r\n                disabled && {\r\n                    color: CHECKBOX_DISABLED_LABEL_COLOR,\r\n                },\r\n                !disabled &&\r\n                    checked && {\r\n                        color: CHECKBOX_LABEL_COLOR,\r\n                    },\r\n\r\n                !disabled &&\r\n                    !checked && {\r\n                        color: palette.neutralDark,\r\n                    },\r\n            ],\r\n        } as Partial<ICheckboxStyles>;\r\n\r\n        return styles;\r\n    };\r\n}\r\n","import { ImageSize, isDefined, isImageMime, measureImage } from '@addressbook/utilities-core';\r\nimport { BehaviorSubject } from 'rxjs';\r\nimport { distinctUntilChanged, filter, map } from 'rxjs/operators';\r\nimport { RichTextFileStorageService } from '../../types';\r\n\r\n/**\r\n * A key to identify a file session.\r\n */\r\nexport type FileSessionKey = string;\r\n\r\n/**\r\n * A file session that contains the file URL, blob, thumbnail, image size, loading status, error, and retry function.\r\n */\r\nexport interface FileSession {\r\n    url?: string;\r\n    blob?: Blob;\r\n    thumbnail?: Blob;\r\n    imageSize?: ImageSize;\r\n    loading?: boolean;\r\n    error?: Error;\r\n    retry?: () => void;\r\n}\r\n\r\nexport const defaultFileSession: FileSession = {};\r\n\r\n/**\r\n * A class to manage file sessions.\r\n */\r\nexport class FileSessions {\r\n    private sessions$ = new BehaviorSubject<Record<FileSessionKey, FileSession>>({});\r\n\r\n    constructor(private service: RichTextFileStorageService) {}\r\n\r\n    /**\r\n     * Get the file session by the key.\r\n     *\r\n     * @param key The key to identify the file session.\r\n     * @returns The file session.\r\n     */\r\n    get(key: FileSessionKey): FileSession | undefined {\r\n        return this.sessions$.value[key];\r\n    }\r\n\r\n    /**\r\n     * Subscribe to the file session changes.\r\n     *\r\n     * @param key The key to identify the file session.\r\n     * @param onChange The callback to be called when the file session changes.\r\n     * @returns A function to unsubscribe the changes.\r\n     */\r\n    subscribe(key: FileSessionKey, onChange: (session: FileSession) => void): () => void {\r\n        const subscription = this.sessions$\r\n            .pipe(\r\n                map(sessions => sessions[key]),\r\n                filter(isDefined),\r\n                distinctUntilChanged()\r\n            )\r\n            .subscribe({ next: onChange });\r\n\r\n        return () => subscription.unsubscribe();\r\n    }\r\n\r\n    /**\r\n     * Manage an upload file session.\r\n     *\r\n     * @param key The key to identify the file session.\r\n     * @param file The file to be uploaded.\r\n     */\r\n    upload(key: FileSessionKey, file: File): void {\r\n        if (this.get(key)) return;\r\n\r\n        this.put(key, { blob: file });\r\n        this.performUpload(key, file);\r\n    }\r\n\r\n    /**\r\n     * Manage a download file session.\r\n     *\r\n     * @param key The key to identify the file session.\r\n     * @param url The URL to download the file.\r\n     */\r\n    download(key: FileSessionKey, url: string): void {\r\n        if (this.get(key)) return;\r\n\r\n        this.put(key, { url });\r\n        this.performDownload(key, url);\r\n        this.performThumbnail(key, url);\r\n    }\r\n\r\n    /**\r\n     * Manage a thumbnail file session.\r\n     *\r\n     * @param key The key to identify the file session.\r\n     * @param url The URL to thumbnail the file.\r\n     */\r\n    thumbnail(key: FileSessionKey, url: string): void {\r\n        if (this.get(key)) return;\r\n\r\n        this.put(key, { url });\r\n        this.performThumbnail(key, url);\r\n    }\r\n\r\n    private put(key: FileSessionKey, session: FileSession): void {\r\n        this.sessions$.next({ ...this.sessions$.value, [key]: session });\r\n    }\r\n\r\n    private update(key: FileSessionKey, callback: (session: FileSession) => FileSession, preventClean?: boolean): void {\r\n        const session = this.sessions$.value[key];\r\n        const newSession = callback(preventClean ? session : cleanFileSession(session));\r\n        this.put(key, newSession);\r\n    }\r\n\r\n    private async performUpload(key: FileSessionKey, file: File): Promise<void> {\r\n        try {\r\n            const imageSize = await this.measureImageInternal(key, file);\r\n            const url = await this.uploadInternal(key, file);\r\n\r\n            const thumbnail = await this.thumbnailInternal(key, url);\r\n            if (thumbnail && !imageSize) await this.measureImageInternal(key, file);\r\n        } catch {\r\n            // Ignore any error intentionally\r\n        }\r\n    }\r\n\r\n    private async performDownload(key: FileSessionKey, url: string): Promise<void> {\r\n        try {\r\n            const blob = await this.downloadInternal(key, url);\r\n            await this.measureImageInternal(key, blob);\r\n        } catch {\r\n            // Ignore any error intentionally\r\n        }\r\n    }\r\n\r\n    private async performThumbnail(key: FileSessionKey, url: string): Promise<void> {\r\n        try {\r\n            const thumbnail = await this.thumbnailInternal(key, url);\r\n            if (thumbnail) await this.measureImageInternal(key, thumbnail, true);\r\n        } catch {\r\n            // Ignore any error intentionally\r\n        }\r\n    }\r\n\r\n    private handleError(key: FileSessionKey, error: Error): Promise<void> {\r\n        return new Promise<void>(resolve => this.update(key, session => ({ ...session, error, retry: resolve })));\r\n    }\r\n\r\n    private async uploadInternal(key: FileSessionKey, file: File): Promise<string> {\r\n        while (true) {\r\n            try {\r\n                this.update(key, session => ({ ...session, loading: true }));\r\n                const url = await this.service.upload(file);\r\n                this.update(key, session => ({ ...session, url }));\r\n                return url;\r\n            } catch (e) {\r\n                await this.handleError(key, coerceError(e));\r\n            }\r\n        }\r\n    }\r\n\r\n    private async downloadInternal(key: FileSessionKey, url: string): Promise<Blob> {\r\n        while (true) {\r\n            try {\r\n                this.update(key, session => ({ ...session, loading: true }));\r\n                const blob = await this.service.download(url);\r\n                this.update(key, session => ({ ...session, blob }));\r\n                return blob;\r\n            } catch (error) {\r\n                await this.handleError(key, coerceError(error));\r\n            }\r\n        }\r\n    }\r\n\r\n    private async thumbnailInternal(key: FileSessionKey, url: string): Promise<Blob | undefined> {\r\n        if (!this.service.thumbnail) return;\r\n\r\n        // The thumbnail is optional, so we don't manage loading and error states here\r\n        try {\r\n            const thumbnail = await this.service.thumbnail(url);\r\n            this.update(key, session => ({ ...session, thumbnail }), true);\r\n            return thumbnail;\r\n        } catch {\r\n            // Ignore any error intentionally\r\n        }\r\n    }\r\n\r\n    private async measureImageInternal(\r\n        key: FileSessionKey,\r\n        blob: Blob,\r\n        preventOverride?: boolean\r\n    ): Promise<ImageSize | undefined> {\r\n        if (!isImageMime(blob.type)) return;\r\n\r\n        try {\r\n            const imageSize = await measureImage(blob);\r\n            this.update(\r\n                key,\r\n                session => (preventOverride && session.imageSize ? session : { ...session, imageSize }),\r\n                true\r\n            );\r\n            return imageSize;\r\n        } catch {\r\n            // Ignore any error intentionally\r\n        }\r\n    }\r\n}\r\n\r\nfunction coerceError(error: unknown): Error {\r\n    return error instanceof Error ? error : new Error('Unknown error');\r\n}\r\n\r\nfunction cleanFileSession(session: FileSession): FileSession {\r\n    const newSession = { ...session };\r\n    delete newSession.loading;\r\n    delete newSession.error;\r\n    delete newSession.retry;\r\n    return newSession;\r\n}\r\n\r\n/**\r\n * Check if the file session is valid. A session is considered invalid if it does not have a URL or a blob, which means\r\n * the file cannot be uploaded or downloaded.\r\n *\r\n * @param session The file session.\r\n * @returns `true` if the file session is valid, otherwise `false`.\r\n */\r\nexport function isValidFileSession(session: FileSession): boolean {\r\n    return Boolean(session.blob || session.url);\r\n}\r\n","import { BaseFormContext } from '../../abstractions';\r\nimport { FormEntry } from './entries';\r\n\r\nexport enum FormMode {\r\n    Previewing,\r\n    Designing,\r\n    Filling,\r\n    Viewing,\r\n}\r\n\r\n/**\r\n * The context of a form, which is mutable during the lifecycle of the form.\r\n *\r\n * @property mode The mode of the form.\r\n */\r\nexport interface FormContext extends BaseFormContext<FormEntry> {\r\n    mode: FormMode;\r\n}\r\n","export * from './SecondarySettings';\r\n","import { FormEntry, Validation, ValidationFailure, Validator } from '../../types';\r\nimport { createValidationSuccess } from '../../utilities';\r\n\r\nexport interface RequiredValidatorOptions {\r\n    errorMessage?: string;\r\n}\r\n\r\nconst defaultErrorMessage = 'This field is required';\r\n\r\n/**\r\n * A validator that checks if the answer is empty.\r\n * If the question is not required, this validator will always pass.\r\n * Otherwise, this validator will fail if the answer is empty.\r\n */\r\nexport class RequiredValidator implements Validator<FormEntry> {\r\n    private errorMessage: string;\r\n\r\n    /**\r\n     * Creates a required validator.\r\n     *\r\n     * @param options.errorMessage The error message if the answer is empty.\r\n     * @returns A required validator.\r\n     */\r\n    constructor({ errorMessage = defaultErrorMessage }: RequiredValidatorOptions = {}) {\r\n        this.errorMessage = errorMessage;\r\n    }\r\n\r\n    validate({ question, answer }: FormEntry): Validation {\r\n        if (!question.required) {\r\n            return createValidationSuccess();\r\n        }\r\n\r\n        const content = answer.content;\r\n\r\n        // Check for undefined.\r\n        if (content === undefined) {\r\n            return this.createValidationFailure();\r\n        }\r\n\r\n        // Check for string.\r\n        if (typeof content === 'string') {\r\n            return content ? createValidationSuccess() : this.createValidationFailure();\r\n        }\r\n\r\n        // Check for choice answer.\r\n        if (typeof content === 'object' && 'chosen' in content) {\r\n            return content.chosen.length || content.other ? createValidationSuccess() : this.createValidationFailure();\r\n        }\r\n\r\n        return createValidationSuccess();\r\n    }\r\n\r\n    private createValidationFailure(): ValidationFailure {\r\n        return { valid: false, errorMessage: this.errorMessage };\r\n    }\r\n}\r\n","import { Mark, mergeAttributes } from '@tiptap/core';\r\nimport { DOMOutputSpec } from '@tiptap/pm/model';\r\nimport { MarkRenderHTMLProps } from './types';\r\n\r\ndeclare module '@tiptap/core' {\r\n    interface Commands<ReturnType> {\r\n        link: {\r\n            /**\r\n             * Set a link\r\n             */\r\n            setLink: (attributes: { href: string; target?: string | null; rel?: string | null }) => ReturnType;\r\n\r\n            /**\r\n             * Toggle a link\r\n             */\r\n            toggleLink: (attributes: { href: string; target?: string | null; rel?: string | null }) => ReturnType;\r\n\r\n            /**\r\n             * Unset a link\r\n             */\r\n            unsetLink: () => ReturnType;\r\n\r\n            /**\r\n             * Insert a link\r\n             */\r\n            insertLink: (\r\n                text: string,\r\n                attributes: { href: string; target?: string | null; rel?: string | null }\r\n            ) => ReturnType;\r\n        };\r\n    }\r\n}\r\n\r\nexport interface LinkOptions {\r\n    HTMLAttributes: Record<string, any>;\r\n}\r\n\r\nexport const Link = Mark.create<LinkOptions>({\r\n    name: 'link',\r\n    priority: 1000,\r\n    keepOnSplit: false,\r\n    inclusive: false,\r\n\r\n    addOptions() {\r\n        return {\r\n            HTMLAttributes: {\r\n                target: '_blank',\r\n                rel: 'noopener noreferrer',\r\n            },\r\n        };\r\n    },\r\n\r\n    addAttributes() {\r\n        return {\r\n            href: {\r\n                default: null,\r\n            },\r\n            target: {\r\n                default: this.options.HTMLAttributes.target,\r\n            },\r\n            rel: {\r\n                default: this.options.HTMLAttributes.rel,\r\n            },\r\n        };\r\n    },\r\n\r\n    parseHTML() {\r\n        return [{ tag: 'a:not([href^=\"javascript:\"])' }];\r\n    },\r\n\r\n    renderHTML({ HTMLAttributes }: MarkRenderHTMLProps): DOMOutputSpec {\r\n        return ['a', mergeAttributes(this.options.HTMLAttributes, HTMLAttributes), 0];\r\n    },\r\n\r\n    addCommands() {\r\n        return {\r\n            setLink:\r\n                attributes =>\r\n                ({ chain }) =>\r\n                    chain().setMark(this.name, attributes).run(),\r\n            toggleLink:\r\n                attributes =>\r\n                ({ chain }) =>\r\n                    chain().toggleMark(this.name, attributes, { extendEmptyMarkRange: true }).run(),\r\n            unsetLink:\r\n                () =>\r\n                ({ chain }) =>\r\n                    chain().unsetMark(this.name, { extendEmptyMarkRange: true }).run(),\r\n            insertLink:\r\n                (text, attributes) =>\r\n                ({ tr, dispatch, state }) => {\r\n                    const { selection } = tr;\r\n                    const { from, to } = selection;\r\n\r\n                    const mark = state.schema.marks.link.create(attributes);\r\n                    tr.insertText(text, from, to).addMark(from, from + text.length, mark);\r\n\r\n                    dispatch?.(tr);\r\n                    return true;\r\n                },\r\n        };\r\n    },\r\n});\r\n","/* istanbul ignore file */\r\n\r\nimport { ILabelStyleProps, ILabelStyles, FontWeights } from '@fluentui/react';\r\n\r\nexport const LabelStyles = (props: ILabelStyleProps): Partial<ILabelStyles> => {\r\n    const { theme, disabled } = props;\r\n    const { palette } = theme;\r\n\r\n    return {\r\n        root: [\r\n            {\r\n                fontWeight: FontWeights.semibold,\r\n                color: palette.black,\r\n                ':after': { color: theme.palette.redDark },\r\n            },\r\n            disabled && {\r\n                opacity: '.65',\r\n            },\r\n        ],\r\n    };\r\n};\r\n","import { makeStyles } from '@addressbook/components-fluentui-teams-theme';\r\n\r\nexport const useSecondarySettingsStyles = makeStyles({\r\n    row: {\r\n        display: 'flex',\r\n        flexDirection: 'row',\r\n        alignItems: 'center',\r\n        gap: '12px 24px',\r\n        flexWrap: 'wrap',\r\n        '> .ms-Dropdown-container': { flexBasis: '200px' },\r\n    },\r\n});\r\n","import { Dropdown, ResponsiveMode, TextField, mergeStyles } from '@fluentui/react';\r\nimport React from 'react';\r\nimport { ChoiceAppearance, ChoiceEntry, FormContext, FormEntry, FormMode, FormQuestionType } from '../../types';\r\nimport {\r\n    useDropdownStyles,\r\n    useTextFieldStyles,\r\n    useChoiceChange,\r\n    useChosenAndOther,\r\n    useShuffled,\r\n} from '../../utilities';\r\nimport { BaseDescriptor, FieldComponentTypeFactory } from './BaseDescriptor';\r\n\r\nconst containerClassName = mergeStyles({\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    gap: '8px',\r\n});\r\n\r\nconst defaultOptions = {\r\n    defaultPlaceholder: 'Select your response',\r\n    otherText: 'Other',\r\n    otherPlaceholder: 'Enter your response',\r\n};\r\n\r\nexport type DropdownChoiceDescriptorOptions = Partial<typeof defaultOptions>;\r\n\r\nconst makeFieldComponent: FieldComponentTypeFactory<\r\n    DropdownChoiceDescriptorOptions & typeof defaultOptions,\r\n    ChoiceEntry\r\n> =\r\n    ({ defaultPlaceholder, otherText, otherPlaceholder }) =>\r\n    ({ entry, onEntryChange, showPlaceholder, delegatedProps }) => {\r\n        const { question, answer } = entry;\r\n        const { choices, shuffle, allowOther } = question;\r\n\r\n        const shuffledChoices = useShuffled({ array: choices, enabled: shuffle && !delegatedProps.readOnly });\r\n        const onChange = useChoiceChange(entry, onEntryChange);\r\n        const { chosen, otherKey, otherValue, otherSelected } = useChosenAndOther(choices, answer.content);\r\n\r\n        const options = shuffledChoices.map(choice => ({ key: choice, text: choice }));\r\n        if (allowOther) options.push({ key: otherKey, text: otherText });\r\n\r\n        const placeholder = showPlaceholder ? question.placeholder || defaultPlaceholder : undefined;\r\n\r\n        const dropdownStyles = useDropdownStyles();\r\n        const textFieldStyles = useTextFieldStyles();\r\n\r\n        return (\r\n            <div className={containerClassName}>\r\n                <Dropdown\r\n                    {...delegatedProps}\r\n                    selectedKey={otherSelected ? otherKey : chosen[0] ?? null}\r\n                    options={options}\r\n                    onChange={\r\n                        onChange &&\r\n                        ((_, option) =>\r\n                            option && (option.key === otherKey ? onChange([], '') : onChange([option.key as string])))\r\n                    }\r\n                    placeholder={placeholder}\r\n                    // Disable responsive mode to prevent the dropdown from being rendered as a panel.\r\n                    responsiveMode={ResponsiveMode.unknown}\r\n                    styles={dropdownStyles}\r\n                />\r\n                {otherSelected && (\r\n                    <TextField\r\n                        {...delegatedProps}\r\n                        value={otherValue}\r\n                        onChange={onChange && ((_, newValue) => onChange([], newValue))}\r\n                        placeholder={showPlaceholder ? otherPlaceholder : undefined}\r\n                        styles={textFieldStyles}\r\n                    />\r\n                )}\r\n            </div>\r\n        );\r\n    };\r\n\r\n/**\r\n * The descriptor that renders a dropdown for choice entries with dropdown appearance.\r\n */\r\nexport class DropdownChoiceDescriptor extends BaseDescriptor<ChoiceEntry> {\r\n    protected readonly FieldComponent;\r\n\r\n    constructor(options?: DropdownChoiceDescriptorOptions) {\r\n        super();\r\n        this.FieldComponent = makeFieldComponent({ ...defaultOptions, ...options });\r\n    }\r\n\r\n    /**\r\n     * Tests whether the entry is a choice entry with dropdown appearance, and the form is not in viewing mode.\r\n     *\r\n     * @param entry The entry to test.\r\n     * @param context The context.\r\n     * @returns Passes the test or not.\r\n     */\r\n    test(entry: FormEntry, context: FormContext): entry is ChoiceEntry {\r\n        return (\r\n            entry.question.type === FormQuestionType.Choice &&\r\n            entry.question.appearance === ChoiceAppearance.Dropdown &&\r\n            context.mode !== FormMode.Viewing\r\n        );\r\n    }\r\n}\r\n","/* istanbul ignore file */\r\n\r\nimport { IModalStyles, ITheme, IRawStyle } from '@fluentui/react';\r\nimport { ShadowLevels } from '../teams-shadow-levels';\r\nimport { CoreColors, ContrastColors, DarkColors } from '../teams-colors';\r\nimport { isContrastTheme, isDarkTheme } from '../teams-theme';\r\nimport { teamsBorderRadius } from './constants';\r\n\r\nexport function getModalStyles(themeName: string, theme: ITheme, isMobile?: boolean): Partial<IModalStyles> {\r\n    const MODAL_MIN_WIDTH = isMobile ? undefined : '400px';\r\n    const MODAL_MIN_HEIGHT = '116px';\r\n    const BORDER_WIDTH = '1px';\r\n\r\n    const styles = {\r\n        root: {\r\n            backgroundColor: 'none',\r\n            selectors: {\r\n                '.ms-Overlay--dark': {\r\n                    backgroundColor: CoreColors.overlayBackground,\r\n                },\r\n            },\r\n        },\r\n\r\n        main: {\r\n            backgroundColor: theme.palette.white,\r\n            borderRadius: teamsBorderRadius,\r\n            color: theme.palette.black,\r\n            borderWidth: BORDER_WIDTH,\r\n            borderStyle: 'solid',\r\n            borderColor: CoreColors.appBlackAlpha10,\r\n            boxShadow: ShadowLevels.shadowLevel4,\r\n            minWidth: `${MODAL_MIN_WIDTH} !important`,\r\n            minHeight: `${MODAL_MIN_HEIGHT} !important`,\r\n        },\r\n    } as Partial<IModalStyles>;\r\n\r\n    const iRawStyle = (styles.root as Required<IRawStyle>).selectors['.ms-Overlay--dark'] as IRawStyle;\r\n\r\n    // Dark theme overrides\r\n    if (isDarkTheme(themeName)) {\r\n        if (iRawStyle) {\r\n            iRawStyle.backgroundColor = DarkColors.overlayBackground;\r\n        }\r\n\r\n        (styles.main as IRawStyle).backgroundColor = theme.palette.neutralLight;\r\n        (styles.main as IRawStyle).borderColor = theme.palette.white;\r\n    }\r\n\r\n    // Contrast theme overrides\r\n    if (isContrastTheme(themeName)) {\r\n        if (iRawStyle) {\r\n            iRawStyle.backgroundColor = ContrastColors.overlayBackground;\r\n        }\r\n\r\n        (styles.main as IRawStyle).borderColor = theme.palette.black;\r\n    }\r\n    return styles;\r\n}\r\n","import { BaseFormAnswer, BaseFormEntry, BaseFormQuestion, FormQuestionType } from './base';\r\n\r\nexport enum TextNumberRestrictionType {\r\n    GreaterThan,\r\n    GreaterThanOrEqualTo,\r\n    LessThan,\r\n    LessThanOrEqualTo,\r\n    EqualTo,\r\n    NotEqualTo,\r\n    Between,\r\n    NotBetween,\r\n}\r\n\r\nexport interface TextNumberRestrictionWithMin {\r\n    type: TextNumberRestrictionType.GreaterThan | TextNumberRestrictionType.GreaterThanOrEqualTo;\r\n    min: number;\r\n}\r\n\r\nexport interface TextNumberRestrictionWithMax {\r\n    type: TextNumberRestrictionType.LessThan | TextNumberRestrictionType.LessThanOrEqualTo;\r\n    max: number;\r\n}\r\n\r\nexport interface TextNumberRestrictionWithValue {\r\n    type: TextNumberRestrictionType.EqualTo | TextNumberRestrictionType.NotEqualTo;\r\n    value: number;\r\n}\r\n\r\nexport interface TextNumberRestrictionWithMinAndMax {\r\n    type: TextNumberRestrictionType.Between | TextNumberRestrictionType.NotBetween;\r\n    min: number;\r\n    max: number;\r\n}\r\n\r\nexport type TextNumberRestriction =\r\n    | TextNumberRestrictionWithMin\r\n    | TextNumberRestrictionWithMax\r\n    | TextNumberRestrictionWithValue\r\n    | TextNumberRestrictionWithMinAndMax;\r\n\r\nexport type TextNumberRestrictionValueKey = 'min' | 'max' | 'value';\r\n\r\n/**\r\n * A text question.\r\n *\r\n * @property multiline Whether the question is a multiline text.\r\n * @property number Whether the question is a number.\r\n * @property restriction The restriction of the field.\r\n */\r\nexport interface TextQuestion extends BaseFormQuestion<FormQuestionType.Text> {\r\n    multiline?: boolean;\r\n    number?: boolean;\r\n    restriction?: TextNumberRestriction;\r\n}\r\n\r\nexport type TextAnswer = BaseFormAnswer<string>;\r\n\r\nexport type TextEntry = BaseFormEntry<TextQuestion, TextAnswer>;\r\n","export * from './FormFacade';\r\n","/* istanbul ignore file */\r\n\r\nimport {\r\n    IChoiceGroupOptionStyleProps,\r\n    IChoiceGroupOptionStyles,\r\n    IStyleFunctionOrObject,\r\n    ITheme,\r\n} from '@fluentui/react';\r\nimport { ContrastColors } from '../teams-colors';\r\nimport { isContrastTheme } from '../teams-theme';\r\nimport { teamsBorderRadius } from './constants';\r\n\r\nexport function getChoiceGroupOptionStyles(\r\n    themeName: string,\r\n    _theme: ITheme\r\n): IStyleFunctionOrObject<IChoiceGroupOptionStyleProps, IChoiceGroupOptionStyles> {\r\n    return (props: IChoiceGroupOptionStyleProps) => {\r\n        const { disabled, checked, theme } = props;\r\n        const { palette } = theme;\r\n\r\n        let CHOICEGROUPOPTION_BORDER_COLOR = palette.neutralTertiary;\r\n        let CHECKBOX_LABEL_COLOR = palette.neutralTertiary;\r\n\r\n        if (isContrastTheme(themeName)) {\r\n            CHOICEGROUPOPTION_BORDER_COLOR = ContrastColors.appGreenContrast;\r\n            CHECKBOX_LABEL_COLOR = ContrastColors.appGreenContrast;\r\n        }\r\n\r\n        const styles = {\r\n            choiceFieldWrapper: [\r\n                {\r\n                    background: 'transparent',\r\n                    // Work around for fluentui button focus outline not showing in iOS Safari.\r\n                    position: 'relative',\r\n                    ':has(.ms-ChoiceField-input:focus-visible), .ms-Fabric--isFocusVisible &:has(.ms-ChoiceField-input:focus)':\r\n                        {\r\n                            '::after': {\r\n                                border: 'none',\r\n                                content: '\"\"',\r\n                                position: 'absolute',\r\n                                inset: 0,\r\n                                outline: `1px solid ${theme.palette.black}`,\r\n                                borderRadius: teamsBorderRadius,\r\n                            },\r\n                        },\r\n                },\r\n                disabled && {\r\n                    color: CHECKBOX_LABEL_COLOR,\r\n                },\r\n                !disabled &&\r\n                    checked && {\r\n                        color: palette.black,\r\n                    },\r\n\r\n                !disabled &&\r\n                    !checked && {\r\n                        color: palette.neutralDark,\r\n                    },\r\n            ],\r\n            field: [\r\n                {\r\n                    selectors: {\r\n                        '.ms-ChoiceField-field': {\r\n                            color: 'inherit',\r\n                        },\r\n                        '.ms-ChoiceFieldLabel': {\r\n                            color: 'inherit',\r\n                        },\r\n                        ':hover': [\r\n                            !disabled && {\r\n                                selectors: {\r\n                                    ':before': {\r\n                                        borderColor: palette.black,\r\n                                    },\r\n                                },\r\n                            },\r\n                        ],\r\n                    },\r\n                },\r\n                !disabled &&\r\n                    !checked && {\r\n                        selectors: {\r\n                            ':before': {\r\n                                borderColor: palette.neutralDark,\r\n                            },\r\n                        },\r\n                    },\r\n                !disabled &&\r\n                    checked && {\r\n                        color: palette.black,\r\n                        selectors: {\r\n                            ':before': {\r\n                                borderColor: palette.themePrimary,\r\n                            },\r\n                            ':after': {\r\n                                borderColor: palette.themePrimary,\r\n                            },\r\n                        },\r\n                    },\r\n                disabled &&\r\n                    !checked && {\r\n                        selectors: {\r\n                            ':before': {\r\n                                borderColor: CHOICEGROUPOPTION_BORDER_COLOR,\r\n                                background: 'transparent',\r\n                            },\r\n                            ':after': {\r\n                                borderColor: CHOICEGROUPOPTION_BORDER_COLOR,\r\n                            },\r\n                        },\r\n                    },\r\n                disabled &&\r\n                    checked && {\r\n                        selectors: {\r\n                            ':before': {\r\n                                borderColor: CHOICEGROUPOPTION_BORDER_COLOR,\r\n                                background: 'transparent',\r\n                            },\r\n                            ':after': {\r\n                                borderColor: CHOICEGROUPOPTION_BORDER_COLOR,\r\n                            },\r\n                        },\r\n                    },\r\n            ],\r\n        } as Partial<IChoiceGroupOptionStyles>;\r\n\r\n        return styles;\r\n    };\r\n}\r\n","/* istanbul ignore file */\r\n\r\nimport { IButtonStyles, IRawStyle, ITheme } from '@fluentui/react';\r\nimport { ContrastColors } from '../teams-colors';\r\nimport { ShadowLevels } from '../teams-shadow-levels';\r\nimport { isContrastTheme } from '../teams-theme';\r\nimport { teamsBorderRadius } from './constants';\r\n\r\nexport function getIconButtonStyles(themeName: string, theme: ITheme): Partial<IButtonStyles> {\r\n    const styles = {\r\n        root: {\r\n            background: 'none',\r\n            color: theme.palette.black,\r\n            // Inherits the icon color from root\r\n            '.ms-Icon': {\r\n                color: 'unset',\r\n            },\r\n            // Work around for fluentui button focus outline not showing in iOS Safari.\r\n            ':focus-visible, .ms-Fabric--isFocusVisible &:focus': {\r\n                '::after': {\r\n                    content: '\"\"',\r\n                    position: 'absolute',\r\n                    inset: '2px',\r\n                    outline: `1px solid ${theme.palette.black}`,\r\n                    borderRadius: teamsBorderRadius,\r\n                },\r\n            },\r\n        },\r\n        rootHovered: {\r\n            backgroundColor: 'none',\r\n            color: theme.palette.accent,\r\n            boxShadow: 'none',\r\n        },\r\n        rootExpanded: {\r\n            boxShadow: 'none',\r\n        },\r\n        rootPressed: {\r\n            background: 'none',\r\n        },\r\n        rootDisabled: {\r\n            color: isContrastTheme(themeName) ? ContrastColors.appGreenContrast : undefined,\r\n        },\r\n    } as Partial<IButtonStyles>;\r\n\r\n    // Contrast theme overrides\r\n    if (isContrastTheme(themeName)) {\r\n        // Root Hovered\r\n        const rootHovered = styles.rootHovered as IRawStyle;\r\n        rootHovered.backgroundColor = theme.palette.themeDark;\r\n        rootHovered.color = theme.palette.white;\r\n        rootHovered.boxShadow = ShadowLevels.shadowLevel6;\r\n\r\n        // Menu is expanded\r\n        const rootExpanded = styles.rootExpanded as IRawStyle;\r\n        rootExpanded.boxShadow = ShadowLevels.shadowLevel6;\r\n    }\r\n    return styles;\r\n}\r\n","import { makeStyles } from '@addressbook/components-fluentui-teams-theme';\r\n\r\nexport const useFormFacadeStyles = makeStyles({\r\n    root: {\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        gap: '16px',\r\n    },\r\n});\r\n","import { Extension } from '@tiptap/core';\r\n\r\ndeclare module '@tiptap/core' {\r\n    interface Commands<ReturnType> {\r\n        backgroundColor: {\r\n            /**\r\n             * Set the backgroundColor\r\n             */\r\n            setBackgroundColor: (backgroundColor: string) => ReturnType;\r\n\r\n            /**\r\n             * Unset the backgroundColor\r\n             */\r\n            unsetBackgroundColor: () => ReturnType;\r\n        };\r\n    }\r\n}\r\n\r\nexport interface BackgroundColorOptions {\r\n    types: string[];\r\n}\r\n\r\nexport const BackgroundColor = Extension.create<BackgroundColorOptions>({\r\n    name: 'backgroundColor',\r\n\r\n    addOptions() {\r\n        return {\r\n            types: ['textStyle'],\r\n        };\r\n    },\r\n\r\n    addGlobalAttributes() {\r\n        return [\r\n            {\r\n                types: this.options.types,\r\n                attributes: {\r\n                    backgroundColor: {\r\n                        default: null,\r\n                        parseHTML: element => element.style.backgroundColor?.replace(/['\"]+/g, ''),\r\n                        renderHTML: attributes => {\r\n                            if (!attributes.backgroundColor) return {};\r\n                            return { style: `background-color: ${attributes.backgroundColor}` };\r\n                        },\r\n                    },\r\n                },\r\n            },\r\n        ];\r\n    },\r\n\r\n    addCommands() {\r\n        return {\r\n            setBackgroundColor:\r\n                backgroundColor =>\r\n                ({ chain }) =>\r\n                    chain().setMark('textStyle', { backgroundColor }).run(),\r\n            unsetBackgroundColor:\r\n                () =>\r\n                ({ chain }) =>\r\n                    chain().setMark('textStyle', { backgroundColor: null }).removeEmptyTextStyle().run(),\r\n        };\r\n    },\r\n});\r\n","import { FocusZone } from '@fluentui/react';\r\nimport React from 'react';\r\nimport { FieldProps } from '../../../abstractions';\r\nimport { FormContext, FormEntry, FormFeature, FormQuestion } from '../../types';\r\nimport { ChoiceSettings } from './ChoiceSettings';\r\nimport { DesigningActions } from './DesigningActions';\r\nimport { useActiveDesigningDecoratorStyles } from './DesigningDecorator.styles';\r\nimport { MockedField } from './MockedField';\r\nimport { PrimarySettings } from './PrimarySettings';\r\nimport { RestrictionSettings } from './RestrictionSettings';\r\nimport { SecondarySettings } from './SecondarySettings';\r\nimport { QuestionSettingsProps } from './types';\r\n\r\nexport function ActiveDesigningDecorator(props: FieldProps<FormEntry, FormContext, FormFeature>): JSX.Element {\r\n    const { entry, feature, onEntryChange } = props;\r\n    const { question } = entry;\r\n    const { constants, strings } = feature;\r\n\r\n    const onQuestionChange = React.useCallback(\r\n        (newQuestion: FormQuestion) => {\r\n            // Delete answer content when question changes\r\n            const newEntry = { ...entry };\r\n            newEntry.question = newQuestion;\r\n            delete newEntry.answer.content;\r\n            onEntryChange?.(newEntry);\r\n        },\r\n        [entry, onEntryChange]\r\n    );\r\n\r\n    const styles = useActiveDesigningDecoratorStyles();\r\n    const settingsProps: QuestionSettingsProps = { question, onQuestionChange, constants, strings };\r\n\r\n    return (\r\n        <div className={styles.root}>\r\n            <FocusZone className={styles.settings}>\r\n                <PrimarySettings {...settingsProps} />\r\n                <MockedField {...settingsProps} />\r\n                <ChoiceSettings {...settingsProps} />\r\n                <div className={styles.separator} role='separator' />\r\n                <SecondarySettings {...settingsProps} />\r\n                <RestrictionSettings {...settingsProps} />\r\n            </FocusZone>\r\n            <FocusZone className={styles.actions}>\r\n                <DesigningActions {...props} />\r\n            </FocusZone>\r\n        </div>\r\n    );\r\n}\r\n","export * from './Form';\r\nexport * from './FormFragment';\r\nexport * from './types';\r\n","import { makeStyles } from '@addressbook/components-fluentui-teams-theme';\r\n\r\nexport const useDesigningTrailingActionsStyles = makeStyles({\r\n    root: {\r\n        display: 'flex',\r\n        flexDirection: 'row',\r\n        alignItems: 'center',\r\n    },\r\n});\r\n","import { Extension } from '@tiptap/core';\r\nimport { Plugin } from '@tiptap/pm/state';\r\n\r\nexport interface HackOptions {\r\n    disableScrolledIntoView?: boolean;\r\n}\r\n\r\nexport const Hack = Extension.create<HackOptions>({\r\n    name: 'hack',\r\n\r\n    addProseMirrorPlugins() {\r\n        const plugins: Plugin[] = [];\r\n\r\n        /**\r\n         * To take control of the `scrolledIntoView` property of the transaction, and force it to be `false`.\r\n         * This is a workaround for the issue that auto scrolling (when typing) not working well with relative\r\n         * positioning with overflow mechanism.\r\n         *\r\n         * For example, in the `CommentsViewingsItem` component, when `dockedPostComment` is enabled.\r\n         *\r\n         * @see https://github.com/ProseMirror/prosemirror-state/blob/88e2a24104481098f0f660e74240c0f846e7fd6e/src/state.ts#L39\r\n         * @see https://github.com/ProseMirror/prosemirror-view/blob/2da3ae39492a2d74206c98fb6acc178277cfd7f2/src/index.ts#L180\r\n         * @see https://github.com/ProseMirror/prosemirror-view/blob/2da3ae39492a2d74206c98fb6acc178277cfd7f2/src/index.ts#L237\r\n         * @see https://github.com/ProseMirror/prosemirror-view/blob/2da3ae39492a2d74206c98fb6acc178277cfd7f2/src/domcoords.ts#L32\r\n         */\r\n        if (this.options.disableScrolledIntoView) {\r\n            plugins.push(\r\n                new Plugin({\r\n                    filterTransaction: tr => {\r\n                        Object.defineProperty(tr, 'scrolledIntoView', { value: false });\r\n                        return true;\r\n                    },\r\n                })\r\n            );\r\n        }\r\n\r\n        return plugins;\r\n    },\r\n});\r\n","/* istanbul ignore file */\r\n\r\nimport { IBreadcrumbStyleProps, ITheme, FontWeights, IBreadcrumbStyles, IStyleFunctionOrObject } from '@fluentui/react';\r\nimport { FontSizes } from '../teams-sizes';\r\nimport { isContrastTheme } from '../teams-theme';\r\n\r\nexport function getBreadcrumbStyles(\r\n    themeName: string,\r\n    _theme: ITheme\r\n): IStyleFunctionOrObject<IBreadcrumbStyleProps, IBreadcrumbStyles> {\r\n    return (props: IBreadcrumbStyleProps) => {\r\n        const { theme } = props;\r\n        const { palette } = theme;\r\n\r\n        const stateSelectors = {\r\n            ':hover': {\r\n                color: palette.themePrimary,\r\n                textDecoration: 'none',\r\n                backgroundColor: 'none',\r\n            },\r\n            ':active': {\r\n                color: palette.themePrimary,\r\n                backgroundColor: 'none',\r\n                textDecoration: 'none',\r\n            },\r\n            '&:active:hover': {\r\n                color: palette.themePrimary,\r\n                backgroundColor: 'none',\r\n                textDecoration: 'none',\r\n            },\r\n        };\r\n        const styles = {\r\n            root: {\r\n                margin: 0,\r\n                fontSize: FontSizes.size14,\r\n                lineHeight: FontSizes.size20,\r\n                selectors: {\r\n                    '.ms-Breadcrumb-listItem:last-child .ms-Breadcrumb-itemLink': {\r\n                        fontWeight: FontWeights.bold,\r\n                        color: palette.black,\r\n                    },\r\n                    '.ms-Breadcrumb-listItem:last-child .ms-Breadcrumb-item': {\r\n                        fontWeight: FontWeights.bold,\r\n                    },\r\n                },\r\n            },\r\n            item: {\r\n                color: palette.black,\r\n                fontSize: FontSizes.size14,\r\n                lineHeight: '40px',\r\n                height: '40px',\r\n                selectors: {\r\n                    ':last-child': {\r\n                        color: palette.black,\r\n                    },\r\n                },\r\n            },\r\n            listItem: {\r\n                selectors: {\r\n                    ':last-child': {\r\n                        selectors: {\r\n                            '.ms-Breadcrumb-item': {\r\n                                color: palette.black,\r\n                            },\r\n                        },\r\n                    },\r\n                },\r\n            },\r\n            itemLink: {\r\n                fontSize: FontSizes.size14,\r\n                lineHeight: '40px',\r\n                outline: 'none',\r\n                fontWeight: FontWeights.regular,\r\n                color: palette.black,\r\n                height: '40px',\r\n                selectors: {\r\n                    '.ms-Fabric--isFocusVisible &:focus': {\r\n                        // Necessary due to changes of Link component not using getFocusStyle.\r\n                        outline: 'none',\r\n                    },\r\n                    ...stateSelectors,\r\n                },\r\n            },\r\n            chevron: {\r\n                color: palette.neutralDark,\r\n                fontSize: FontSizes.size12,\r\n            },\r\n            overflowButton: {\r\n                color: palette.neutralDark,\r\n                selectors: {\r\n                    ...stateSelectors,\r\n                },\r\n            },\r\n        };\r\n\r\n        // Contrast theme overrides\r\n        if (isContrastTheme(themeName)) {\r\n            stateSelectors['&:active:hover'].color = palette.themeDark;\r\n            stateSelectors[':hover'].color = palette.themeDark;\r\n            stateSelectors[':active'].color = palette.themeDark;\r\n        }\r\n        return styles;\r\n    };\r\n}\r\n","export * from './MockedField';\r\n","import { ActionButton, IconButton, mergeStyles, TextField } from '@fluentui/react';\r\nimport React from 'react';\r\nimport { ChoiceAction, ChoiceAppearance, FormQuestionType } from '../../../types';\r\nimport { getNewChoice, useTextFieldStyles } from '../../../utilities';\r\nimport { QuestionSettingsProps } from '../types';\r\nimport { useChoiceSettingsStyles } from './ChoiceSettings.styles';\r\n\r\nexport function ChoiceSettings({\r\n    question,\r\n    onQuestionChange,\r\n    constants,\r\n    strings,\r\n}: QuestionSettingsProps): JSX.Element | null {\r\n    const styles = useChoiceSettingsStyles();\r\n    const textFieldStyles = useTextFieldStyles();\r\n\r\n    if (question.type !== FormQuestionType.Choice) return null;\r\n\r\n    const reachMinChoices = question.choices.length <= constants.minChoices;\r\n    const reachMaxChoices = question.choices.length >= constants.maxChoices;\r\n\r\n    const decoratorClassName =\r\n        question.appearance === ChoiceAppearance.Checkbox\r\n            ? mergeStyles(styles.decorator, styles.checkbox)\r\n            : question.appearance === ChoiceAppearance.Radio\r\n            ? mergeStyles(styles.decorator, styles.radio)\r\n            : undefined;\r\n\r\n    const decorator = decoratorClassName && <div className={decoratorClassName} />;\r\n\r\n    return (\r\n        <div className={styles.root}>\r\n            {question.choices.map((choice, index) => (\r\n                <div className={styles.choiceRow} key={index}>\r\n                    {decorator}\r\n                    <TextField\r\n                        value={choice}\r\n                        onChange={(_, value) => {\r\n                            const newChoices = [...question.choices];\r\n                            newChoices[index] = value ?? '';\r\n                            onQuestionChange({ ...question, choices: newChoices });\r\n                        }}\r\n                        maxLength={constants.maxChoiceLength}\r\n                        placeholder={strings.choicePlaceholder}\r\n                        styles={textFieldStyles}\r\n                    />\r\n                    <IconButton\r\n                        iconProps={{ iconName: 'Delete' }}\r\n                        title={strings.choiceAction(ChoiceAction.Delete)}\r\n                        disabled={reachMinChoices}\r\n                        onClick={() => {\r\n                            const newChoices = [...question.choices];\r\n                            newChoices.splice(index, 1);\r\n                            onQuestionChange({ ...question, choices: newChoices });\r\n                        }}\r\n                    />\r\n                    <IconButton\r\n                        iconProps={{ iconName: 'Up' }}\r\n                        title={strings.choiceAction(ChoiceAction.MoveUp)}\r\n                        disabled={index === 0}\r\n                        onClick={() => {\r\n                            const newChoices = [...question.choices];\r\n                            [newChoices[index - 1], newChoices[index]] = [newChoices[index], newChoices[index - 1]];\r\n                            onQuestionChange({ ...question, choices: newChoices });\r\n                        }}\r\n                    />\r\n                    <IconButton\r\n                        iconProps={{ iconName: 'Down' }}\r\n                        title={strings.choiceAction(ChoiceAction.MoveDown)}\r\n                        disabled={index === question.choices.length - 1}\r\n                        onClick={() => {\r\n                            const newChoices = [...question.choices];\r\n                            [newChoices[index + 1], newChoices[index]] = [newChoices[index], newChoices[index + 1]];\r\n                            onQuestionChange({ ...question, choices: newChoices });\r\n                        }}\r\n                    />\r\n                </div>\r\n            ))}\r\n            {question.allowOther && (\r\n                <div className={styles.choiceRow}>\r\n                    {decorator}\r\n                    <TextField placeholder={strings.choiceOther} disabled styles={textFieldStyles} />\r\n                    <IconButton\r\n                        iconProps={{ iconName: 'Delete' }}\r\n                        title={strings.choiceAction(ChoiceAction.Delete)}\r\n                        onClick={() => {\r\n                            const newQuestion = { ...question };\r\n                            delete newQuestion.allowOther;\r\n                            onQuestionChange(newQuestion);\r\n                        }}\r\n                    />\r\n                    <IconButton\r\n                        className={styles.hidden}\r\n                        iconProps={{ iconName: 'Up' }}\r\n                        title={strings.choiceAction(ChoiceAction.MoveUp)}\r\n                        disabled\r\n                    />\r\n                    <IconButton\r\n                        className={styles.hidden}\r\n                        iconProps={{ iconName: 'Down' }}\r\n                        title={strings.choiceAction(ChoiceAction.MoveDown)}\r\n                        disabled\r\n                    />\r\n                </div>\r\n            )}\r\n            <div className={styles.actionRow}>\r\n                <ActionButton\r\n                    iconProps={{ iconName: 'Add' }}\r\n                    text={strings.choiceAction(ChoiceAction.Add)}\r\n                    disabled={reachMaxChoices}\r\n                    onClick={() => {\r\n                        const newChoices = [...question.choices, getNewChoice(strings, question.choices)];\r\n                        onQuestionChange({ ...question, choices: newChoices });\r\n                    }}\r\n                />\r\n                {!question.allowOther && (\r\n                    <ActionButton\r\n                        text={strings.choiceAction(ChoiceAction.AddOther)}\r\n                        onClick={() => onQuestionChange({ ...question, allowOther: true })}\r\n                    />\r\n                )}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n","import { makeStyles } from '@addressbook/components-fluentui-teams-theme';\r\n\r\nexport const useRestrictionSettingsStyles = makeStyles(theme => ({\r\n    row: {\r\n        display: 'flex',\r\n        flexDirection: 'row',\r\n        alignItems: 'center',\r\n        gap: '8px',\r\n        flexWrap: 'wrap',\r\n        maxWidth: '400px',\r\n        '> .ms-Dropdown-container': {\r\n            flexGrow: 3,\r\n            flexBasis: '160px',\r\n        },\r\n    },\r\n    values: {\r\n        flex: '1 0 min-content',\r\n\r\n        display: 'flex',\r\n        flexDirection: 'row',\r\n        alignItems: 'center',\r\n        gap: '8px',\r\n\r\n        '> .ms-TextField': {\r\n            flexGrow: 1,\r\n            minWidth: '64px',\r\n        },\r\n    },\r\n    between: {\r\n        gap: '20px',\r\n\r\n        position: 'relative',\r\n        ':before': {\r\n            content: '\"\"',\r\n            position: 'absolute',\r\n            insetBlock: 'calc((100% - 1px) / 2)',\r\n            insetInline: 'calc((100% - 4px) / 2)',\r\n            backgroundColor: theme.palette.black,\r\n        },\r\n    },\r\n}));\r\n","/* istanbul ignore file */\r\n\r\nimport { ISearchBoxStyleProps, ISearchBoxStyles, ITheme, IPalette, IStyle } from '@fluentui/react';\r\nimport { ContrastColors } from '../teams-colors';\r\nimport { isContrastTheme, isDarkTheme } from '../teams-theme';\r\nimport { teamsBorderRadius } from './constants';\r\ninterface IName {\r\n    FIELD_GROUP_BACKGROUND_COLOR: string;\r\n    FIELD_GROUP_OPACITY: number;\r\n    FIELD_COLOR_PLACEHOLDER_NOT_DISABLED: string;\r\n    FIELD_COLOR_PLACEHOLDER_DISABLED: string;\r\n    FIELD_GROUP_BORDER_WIDTH: string;\r\n    FIELD_GROUP_BORDER_COLOR: string;\r\n    FIELD_GROUP_BORDER_COLOR_DISABLED: string;\r\n    FIELD_GROUP_BORDER_BOTTOM_COLOR_ACTIVE: string;\r\n    FIELD_GROUP_BORDER_WIDTH_ACTIVE: string;\r\n}\r\n\r\nconst getFieldStyle = (palette: IPalette, themeName: string, background?: string): IName => {\r\n    const fieldStyle: IName = {\r\n        FIELD_GROUP_BACKGROUND_COLOR: palette.neutralLight,\r\n        FIELD_GROUP_OPACITY: 0.36,\r\n        FIELD_COLOR_PLACEHOLDER_NOT_DISABLED: palette.neutralDark,\r\n        FIELD_COLOR_PLACEHOLDER_DISABLED: palette.neutralDark,\r\n        FIELD_GROUP_BORDER_WIDTH: '0 0 2px 0',\r\n        FIELD_GROUP_BORDER_COLOR: 'transparent',\r\n        FIELD_GROUP_BORDER_COLOR_DISABLED: 'transparent',\r\n        FIELD_GROUP_BORDER_BOTTOM_COLOR_ACTIVE: palette.themePrimary,\r\n        FIELD_GROUP_BORDER_WIDTH_ACTIVE: '0 0 2px 0',\r\n    };\r\n\r\n    // Dark theme overrides\r\n    if (isDarkTheme(themeName)) {\r\n        fieldStyle.FIELD_GROUP_BACKGROUND_COLOR = palette.white;\r\n        fieldStyle.FIELD_COLOR_PLACEHOLDER_DISABLED = palette.neutralPrimary;\r\n    }\r\n\r\n    // Contrast theme overrides\r\n    if (isContrastTheme(themeName)) {\r\n        fieldStyle.FIELD_GROUP_BACKGROUND_COLOR = palette.white;\r\n        fieldStyle.FIELD_GROUP_OPACITY = 1;\r\n        fieldStyle.FIELD_COLOR_PLACEHOLDER_NOT_DISABLED = palette.black;\r\n        fieldStyle.FIELD_COLOR_PLACEHOLDER_DISABLED = ContrastColors.appGreenContrast;\r\n        fieldStyle.FIELD_GROUP_BORDER_WIDTH = '1px 1px 1px 1px';\r\n        fieldStyle.FIELD_GROUP_BORDER_COLOR = palette.black;\r\n        fieldStyle.FIELD_GROUP_BORDER_COLOR_DISABLED = ContrastColors.appGreenContrast;\r\n        fieldStyle.FIELD_GROUP_BORDER_BOTTOM_COLOR_ACTIVE = palette.themeDark;\r\n        fieldStyle.FIELD_GROUP_BORDER_WIDTH_ACTIVE = '1px 1px 2px 1px';\r\n    }\r\n    // If this textfiled is on gray background\r\n    if (background === 'gray') {\r\n        fieldStyle.FIELD_GROUP_BACKGROUND_COLOR = palette.white;\r\n        fieldStyle.FIELD_COLOR_PLACEHOLDER_NOT_DISABLED = palette.neutralPrimaryAlt;\r\n    }\r\n\r\n    return fieldStyle;\r\n};\r\n\r\nconst getClearButton = (fieldStyle: IName): IStyle => ({\r\n    selectors: {\r\n        '.ms-Button': {\r\n            color: fieldStyle.FIELD_COLOR_PLACEHOLDER_NOT_DISABLED,\r\n            selectors: {\r\n                ':hover': {\r\n                    color: fieldStyle.FIELD_COLOR_PLACEHOLDER_NOT_DISABLED,\r\n                },\r\n                ':active': {\r\n                    color: fieldStyle.FIELD_COLOR_PLACEHOLDER_NOT_DISABLED,\r\n                },\r\n            },\r\n        },\r\n    },\r\n});\r\n\r\nconst getRoot = (fieldStyle: IName, disabled?: boolean, hasFocus?: boolean): IStyle => [\r\n    {\r\n        background: fieldStyle.FIELD_GROUP_BACKGROUND_COLOR,\r\n        borderRadius: teamsBorderRadius,\r\n        borderWidth: fieldStyle.FIELD_GROUP_BORDER_WIDTH,\r\n        borderStyle: 'Solid',\r\n        borderColor: fieldStyle.FIELD_GROUP_BORDER_COLOR,\r\n        height: 32,\r\n        paddingLeft: 12,\r\n\r\n        selectors: {\r\n            ':hover': {\r\n                borderColor: fieldStyle.FIELD_GROUP_BORDER_COLOR,\r\n            },\r\n            '.ms-SearchBox-field': {\r\n                selectors: {\r\n                    '::placeholder': [\r\n                        !disabled && {\r\n                            color: fieldStyle.FIELD_COLOR_PLACEHOLDER_NOT_DISABLED,\r\n                        },\r\n                        disabled && { color: fieldStyle.FIELD_COLOR_PLACEHOLDER_DISABLED },\r\n                    ],\r\n                    ':-ms-input-placeholder': [\r\n                        !disabled && {\r\n                            color: fieldStyle.FIELD_COLOR_PLACEHOLDER_NOT_DISABLED,\r\n                        },\r\n                        disabled && { color: fieldStyle.FIELD_COLOR_PLACEHOLDER_DISABLED },\r\n                    ],\r\n                },\r\n            },\r\n        },\r\n    },\r\n    disabled && {\r\n        opacity: fieldStyle.FIELD_GROUP_OPACITY,\r\n        borderColor: fieldStyle.FIELD_GROUP_BORDER_COLOR_DISABLED,\r\n    },\r\n    !hasFocus &&\r\n        !disabled && {\r\n            selectors: {\r\n                ':hover': {\r\n                    borderColor: fieldStyle.FIELD_GROUP_BORDER_COLOR,\r\n                },\r\n            },\r\n        },\r\n    hasFocus && getHasFocus(fieldStyle),\r\n];\r\n\r\nconst getHasFocus = (fieldStyle: IName): IStyle => ({\r\n    borderBottomColor: fieldStyle.FIELD_GROUP_BORDER_BOTTOM_COLOR_ACTIVE,\r\n    borderWidth: fieldStyle.FIELD_GROUP_BORDER_WIDTH_ACTIVE,\r\n    // Need 2px border raidus as the border width is 2px.\r\n    borderBottomRightRadius: teamsBorderRadius,\r\n    borderBottomLeftRadius: teamsBorderRadius,\r\n    selectors: {\r\n        ':hover': {\r\n            borderBottomColor: fieldStyle.FIELD_GROUP_BORDER_BOTTOM_COLOR_ACTIVE,\r\n            borderWidth: fieldStyle.FIELD_GROUP_BORDER_WIDTH_ACTIVE,\r\n            // Need 2px border raidus as the border width is 2px.\r\n            borderBottomRightRadius: teamsBorderRadius,\r\n            borderBottomLeftRadius: teamsBorderRadius,\r\n        },\r\n    },\r\n});\r\n\r\nexport function getSearchBoxStyles(themeName: string, _theme: ITheme, background?: string) {\r\n    return (props: ISearchBoxStyleProps): Partial<ISearchBoxStyles> => {\r\n        const { theme, disabled, hasInput, hasFocus } = props;\r\n        const { palette } = theme;\r\n        const fieldStyle = getFieldStyle(palette, themeName, background);\r\n\r\n        const styles = {\r\n            root: getRoot(fieldStyle, disabled, hasFocus),\r\n            field: {\r\n                color: palette.neutralDark,\r\n                height: 30,\r\n                selectors: {},\r\n            },\r\n            iconContainer: [\r\n                {\r\n                    transition: 'none',\r\n                    width: '32px',\r\n                    height: 30,\r\n                    paddingLeft: 1,\r\n                    paddingRight: 1,\r\n                    order: 2,\r\n                },\r\n                hasInput && {\r\n                    display: 'none',\r\n                },\r\n            ],\r\n            clearButton: getClearButton(fieldStyle),\r\n            icon: [\r\n                {\r\n                    opacity: 1,\r\n                    paddingLeft: 4,\r\n                    paddingRight: 4,\r\n                    transform: 'scaleX(-1)',\r\n                },\r\n                !disabled && { color: fieldStyle.FIELD_COLOR_PLACEHOLDER_NOT_DISABLED },\r\n                disabled && { color: fieldStyle.FIELD_COLOR_PLACEHOLDER_DISABLED },\r\n\r\n                hasInput && {\r\n                    display: 'none',\r\n                },\r\n            ],\r\n        } as Partial<ISearchBoxStyles>;\r\n\r\n        return styles;\r\n    };\r\n}\r\n","import React from 'react';\r\n\r\nconst pointerEventName = 'pointerdown';\r\nconst keyboardEventName = 'keydown';\r\n\r\nconst layerHostId = 'fluent-default-layer-host';\r\n\r\nexport interface UseActiveParams {\r\n    active: boolean;\r\n    setActive: (active: boolean) => void;\r\n}\r\n\r\n/**\r\n * A hook that manages the active state of an element.\r\n * - The element is activated or deactivated when pointer events and keyboard events happen.\r\n * - The active element is ensured to be visible when some mutation happens in the parent element.\r\n *\r\n * @property active The current active state.\r\n * @property setActive A function that sets the active state.\r\n * @returns A ref that should be attached to the element that should be managed.\r\n */\r\nexport function useActive<Element extends HTMLElement>({ active, setActive }: UseActiveParams): React.Ref<Element> {\r\n    const elementRef = React.useRef<Element>(null);\r\n\r\n    const activeRef = React.useRef(active);\r\n    activeRef.current = active;\r\n\r\n    const setActiveRef = React.useRef(setActive);\r\n    setActiveRef.current = setActive;\r\n\r\n    React.useEffect(() => {\r\n        const element = elementRef.current;\r\n        if (!element) return;\r\n\r\n        const pointerHandler = (event: PointerEvent): void => {\r\n            if (happensInDifferentLayers(element, event)) return;\r\n\r\n            const nextActive = happensInElement(element, event);\r\n            if (nextActive === activeRef.current) return;\r\n            setActiveRef.current(nextActive);\r\n\r\n            if (nextActive) element.focus();\r\n        };\r\n\r\n        const keyHandler = (event: KeyboardEvent): void => {\r\n            if (happensInDifferentLayers(element, event)) return;\r\n\r\n            const inElement = happensInElement(element, event);\r\n            const onElement = event.target === element;\r\n\r\n            const nextActive = getNextActiveOnKeyboardEvent(activeRef.current, event.key, inElement, onElement);\r\n            if (nextActive === activeRef.current) return;\r\n            setActiveRef.current(nextActive);\r\n\r\n            if (onElement) {\r\n                element.focus();\r\n                event.preventDefault();\r\n            }\r\n        };\r\n\r\n        const document = element.ownerDocument;\r\n        const controller = new AbortController();\r\n        document.addEventListener(pointerEventName, pointerHandler, { signal: controller.signal, capture: true });\r\n        document.addEventListener(keyboardEventName, keyHandler, { signal: controller.signal, capture: true });\r\n        return () => controller.abort();\r\n    }, []);\r\n\r\n    React.useEffect(() => {\r\n        if (!active) return;\r\n\r\n        const element = elementRef.current;\r\n        if (!element) return;\r\n\r\n        const parentElement = element.parentElement;\r\n        if (!parentElement) return;\r\n\r\n        ensureElementVisible(element);\r\n        const observer = new MutationObserver(() => ensureElementVisible(element));\r\n\r\n        observer.observe(parentElement, { childList: true });\r\n        return () => observer.disconnect();\r\n    }, [active]);\r\n\r\n    return elementRef;\r\n}\r\n\r\n/**\r\n * Determines if the event happens in the element.\r\n *\r\n * @param element The element.\r\n * @param event The event.\r\n * @returns Whether the event happens in the element.\r\n */\r\nfunction happensInElement(element: Element, event: Event): boolean {\r\n    return event.target instanceof Node && element.contains(event.target);\r\n}\r\n\r\n/**\r\n * Determines if the event happens in different layers. Layer is a concept in Fluent UI.\r\n *\r\n * @param element The element.\r\n * @param event The event.\r\n * @returns Whether the event happens in different layers.\r\n */\r\nfunction happensInDifferentLayers(element: Element, event: Event): boolean {\r\n    const layerHost = document.getElementById(layerHostId);\r\n    if (!layerHost) return false;\r\n\r\n    const targetLayer = Array.from(layerHost.children).find(layer => happensInElement(layer, event));\r\n    if (!targetLayer) return false;\r\n\r\n    return !targetLayer.contains(element);\r\n}\r\n\r\n/**\r\n * Determines the next active state based on the keyboard event.\r\n *\r\n * - Enter: Activates the element if the event happens in the element; deactivates the element otherwise.\r\n * - Escape: Deactivates the element if the event happens in the element; leaves the active state unchanged otherwise.\r\n * - Space: Deactivates the element if the event happens on but not in the element; activates the element if the event happens on the element.\r\n * - Other keys: Leaves the active state unchanged.\r\n *\r\n * @param current The current active state.\r\n * @param key The key of the keyboard event.\r\n * @param inElement Indicates if the event happens in the element.\r\n * @param onElement Indicates if the event happens on the element.\r\n * @returns The next active state.\r\n */\r\nfunction getNextActiveOnKeyboardEvent(current: boolean, key: string, inElement: boolean, onElement: boolean): boolean {\r\n    switch (key) {\r\n        case 'Enter':\r\n            return inElement;\r\n        case 'Escape':\r\n            return current && !inElement;\r\n        case ' ':\r\n            return current ? inElement && !onElement : onElement;\r\n        default:\r\n            return current;\r\n    }\r\n}\r\n\r\n/**\r\n * Ensures the element is visible in the viewport by scrolling it into view.\r\n *\r\n * @param element The element.\r\n */\r\nfunction ensureElementVisible(element: Element): void {\r\n    element.scrollIntoView({ block: 'nearest', behavior: 'smooth' });\r\n}\r\n","import React from 'react';\r\nimport { BaseFormContext, BaseFormFeature, FormFragmentProps } from './types';\r\n\r\n/**\r\n * A form fragment is responsible for rendering a single form entry with the given context and feature.\r\n *\r\n * It makes onEntryChange's reference stable so that the entry component can memoize depending on it.\r\n */\r\nexport function FormFragment<\r\n    Entry,\r\n    Context extends BaseFormContext<Entry>,\r\n    Feature extends BaseFormFeature<Entry, Context, Feature>\r\n>(props: FormFragmentProps<Context, Feature>): JSX.Element | null {\r\n    const { context, feature, onContextChange, index } = props;\r\n    const { entries } = context;\r\n    const { descriptors } = feature;\r\n\r\n    const contextRef = React.useRef(context);\r\n    contextRef.current = context;\r\n    const onContextChangeRef = React.useRef(onContextChange);\r\n    onContextChangeRef.current = onContextChange;\r\n\r\n    const entry = entries[index];\r\n    const onEntryChange = React.useCallback(\r\n        (entry: Entry): void => {\r\n            const context = contextRef.current;\r\n            const onContextChange = onContextChangeRef.current;\r\n            if (!onContextChange) return;\r\n\r\n            const newEntries = [...context.entries];\r\n            newEntries[index] = entry;\r\n            onContextChangeRef.current?.({ ...context, entries: newEntries });\r\n        },\r\n        [index]\r\n    );\r\n\r\n    // Find the first descriptor that matches the entry.\r\n    const descriptor = descriptors.find(descriptor => descriptor.test(entry, context, feature));\r\n    if (!descriptor) return null;\r\n\r\n    return descriptor.render({ entry, onEntryChange, ...props });\r\n}\r\n","/* istanbul ignore file */\r\n\r\nimport { ICommandBarStyles, IRawStyle, ITheme } from '@fluentui/react';\r\nimport { FontSizes } from '../teams-sizes';\r\nimport { isContrastTheme } from '../teams-theme';\r\n\r\nexport function getCommandBarStyles(themeName: string, theme: ITheme): Partial<ICommandBarStyles> {\r\n    const MS_BUTTON_ICON_SIZE = FontSizes.size14;\r\n    const MS_BUTTON_MENU_ICON_SIZE = FontSizes.size12;\r\n    const MS_COMMAND_BAR_OVERFLOW_BUTTON_SIZE = FontSizes.size16;\r\n\r\n    const ROOT_TOP_BORDER = theme.palette.neutralTertiaryAlt;\r\n    const ROOT_BOTTOM_BORDER = theme.palette.neutralTertiaryAlt;\r\n    const BUTTON_COLOR = theme.palette.neutralDark;\r\n\r\n    const COMMANDBAR_HEIGHT = '48px';\r\n    const styles = {\r\n        root: {\r\n            height: COMMANDBAR_HEIGHT,\r\n            paddingLeft: '20px',\r\n            paddingRight: '20px',\r\n            background: 'transparent',\r\n            borderTop: `1px solid ${ROOT_TOP_BORDER}`,\r\n            borderBottom: `1px solid ${ROOT_BOTTOM_BORDER}`,\r\n            selectors: {\r\n                '.icons-filled': {\r\n                    display: 'none',\r\n                },\r\n                '.icons-unfilled': {\r\n                    display: 'block',\r\n                },\r\n                svg: {\r\n                    height: COMMANDBAR_HEIGHT,\r\n                },\r\n                'svg, .icons-default-fill': {\r\n                    fill: BUTTON_COLOR,\r\n                },\r\n                '.ms-Button-menuIcon, .ms-Button-icon': {\r\n                    color: BUTTON_COLOR,\r\n                    fontSize: MS_BUTTON_ICON_SIZE,\r\n                    minWidth: MS_BUTTON_ICON_SIZE,\r\n                    lineHeight: COMMANDBAR_HEIGHT,\r\n                    height: COMMANDBAR_HEIGHT,\r\n                },\r\n                '.ms-Button-menuIcon': {\r\n                    fontSize: MS_BUTTON_MENU_ICON_SIZE,\r\n                    minWidth: MS_BUTTON_MENU_ICON_SIZE,\r\n                    lineHeight: COMMANDBAR_HEIGHT,\r\n                    height: COMMANDBAR_HEIGHT,\r\n                    marginLeft: '6px',\r\n                    marginTop: '1px',\r\n                    selectors: {\r\n                        svg: {\r\n                            width: '20px',\r\n                            height: '38px',\r\n                            margin: '0 -4px',\r\n                        },\r\n                    },\r\n                },\r\n                '.ms-Button--commandBar': {\r\n                    border: '1px solid transparent',\r\n                },\r\n                '.ms-CommandBarItem-link': {\r\n                    textDecoration: 'none',\r\n                    border: '1px solid transparent',\r\n                    color: BUTTON_COLOR,\r\n                },\r\n                'button, a': {\r\n                    marginRight: '16px',\r\n                    minWidth: 'auto',\r\n                },\r\n                button: {\r\n                    height: '100%',\r\n                },\r\n                '.ms-OverflowSet-item:last-child button,  .ms-OverflowSet-item:last-child a': {\r\n                    marginRight: '0',\r\n                },\r\n                'a, a:link, a:visited, a:hover, button, button:active, button:hover': {\r\n                    backgroundColor: 'transparent',\r\n                    color: BUTTON_COLOR,\r\n                },\r\n                'button:hover': {\r\n                    color: theme.palette.themePrimary,\r\n                    selectors: {\r\n                        'svg, .icons-default-fill': {\r\n                            fill: theme.palette.themePrimary,\r\n                        },\r\n                        '.ms-Button-menuIcon, .ms-Button-icon': {\r\n                            fontWeight: 'bold',\r\n                            color: theme.palette.themePrimary,\r\n                            backgroundColor: 'transparent',\r\n                        },\r\n                        '.icons-filled': {\r\n                            display: 'block',\r\n                        },\r\n                        '.icons-unfilled': {\r\n                            display: 'none',\r\n                        },\r\n                    },\r\n                },\r\n                '.ms-Fabric--isFocusVisible &': {\r\n                    selectors: {\r\n                        '.ms-Button:focus': {\r\n                            selectors: {\r\n                                ':after': {\r\n                                    borderColor: theme.palette.white,\r\n                                    outline: `1px solid ${theme.palette.black}`,\r\n                                },\r\n                            },\r\n                        },\r\n                    },\r\n                },\r\n                '.is-expanded': {\r\n                    color: theme.palette.themePrimary,\r\n                    selectors: {\r\n                        'svg, .icons-default-fill': {\r\n                            fill: theme.palette.themePrimary,\r\n                        },\r\n                        '.ms-Button-menuIcon, .ms-Button-icon': {\r\n                            fontWeight: 'bold',\r\n                            color: theme.palette.themePrimary,\r\n                            backgroundColor: 'transparent',\r\n                        },\r\n                        '.icons-filled': {\r\n                            display: 'block',\r\n                        },\r\n                        '.icons-unfilled': {\r\n                            display: 'none',\r\n                        },\r\n                    },\r\n                },\r\n                'a:hover': {\r\n                    color: theme.palette.themePrimary,\r\n                    selectors: {\r\n                        'svg, .icons-default-fill': {\r\n                            fill: theme.palette.themePrimary,\r\n                        },\r\n                        '.ms-Button-menuIcon, .ms-Button-icon': {\r\n                            fontWeight: 'bold',\r\n                            color: theme.palette.themePrimary,\r\n                            backgroundColor: 'transparent',\r\n                        },\r\n                        '.icons-filled': {\r\n                            display: 'block',\r\n                        },\r\n                        '.icons-unfilled': {\r\n                            display: 'none',\r\n                        },\r\n                    },\r\n                },\r\n                '.ms-CommandBar-overflowButton': {\r\n                    minWidth: 'auto',\r\n                    selectors: {\r\n                        '.ms-Button-menuIcon': {\r\n                            margin: 0,\r\n                            fontSize: MS_COMMAND_BAR_OVERFLOW_BUTTON_SIZE,\r\n                        },\r\n                    },\r\n                },\r\n            },\r\n        },\r\n        secondarySet: {\r\n            selectors: {\r\n                '.ms-Button-icon': {\r\n                    display: 'flex',\r\n                    width: 'auto',\r\n                },\r\n            },\r\n        },\r\n    } as Partial<ICommandBarStyles>;\r\n\r\n    // Contrast theme overrides\r\n    if (isContrastTheme(themeName)) {\r\n        // Overriding text color\r\n        (\r\n            (styles.root as Required<IRawStyle>).selectors[\r\n                'a, a:link, a:visited, a:hover, button, button:active, button:hover'\r\n            ] as IRawStyle\r\n        ).color = theme.palette.themeDark;\r\n\r\n        // Overriding icons color\r\n        ((styles.root as Required<IRawStyle>).selectors['.ms-Button-menuIcon, .ms-Button-icon'] as IRawStyle).color =\r\n            theme.palette.themeDark;\r\n\r\n        // Overriding svg fill color\r\n        ((styles.root as Required<IRawStyle>).selectors['svg, .icons-default-fill'] as IRawStyle).fill =\r\n            theme.palette.themeDark;\r\n    }\r\n    return styles;\r\n}\r\n","/* istanbul ignore file */\r\n\r\nimport { IDatePickerStyleProps, IDatePickerStyles, ITheme } from '@fluentui/react';\r\nimport { ContrastColors } from '../teams-colors';\r\nimport { isContrastTheme, isDarkTheme } from '../teams-theme';\r\n\r\nexport function getDatePickerStyles(themeName: string, _theme: ITheme) {\r\n    return (props: IDatePickerStyleProps): Partial<IDatePickerStyles> => {\r\n        const { theme } = props;\r\n        const { palette } = theme;\r\n\r\n        let HOVER_TEXT_COLOR = palette.black;\r\n        let HOVER_BACKGROUND_COLOR = palette.neutralLight;\r\n        let DISABLED_TEXT_COLOR = palette.neutralTertiary;\r\n        let DISABLED_BACKGROUND_COLOR = palette.white;\r\n\r\n        if (isDarkTheme(themeName)) {\r\n            HOVER_BACKGROUND_COLOR = palette.white;\r\n            DISABLED_TEXT_COLOR = palette.neutralTertiary;\r\n            DISABLED_BACKGROUND_COLOR = palette.neutralLight;\r\n        }\r\n\r\n        if (isContrastTheme(themeName)) {\r\n            HOVER_TEXT_COLOR = palette.white;\r\n            HOVER_BACKGROUND_COLOR = palette.themeDark;\r\n            DISABLED_TEXT_COLOR = ContrastColors.appGreenContrast;\r\n            DISABLED_BACKGROUND_COLOR = palette.white;\r\n        }\r\n\r\n        const styles: Partial<IDatePickerStyles> = {\r\n            callout: {\r\n                '[class^=\"monthAndYear-\"]': {\r\n                    color: theme.palette.black,\r\n                },\r\n                '[class^=\"headerIconButton-\"], [class^=\"navigationButton-\"]': {\r\n                    display: 'flex',\r\n                    alignItems: 'center',\r\n                    justifyContent: 'center',\r\n                    color: isContrastTheme(themeName) ? palette.black : undefined,\r\n                    ':active, :hover': {\r\n                        color: HOVER_TEXT_COLOR,\r\n                        backgroundColor: HOVER_BACKGROUND_COLOR,\r\n                    },\r\n                },\r\n                '.ms-DatePicker': {\r\n                    table: {\r\n                        th: {\r\n                            color: palette.black,\r\n                        },\r\n                        td: {\r\n                            cursor: 'pointer',\r\n                            color: palette.black,\r\n                            ':active, :hover': {\r\n                                // Fluent UI already uses important here, so we must have a more specific selector with\r\n                                // important too to override it.\r\n                                // See https://github.com/microsoft/fluentui/blob/master/packages/react/src/components/CalendarDayGrid/CalendarDayGrid.styles.ts\r\n                                color: HOVER_TEXT_COLOR + ' !important',\r\n                                backgroundColor: HOVER_BACKGROUND_COLOR + ' !important',\r\n                            },\r\n                            'button[disabled]': {\r\n                                color: DISABLED_TEXT_COLOR,\r\n                                backgroundColor: DISABLED_BACKGROUND_COLOR,\r\n                            },\r\n                        },\r\n                    },\r\n                    '[role=grid]': {\r\n                        '[role=gridcell]': {\r\n                            cursor: 'pointer',\r\n                            color: palette.black,\r\n                            ':active, :hover': {\r\n                                color: HOVER_TEXT_COLOR,\r\n                                backgroundColor: HOVER_BACKGROUND_COLOR,\r\n                            },\r\n                            'button[disabled]': {\r\n                                color: DISABLED_TEXT_COLOR,\r\n                                backgroundColor: DISABLED_BACKGROUND_COLOR,\r\n                            },\r\n                        },\r\n                    },\r\n                },\r\n            },\r\n        };\r\n\r\n        return styles;\r\n    };\r\n}\r\n","export * from './extension';\r\n","export * from './choice';\r\nexport * from './designing';\r\nexport * from './hooks';\r\nexport * from './styles';\r\nexport * from './types';\r\nexport * from './validation';\r\n","import { Toggle } from '@fluentui/react';\r\nimport React from 'react';\r\nimport { FormQuestionType, TextNumberRestrictionType } from '../../../types';\r\nimport { deriveTextNumberRestriction, useToggleStyles } from '../../../utilities';\r\nimport { QuestionSettingsProps } from '../types';\r\nimport { useSecondarySettingsStyles } from './SecondarySettings.styles';\r\n\r\nexport function SecondarySettings({ question, onQuestionChange, strings }: QuestionSettingsProps): JSX.Element {\r\n    const styles = useSecondarySettingsStyles();\r\n    const toggleStyles = useToggleStyles();\r\n\r\n    return (\r\n        <div className={styles.row}>\r\n            <Toggle\r\n                checked={question.required}\r\n                onChange={(_, checked) => {\r\n                    const newQuestion = { ...question };\r\n                    if (checked) {\r\n                        newQuestion.required = true;\r\n                    } else {\r\n                        delete newQuestion.required;\r\n                    }\r\n                    onQuestionChange(newQuestion);\r\n                }}\r\n                label={strings.questionRequired}\r\n                inlineLabel\r\n                styles={toggleStyles}\r\n            />\r\n            {question.type === FormQuestionType.Choice && (\r\n                <Toggle\r\n                    checked={question.shuffle}\r\n                    onChange={(_, checked) => {\r\n                        const newQuestion = { ...question };\r\n                        if (checked) {\r\n                            newQuestion.shuffle = true;\r\n                        } else {\r\n                            delete newQuestion.shuffle;\r\n                        }\r\n                        onQuestionChange(newQuestion);\r\n                    }}\r\n                    label={strings.questionShuffle}\r\n                    inlineLabel\r\n                    styles={toggleStyles}\r\n                />\r\n            )}\r\n            {question.type === FormQuestionType.Text && question.number && (\r\n                <Toggle\r\n                    checked={Boolean(question.restriction)}\r\n                    onChange={(_, checked) => {\r\n                        const newQuestion = { ...question };\r\n                        if (checked) {\r\n                            newQuestion.restriction = deriveTextNumberRestriction(\r\n                                TextNumberRestrictionType.GreaterThan\r\n                            );\r\n                        } else {\r\n                            delete newQuestion.restriction;\r\n                        }\r\n                        onQuestionChange(newQuestion);\r\n                    }}\r\n                    label={strings.questionRestriction}\r\n                    inlineLabel\r\n                    styles={toggleStyles}\r\n                />\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n","import { NodeViewProps } from '@tiptap/core';\r\nimport { Attrs } from '@tiptap/pm/model';\r\nimport React from 'react';\r\nimport { FileSessionKey } from './sessions';\r\n\r\ninterface UseFileNodeOperationOptions {\r\n    editor: NodeViewProps['editor'];\r\n    key: FileSessionKey;\r\n}\r\n\r\ntype UpdateAttributes<Attributes> = (attrs: Partial<Attributes>, withoutHistory?: boolean) => void;\r\n\r\n/**\r\n * A hook to make a function to update attributes.\r\n *\r\n * @property editor The editor.\r\n * @property key The key of the file session.\r\n * @returns The function to update attributes.\r\n */\r\nexport function useUpdateAttributes<Attributes extends Attrs>({\r\n    editor,\r\n    key,\r\n}: UseFileNodeOperationOptions): UpdateAttributes<Attributes> {\r\n    return React.useCallback(\r\n        (attrs, withoutHistory) => {\r\n            const tr = editor.state.tr;\r\n            tr.doc.descendants((node, pos) => {\r\n                if (node.attrs.key !== key) return;\r\n\r\n                tr.setNodeMarkup(pos, undefined, { ...node.attrs, ...attrs });\r\n                return false;\r\n            });\r\n            if (withoutHistory) tr.setMeta('addToHistory', false);\r\n            editor.view.dispatch(tr);\r\n        },\r\n        [editor, key]\r\n    );\r\n}\r\n\r\ntype DeleteNode = (withoutHistory?: boolean) => void;\r\n\r\n/**\r\n * A hook to make a function to delete a node.\r\n *\r\n * @property editor The editor.\r\n * @property key The key of the file session.\r\n * @returns The function to delete a node.\r\n */\r\nexport function useDeleteNode({ editor, key }: UseFileNodeOperationOptions): DeleteNode {\r\n    return React.useCallback(\r\n        withoutHistory => {\r\n            const tr = editor.state.tr;\r\n            tr.doc.descendants((node, pos) => {\r\n                if (node.attrs.key !== key) return;\r\n\r\n                tr.delete(pos, pos + node.nodeSize);\r\n                return false;\r\n            });\r\n            if (withoutHistory) tr.setMeta('addToHistory', false);\r\n            editor.view.dispatch(tr);\r\n        },\r\n        [editor, key]\r\n    );\r\n}\r\n\r\n/**\r\n * Accomodate policy for an image.\r\n *\r\n * @property Width Scale the width equal to the container.\r\n * @property Height Scale the height equal to the container.\r\n * @property Contain Scale the image within the container, maintaining aspect ratio.\r\n * @property ScaleDown Similar to contain, but only scale down.\r\n * @property Cover Scale the image to cover the container, maintaining aspect ratio.\r\n */\r\nexport enum AccomodatePolicy {\r\n    Width,\r\n    Height,\r\n    Contain,\r\n    ScaleDown,\r\n    Cover,\r\n}\r\n\r\nexport interface AccomodateImageOptions {\r\n    selector: string;\r\n    policy: AccomodatePolicy;\r\n}\r\n\r\n/**\r\n * Accommodate an image in a container, scaling it to fit the container while maintaining aspect ratio.\r\n *\r\n * @param image The image.\r\n * @property selector The selector of the container.\r\n * @property policy The policy to accommodate the image.\r\n */\r\nexport function accommodateImage(image: HTMLImageElement, { selector, policy }: AccomodateImageOptions): void {\r\n    const container = image.closest(selector);\r\n    if (!container) return;\r\n\r\n    const containerWidth = container.clientWidth;\r\n    const containerHeight = container.clientHeight;\r\n\r\n    const imageWidth = image.naturalWidth;\r\n    const imageHeight = image.naturalHeight;\r\n\r\n    const scale =\r\n        policy === AccomodatePolicy.Width\r\n            ? containerWidth / imageWidth\r\n            : policy === AccomodatePolicy.Height\r\n            ? containerHeight / imageHeight\r\n            : policy === AccomodatePolicy.Contain\r\n            ? Math.min(containerWidth / imageWidth, containerHeight / imageHeight)\r\n            : policy === AccomodatePolicy.ScaleDown\r\n            ? Math.min(containerWidth / imageWidth, containerHeight / imageHeight, 1)\r\n            : policy === AccomodatePolicy.Cover\r\n            ? Math.max(containerWidth / imageWidth, containerHeight / imageHeight)\r\n            : 1;\r\n\r\n    image.width = imageWidth * scale;\r\n    image.height = imageHeight * scale;\r\n}\r\n","/* istanbul ignore file */\r\n\r\nimport { BoxShadowColors } from './teams-colors';\r\n\r\n// eslint-disable-next-line @typescript-eslint/no-namespace\r\nexport namespace ShadowLevels {\r\n    export const shadowLevel1 = `0 2px 4px -0.75px ${BoxShadowColors.boxShadowColor}`;\r\n    export const shadowLevel1Dark = `0 2px 4px -0.75px ${BoxShadowColors.boxShadowColorDark}`;\r\n    export const shadowLevel1Darker = `0 2px 4px -0.75px ${BoxShadowColors.boxShadowColorDarker}`;\r\n    export const shadowLevel2 = `0 4px 7px -1px ${BoxShadowColors.boxShadowColor}`;\r\n    export const shadowLevel3 = `0 8px 10px -2px ${BoxShadowColors.boxShadowColor}`;\r\n    export const shadowLevel3Dark = `0 8px 10px -2px ${BoxShadowColors.boxShadowColorDark}`;\r\n    export const shadowLevel4 = `0 16px 18px -4px ${BoxShadowColors.boxShadowColor}`;\r\n    export const shadowLevel5 = '0 1.2px 3.6px rgba(0, 0, 0, 0.11), 0 6.4px 14.4px rgba(0, 0, 0, 0.13)';\r\n    export const shadowLevel6 = '0 0px 0px 2px rgba(0, 0, 0, 1)';\r\n}\r\n","export * from './CollapsibleTextField';\r\nexport * from './DecimalTextField';\r\n","import { DatePicker, IDatePicker, IDatePickerProps } from '@fluentui/react';\r\nimport React from 'react';\r\nimport { DateTimeEntry, FormContext, FormEntry, FormMode, FormQuestionType } from '../../types';\r\nimport { useDatePickerStyles } from '../../utilities';\r\nimport { BaseDescriptor, FieldComponentTypeFactory } from './BaseDescriptor';\r\n\r\nconst defaultOptions = {\r\n    defaultPlaceholder: 'Select a date',\r\n};\r\n\r\n/**\r\n * The options for the date time descriptor to customize the date time field.\r\n * `strings` and `formatDate` are supported for localization purposes, and `allowTextInput` indicates whether to allow\r\n * input text directly.\r\n */\r\nexport type DateTimeDescriptorOptions = Partial<typeof defaultOptions> &\r\n    Pick<IDatePickerProps, 'strings' | 'formatDate' | 'allowTextInput'>;\r\n\r\nconst makeFieldComponent: FieldComponentTypeFactory<DateTimeDescriptorOptions & typeof defaultOptions, DateTimeEntry> =\r\n    ({ defaultPlaceholder, ...options }) =>\r\n    ({ entry, onEntryChange, showPlaceholder, delegatedProps }) => {\r\n        const { question, answer } = entry;\r\n\r\n        const value = answer.content;\r\n        const onChange = React.useCallback(\r\n            (value?: Date | null) => {\r\n                const newAnswer = { ...entry.answer };\r\n                newAnswer.content = value ?? undefined;\r\n                if (!newAnswer.content) delete newAnswer.content;\r\n\r\n                onEntryChange?.({ ...entry, answer: newAnswer });\r\n            },\r\n            [entry, onEntryChange]\r\n        );\r\n        const placeholder = showPlaceholder ? question.placeholder || defaultPlaceholder : undefined;\r\n        const datePickerRef = React.useRef<IDatePicker>(null);\r\n\r\n        // Workaround for read only (previewing mode), since the DatePicker is uncontrollable component and does not\r\n        // support read only. When read only and no value, the picker will be reset after selected any date.\r\n        const hasValue = value !== undefined;\r\n        const calendarProps = React.useMemo(() => {\r\n            if (!delegatedProps.readOnly || hasValue) return;\r\n            return {\r\n                onSelectDate: () => {\r\n                    const reset = datePickerRef.current?.reset;\r\n                    if (reset) requestAnimationFrame(reset);\r\n                },\r\n            };\r\n        }, [delegatedProps.readOnly, hasValue]);\r\n\r\n        const datePickerStyles = useDatePickerStyles();\r\n\r\n        return (\r\n            <DatePicker\r\n                {...delegatedProps}\r\n                componentRef={datePickerRef}\r\n                value={value}\r\n                onSelectDate={onChange}\r\n                placeholder={placeholder}\r\n                showGoToToday={false}\r\n                calendarProps={calendarProps}\r\n                textField={delegatedProps}\r\n                styles={datePickerStyles}\r\n                {...options}\r\n            />\r\n        );\r\n    };\r\n\r\n/**\r\n * The descriptor that renders a date time field for date time entries.\r\n */\r\nexport class DateTimeDescriptor extends BaseDescriptor<DateTimeEntry> {\r\n    protected readonly FieldComponent;\r\n\r\n    constructor(options?: DateTimeDescriptorOptions) {\r\n        super();\r\n        this.FieldComponent = makeFieldComponent({ ...defaultOptions, ...options });\r\n    }\r\n\r\n    /**\r\n     * Tests whether the entry is a date time entry, and the form is not in viewing mode.\r\n     *\r\n     * @param entry The entry to test.\r\n     * @param context The context.\r\n     * @returns Passes the test or not.\r\n     */\r\n    test(entry: FormEntry, context: FormContext): entry is DateTimeEntry {\r\n        return entry.question.type === FormQuestionType.DateTime && context.mode !== FormMode.Viewing;\r\n    }\r\n}\r\n","import { makeStyles } from '@addressbook/components-fluentui-teams-theme';\r\n\r\nexport const usePreviewingDecoratorStyles = makeStyles({\r\n    root: {\r\n        position: 'relative',\r\n    },\r\n    mask: {\r\n        position: 'absolute',\r\n        inset: 0,\r\n    },\r\n});\r\n","import { ITheme } from '@fluentui/theme';\r\n\r\nimport {\r\n    TeamsThemeContrast,\r\n    TeamsThemeDark,\r\n    TeamsThemeDefault,\r\n    TeamsThemeDefaultV2,\r\n    TeamsThemeDarkV2,\r\n} from './teams/teams-theme';\r\n\r\nexport type themeNames = 'dark' | 'default' | 'contrast' | 'defaultV2' | 'darkV2' | 'tfl-dark';\r\n\r\nexport const getPalette = (themeName: themeNames): ITheme => {\r\n    switch (themeName) {\r\n        case 'defaultV2':\r\n            return TeamsThemeDefaultV2;\r\n        case 'dark':\r\n        case 'tfl-dark':\r\n            return TeamsThemeDark;\r\n        case 'darkV2':\r\n            return TeamsThemeDarkV2;\r\n        case 'contrast':\r\n            return TeamsThemeContrast;\r\n        default:\r\n            return TeamsThemeDefault;\r\n    }\r\n};\r\n","import { FontSizes, makeStyles } from '@addressbook/components-fluentui-teams-theme';\r\n\r\nexport const usePrimarySettingsStyles = makeStyles({\r\n    row: {\r\n        display: 'flex',\r\n        flexDirection: 'row',\r\n        alignItems: 'center',\r\n        gap: '12px',\r\n        flexWrap: 'wrap',\r\n        '> .ms-TextField': {\r\n            flexGrow: 7,\r\n            flexBasis: '240px',\r\n        },\r\n        '> .ms-Dropdown-container': {\r\n            flexGrow: 1,\r\n            flexBasis: '160px',\r\n        },\r\n    },\r\n    optionRow: {\r\n        display: 'flex',\r\n        flexDirection: 'row',\r\n        alignItems: 'center',\r\n        gap: '8px',\r\n    },\r\n    optionIcon: {\r\n        fontSize: FontSizes.size18,\r\n    },\r\n});\r\n","import { Extension } from '@tiptap/core';\r\nimport { Blockquote } from '@tiptap/extension-blockquote';\r\nimport { Bold } from '@tiptap/extension-bold';\r\nimport { BulletList } from '@tiptap/extension-bullet-list';\r\nimport { Code } from '@tiptap/extension-code';\r\nimport { CodeBlock } from '@tiptap/extension-code-block';\r\nimport { Color } from '@tiptap/extension-color';\r\nimport { Document } from '@tiptap/extension-document';\r\nimport { Dropcursor } from '@tiptap/extension-dropcursor';\r\nimport { Gapcursor } from '@tiptap/extension-gapcursor';\r\nimport { HardBreak } from '@tiptap/extension-hard-break';\r\nimport { Heading } from '@tiptap/extension-heading';\r\nimport { History } from '@tiptap/extension-history';\r\nimport { HorizontalRule } from '@tiptap/extension-horizontal-rule';\r\nimport { Italic } from '@tiptap/extension-italic';\r\nimport { ListItem } from '@tiptap/extension-list-item';\r\nimport { OrderedList } from '@tiptap/extension-ordered-list';\r\nimport { Paragraph } from '@tiptap/extension-paragraph';\r\nimport { Strike } from '@tiptap/extension-strike';\r\nimport { Table } from '@tiptap/extension-table';\r\nimport { TableCell } from '@tiptap/extension-table-cell';\r\nimport { TableHeader } from '@tiptap/extension-table-header';\r\nimport { TableRow } from '@tiptap/extension-table-row';\r\nimport { Text } from '@tiptap/extension-text';\r\nimport { TextStyle } from '@tiptap/extension-text-style';\r\nimport { Underline } from '@tiptap/extension-underline';\r\nimport { isDefined } from '@addressbook/utilities-core';\r\nimport { BackgroundColor } from './background-color';\r\nimport { FontSize } from './font-size';\r\nimport { Link } from './link';\r\nimport { Misc } from './misc';\r\n\r\nconst defaults = [\r\n    // Extensions\r\n    { key: 'history', extension: History },\r\n    { key: 'dropcursor', extension: Dropcursor },\r\n    { key: 'gapcursor', extension: Gapcursor },\r\n    { key: 'misc', extension: Misc },\r\n\r\n    // Nodes\r\n    { key: 'document', extension: Document },\r\n    { key: 'text', extension: Text },\r\n\r\n    // Nodes.blocks\r\n    { key: 'heading', extension: Heading },\r\n    { key: 'paragraph', extension: Paragraph },\r\n    { key: 'blockquote', extension: Blockquote },\r\n    { key: 'codeBlock', extension: CodeBlock },\r\n    { key: 'hardBreak', extension: HardBreak },\r\n    { key: 'horizontalRule', extension: HorizontalRule },\r\n\r\n    // Nodes.lists\r\n    { key: 'listItem', extension: ListItem },\r\n    { key: 'bulletList', extension: BulletList },\r\n    { key: 'orderedList', extension: OrderedList },\r\n\r\n    // Nodes.tables\r\n    { key: 'table', extension: Table },\r\n    { key: 'tableRow', extension: TableRow },\r\n    { key: 'tableHeader', extension: TableHeader },\r\n    { key: 'tableCell', extension: TableCell },\r\n\r\n    // Marks.styles\r\n    // Must be before other marks to ensure it's applied at the most top level\r\n    // Otherwise, for example, strike won't know the current font size or color, then it can't apply the correct styles\r\n    { key: 'textStyle', extension: TextStyle },\r\n    { key: 'backgroundColor', extension: BackgroundColor },\r\n    { key: 'color', extension: Color },\r\n    { key: 'fontSize', extension: FontSize },\r\n\r\n    // Marks.formats\r\n    { key: 'bold', extension: Bold },\r\n    { key: 'italic', extension: Italic },\r\n    { key: 'underline', extension: Underline },\r\n    { key: 'strike', extension: Strike },\r\n\r\n    // Marks.embeds\r\n    { key: 'link', extension: Link },\r\n    { key: 'code', extension: Code },\r\n] as const;\r\n\r\ntype DefaultItem = typeof defaults[number];\r\ntype DefaultItemKey = DefaultItem['key'];\r\ntype DefaultItemByKey<K extends DefaultItem['key']> = Extract<DefaultItem, { key: K }>;\r\n\r\ntype DiscardAny<T> = any extends T ? never : T;\r\n\r\n/**\r\n * Options for default extensions.\r\n * - `false` to disable the extension.\r\n * - `undefined` to use the default options without configuration.\r\n * - Otherwise, provide the options to configure the extension.\r\n *\r\n * @default {}\r\n * @see {@link https://www.tiptap.dev/api/extensions/starter-kit}\r\n */\r\nexport type DefaultsOptions = {\r\n    [K in DefaultItemKey]?: Partial<DiscardAny<DefaultItemByKey<K>['extension']['options']>> | false;\r\n};\r\n\r\nexport const Defaults = Extension.create<DefaultsOptions>({\r\n    name: 'defaults',\r\n\r\n    addExtensions() {\r\n        return defaults\r\n            .map(({ key, extension }) => {\r\n                const options = this.options?.[key];\r\n\r\n                if (options === false) return;\r\n                if (options === undefined) return extension;\r\n                return extension.configure(options);\r\n            })\r\n            .filter(isDefined);\r\n    },\r\n});\r\n","/*\r\n *  Copyright © Microsoft Corporation. All rights reserved.\r\n */\r\n\r\nimport { IToggleStyleProps } from '@fluentui/react';\r\nimport { ContrastColors, CoreColors, DarkColors } from '../teams-colors';\r\nimport { isContrastTheme } from '../teams-theme';\r\n\r\nexport const getToggleStyles = (themeName: string): any => {\r\n    const themeColors = getThemeColors(themeName);\r\n\r\n    return (props: IToggleStyleProps) => ({\r\n        root: {\r\n            selectors: {\r\n                '.ms-Label': {\r\n                    fontWeight: 'normal',\r\n                    color: themeColors.textColor,\r\n                },\r\n            },\r\n        },\r\n        pill: getPillStyles(!props.disabled, !!props.checked, themeColors),\r\n        thumb: getThumbStyles(!props.disabled, !!props.checked, themeColors),\r\n    });\r\n};\r\n\r\ninterface ToggleThemeColors {\r\n    textColor: string;\r\n    backgroundColor: string;\r\n    checkedBackgroundColor: string;\r\n    disabledBackgroundColor: string;\r\n    disabledAccentColor: string;\r\n    themeName: string;\r\n}\r\n\r\nconst getThemeColors = (themeName: string): ToggleThemeColors => {\r\n    let colors: Partial<ToggleThemeColors> = {\r\n        themeName,\r\n    };\r\n\r\n    switch (themeName) {\r\n        case 'dark':\r\n            colors = {\r\n                ...colors,\r\n                textColor: DarkColors.appBlack,\r\n                backgroundColor: DarkColors.appWhite,\r\n                checkedBackgroundColor: DarkColors.appBrand06,\r\n                disabledBackgroundColor: DarkColors.appGray09,\r\n                disabledAccentColor: DarkColors.appGray06,\r\n            };\r\n            break;\r\n\r\n        case 'contrast':\r\n            colors = {\r\n                ...colors,\r\n                textColor: ContrastColors.appBlack,\r\n                backgroundColor: ContrastColors.appWhite,\r\n                checkedBackgroundColor: ContrastColors.appBrand06,\r\n                disabledBackgroundColor: ContrastColors.appGreenContrast,\r\n                disabledAccentColor: ContrastColors.appGreenContrast,\r\n            };\r\n            break;\r\n\r\n        default:\r\n        case 'default':\r\n            colors = {\r\n                ...colors,\r\n                textColor: CoreColors.appBlack,\r\n                backgroundColor: CoreColors.appWhite,\r\n                checkedBackgroundColor: CoreColors.appBrand06,\r\n                disabledBackgroundColor: CoreColors.appGray09,\r\n                disabledAccentColor: CoreColors.appGray06,\r\n            };\r\n            break;\r\n    }\r\n\r\n    return colors as ToggleThemeColors;\r\n};\r\n\r\ninterface ThumbStyles {\r\n    backgroundColor: string;\r\n    transition?: string;\r\n    border?: string;\r\n}\r\n\r\nfunction getThumbStyles(isEnabled: boolean, isChecked: boolean, themeColors: ToggleThemeColors): any {\r\n    const { backgroundColor, borderColor } = getThumbColors(isEnabled, isChecked, themeColors);\r\n    const baseStyles: ThumbStyles = {\r\n        backgroundColor,\r\n        transition: 'background-color 0.1s, border-color 0.1s',\r\n    };\r\n\r\n    if (!isChecked) {\r\n        baseStyles.border = `thin solid ${borderColor}`;\r\n    }\r\n\r\n    return baseStyles;\r\n}\r\n\r\ninterface ThumbColors {\r\n    backgroundColor: string;\r\n    borderColor?: string;\r\n}\r\n\r\nfunction getThumbColors(isEnabled: boolean, isChecked: boolean, themeColors: ToggleThemeColors): ThumbColors {\r\n    const thumbColors: ThumbColors = {\r\n        backgroundColor: themeColors.backgroundColor,\r\n    };\r\n\r\n    if (!isEnabled && isChecked) {\r\n        thumbColors.backgroundColor = isContrastTheme(themeColors.themeName)\r\n            ? themeColors.backgroundColor\r\n            : themeColors.disabledAccentColor;\r\n    }\r\n\r\n    if (!isChecked) {\r\n        thumbColors.borderColor = isEnabled ? themeColors.textColor : themeColors.disabledAccentColor;\r\n    }\r\n\r\n    return thumbColors;\r\n}\r\n\r\ninterface PillStyles {\r\n    backgroundColor: string;\r\n    transition?: string;\r\n    border?: string;\r\n    selectors?: any;\r\n}\r\n\r\nfunction getPillStyles(isEnabled: boolean, isChecked: boolean, themeColors: ToggleThemeColors): PillStyles {\r\n    const { backgroundColor: thumbBackgroundColor } = getThumbColors(isEnabled, isChecked, themeColors);\r\n    const {\r\n        backgroundColor: pillBackgroundColor,\r\n        borderColor,\r\n        contrastHoverColor,\r\n    } = getPillColors(isEnabled, isChecked, themeColors);\r\n    const baseStyles: PillStyles = {\r\n        backgroundColor: pillBackgroundColor,\r\n        transition: 'background-color 0.1s, border-color 0.1s',\r\n    };\r\n\r\n    if (!isChecked) {\r\n        baseStyles.border = `thin solid ${borderColor} !important`;\r\n    }\r\n\r\n    if (isEnabled) {\r\n        baseStyles.selectors = {\r\n            ':hover': {\r\n                ...(contrastHoverColor && {\r\n                    backgroundColor: pillBackgroundColor,\r\n                    ...(!isChecked && { borderColor: `${contrastHoverColor} !important` }),\r\n                }),\r\n                selectors: {\r\n                    '.ms-Toggle-thumb': {\r\n                        backgroundColor: thumbBackgroundColor,\r\n                        ...(contrastHoverColor && !isChecked && { borderColor: contrastHoverColor }),\r\n                    },\r\n                },\r\n            },\r\n        };\r\n    }\r\n\r\n    return baseStyles;\r\n}\r\n\r\ninterface PillColors {\r\n    backgroundColor: string;\r\n    borderColor?: string;\r\n    contrastHoverColor?: string;\r\n}\r\n\r\nfunction getPillColors(isEnabled: boolean, isChecked: boolean, themeColors: ToggleThemeColors): PillColors {\r\n    const pillColors: PillColors = {\r\n        backgroundColor: themeColors.backgroundColor,\r\n    };\r\n\r\n    if (isChecked) {\r\n        pillColors.backgroundColor = isEnabled\r\n            ? themeColors.checkedBackgroundColor\r\n            : themeColors.disabledBackgroundColor;\r\n    }\r\n\r\n    if (!isChecked) {\r\n        pillColors.borderColor = isEnabled ? themeColors.textColor : themeColors.disabledAccentColor;\r\n    }\r\n\r\n    if (isContrastTheme(themeColors.themeName)) {\r\n        pillColors.contrastHoverColor = themeColors.checkedBackgroundColor;\r\n    }\r\n\r\n    return pillColors;\r\n}\r\n","import { KeyExtractor } from '../../abstractions';\r\nimport { BaseFormEntry } from '../types';\r\n\r\n/**\r\n * A key extractor that uses the question id as the key.\r\n *\r\n * @param entry The entry.\r\n * @returns The key.\r\n */\r\nexport const idKeyExtractor: KeyExtractor<BaseFormEntry<{ id: string }, unknown>> = entry => entry.question.id;\r\n","export * from './abstractions';\r\nexport * from './facade';\r\nexport * from './implementations';\r\n","export * from './background-color';\r\nexport * from './customized-mention';\r\nexport * from './defaults';\r\nexport * from './file';\r\nexport * from './font-size';\r\nexport * from './hack';\r\nexport * from './link';\r\nexport * from './misc';\r\n","import { IconButton } from '@fluentui/react';\r\nimport React from 'react';\r\nimport { FieldProps } from '../../../abstractions';\r\nimport { FormContext, FormEntry, FormFeature, QuestionAction } from '../../types';\r\nimport { addNewFormEntry } from '../../utilities';\r\n\r\nexport type DesigningActionsProps = FieldProps<FormEntry, FormContext, FormFeature>;\r\n\r\nexport function DesigningActions({\r\n    entry,\r\n    onEntryChange,\r\n    context,\r\n    onContextChange,\r\n    feature,\r\n}: DesigningActionsProps): JSX.Element {\r\n    const { entries } = context;\r\n    const { comparator, idGenerator, orderGenerator, constants, strings } = feature;\r\n\r\n    const [sortedEntries, sortedIndex, nextSlotOrder] = React.useMemo(() => {\r\n        const sortedEntries = [...entries].sort(comparator);\r\n        const sortedIndex = sortedEntries.findIndex(e => e === entry);\r\n        const nextSlotOrder = orderGenerator(\r\n            sortedEntries[sortedIndex]?.question.order,\r\n            sortedEntries[sortedIndex + 1]?.question.order\r\n        );\r\n        return [sortedEntries, sortedIndex, nextSlotOrder];\r\n    }, [comparator, entries, entry, orderGenerator]);\r\n\r\n    const reachMaxEntries = entries.length >= constants.maxEntries;\r\n\r\n    const addEntry = React.useCallback(() => {\r\n        const newEntries = addNewFormEntry(entries, { idGenerator, order: nextSlotOrder, strings });\r\n        onContextChange?.({ ...context, entries: newEntries });\r\n    }, [context, entries, idGenerator, nextSlotOrder, onContextChange, strings]);\r\n\r\n    const copyEntry = React.useCallback(() => {\r\n        const newEntry = { ...entry };\r\n        newEntry.question = { ...newEntry.question, id: idGenerator(), order: nextSlotOrder };\r\n        delete newEntry.question.familyId;\r\n        delete newEntry.question.eTag;\r\n        delete newEntry.answer.content;\r\n        delete newEntry.active;\r\n        onContextChange?.({ ...context, entries: [...entries, newEntry] });\r\n    }, [context, entries, entry, idGenerator, nextSlotOrder, onContextChange]);\r\n\r\n    const deleteEntry = React.useCallback(() => {\r\n        const newEntries = entries.filter(e => e !== entry);\r\n        onContextChange?.({ ...context, entries: newEntries });\r\n    }, [entries, onContextChange, context, entry]);\r\n\r\n    const moveEntry = React.useCallback(\r\n        (newIndex: number) => {\r\n            if (newIndex === sortedIndex) return;\r\n\r\n            const [newPrevIndex, newNextIndex] =\r\n                newIndex < sortedIndex ? [newIndex - 1, newIndex] : [newIndex, newIndex + 1];\r\n\r\n            const newOrder = orderGenerator(\r\n                sortedEntries[newPrevIndex]?.question.order,\r\n                sortedEntries[newNextIndex]?.question.order\r\n            );\r\n\r\n            const newEntry = { ...entry };\r\n            newEntry.question = { ...newEntry.question, order: newOrder };\r\n            onEntryChange?.(newEntry);\r\n        },\r\n        [entry, onEntryChange, orderGenerator, sortedEntries, sortedIndex]\r\n    );\r\n\r\n    return (\r\n        <>\r\n            <IconButton\r\n                iconProps={{ iconName: 'Up' }}\r\n                title={strings.questionAction(QuestionAction.MoveUp)}\r\n                disabled={!sortedEntries[sortedIndex - 1]}\r\n                onClick={() => moveEntry(sortedIndex - 1)}\r\n            />\r\n            <IconButton\r\n                iconProps={{ iconName: 'Down' }}\r\n                title={strings.questionAction(QuestionAction.MoveDown)}\r\n                disabled={!sortedEntries[sortedIndex + 1]}\r\n                onClick={() => moveEntry(sortedIndex + 1)}\r\n            />\r\n            <IconButton\r\n                iconProps={{ iconName: 'Add' }}\r\n                title={strings.questionAction(QuestionAction.Add)}\r\n                onClick={addEntry}\r\n                disabled={reachMaxEntries}\r\n            />\r\n            <IconButton\r\n                iconProps={{ iconName: 'Copy' }}\r\n                title={strings.questionAction(QuestionAction.Copy)}\r\n                onClick={copyEntry}\r\n                disabled={reachMaxEntries}\r\n            />\r\n            <IconButton\r\n                iconProps={{ iconName: 'Delete' }}\r\n                title={strings.questionAction(QuestionAction.Delete)}\r\n                onClick={deleteEntry}\r\n            />\r\n        </>\r\n    );\r\n}\r\n","import { FontSizes, makeStyles } from '@addressbook/components-fluentui-teams-theme';\r\n\r\nexport const useInsertLinkStyles = makeStyles({\r\n    root: {\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        gap: '8px',\r\n    },\r\n    buttons: {\r\n        display: 'flex',\r\n        justifyContent: 'flex-end',\r\n        gap: '8px',\r\n    },\r\n});\r\n\r\nexport const useInsertLinkDialogStyles = makeStyles({\r\n    root: {\r\n        '.ms-Dialog-content': {\r\n            display: 'flex',\r\n            flexDirection: 'column',\r\n            gap: '16px',\r\n        },\r\n    },\r\n});\r\n\r\nexport const useInsertLinkMenuStyles = makeStyles({\r\n    root: {\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        gap: '8px',\r\n        padding: '16px',\r\n    },\r\n    header: {\r\n        fontSize: FontSizes.size14,\r\n        fontWeight: 600,\r\n    },\r\n});\r\n","import { DefaultButton, mergeStyles, PrimaryButton, TextField } from '@fluentui/react';\r\nimport React from 'react';\r\nimport { RichTextFieldButton, RichTextFieldStrings } from '../../types';\r\nimport { useInsertLinkStyles } from './InsertLink.styles';\r\n\r\nexport interface Link {\r\n    url: string;\r\n    displayText: string;\r\n}\r\n\r\nexport interface InsertLinkProps extends React.HTMLAttributes<HTMLDivElement> {\r\n    initialLink: Link;\r\n    onConfirm?: (link: Link) => void;\r\n    onCancel?: () => void;\r\n    normalizeUrl?: (url: string) => string;\r\n    strings: Pick<RichTextFieldStrings, 'button' | 'insertLinkTitle' | 'insertLinkUrl' | 'insertLinkDisplayAs'>;\r\n}\r\n\r\nexport const InsertLink: React.FC<InsertLinkProps> = ({\r\n    initialLink,\r\n    onConfirm,\r\n    onCancel,\r\n    normalizeUrl,\r\n    strings,\r\n    className,\r\n    ...props\r\n}) => {\r\n    const [displayText, setDisplayText] = React.useState(initialLink.displayText);\r\n    const [url, setUrl] = React.useState(initialLink.url);\r\n    const normalizedUrl = React.useMemo(() => normalizeUrl?.(url) ?? url, [url, normalizeUrl]);\r\n\r\n    const onConfirmInternal = React.useCallback(() => {\r\n        if (!normalizedUrl) return;\r\n        onConfirm?.({ url: normalizedUrl, displayText: displayText || url });\r\n    }, [onConfirm, normalizedUrl, displayText, url]);\r\n\r\n    const onKeyPress = React.useCallback(\r\n        (e: React.KeyboardEvent) => {\r\n            if (e.key === 'Enter') onConfirmInternal();\r\n        },\r\n        [onConfirmInternal]\r\n    );\r\n\r\n    const styles = useInsertLinkStyles();\r\n    return (\r\n        <div className={mergeStyles(styles.root, className)} {...props}>\r\n            <TextField\r\n                label={strings.insertLinkUrl}\r\n                required\r\n                type='url'\r\n                value={url}\r\n                onChange={(_, newValue = '') => setUrl(newValue)}\r\n                onKeyPress={onKeyPress}\r\n            />\r\n            <TextField\r\n                label={strings.insertLinkDisplayAs}\r\n                value={displayText}\r\n                onChange={(_, newValue = '') => setDisplayText(newValue)}\r\n                onKeyPress={onKeyPress}\r\n            />\r\n            <div className={mergeStyles(styles.buttons)}>\r\n                <DefaultButton onClick={onCancel}>{strings.button(RichTextFieldButton.Cancel)}</DefaultButton>\r\n                <PrimaryButton onClick={onConfirmInternal} disabled={!normalizedUrl}>\r\n                    {strings.button(RichTextFieldButton.OK)}\r\n                </PrimaryButton>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n","export * from './RestrictionSettings';\r\n","import { uuid } from '@addressbook/utilities-core';\r\nimport { IdGenerator } from '../types';\r\n\r\nexport const uuidIdGenerator: IdGenerator = uuid;\r\n","/* istanbul ignore file */\r\n\r\nimport { FontWeights, IButtonStyles, IRawStyle, ITheme } from '@fluentui/react';\r\nimport { ContrastColors } from '../teams-colors';\r\nimport { ShadowLevels } from '../teams-shadow-levels';\r\nimport { isContrastTheme, isDarkTheme } from '../teams-theme';\r\nimport { teamsBorderRadius } from './constants';\r\n\r\nexport function getDefaultButtonStyles(themeName: string, theme: ITheme): Partial<IButtonStyles> {\r\n    let primaryTextColor = theme.palette.white;\r\n    let primaryBackgroundColor = theme.palette.themePrimary;\r\n    let primaryBackgroundHoverColor = theme.palette.themeDark;\r\n    let primaryBackgroundActiveColor = theme.palette.themeDarker;\r\n    let primaryBackgroundFocusColor = theme.palette.themeDark;\r\n    let primaryDividerColor = theme.palette.neutralTertiaryAlt;\r\n    let focusBoxShadowColor = theme.palette.white;\r\n    let focusBackgroundColor = theme.palette.neutralTertiaryAlt;\r\n    let focusTextColor = theme.palette.black;\r\n    let focusPrimaryTextColor = theme.palette.white;\r\n    const buttonMinWidth = '96px';\r\n    const buttonBorderRadius = teamsBorderRadius;\r\n    const buttonPadding = '0 16px';\r\n    const buttonBoxShadow = ShadowLevels.shadowLevel1;\r\n    const buttonBoxShadowDark = ShadowLevels.shadowLevel1Dark;\r\n    const rootHoverColor = theme.palette.neutralQuaternary;\r\n    const rootPressedCheckedColor = theme.palette.neutralTertiaryAlt;\r\n\r\n    if (isDarkTheme(themeName)) {\r\n        primaryTextColor = theme.palette.black;\r\n        primaryBackgroundColor = theme.palette.themeTertiary;\r\n        primaryBackgroundHoverColor = theme.palette.themeSecondary;\r\n        primaryBackgroundActiveColor = theme.palette.themeLight;\r\n        primaryBackgroundFocusColor = theme.palette.themeLight;\r\n        primaryDividerColor = theme.palette.white;\r\n        focusTextColor = theme.palette.black;\r\n        focusPrimaryTextColor = theme.palette.black;\r\n    }\r\n\r\n    if (isContrastTheme(themeName)) {\r\n        primaryTextColor = theme.palette.white;\r\n        primaryBackgroundColor = theme.palette.black;\r\n        primaryBackgroundHoverColor = theme.palette.themeDark;\r\n        primaryBackgroundActiveColor = theme.palette.themeDark;\r\n        primaryDividerColor = theme.palette.white;\r\n        focusBoxShadowColor = 'transparent';\r\n        focusBackgroundColor = theme.palette.themeDark;\r\n        focusTextColor = theme.palette.white;\r\n    }\r\n\r\n    const commonStyles = {\r\n        borderColor: 'transparent',\r\n        background: primaryBackgroundColor,\r\n        color: primaryTextColor,\r\n        boxShadow: buttonBoxShadowDark,\r\n        selectors: {\r\n            ':hover': {\r\n                borderColor: 'transparent',\r\n                background: primaryBackgroundHoverColor,\r\n                color: primaryTextColor,\r\n            },\r\n            ':active': {\r\n                borderColor: 'transparent',\r\n                background: primaryBackgroundActiveColor,\r\n                color: primaryTextColor,\r\n            },\r\n        },\r\n    };\r\n\r\n    const focusStyles = {\r\n        // Work around for fluentui button focus outline not showing in iOS Safari.\r\n        ':focus-visible, .ms-Fabric--isFocusVisible &:focus': {\r\n            borderColor: theme.palette.black,\r\n            '::after': {\r\n                outline: 'none',\r\n                borderRadius: buttonBorderRadius,\r\n                borderColor: theme.palette.white,\r\n                borderWidth: '1px',\r\n                borderStyle: 'solid',\r\n                inset: 0,\r\n            },\r\n        },\r\n    };\r\n\r\n    const styles = {\r\n        root: {\r\n            borderRadius: buttonBorderRadius,\r\n            backgroundColor: theme.palette.white,\r\n            borderColor: theme.palette.neutralTertiaryAlt,\r\n            color: theme.palette.black,\r\n            boxShadow: buttonBoxShadow,\r\n            cursor: 'pointer',\r\n            minWidth: buttonMinWidth,\r\n            padding: buttonPadding,\r\n            selectors: {\r\n                '.icons-default-fill': {\r\n                    fill: theme.palette.black,\r\n                },\r\n                '.icons-filled': {\r\n                    display: 'none',\r\n                },\r\n            },\r\n        },\r\n        rootHovered: {\r\n            backgroundColor: rootHoverColor,\r\n            borderColor: theme.palette.neutralTertiary,\r\n            color: theme.palette.black,\r\n            selectors: {\r\n                ...focusStyles,\r\n            },\r\n        },\r\n        rootPressed: {\r\n            backgroundColor: rootPressedCheckedColor,\r\n            borderColor: theme.palette.neutralTertiary,\r\n            boxShadow: 'none',\r\n            color: theme.palette.black,\r\n        },\r\n        rootChecked: {\r\n            backgroundColor: rootPressedCheckedColor,\r\n            borderColor: theme.palette.neutralTertiary,\r\n            color: theme.palette.black,\r\n            selectors: {\r\n                ...focusStyles,\r\n            },\r\n        },\r\n\r\n        rootCheckedHovered: {\r\n            selectors: {\r\n                ...focusStyles,\r\n            },\r\n        },\r\n        rootDisabled: {\r\n            backgroundColor: rootHoverColor,\r\n            color: theme.palette.neutralTertiary,\r\n            borderColor: 'transparent',\r\n            boxShadow: 'none',\r\n            selectors: {\r\n                ...focusStyles,\r\n            },\r\n        },\r\n        rootFocused: {\r\n            boxShadow: buttonBoxShadow,\r\n            selectors: {\r\n                ...focusStyles,\r\n            },\r\n        },\r\n        icon: {\r\n            fontSize: '1.5em',\r\n            height: 'unset',\r\n        },\r\n        menuIcon: {\r\n            fontSize: '1.5em',\r\n            height: 'unset',\r\n        },\r\n        splitButtonMenuButton: {\r\n            borderTopRightRadius: buttonBorderRadius,\r\n            borderBottomRightRadius: buttonBorderRadius,\r\n            borderWidth: '1px',\r\n            borderStyle: 'solid',\r\n            background: theme.palette.white,\r\n            borderLeft: 0,\r\n            color: theme.palette.black,\r\n            marginLeft: 0,\r\n            selectors: {\r\n                '.icons-filled': {\r\n                    display: 'none',\r\n                },\r\n                ':hover': {\r\n                    backgroundColor: theme.palette.neutralLighter,\r\n                    color: theme.palette.black,\r\n                },\r\n                ':active': {\r\n                    backgroundColor: theme.palette.neutralTertiaryAlt,\r\n                    color: theme.palette.black,\r\n                },\r\n                '.ms-Button-icon': {\r\n                    color: 'inherit',\r\n                    fontWeight: FontWeights.bold,\r\n                },\r\n            },\r\n        },\r\n        splitButtonContainer: {\r\n            selectors: {\r\n                '.ms-Button': {\r\n                    borderColor: theme.palette.neutralTertiaryAlt,\r\n                    backgroundClip: 'padding-box',\r\n                },\r\n                '.ms-Button--default': {\r\n                    borderRight: 0,\r\n                    borderTopRightRadius: '0px',\r\n                    borderBottomRightRadius: '0px',\r\n                },\r\n                '.ms-Button--default + .ms-Button': {\r\n                    boxShadow: buttonBoxShadow,\r\n                },\r\n                '.ms-Button--primary': {\r\n                    borderRight: 0,\r\n                    borderTopRightRadius: '0px',\r\n                    borderBottomRightRadius: '0px',\r\n                    ...commonStyles,\r\n                },\r\n                '.ms-Button--primary + .ms-Button': { ...commonStyles },\r\n                \".ms-Button--primary ~ span[class*='css-']\": {\r\n                    top: 0,\r\n                    bottom: 0,\r\n                    backgroundColor: primaryDividerColor,\r\n                },\r\n                \".ms-Button--primary + .ms-Button[aria-expanded='true']\": {\r\n                    background: primaryBackgroundActiveColor,\r\n                    color: primaryTextColor,\r\n                },\r\n                ':hover': {\r\n                    selectors: {\r\n                        '.ms-Button': {\r\n                            borderColor: theme.palette.neutralTertiary,\r\n                        },\r\n                        '.ms-Button--primary': {\r\n                            borderColor: 'transparent',\r\n                        },\r\n                        '.ms-Button--primary + .ms-Button': {\r\n                            borderColor: 'transparent',\r\n                        },\r\n                    },\r\n                },\r\n                ':active': {\r\n                    selectors: {\r\n                        '.ms-Button': {\r\n                            borderColor: theme.palette.neutralTertiary,\r\n                            boxShadow: 'none',\r\n                        },\r\n                        '.ms-Button--primary': {\r\n                            borderColor: 'transparent',\r\n                        },\r\n                        '.ms-Button--primary + .ms-Button': {\r\n                            borderColor: 'transparent',\r\n                        },\r\n                    },\r\n                },\r\n            },\r\n        },\r\n        splitButtonContainerFocused: {\r\n            selectors: {\r\n                '.ms-Fabric--isFocusVisible &': {\r\n                    selectors: {\r\n                        ':focus::after': {\r\n                            outline: 'none',\r\n                            borderRadius: teamsBorderRadius,\r\n                            borderColor: theme.palette.black,\r\n                            top: 0,\r\n                            bottom: 0,\r\n                            left: 0,\r\n                            right: 0,\r\n                            boxShadow: `${focusBoxShadowColor} 0 0 0 1px inset`,\r\n                        },\r\n                        ':focus': {\r\n                            selectors: {\r\n                                '.ms-Button': {\r\n                                    backgroundColor: focusBackgroundColor,\r\n                                    color: focusTextColor,\r\n                                },\r\n                                \".ms-Button ~ span[class*='css-']\": {\r\n                                    backgroundColor: theme.palette.white,\r\n                                },\r\n                                '.ms-Button--primary': {\r\n                                    backgroundColor: primaryBackgroundFocusColor,\r\n                                    color: focusPrimaryTextColor,\r\n                                },\r\n                                '.ms-Button--primary + .ms-Button': {\r\n                                    backgroundColor: primaryBackgroundFocusColor,\r\n                                    color: focusPrimaryTextColor,\r\n                                },\r\n                            },\r\n                        },\r\n                    },\r\n                },\r\n            },\r\n        },\r\n        splitButtonMenuButtonExpanded: {\r\n            background: theme.palette.neutralTertiaryAlt,\r\n            color: theme.palette.black,\r\n            borderColor: theme.palette.neutralTertiary,\r\n        },\r\n        splitButtonDivider: {\r\n            top: 1,\r\n            bottom: 1,\r\n            width: 1,\r\n            backgroundColor: theme.palette.neutralTertiaryAlt,\r\n        },\r\n        description: {\r\n            color: 'inherit',\r\n        },\r\n    } as Partial<IButtonStyles>;\r\n\r\n    // Dark theme overrides\r\n    if (isDarkTheme(themeName)) {\r\n        // Root\r\n        (styles.root as IRawStyle).boxShadow = buttonBoxShadowDark;\r\n        (styles.root as IRawStyle).borderColor = theme.palette.neutralTertiary;\r\n        (styles.root as IRawStyle).backgroundColor = theme.palette.neutralLight;\r\n    }\r\n\r\n    // Contrast theme overrides\r\n    if (isContrastTheme(themeName)) {\r\n        // Root\r\n        (styles.root as IRawStyle).borderWidth = '2px';\r\n        (styles.root as IRawStyle).borderColor = theme.palette.black;\r\n        // Root Hovered\r\n        (styles.rootHovered as IRawStyle).borderColor = theme.palette.themeDark;\r\n        (styles.rootHovered as IRawStyle).color = theme.palette.white;\r\n        (styles.rootHovered as IRawStyle).backgroundColor = theme.palette.themeDark;\r\n        // Root Pressed\r\n        (styles.rootPressed as IRawStyle).borderColor = theme.palette.themeDark;\r\n        (styles.rootPressed as IRawStyle).color = theme.palette.white;\r\n        (styles.rootPressed as IRawStyle).backgroundColor = theme.palette.themeDark;\r\n        // Root Checked\r\n        (styles.rootChecked as IRawStyle).borderColor = theme.palette.black;\r\n        (styles.rootChecked as IRawStyle).color = theme.palette.white;\r\n\r\n        // Root Disabled\r\n        (styles.rootDisabled as IRawStyle).color = ContrastColors.appGreenContrast;\r\n        (styles.rootDisabled as IRawStyle).borderWidth = '2px';\r\n        (styles.rootDisabled as IRawStyle).borderColor = ContrastColors.appGreenContrast;\r\n        (styles.rootDisabled as IRawStyle).backgroundColor = theme.palette.white;\r\n        // Root Focused\r\n        (styles.rootFocused as IRawStyle).color = theme.palette.black;\r\n        (styles.rootFocused as IRawStyle).borderWidth = '2px';\r\n        (styles.rootFocused as IRawStyle).backgroundColor = theme.palette.white;\r\n        (styles.rootFocused as IRawStyle).borderColor = theme.palette.themePrimary;\r\n\r\n        // Splitmenu Button Overrides\r\n        (styles.splitButtonMenuButton as IRawStyle).color = theme.palette.black;\r\n        (styles.splitButtonMenuButton as IRawStyle).borderWidth = '2px';\r\n        ((styles.splitButtonMenuButton as Required<IRawStyle>).selectors[':hover'] as IRawStyle).color =\r\n            theme.palette.white;\r\n\r\n        ((styles.splitButtonMenuButton as Required<IRawStyle>).selectors[':active'] as IRawStyle).color =\r\n            theme.palette.white;\r\n\r\n        ((styles.splitButtonMenuButton as Required<IRawStyle>).selectors[':hover'] as IRawStyle).backgroundColor =\r\n            theme.palette.themeDark;\r\n\r\n        ((styles.splitButtonMenuButton as Required<IRawStyle>).selectors[':active'] as IRawStyle).backgroundColor =\r\n            theme.palette.themeDark;\r\n\r\n        (\r\n            ((styles.splitButtonContainer as Required<IRawStyle>).selectors[':hover'] as Required<IRawStyle>).selectors[\r\n                '.ms-Button'\r\n            ] as IRawStyle\r\n        ).borderColor = theme.palette.black;\r\n\r\n        (\r\n            ((styles.splitButtonContainer as Required<IRawStyle>).selectors[':active'] as Required<IRawStyle>)\r\n                .selectors['.ms-Button'] as IRawStyle\r\n        ).borderColor = theme.palette.black;\r\n\r\n        (styles.splitButtonDivider as IRawStyle).width = '2px';\r\n\r\n        (styles.splitButtonMenuButtonExpanded as IRawStyle).background = theme.palette.themeDark;\r\n        (styles.splitButtonMenuButtonExpanded as IRawStyle).color = theme.palette.white;\r\n        (styles.splitButtonMenuButtonExpanded as IRawStyle).borderColor = theme.palette.white;\r\n    }\r\n    return styles;\r\n}\r\n","export * from './RenderingField';\r\n","/* istanbul ignore file */\r\n\r\nimport {\r\n    FontWeights,\r\n    ICheckStyleProps,\r\n    ICheckStyles,\r\n    IDetailsListStyleProps,\r\n    IDetailsListStyles,\r\n    IDetailsRowStyleProps,\r\n    IDetailsRowStyles,\r\n    ITheme,\r\n} from '@fluentui/react';\r\nimport { FontSizes } from '../teams-sizes';\r\nimport { isContrastTheme } from '../teams-theme';\r\n\r\nexport function getCheckStyles(_themeName: string, _theme: ITheme) {\r\n    return (props: ICheckStyleProps): Partial<ICheckStyles> => {\r\n        const { theme, checked } = props;\r\n        const { palette } = theme;\r\n\r\n        const styles = {\r\n            circle: [!checked && { color: palette.neutralSecondary }],\r\n            check: [!checked && { color: palette.neutralSecondary }],\r\n        };\r\n\r\n        return styles;\r\n    };\r\n}\r\nexport function getDetailsListStyles(themeName: string, _theme: ITheme) {\r\n    return (props: IDetailsListStyleProps): Partial<IDetailsListStyles> => {\r\n        const { theme } = props;\r\n        const { palette } = theme;\r\n\r\n        const TEXT_COLOR = palette.black;\r\n        const DETAILS_HEADER_BORDER_COLOR = palette.neutralQuaternary;\r\n\r\n        const styles = {\r\n            root: {\r\n                background: 'transparent',\r\n                selectors: {\r\n                    '.ms-GroupHeader': {\r\n                        background: palette.neutralLighterAlt,\r\n                        color: TEXT_COLOR,\r\n                        borderBottom: 'none',\r\n                        selectors: {\r\n                            ':hover': {\r\n                                background: palette.neutralLighterAlt,\r\n                                color: TEXT_COLOR,\r\n                                selectors: {\r\n                                    '.ms-GroupHeader-expand': {\r\n                                        color: palette.neutralDark,\r\n                                    },\r\n                                },\r\n                            },\r\n                            '.ms-GroupSpacer': {\r\n                                width: '40px !important', // Needed to override inline css\r\n                            },\r\n                            '.ms-GroupHeader-title': {\r\n                                fontSize: FontSizes.size14,\r\n                                fontWeight: FontWeights.bold,\r\n                                selectors: {\r\n                                    \"[class^='headerCount-']\": {\r\n                                        fontWeight: FontWeights.regular,\r\n                                    },\r\n                                },\r\n                            },\r\n                            '.ms-GroupHeader-expand': {\r\n                                color: palette.neutralDark,\r\n                                selectors: {\r\n                                    ':hover': {\r\n                                        background: 'transparent',\r\n                                        color: palette.themePrimary,\r\n                                        selectors: {\r\n                                            i: {\r\n                                                fontWeight: FontWeights.bold,\r\n                                            },\r\n                                        },\r\n                                    },\r\n                                    i: {\r\n                                        fontSize: FontSizes.size12,\r\n                                    },\r\n                                },\r\n                            },\r\n                        },\r\n                    },\r\n                },\r\n            },\r\n            headerWrapper: {\r\n                selectors: {\r\n                    '.ms-DetailsHeader': {\r\n                        height: '32px',\r\n                        lineHeight: '32px',\r\n                        backgroundColor: 'transparent',\r\n                        borderBottomColor: DETAILS_HEADER_BORDER_COLOR,\r\n                        /**\r\n                         * Override min-width calculated by items-view\r\n                         */\r\n                        minWidth: '100% !important',\r\n                        padding: 0,\r\n                        selectors: {\r\n                            '.ms-DetailsHeader-cell': {\r\n                                height: '32px',\r\n                            },\r\n                            '.ms-DetailsHeader-cellName': {\r\n                                fontSize: FontSizes.size12,\r\n                                fontWeight: FontWeights.regular,\r\n                                display: 'flex',\r\n                                alignItems: 'center',\r\n                            },\r\n                            '.ms-DetailsRow-check': {\r\n                                width: '40px',\r\n                                height: '32px',\r\n                            },\r\n                            '.is-actionable': {\r\n                                selectors: {\r\n                                    '.ms-DetailsHeader-cellTitle': {\r\n                                        selectors: {\r\n                                            i: {\r\n                                                color: TEXT_COLOR,\r\n                                                position: 'relative' as const,\r\n                                                bottom: '2px',\r\n                                            },\r\n                                        },\r\n                                    },\r\n                                    ':hover': {\r\n                                        background: palette.neutralLighter,\r\n                                        color: TEXT_COLOR,\r\n                                        selectors: {\r\n                                            '.ms-DetailsHeader-cellTitle': {\r\n                                                color: TEXT_COLOR,\r\n                                                selectors: {\r\n                                                    i: {\r\n                                                        color: TEXT_COLOR,\r\n                                                    },\r\n                                                },\r\n                                            },\r\n                                        },\r\n                                    },\r\n                                },\r\n                            },\r\n                            \"[class*='cellIsGroupExpander-']\": {\r\n                                background: 'transparent',\r\n                                color: TEXT_COLOR,\r\n                                selectors: {\r\n                                    ':hover': {\r\n                                        background: palette.neutralLighter,\r\n                                        color: TEXT_COLOR,\r\n                                    },\r\n                                },\r\n                            },\r\n                            '.ms-DetailsHeader-cellTitle': {\r\n                                alignItems: 'center',\r\n                                color: TEXT_COLOR,\r\n                            },\r\n                            '.ms-DetailsHeader-filterChevron': {\r\n                                paddingTop: '2px',\r\n                            },\r\n                            ':hover .ms-DetailsHeader-cellTitle': {\r\n                                background: 'none',\r\n                            },\r\n                        },\r\n                    },\r\n                    '.ms-DetailsHeader-cellSizer': {\r\n                        cursor: 'ew-resize',\r\n                    },\r\n                },\r\n            },\r\n            contentWrapper: {\r\n                '.ms-DetailsRow': {\r\n                    ':hover': {\r\n                        backgroundColor: isContrastTheme(themeName)\r\n                            ? theme.palette.themeTertiary\r\n                            : theme.palette.neutralQuaternaryAlt,\r\n                    },\r\n                    ':active': {\r\n                        backgroundColor: theme.palette.neutralTertiaryAlt,\r\n                    },\r\n                    '::after': {\r\n                        // Override the default border color when selected, whose contrast is not enough\r\n                        borderColor: `${palette.black} !important`,\r\n                    },\r\n                },\r\n            },\r\n        };\r\n\r\n        // Contrast theme overrides\r\n        if (isContrastTheme(themeName)) {\r\n            styles.headerWrapper.selectors['.ms-DetailsHeader'].borderBottomColor = palette.neutralTertiaryAlt;\r\n\r\n            styles.headerWrapper.selectors['.ms-DetailsHeader'].selectors['.is-actionable'].selectors[\r\n                ':hover'\r\n            ].background = palette.themeDark;\r\n\r\n            styles.headerWrapper.selectors['.ms-DetailsHeader'].selectors['.is-actionable'].selectors[':hover'].color =\r\n                palette.white;\r\n            styles.headerWrapper.selectors['.ms-DetailsHeader'].selectors['.is-actionable'].selectors[\r\n                ':hover'\r\n            ].selectors['.ms-DetailsHeader-cellTitle'].selectors.i.color = palette.white;\r\n            styles.headerWrapper.selectors['.ms-DetailsHeader'].selectors['.is-actionable'].selectors[\r\n                ':hover'\r\n            ].selectors['.ms-DetailsHeader-cellTitle'].color = palette.white;\r\n            styles.headerWrapper.selectors['.ms-DetailsHeader'].selectors['.ms-DetailsHeader-cellTitle'].color =\r\n                palette.black;\r\n\r\n            styles.headerWrapper.selectors['.ms-DetailsHeader'].selectors[\"[class*='cellIsGroupExpander-']\"].selectors[\r\n                ':hover'\r\n            ].background = palette.themeDark;\r\n            styles.headerWrapper.selectors['.ms-DetailsHeader'].selectors[\"[class*='cellIsGroupExpander-']\"].selectors[\r\n                ':hover'\r\n            ].color = palette.white;\r\n\r\n            // Group Header Styling\r\n            styles.root.selectors['.ms-GroupHeader'].selectors[':hover'].color = theme.palette.white;\r\n            styles.root.selectors['.ms-GroupHeader'].selectors[':hover'].background = palette.themeDark;\r\n            styles.root.selectors['.ms-GroupHeader'].selectors[':hover'].selectors['.ms-GroupHeader-expand'].color =\r\n                theme.palette.white;\r\n            styles.root.selectors['.ms-GroupHeader'].selectors['.ms-GroupHeader-expand'].selectors[':hover'].color =\r\n                theme.palette.white;\r\n        }\r\n\r\n        return styles;\r\n    };\r\n}\r\nexport function getDetailsRowStyles(themeName: string, _theme: ITheme) {\r\n    return (props: IDetailsRowStyleProps): Partial<IDetailsRowStyles> => {\r\n        const { theme, isSelected } = props;\r\n        const { palette } = theme;\r\n\r\n        let ROW_HOVER_BACKGROUND_COLOR = palette.neutralLight;\r\n        let SELECTED_ROW_BACKGROUND_COLOR = palette.white;\r\n        const ROW_BORDER_COLOR = palette.neutralLighter;\r\n\r\n        const TEXT_COLOR = palette.black;\r\n        const LINK_TEXT_COLOR = palette.black;\r\n        let LINK_TEXT_HOVER_COLOR = palette.black;\r\n        let SELECTED_HOVER_COLOR = palette.black;\r\n\r\n        const HERO_BUTTON = \"[class*='heroButton']\";\r\n\r\n        // Contrast theme overrides\r\n        if (isContrastTheme(themeName)) {\r\n            ROW_HOVER_BACKGROUND_COLOR = palette.themeTertiary;\r\n            SELECTED_ROW_BACKGROUND_COLOR = palette.themePrimary;\r\n            SELECTED_HOVER_COLOR = palette.white;\r\n            LINK_TEXT_HOVER_COLOR = palette.white;\r\n        }\r\n\r\n        const styles = {\r\n            root: [\r\n                {\r\n                    background: 'transparent',\r\n                    color: TEXT_COLOR,\r\n                    borderBottomColor: ROW_BORDER_COLOR,\r\n                    fontSize: FontSizes.size14,\r\n                    /**\r\n                     * Override min-width calculated by items-view\r\n                     */\r\n                    minWidth: '100% !important',\r\n                    selectors: {\r\n                        '.ms-DetailsRow-cell': {\r\n                            color: TEXT_COLOR,\r\n                            selectors: {\r\n                                '.ms-DetailsRow-check': {\r\n                                    height: '100%',\r\n                                    width: '40px',\r\n                                },\r\n                                '.ms-Button--icon': {\r\n                                    color: 'inherit',\r\n                                },\r\n                            },\r\n                        },\r\n                        '.ms-Details': {\r\n                            selectors: {\r\n                                '.ms-Button': {\r\n                                    background: 'transparent',\r\n                                },\r\n                            },\r\n                        },\r\n                        '.ms-Link': {\r\n                            // Need it to override all state (i.e. focus, hover, active) styles for the ms-link component\r\n                            color: `${LINK_TEXT_COLOR} !important`,\r\n                        },\r\n                        ':hover': {\r\n                            background: ROW_HOVER_BACKGROUND_COLOR,\r\n                            selectors: {\r\n                                '.ms-DetailsRow-cell': {\r\n                                    color: SELECTED_HOVER_COLOR,\r\n                                },\r\n                                // Need it to override all state (i.e. focus, hover) styles for the ms-link component\r\n                                '.ms-Link': {\r\n                                    color: `${LINK_TEXT_HOVER_COLOR} !important`,\r\n                                },\r\n                                '.ms-TooltipHost': {\r\n                                    color: SELECTED_HOVER_COLOR,\r\n                                },\r\n                            },\r\n                        },\r\n                        [HERO_BUTTON]: {\r\n                            background: 'transparent',\r\n                            selectors: {\r\n                                ':hover': {\r\n                                    background: 'transparent',\r\n                                    selectors: {\r\n                                        i: {\r\n                                            fontWeight: FontWeights.bold,\r\n                                        },\r\n                                    },\r\n                                },\r\n                            },\r\n                        },\r\n                        '.ms-Button--icon': {\r\n                            width: '2rem',\r\n                        },\r\n                    },\r\n                },\r\n                isSelected && [\r\n                    {\r\n                        background: SELECTED_ROW_BACKGROUND_COLOR,\r\n\r\n                        selectors: {\r\n                            '.ms-DetailsRow-cell': {\r\n                                color: SELECTED_HOVER_COLOR,\r\n                            },\r\n                            // Need it to override all state (i.e. focus, hover, active) styles for the ms-link component\r\n                            '.ms-Link': {\r\n                                color: `${LINK_TEXT_COLOR} !important`,\r\n                            },\r\n                            ':focus': {\r\n                                background: SELECTED_ROW_BACKGROUND_COLOR,\r\n                                color: SELECTED_HOVER_COLOR,\r\n                                selectors: {\r\n                                    '.ms-DetailsRow-cell': {\r\n                                        color: SELECTED_HOVER_COLOR,\r\n                                    },\r\n                                    // Need it to override all state (i.e. focus, hover) styles for the ms-link component\r\n                                    '.ms-Link': {\r\n                                        color: `${LINK_TEXT_HOVER_COLOR} !important`,\r\n                                    },\r\n                                    ':hover': {\r\n                                        background: ROW_HOVER_BACKGROUND_COLOR,\r\n                                    },\r\n                                },\r\n                            },\r\n                            ':hover': {\r\n                                background: ROW_HOVER_BACKGROUND_COLOR,\r\n                            },\r\n                        },\r\n                    },\r\n                ],\r\n            ],\r\n            cell: {\r\n                margin: 'auto',\r\n            },\r\n        } as Partial<IDetailsRowStyles>;\r\n\r\n        return styles;\r\n    };\r\n}\r\n","export * from './comparators';\r\nexport * from './constants';\r\nexport * from './default';\r\nexport * from './descriptors';\r\nexport * from './idGenerators';\r\nexport * from './keyExtractors';\r\nexport * from './orderGenerators';\r\nexport * from './sanitizers';\r\nexport * from './strings';\r\nexport * from './trailingRenders';\r\nexport * from './validators';\r\n","import Mention from '@tiptap/extension-mention';\r\n\r\nexport const CustomizedMention = Mention.extend({\r\n    addAttributes() {\r\n        // Return an object with attribute configuration\r\n        return {\r\n            id: {\r\n                default: null,\r\n                parseHTML: element => {\r\n                    return element.getAttribute('data-mention-id');\r\n                },\r\n                renderHTML: attributes => {\r\n                    if (!attributes.id) {\r\n                        return {};\r\n                    }\r\n\r\n                    return {\r\n                        'data-mention-id': attributes.id,\r\n                    };\r\n                },\r\n            },\r\n\r\n            type: {\r\n                default: null,\r\n                parseHTML: element => element.getAttribute('data-mention-type'),\r\n                renderHTML: attributes => {\r\n                    if (!attributes.type) {\r\n                        return {};\r\n                    }\r\n\r\n                    return {\r\n                        'data-mention-type': attributes.type,\r\n                    };\r\n                },\r\n            },\r\n\r\n            label: {\r\n                default: null,\r\n                rendered: false,\r\n                parseHTML: element => element.innerText,\r\n            },\r\n        };\r\n    },\r\n\r\n    renderHTML: props => [\r\n        'span',\r\n        {\r\n            'data-type': 'mention',\r\n            'data-mention-id': props.node.attrs?.id,\r\n            'data-mention-type': props.node.attrs?.type,\r\n        },\r\n        props.node.attrs?.label ?? props.node.attrs?.id,\r\n    ],\r\n});\r\n","/*\r\n *  Copyright © Microsoft Corporation. All rights reserved.\r\n */\r\n\r\nimport { ITheme, IBasePickerStyles, IBasePickerStyleProps, IRawStyle } from '@fluentui/react';\r\nimport { ContrastColors, CoreColors, DarkColors } from '../teams-colors';\r\nimport { isContrastTheme, isDarkTheme, isDefaultTheme } from '../teams-theme';\r\nimport { teamsBorderRadius } from './constants';\r\n\r\nexport function getPeopePickerStyles(themeName: string, theme: ITheme) {\r\n    return (props: IBasePickerStyleProps): Partial<IBasePickerStyles> => {\r\n        const { disabled } = props;\r\n        const { palette } = theme;\r\n        let PLACEHOLDER_NOT_DISABLED = isDefaultTheme(themeName)\r\n            ? CoreColors.placeHolderTextColor\r\n            : theme.palette.neutralTertiaryAlt;\r\n        let FIELD_GROUP_BACKGROUND_COLOR = palette.neutralLight;\r\n        let SELECTED_BG_COLOR = CoreColors.appGray09;\r\n        let FIELD_GROUP_OPACITY = 0.64;\r\n        const FIELD_COLOR = palette.black;\r\n        let FIELD_COLOR_PLACEHOLDER_NOT_DISABLED = palette.neutralDark;\r\n        let FIELD_COLOR_PLACEHOLDER_DISABLED = palette.neutralDark;\r\n        let FIELD_GROUP_BORDER_WIDTH = '0 0 2px 0';\r\n        let INPUT_GROUP_BORDER_WIDTH = '0 0 2px 0';\r\n        let FIELD_GROUP_BORDER_COLOR = 'transparent';\r\n        let FIELD_GROUP_BORDER_COLOR_DISABLED = CoreColors.appGray09;\r\n        let FIELD_GROUP_BORDER_BOTTOM_COLOR_ACTIVE = palette.themePrimary;\r\n        let PRIMARY_TEXT_BORDER_BOTTOM_COLOR = CoreColors.appRed;\r\n        let PERSONA_HOVER_BACKGROUND_COLOR = CoreColors.pickerPersonaContainerBackground;\r\n\r\n        // Dark theme overrides\r\n        if (isDarkTheme(themeName)) {\r\n            PLACEHOLDER_NOT_DISABLED = palette.neutralSecondary;\r\n            FIELD_GROUP_BACKGROUND_COLOR = palette.white;\r\n            FIELD_COLOR_PLACEHOLDER_NOT_DISABLED = palette.neutralDark;\r\n            FIELD_COLOR_PLACEHOLDER_DISABLED = palette.neutralPrimary;\r\n            FIELD_GROUP_BORDER_COLOR = DarkColors.appGray09;\r\n            SELECTED_BG_COLOR = DarkColors.appPersonaBackground;\r\n            PRIMARY_TEXT_BORDER_BOTTOM_COLOR = DarkColors.appRed;\r\n            PERSONA_HOVER_BACKGROUND_COLOR = DarkColors.pickerPersonaContainerBackground;\r\n        }\r\n\r\n        // Contrast theme overrides\r\n        if (isContrastTheme(themeName)) {\r\n            PLACEHOLDER_NOT_DISABLED = palette.black;\r\n            FIELD_GROUP_BACKGROUND_COLOR = palette.white;\r\n            SELECTED_BG_COLOR = palette.white;\r\n            FIELD_GROUP_OPACITY = 1;\r\n            FIELD_COLOR_PLACEHOLDER_NOT_DISABLED = palette.black;\r\n            FIELD_COLOR_PLACEHOLDER_DISABLED = ContrastColors.appGreenContrast;\r\n            FIELD_GROUP_BORDER_WIDTH = '1px 1px 1px 1px';\r\n            INPUT_GROUP_BORDER_WIDTH = '0';\r\n            FIELD_GROUP_BORDER_COLOR = palette.black;\r\n            FIELD_GROUP_BORDER_COLOR_DISABLED = ContrastColors.appGreenContrast;\r\n            FIELD_GROUP_BORDER_BOTTOM_COLOR_ACTIVE = palette.themeDark;\r\n            PRIMARY_TEXT_BORDER_BOTTOM_COLOR = ContrastColors.appRed;\r\n            PERSONA_HOVER_BACKGROUND_COLOR = ContrastColors.pickerPersonaContainerBackground;\r\n        }\r\n\r\n        const style: Partial<IBasePickerStyles> = {\r\n            root: {},\r\n            itemsWrapper: {\r\n                selectors: {\r\n                    '.ms-PickerPersona-container': {\r\n                        backgroundColor: SELECTED_BG_COLOR,\r\n                        ...(isContrastTheme(themeName) && {\r\n                            border: '1px solid white',\r\n                        }),\r\n                    },\r\n                    '.ms-PickerPersona-container, .ms-PickerPersona-container .ms-Button': {\r\n                        color: FIELD_COLOR,\r\n                        selectors: {\r\n                            ':hover': {\r\n                                backgroundColor: PERSONA_HOVER_BACKGROUND_COLOR,\r\n                                ...(isContrastTheme(themeName) && {\r\n                                    color: palette.white,\r\n                                    selectors: {\r\n                                        '.ms-Persona-details': {\r\n                                            selectors: {\r\n                                                div: {\r\n                                                    color: palette.white,\r\n                                                },\r\n                                            },\r\n                                        },\r\n                                        '.ms-Button': {\r\n                                            color: palette.white,\r\n                                        },\r\n                                    },\r\n                                }),\r\n                            },\r\n                        },\r\n                    },\r\n                    '.ms-PickerPersona-container .ms-Button': {\r\n                        selectors: {\r\n                            ':hover': {\r\n                                selectors: {\r\n                                    i: {\r\n                                        fontWeight: 'bold',\r\n                                    },\r\n                                },\r\n                            },\r\n                            '::after': {\r\n                                // Override the default border color when selected, whose contrast is not enough\r\n                                borderColor: `${palette.black} !important`,\r\n                            },\r\n                        },\r\n                    },\r\n                },\r\n            },\r\n            text: {\r\n                borderWidth: FIELD_GROUP_BORDER_WIDTH,\r\n                borderStyle: 'Solid',\r\n                borderRadius: teamsBorderRadius,\r\n                borderColor: !disabled ? FIELD_GROUP_BORDER_COLOR : FIELD_GROUP_BORDER_COLOR_DISABLED,\r\n                backgroundColor: FIELD_GROUP_BACKGROUND_COLOR,\r\n                opacity: disabled ? FIELD_GROUP_OPACITY : undefined,\r\n                selectors: {\r\n                    '&:hover': {\r\n                        borderColor: FIELD_GROUP_BORDER_COLOR,\r\n                    },\r\n                    '&::after': {\r\n                        background: 'transparent',\r\n                        borderWidth: FIELD_GROUP_BORDER_WIDTH,\r\n                        borderColor: FIELD_GROUP_BORDER_BOTTOM_COLOR_ACTIVE,\r\n                        inset: '-1px 0',\r\n                    },\r\n                    '.ms-Persona-details': {\r\n                        color: FIELD_COLOR,\r\n                        selectors: {\r\n                            div: {\r\n                                color: FIELD_COLOR,\r\n                            },\r\n                        },\r\n                    },\r\n                    '.ms-Persona-primaryText': {\r\n                        borderBottomColor: PRIMARY_TEXT_BORDER_BOTTOM_COLOR,\r\n                    },\r\n                },\r\n            },\r\n            input: {\r\n                height: '32px',\r\n                background: 'transparent',\r\n                color: FIELD_COLOR,\r\n                padding: '0 12px',\r\n                borderWidth: INPUT_GROUP_BORDER_WIDTH,\r\n                borderStyle: 'Solid',\r\n                borderRadius: teamsBorderRadius,\r\n                borderColor: !disabled ? FIELD_GROUP_BORDER_COLOR : FIELD_GROUP_BORDER_COLOR_DISABLED,\r\n                selectors: {\r\n                    '::placeholder': [\r\n                        !disabled && { color: FIELD_COLOR_PLACEHOLDER_NOT_DISABLED },\r\n                        disabled && { color: FIELD_COLOR_PLACEHOLDER_DISABLED },\r\n                    ],\r\n                    ':-ms-input-placeholder': [\r\n                        !disabled && { color: FIELD_COLOR_PLACEHOLDER_NOT_DISABLED },\r\n                        disabled && { color: FIELD_COLOR_PLACEHOLDER_DISABLED },\r\n                    ],\r\n                    '&:active, &:focus': {\r\n                        selectors: {\r\n                            '::placeholder': [!disabled && { color: PLACEHOLDER_NOT_DISABLED }],\r\n                            ':-ms-input-placeholder': [!disabled && { color: PLACEHOLDER_NOT_DISABLED }],\r\n                        },\r\n                    },\r\n                },\r\n            },\r\n        };\r\n\r\n        if (isContrastTheme(themeName)) {\r\n            ((style.text as any).selectors['&:hover'] as IRawStyle).borderStyle = 'solid';\r\n            ((style.text as any).selectors['&:hover'] as IRawStyle).borderColor = !disabled\r\n                ? `${FIELD_GROUP_BORDER_COLOR} !important`\r\n                : `${FIELD_GROUP_BORDER_COLOR_DISABLED} !important`;\r\n            ((style.text as any).selectors['&:hover'] as IRawStyle).borderWidth = FIELD_GROUP_BORDER_WIDTH;\r\n            ((style.text as any).selectors['&:hover'] as IRawStyle).borderRadius = teamsBorderRadius;\r\n        }\r\n\r\n        return style;\r\n    };\r\n}\r\n","import { mergeStyles } from '@fluentui/react';\r\nimport { RibbonPosition, RichTextField, RichTextFieldProps } from '@addressbook/components-rich-text-tiptap';\r\nimport React from 'react';\r\nimport { FormEntry, FormMode, FormQuestionType, RichTextEntry } from '../../types';\r\nimport { useRichTextFieldStyles } from '../../utilities';\r\nimport { BaseDescriptor, FieldComponentTypeFactory } from './BaseDescriptor';\r\n\r\nconst defaultOptions = {\r\n    defaultPlaceholder: 'Enter your response',\r\n};\r\n\r\n/**\r\n * The options for the rich text descriptor to customize the rich text field.\r\n * `strings` is used for localization purposes.\r\n * `compact` is used for mobile view.\r\n * `callbacks` is used for callbacks to log events.\r\n */\r\nexport type RichTextDescriptorOptions = Partial<typeof defaultOptions> &\r\n    Pick<RichTextFieldProps, 'strings' | 'compact' | 'callbacks'>;\r\n\r\nconst makeFieldComponent: FieldComponentTypeFactory<RichTextDescriptorOptions & typeof defaultOptions, RichTextEntry> =\r\n    ({ defaultPlaceholder, ...options }) =>\r\n    ({ entry, onEntryChange, context, showPlaceholder, delegatedProps }) => {\r\n        const { mode } = context;\r\n        const { question, answer } = entry;\r\n\r\n        const value = answer.content ?? '';\r\n        const onChange = React.useCallback(\r\n            (value: string) => {\r\n                const newAnswer = { ...entry.answer };\r\n                newAnswer.content = value;\r\n                if (!newAnswer.content) delete newAnswer.content;\r\n\r\n                onEntryChange?.({ ...entry, answer: newAnswer });\r\n            },\r\n            [entry, onEntryChange]\r\n        );\r\n        const placeholder = showPlaceholder ? question.placeholder || defaultPlaceholder : undefined;\r\n        const ribbonPosition =\r\n            mode === FormMode.Viewing\r\n                ? RibbonPosition.None\r\n                : options.compact\r\n                ? RibbonPosition.Bottom\r\n                : RibbonPosition.Top;\r\n\r\n        const styles = useRichTextFieldStyles();\r\n        return React.useMemo(\r\n            () => (\r\n                <RichTextField\r\n                    {...delegatedProps}\r\n                    className={mergeStyles(\r\n                        styles.root,\r\n                        options.compact && styles.compact,\r\n                        mode !== FormMode.Viewing && styles.minHeightConstrained\r\n                    )}\r\n                    value={value}\r\n                    onChange={onChange}\r\n                    placeholder={placeholder}\r\n                    ribbonPosition={ribbonPosition}\r\n                    focusable={mode !== FormMode.Viewing}\r\n                    {...options}\r\n                />\r\n            ),\r\n            [delegatedProps, mode, onChange, placeholder, ribbonPosition, styles, value]\r\n        );\r\n    };\r\n\r\n/**\r\n * The descriptor that renders a rich text field for rich text questions.\r\n */\r\nexport class RichTextDescriptor extends BaseDescriptor<RichTextEntry> {\r\n    protected readonly FieldComponent;\r\n\r\n    constructor(options?: RichTextDescriptorOptions) {\r\n        super();\r\n        this.FieldComponent = makeFieldComponent({ ...defaultOptions, ...options });\r\n    }\r\n\r\n    /**\r\n     * Tests whether the entry is a rich text question.\r\n     *\r\n     * @param entry The entry to test.\r\n     * @returns Passes the test or not.\r\n     */\r\n    test(entry: FormEntry): entry is RichTextEntry {\r\n        return entry.question.type === FormQuestionType.RichText;\r\n    }\r\n}\r\n","export enum RichTextFieldButton {\r\n    OK,\r\n    Cancel,\r\n    Close,\r\n    Retry,\r\n    Remove,\r\n    Copy,\r\n    Download,\r\n    ViewOriginalFile,\r\n    Bold,\r\n    Italic,\r\n    Underline,\r\n    Strikethrough,\r\n    BackgroundColor,\r\n    TextColor,\r\n    FontSize,\r\n    BulletedList,\r\n    NumberedList,\r\n    DecreaseIndent,\r\n    IncreaseIndent,\r\n    InsertLink,\r\n    InsertImage,\r\n    InsertFile,\r\n    InsertTable,\r\n    Code,\r\n    ClearFormat,\r\n}\r\n\r\nexport enum RichTextFieldFontSize {\r\n    Small,\r\n    Medium,\r\n    Large,\r\n}\r\n\r\nexport enum RichTextFieldBackgroundColor {\r\n    Removal,\r\n    KobiRed,\r\n    RoseBud,\r\n    Goldenrod,\r\n    Primrose,\r\n    Mantis,\r\n    RegentStBlue,\r\n    PeriwinkleGray,\r\n    PaleRose,\r\n}\r\n\r\nexport enum RichTextFieldTextColor {\r\n    Removal,\r\n    Red,\r\n    TuscanOrange,\r\n    Sunglow,\r\n    Pear,\r\n    Eucalyptus,\r\n    FadedJade,\r\n    FunBlue,\r\n    TyrianPurple,\r\n}\r\n\r\nexport interface RichTextFieldTableSize {\r\n    rows: number;\r\n    cols: number;\r\n}\r\n\r\nexport interface RichTextFieldStrings {\r\n    button: (button: RichTextFieldButton) => string;\r\n    fontSize: (size: RichTextFieldFontSize) => string;\r\n    backgroundColor: (color: RichTextFieldBackgroundColor) => string;\r\n    textColor: (color: RichTextFieldTextColor) => string;\r\n    insertLinkTitle: string;\r\n    insertLinkUrl: string;\r\n    insertLinkDisplayAs: string;\r\n    insertTableTitle: (size?: RichTextFieldTableSize) => string;\r\n    messageContentUnavailable: string;\r\n    defaultImageFileStem: string;\r\n}\r\n\r\n/**\r\n * A file storage for rich text fields.\r\n *\r\n * @property upload - Upload a file and return the file locator URL.\r\n * @property download - Retrieve the file blob by the file locator URL.\r\n * @property thumbnail - Retrieve the thumbnail blob by the file locator URL.\r\n */\r\nexport interface RichTextFileStorageService {\r\n    upload: (file: File) => Promise<string>;\r\n    download: (url: string) => Promise<Blob>;\r\n    thumbnail?: (url: string) => Promise<Blob>;\r\n}\r\n","import { Comparator } from '../../abstractions';\r\nimport { BaseFormEntry } from '../types';\r\n\r\n/**\r\n * A comparator that compares entries by their question order.\r\n *\r\n * @param first The first entry.\r\n * @param second The second entry.\r\n * @returns The comparison result.\r\n */\r\nexport const orderComparator: Comparator<BaseFormEntry<{ order: number }, unknown>> = (first, second) =>\r\n    first.question.order - second.question.order;\r\n","import { DefaultButton, Icon, IconButton, Layer, mergeStyles, Popup, Spinner, SpinnerSize } from '@fluentui/react';\r\nimport { useBoolean } from '@fluentui/react-hooks';\r\nimport { copyImageToClipboard, ImageSize } from '@addressbook/utilities-core';\r\nimport { useBlobObjectUrl } from '@addressbook/utilities-hooks';\r\nimport React from 'react';\r\nimport { TransformComponent, TransformWrapper } from 'react-zoom-pan-pinch';\r\nimport { RichTextFieldButton } from '../../types';\r\nimport { useEmbeddedImageContentStyles, useFullscreenImageContentStyles, useImageViewStyles } from './styles';\r\nimport { FileOptions } from './types';\r\nimport { accommodateImage, AccomodatePolicy } from './utils';\r\n\r\nexport interface ImageViewProps extends React.PropsWithChildren<React.HTMLAttributes<HTMLDivElement>> {\r\n    name?: string;\r\n    url?: string;\r\n    blob?: Blob;\r\n    thumbnail?: Blob;\r\n    imageSize?: ImageSize;\r\n    loading?: boolean;\r\n    error?: Error;\r\n    onRetry?: () => void;\r\n    onRemove?: () => void;\r\n    compact?: boolean;\r\n    strings: FileOptions['strings'];\r\n}\r\n\r\nexport const ImageView: React.FC<ImageViewProps> = ({\r\n    name,\r\n    url,\r\n    blob,\r\n    thumbnail,\r\n    imageSize,\r\n    loading,\r\n    error,\r\n    onRetry,\r\n    onRemove,\r\n    compact,\r\n    strings,\r\n    children,\r\n    className,\r\n    ...props\r\n}) => {\r\n    const [fullscreen, { setTrue: enterFullscreen, setFalse: exitFullscreen }] = useBoolean(false);\r\n    const contentProps = { name, url, blob, thumbnail, imageSize, loading, error, onRetry, onRemove, compact, strings };\r\n\r\n    const styles = useImageViewStyles();\r\n    return (\r\n        <div className={mergeStyles(styles.root, className)} {...props}>\r\n            <EmbeddedImageContent className={styles.embedded} onClick={enterFullscreen} {...contentProps} />\r\n            <FullscreenImageContent isOpen={fullscreen} onDismiss={exitFullscreen} {...contentProps} />\r\n            <div className={styles.hidden}>{children}</div>\r\n        </div>\r\n    );\r\n};\r\n\r\nconst embeddedHeight = 180;\r\n\r\nconst EmbeddedImageContent: React.FC<ImageViewProps> = ({\r\n    name,\r\n    blob,\r\n    url: _url,\r\n    thumbnail,\r\n    imageSize,\r\n    loading,\r\n    error,\r\n    onRetry,\r\n    onRemove,\r\n    compact: _compact,\r\n    strings,\r\n    className,\r\n    style,\r\n    ...props\r\n}) => {\r\n    const blobUrl = useBlobObjectUrl(blob ?? thumbnail);\r\n\r\n    const height = embeddedHeight;\r\n    const width = imageSize ? height * (imageSize.width / imageSize.height) : height;\r\n\r\n    const styles = useEmbeddedImageContentStyles();\r\n    return (\r\n        <div className={mergeStyles(styles.root, className)} style={{ width, height, ...style }} {...props}>\r\n            {blobUrl && <img className={styles.image} src={blobUrl} alt={name} title={name} />}\r\n            {error && (\r\n                <div\r\n                    className={mergeStyles(styles.mask, styles.error)}\r\n                    role='alert'\r\n                    title={strings.messageContentUnavailable}>\r\n                    <Icon className={styles.icon} iconName='ImageOff' />\r\n                    <div className={styles.buttons}>\r\n                        {onRetry && (\r\n                            <DefaultButton\r\n                                onClick={event => {\r\n                                    event.stopPropagation();\r\n                                    onRetry();\r\n                                }}\r\n                                iconProps={{ iconName: 'ArrowClockwise' }}\r\n                                title={strings.button(RichTextFieldButton.Retry)}\r\n                            />\r\n                        )}\r\n                        {onRemove && (\r\n                            <DefaultButton\r\n                                onClick={event => {\r\n                                    event.stopPropagation();\r\n                                    onRemove();\r\n                                }}\r\n                                iconProps={{ iconName: 'Delete' }}\r\n                                title={strings.button(RichTextFieldButton.Remove)}\r\n                            />\r\n                        )}\r\n                    </div>\r\n                </div>\r\n            )}\r\n            {loading && <Spinner className={styles.mask} size={SpinnerSize.large} />}\r\n        </div>\r\n    );\r\n};\r\n\r\ninterface FullscreenImageContentProps extends ImageViewProps {\r\n    isOpen?: boolean;\r\n    onDismiss?: () => void;\r\n}\r\n\r\nconst FullscreenImageContent: React.FC<FullscreenImageContentProps> = ({\r\n    name,\r\n    blob,\r\n    url,\r\n    thumbnail: _thumbnail,\r\n    imageSize: _imageSize,\r\n    loading,\r\n    error,\r\n    onRetry: _onRetry,\r\n    onRemove: _onRemove,\r\n    compact,\r\n    strings,\r\n    isOpen,\r\n    onDismiss,\r\n    className,\r\n    ...props\r\n}) => {\r\n    const blobUrl = useBlobObjectUrl(blob);\r\n\r\n    const styles = useFullscreenImageContentStyles();\r\n    if (!isOpen) return null;\r\n    return (\r\n        <Layer eventBubblingEnabled>\r\n            <Popup\r\n                className={mergeStyles(styles.root, className)}\r\n                onDismiss={onDismiss}\r\n                onRestoreFocus={({ originalElement }) => originalElement?.focus()}\r\n                {...props}>\r\n                <div className={styles.header}>\r\n                    <div className={styles.name} title={name}>\r\n                        {name}\r\n                    </div>\r\n                    <div className={styles.controls}>\r\n                        {!compact && blobUrl && (\r\n                            <IconButton\r\n                                className={styles.button}\r\n                                as='a'\r\n                                href={blobUrl}\r\n                                download={name}\r\n                                iconProps={{ iconName: 'ArrowDownload' }}\r\n                                title={strings.button(RichTextFieldButton.Download)}\r\n                            />\r\n                        )}\r\n                        {!compact && blob && (\r\n                            <IconButton\r\n                                className={styles.button}\r\n                                onClick={() => {\r\n                                    copyImageToClipboard({ blob, name });\r\n                                }}\r\n                                iconProps={{ iconName: 'Copy' }}\r\n                                title={strings.button(RichTextFieldButton.Copy)}\r\n                            />\r\n                        )}\r\n                        {url && (\r\n                            <IconButton\r\n                                className={styles.button}\r\n                                as='a'\r\n                                href={url}\r\n                                target='_blank'\r\n                                rel='noopener noreferrer'\r\n                                iconProps={{ iconName: 'Open' }}\r\n                                title={strings.button(RichTextFieldButton.ViewOriginalFile)}\r\n                            />\r\n                        )}\r\n                        <IconButton\r\n                            className={styles.button}\r\n                            iconProps={{ iconName: 'Cancel' }}\r\n                            onClick={onDismiss}\r\n                            title={strings.button(RichTextFieldButton.Close)}\r\n                        />\r\n                    </div>\r\n                </div>\r\n                {blobUrl ? (\r\n                    <TransformedImage\r\n                        src={blobUrl}\r\n                        alt={name}\r\n                        className={styles.image}\r\n                        wrapperClassName={mergeStyles(styles.main, styles.wrapper)}\r\n                    />\r\n                ) : loading ? (\r\n                    <Spinner className={styles.main} size={SpinnerSize.large} />\r\n                ) : error ? (\r\n                    <div className={mergeStyles(styles.main, styles.message)} role='alert'>\r\n                        {strings.messageContentUnavailable}\r\n                    </div>\r\n                ) : null}\r\n            </Popup>\r\n        </Layer>\r\n    );\r\n};\r\n\r\ninterface TransformedImageProps extends Omit<React.ImgHTMLAttributes<HTMLImageElement>, 'onLoad'> {\r\n    wrapperClassName?: string;\r\n}\r\n\r\nconst TransformedImage: React.FC<TransformedImageProps> = ({ wrapperClassName, ...props }) => {\r\n    const [disabled, setDisabled] = React.useState(true);\r\n    const [panning, { setTrue: startPanning, setFalse: stopPanning }] = useBoolean(false);\r\n\r\n    const wrapperStyle = React.useMemo(() => ({ cursor: panning ? 'grabbing' : 'grab' }), [panning]);\r\n\r\n    return (\r\n        <TransformWrapper\r\n            disabled={disabled}\r\n            minScale={0.5}\r\n            maxScale={4}\r\n            onPanningStart={startPanning}\r\n            onPanningStop={stopPanning}>\r\n            {({ centerView }) => (\r\n                <TransformComponent wrapperClass={wrapperClassName} wrapperStyle={wrapperStyle}>\r\n                    <img\r\n                        {...props}\r\n                        onLoad={event => {\r\n                            setDisabled(false);\r\n                            accommodateImage(event.target as HTMLImageElement, {\r\n                                selector: '.react-transform-wrapper',\r\n                                policy: AccomodatePolicy.ScaleDown,\r\n                            });\r\n                            centerView(1, 0);\r\n                        }}\r\n                    />\r\n                </TransformComponent>\r\n            )}\r\n        </TransformWrapper>\r\n    );\r\n};\r\n","import { decodeDataUrl, encodeDataUrl, getMimeByDataUrl, isImageMime } from '@addressbook/utilities-core';\r\nimport {\r\n    RichTextFieldBackgroundColor,\r\n    RichTextFieldButton,\r\n    RichTextFieldFontSize,\r\n    RichTextFieldStrings,\r\n    RichTextFieldTextColor,\r\n    RichTextFileStorageService,\r\n} from './types';\r\n\r\nexport const defaultRichTextFieldStrings: RichTextFieldStrings = {\r\n    button: button => defaultButtonStrings[button],\r\n    fontSize: size => defaultFontSizeStrings[size],\r\n    backgroundColor: color => defaultBackgroundColorStrings[color],\r\n    textColor: color => defaultTextColorStrings[color],\r\n    insertLinkTitle: 'Insert Link',\r\n    insertLinkUrl: 'Web address (URL)',\r\n    insertLinkDisplayAs: 'Display as',\r\n    insertTableTitle: size => (size ? `Insert ${size.rows}x${size.cols} table` : 'Insert table'),\r\n    messageContentUnavailable: 'The file content is unavailable.',\r\n    defaultImageFileStem: 'image',\r\n};\r\n\r\nconst defaultButtonStrings: Record<RichTextFieldButton, string> = {\r\n    [RichTextFieldButton.OK]: 'OK',\r\n    [RichTextFieldButton.Cancel]: 'Cancel',\r\n    [RichTextFieldButton.Close]: 'Close',\r\n    [RichTextFieldButton.Retry]: 'Retry',\r\n    [RichTextFieldButton.Remove]: 'Remove',\r\n    [RichTextFieldButton.Copy]: 'Copy',\r\n    [RichTextFieldButton.Download]: 'Download',\r\n    [RichTextFieldButton.ViewOriginalFile]: 'View original file',\r\n    [RichTextFieldButton.Bold]: 'Bold',\r\n    [RichTextFieldButton.Italic]: 'Italic',\r\n    [RichTextFieldButton.Underline]: 'Underline',\r\n    [RichTextFieldButton.Strikethrough]: 'Strikethrough',\r\n    [RichTextFieldButton.BackgroundColor]: 'Background color',\r\n    [RichTextFieldButton.TextColor]: 'Text color',\r\n    [RichTextFieldButton.FontSize]: 'Font size',\r\n    [RichTextFieldButton.BulletedList]: 'Bulleted list',\r\n    [RichTextFieldButton.NumberedList]: 'Numbered list',\r\n    [RichTextFieldButton.DecreaseIndent]: 'Decrease indent',\r\n    [RichTextFieldButton.IncreaseIndent]: 'Increase indent',\r\n    [RichTextFieldButton.InsertLink]: 'Insert link',\r\n    [RichTextFieldButton.InsertImage]: 'Insert image',\r\n    [RichTextFieldButton.InsertFile]: 'Insert file',\r\n    [RichTextFieldButton.InsertTable]: 'Insert table',\r\n    [RichTextFieldButton.Code]: 'Code',\r\n    [RichTextFieldButton.ClearFormat]: 'Clear format',\r\n};\r\n\r\nconst defaultFontSizeStrings: Record<RichTextFieldFontSize, string> = {\r\n    [RichTextFieldFontSize.Small]: 'Small',\r\n    [RichTextFieldFontSize.Medium]: 'Medium',\r\n    [RichTextFieldFontSize.Large]: 'Large',\r\n};\r\n\r\nconst defaultBackgroundColorStrings: Record<RichTextFieldBackgroundColor, string> = {\r\n    [RichTextFieldBackgroundColor.Removal]: 'No highlight',\r\n    [RichTextFieldBackgroundColor.KobiRed]: 'Kobi red',\r\n    [RichTextFieldBackgroundColor.RoseBud]: 'Rose bud',\r\n    [RichTextFieldBackgroundColor.Goldenrod]: 'Goldenrod',\r\n    [RichTextFieldBackgroundColor.Primrose]: 'Primrose',\r\n    [RichTextFieldBackgroundColor.Mantis]: 'Mantis',\r\n    [RichTextFieldBackgroundColor.RegentStBlue]: 'Regent St. blue',\r\n    [RichTextFieldBackgroundColor.PeriwinkleGray]: 'Periwinkle gray',\r\n    [RichTextFieldBackgroundColor.PaleRose]: 'Pale rose',\r\n};\r\n\r\nconst defaultTextColorStrings: Record<RichTextFieldTextColor, string> = {\r\n    [RichTextFieldTextColor.Removal]: 'Automatic',\r\n    [RichTextFieldTextColor.Red]: 'Red',\r\n    [RichTextFieldTextColor.TuscanOrange]: 'Tuscan orange',\r\n    [RichTextFieldTextColor.Sunglow]: 'Sunglow',\r\n    [RichTextFieldTextColor.Pear]: 'Pear',\r\n    [RichTextFieldTextColor.Eucalyptus]: 'Eucalyptus',\r\n    [RichTextFieldTextColor.FadedJade]: 'Faded jade',\r\n    [RichTextFieldTextColor.FunBlue]: 'Fun blue',\r\n    [RichTextFieldTextColor.TyrianPurple]: 'Tyrian purple',\r\n};\r\n\r\nexport const backgroundColorValues: [RichTextFieldBackgroundColor, string][] = [\r\n    [RichTextFieldBackgroundColor.Removal, ''],\r\n    [RichTextFieldBackgroundColor.KobiRed, '#df9299'],\r\n    [RichTextFieldBackgroundColor.RoseBud, '#f4a593'],\r\n    [RichTextFieldBackgroundColor.Goldenrod, '#fdd472'],\r\n    [RichTextFieldBackgroundColor.Primrose, '#e5f18f'],\r\n    [RichTextFieldBackgroundColor.Mantis, '#82cda8'],\r\n    [RichTextFieldBackgroundColor.RegentStBlue, '#9dd9db'],\r\n    [RichTextFieldBackgroundColor.PeriwinkleGray, '#c7d4e8'],\r\n    [RichTextFieldBackgroundColor.PaleRose, '#ebd3e1'],\r\n];\r\n\r\nexport const textColorValues: [RichTextFieldTextColor, string][] = [\r\n    [RichTextFieldTextColor.Removal, ''],\r\n    [RichTextFieldTextColor.Red, '#b6424c'],\r\n    [RichTextFieldTextColor.TuscanOrange, '#cd5937'],\r\n    [RichTextFieldTextColor.Sunglow, '#fdc030'],\r\n    [RichTextFieldTextColor.Pear, '#bdcb4c'],\r\n    [RichTextFieldTextColor.Eucalyptus, '#2b9b62'],\r\n    [RichTextFieldTextColor.FadedJade, '#37797b'],\r\n    [RichTextFieldTextColor.FunBlue, '#1e53a3'],\r\n    [RichTextFieldTextColor.TyrianPurple, '#a5397a'],\r\n];\r\n\r\nexport const fontSizeValues: [RichTextFieldFontSize, string][] = [\r\n    [RichTextFieldFontSize.Small, '7.5pt'],\r\n    [RichTextFieldFontSize.Medium, ''],\r\n    [RichTextFieldFontSize.Large, '18pt'],\r\n];\r\n\r\n/**\r\n * The default file storage for rich text fields, which uploads files as data URLs.\r\n */\r\nexport const defaultRichTextFileStorageService: RichTextFileStorageService = {\r\n    upload: encodeDataUrl,\r\n    download: downloadDataUrl,\r\n    thumbnail: thumbnailDataUrl,\r\n};\r\n\r\nasync function downloadDataUrl(url: string): Promise<Blob> {\r\n    const blob = decodeDataUrl(url);\r\n    if (!blob) throw new Error('Invalid data URL');\r\n    return blob;\r\n}\r\n\r\nasync function thumbnailDataUrl(url: string): Promise<Blob> {\r\n    const mime = getMimeByDataUrl(url);\r\n    if (!(mime && isImageMime(mime))) throw new Error('Unsupported MIME type');\r\n    return downloadDataUrl(url);\r\n}\r\n","import { makeStyles, FontSizes, isContrastTheme } from '@addressbook/components-fluentui-teams-theme';\r\n\r\nexport const useCollapsibleTextFieldStyles = makeStyles(theme => ({\r\n    root: {\r\n        '&.ms-TextField .ms-TextField-wrapper .ms-TextField-fieldGroup': {\r\n            display: 'flex',\r\n            alignItems: 'center',\r\n            gap: '4px',\r\n            input: {\r\n                fontSize: FontSizes.size24,\r\n                '::placeholder': {\r\n                    color: isContrastTheme(theme.name) ? theme.palette.black : theme.palette.neutralPrimary,\r\n                },\r\n            },\r\n        },\r\n        '.ms-TextField-errorMessage': {\r\n            padding: '4px 12px',\r\n        },\r\n    },\r\n    collapsed: {\r\n        '&.ms-TextField .ms-TextField-wrapper': {\r\n            maxWidth: 'max-content',\r\n            '.ms-TextField-fieldGroup': {\r\n                '::before': {\r\n                    content: '\"\"',\r\n                },\r\n                backgroundColor: 'unset',\r\n            },\r\n        },\r\n    },\r\n    error: {\r\n        '&.ms-TextField .ms-TextField-wrapper .ms-TextField-fieldGroup': {\r\n            border: `1px solid ${theme.palette.redDark}`,\r\n        },\r\n    },\r\n    collapsedText: {\r\n        marginInlineStart: '12px',\r\n        color: theme.palette.black,\r\n        fontSize: FontSizes.size24,\r\n        overflow: 'hidden',\r\n        textOverflow: 'ellipsis',\r\n        whiteSpace: 'nowrap',\r\n    },\r\n    collapsedPlaceholder: {\r\n        color: isContrastTheme(theme.name) ? theme.palette.black : theme.palette.neutralPrimary,\r\n    },\r\n    button: {\r\n        margin: '4px',\r\n    },\r\n}));\r\n","/* istanbul ignore file */\r\n\r\nimport { FontWeights, IMessageBarStyleProps, IMessageBarStyles, ITheme, MessageBarType } from '@fluentui/react';\r\nimport { FontSizes } from '../teams-sizes';\r\n\r\nexport function getMessageBarStyles(_themeName: string, _theme: ITheme) {\r\n    return (props: IMessageBarStyleProps): Partial<IMessageBarStyles> => {\r\n        const { theme, messageBarType } = props;\r\n\r\n        const margin = {\r\n            marginTop: '12px',\r\n            marginBottom: '12px',\r\n        };\r\n\r\n        const ERROR_COLOR = theme.palette.redDark;\r\n        const ERROR_BACKGROUND_COLOR = theme.palette.redLight;\r\n        const ERROR_BOTTOM_BORDER_COLOR = theme.palette.red;\r\n\r\n        const INFO_COLOR = theme.palette.neutralDark;\r\n        const INFO_BACKGROUND_COLOR = theme.palette.neutralTertiaryAlt;\r\n        const INFO_BOTTOM_BORDER_COLOR = theme.palette.neutralTertiary;\r\n\r\n        const styles = {\r\n            actions: {},\r\n            iconContainer: margin,\r\n            icon: {\r\n                display: 'none',\r\n            },\r\n            dismissal: [\r\n                {\r\n                    width: '26px',\r\n                    height: 'auto',\r\n                    padding: '2px 4px',\r\n                    marginRight: '8px',\r\n                    ...margin,\r\n                    selectors: {\r\n                        '.ms-Button-icon': {\r\n                            fontSize: FontSizes.size10,\r\n                            fontWeight: 'bold',\r\n                        },\r\n                    },\r\n                },\r\n                messageBarType === MessageBarType.error && {\r\n                    color: ERROR_COLOR,\r\n                    selectors: {\r\n                        '.ms-Button-icon': {\r\n                            color: ERROR_COLOR,\r\n                        },\r\n                    },\r\n                },\r\n                messageBarType === MessageBarType.info && {\r\n                    color: INFO_COLOR,\r\n                    selectors: {\r\n                        '.ms-Button-icon': {\r\n                            color: INFO_COLOR,\r\n                        },\r\n                    },\r\n                },\r\n            ],\r\n            text: [\r\n                {\r\n                    fontSize: FontSizes.size14,\r\n                    fontWeight: FontWeights.semibold,\r\n                    justifyContent: 'center',\r\n                    flexGrow: 1,\r\n                    ...margin,\r\n                },\r\n            ],\r\n            root: [\r\n                {\r\n                    selectors: {\r\n                        '.ms-Link': {\r\n                            fontWeight: 'inherit',\r\n                            fontSize: 'inherit',\r\n                            textDecoration: 'underline',\r\n                            color: 'inherit',\r\n                            selectors: {\r\n                                ':hover': {\r\n                                    color: 'inherit',\r\n                                },\r\n                                ':focus': {\r\n                                    color: 'inherit',\r\n                                },\r\n                                ':active': {\r\n                                    color: 'inherit',\r\n                                },\r\n                                ':active:hover': {\r\n                                    color: 'inherit',\r\n                                },\r\n                            },\r\n                        },\r\n                    },\r\n                },\r\n                messageBarType === MessageBarType.info && {\r\n                    color: INFO_COLOR,\r\n                    background: INFO_BACKGROUND_COLOR,\r\n                    borderBottom: `1px solid ${INFO_BOTTOM_BORDER_COLOR}`,\r\n                },\r\n                messageBarType === MessageBarType.error && {\r\n                    color: ERROR_COLOR,\r\n                    background: ERROR_BACKGROUND_COLOR,\r\n                    borderBottom: `1px solid ${ERROR_BOTTOM_BORDER_COLOR}`,\r\n                },\r\n            ],\r\n        } as Partial<IMessageBarStyles>;\r\n\r\n        return styles;\r\n    };\r\n}\r\n","import { Dropdown, mergeStyles, ResponsiveMode } from '@fluentui/react';\r\nimport { DecimalTextField } from '@addressbook/components-fields';\r\nimport React from 'react';\r\nimport { FormQuestionType, TextNumberRestrictionType, TextNumberRestrictionValueKey } from '../../../types';\r\nimport {\r\n    deriveTextNumberRestriction,\r\n    getTextNumberRestrictionOptions,\r\n    useDropdownStyles,\r\n    useTextFieldStyles,\r\n} from '../../../utilities';\r\nimport { QuestionSettingsProps } from '../types';\r\nimport { useRestrictionSettingsStyles } from './RestrictionSettings.styles';\r\n\r\nconst allTextNumberRestrictionValueKeys: TextNumberRestrictionValueKey[] = ['min', 'max', 'value'];\r\n\r\nexport function RestrictionSettings({\r\n    question,\r\n    onQuestionChange,\r\n    strings,\r\n}: QuestionSettingsProps): JSX.Element | null {\r\n    const styles = useRestrictionSettingsStyles();\r\n    const textFieldStyles = useTextFieldStyles();\r\n    const dropdownStyles = useDropdownStyles();\r\n\r\n    if (!(question.type === FormQuestionType.Text && question.number && question.restriction)) return null;\r\n\r\n    const restriction = question.restriction;\r\n    const valueSettings = allTextNumberRestrictionValueKeys\r\n        .filter(key => key in restriction)\r\n        .map(key => (\r\n            <DecimalTextField\r\n                key={key}\r\n                value={restriction[key]}\r\n                onChange={value => {\r\n                    const newRestriction = { ...restriction };\r\n\r\n                    if (key in newRestriction) {\r\n                        newRestriction[key] = value;\r\n                    }\r\n\r\n                    // Ensure max is always greater than min\r\n                    if (key === 'min' && 'max' in newRestriction && value > newRestriction.max) {\r\n                        newRestriction.max = value;\r\n                    }\r\n\r\n                    // Ensure min is always less than max\r\n                    if (key === 'max' && 'min' in newRestriction && value < newRestriction.min) {\r\n                        newRestriction.min = value;\r\n                    }\r\n\r\n                    onQuestionChange({ ...question, restriction: newRestriction });\r\n                }}\r\n                placeholder={strings.restrictionValuePlaceholder(key)}\r\n                styles={textFieldStyles}\r\n            />\r\n        ));\r\n\r\n    return (\r\n        <div className={styles.row}>\r\n            <Dropdown\r\n                selectedKey={restriction.type}\r\n                onChange={(_, option) =>\r\n                    option &&\r\n                    onQuestionChange({\r\n                        ...question,\r\n                        restriction: deriveTextNumberRestriction(option.key as TextNumberRestrictionType, restriction),\r\n                    })\r\n                }\r\n                options={getTextNumberRestrictionOptions(strings)}\r\n                responsiveMode={ResponsiveMode.unknown}\r\n                styles={dropdownStyles}\r\n            />\r\n            <div className={mergeStyles(styles.values, valueSettings.length === 2 && styles.between)}>\r\n                {valueSettings}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n","export * from './form';\r\nexport * from './base';\r\nexport * from './text';\r\nexport * from './rich-text';\r\nexport * from './choice';\r\nexport * from './date-time';\r\n","import { ITextField } from '@fluentui/react';\r\nimport React from 'react';\r\nimport { ChoiceAnswerContent, ChoiceEntry } from '../types';\r\n\r\nexport interface UseShuffledProps<T> {\r\n    array: T[];\r\n    enabled?: boolean;\r\n}\r\n\r\n/**\r\n * Returns a shuffled copy of the array.\r\n *\r\n * @param props.array The array to shuffle.\r\n * @param props.enabled Whether to shuffle the array.\r\n * @returns An array.\r\n *\r\n * @example useShuffled(['Yes', 'No', 'Maybe later']) // ['No', 'Maybe later', 'Yes']\r\n * @example useShuffled(['Yes', 'No', 'Maybe later'], false) // ['Yes', 'No', 'Maybe later']\r\n */\r\nexport function useShuffled<T>({ array, enabled }: UseShuffledProps<T>): T[] {\r\n    return React.useMemo(() => {\r\n        if (!enabled) return array;\r\n\r\n        return array\r\n            .map<[number, T]>(element => [Math.random(), element])\r\n            .sort(([first], [second]) => first - second)\r\n            .map(([, element]) => element);\r\n    }, [array, enabled]);\r\n}\r\n\r\n/**\r\n * Returns a function that updates the entry's answer, according to the chosen options and the \"other\" value.\r\n *\r\n * @param entry The current choice entry.\r\n * @param onEntryChange A function that is called when the entry changes.\r\n * @returns A function if `onEntryChange` is defined, `undefined` otherwise.\r\n */\r\nexport function useChoiceChange(\r\n    entry: ChoiceEntry,\r\n    onEntryChange?: (entry: ChoiceEntry) => void\r\n): ((chosen: string[], other?: string) => void) | undefined {\r\n    return React.useMemo(\r\n        () =>\r\n            onEntryChange &&\r\n            ((chosen: string[], other?: string) => {\r\n                const newAnswer = { ...entry.answer };\r\n\r\n                if (chosen.length > 0 || other !== undefined) {\r\n                    newAnswer.content = { chosen, other };\r\n                } else {\r\n                    delete newAnswer.content;\r\n                }\r\n\r\n                onEntryChange({ ...entry, answer: newAnswer });\r\n            }),\r\n        [entry, onEntryChange]\r\n    );\r\n}\r\n\r\nexport interface UseChosenAndOther {\r\n    chosen: string[];\r\n    otherKey: string;\r\n    otherValue?: string;\r\n    otherSelected: boolean;\r\n    otherFieldRef: React.RefObject<ITextField>;\r\n}\r\n\r\n/**\r\n * Returns the chosen options and the \"other\" related values.\r\n *\r\n * @param choices The choices besides the \"other\" option.\r\n * @param content The current answer content.\r\n * @returns An object with the chosen options and the \"other\" related values.\r\n */\r\nexport function useChosenAndOther(choices: string[], content?: ChoiceAnswerContent): UseChosenAndOther {\r\n    const otherFieldRef = React.useRef<ITextField>(null);\r\n    return React.useMemo(\r\n        () => ({\r\n            chosen: content?.chosen ?? [],\r\n            otherKey: ['other', ...choices.map(choice => choice.replace(/(\\s|-)+/g, '_').toLowerCase())].join('-'),\r\n            otherValue: content?.other,\r\n            otherSelected: content?.other !== undefined,\r\n            otherFieldRef,\r\n        }),\r\n        [choices, content]\r\n    );\r\n}\r\n","export * from './BaseDescriptor';\r\nexport * from './CheckboxChoiceDescriptor';\r\nexport * from './DateTimeDescriptor';\r\nexport * from './default';\r\nexport * from './DropdownChoiceDescriptor';\r\nexport * from './FallbackViewingDescriptor';\r\nexport * from './RadioChoiceDescriptor';\r\nexport * from './RichTextDescriptor';\r\nexport * from './TextDescriptor';\r\n","import { IButton, IconButton, ITextField, ITextFieldProps, mergeStyles, TextField } from '@fluentui/react';\r\nimport React from 'react';\r\nimport { useCollapsibleTextFieldStyles } from './CollapsibleTextField.styles';\r\n\r\nconst defaultStrings = {\r\n    editButton: (label: string, value: string) => `Edit ${label} \"${value}\"`,\r\n    doneButton: 'Done',\r\n};\r\n\r\nconst defaultIconNames = {\r\n    editButton: 'Edit',\r\n    doneButton: 'CheckMark',\r\n};\r\n\r\nexport interface CollapsibleTextFieldProps\r\n    extends Omit<ITextFieldProps, 'componentRef' | 'onKeyPress' | 'onRenderInput'> {\r\n    strings?: typeof defaultStrings;\r\n    iconNames?: typeof defaultIconNames;\r\n}\r\n\r\nexport const CollapsibleTextField: React.FC<CollapsibleTextFieldProps> = ({\r\n    label,\r\n    className,\r\n    strings,\r\n    iconNames,\r\n    ...props\r\n}) => {\r\n    const [collapsed, setCollapsed] = React.useState(true);\r\n    const fieldRef = React.useRef<ITextField>(null);\r\n    const buttonRef = React.useRef<IButton>(null);\r\n\r\n    const expand = React.useCallback(() => {\r\n        setCollapsed(false);\r\n        requestAnimationFrame(() => fieldRef.current?.focus());\r\n    }, []);\r\n\r\n    const collapse = React.useCallback(() => {\r\n        fieldRef.current?.blur();\r\n        setCollapsed(true);\r\n        requestAnimationFrame(() => buttonRef.current?.focus());\r\n    }, []);\r\n\r\n    const onKeyPress = React.useCallback(\r\n        (event: React.KeyboardEvent<HTMLInputElement>) => {\r\n            if (event.key === 'Enter') collapse();\r\n        },\r\n        [collapse]\r\n    );\r\n\r\n    const stringsInternal = React.useMemo(() => ({ ...defaultStrings, ...strings }), [strings]);\r\n    const iconNamesInternal = React.useMemo(() => ({ ...defaultIconNames, ...iconNames }), [iconNames]);\r\n    const styles = useCollapsibleTextFieldStyles();\r\n    return (\r\n        <TextField\r\n            {...props}\r\n            componentRef={fieldRef}\r\n            className={mergeStyles(\r\n                styles.root,\r\n                collapsed && styles.collapsed,\r\n                props.errorMessage && styles.error,\r\n                className\r\n            )}\r\n            title={label}\r\n            onKeyPress={onKeyPress}\r\n            onRenderInput={(inputProps, defaultRender) =>\r\n                collapsed ? (\r\n                    <>\r\n                        <span\r\n                            id={inputProps?.id}\r\n                            title={inputProps?.title}\r\n                            aria-placeholder={inputProps?.placeholder}\r\n                            aria-required={inputProps?.required}\r\n                            aria-readonly={inputProps?.readOnly}\r\n                            aria-errormessage={inputProps?.['aria-errormessage']}\r\n                            aria-invalid={inputProps?.['aria-invalid']}\r\n                            aria-disabled\r\n                            role='textbox'\r\n                            className={mergeStyles(\r\n                                styles.collapsedText,\r\n                                !inputProps?.value && styles.collapsedPlaceholder\r\n                            )}>\r\n                            {inputProps?.value || inputProps?.placeholder}\r\n                        </span>\r\n                        <IconButton\r\n                            componentRef={buttonRef}\r\n                            className={styles.button}\r\n                            title={stringsInternal.editButton(label ?? '', (inputProps?.value ?? '') as string)}\r\n                            iconProps={{ iconName: iconNamesInternal.editButton }}\r\n                            onClick={expand}\r\n                        />\r\n                    </>\r\n                ) : (\r\n                    <>\r\n                        {defaultRender?.(inputProps)}\r\n                        <IconButton\r\n                            componentRef={buttonRef}\r\n                            className={styles.button}\r\n                            title={stringsInternal.doneButton}\r\n                            iconProps={{ iconName: iconNamesInternal.doneButton }}\r\n                            onClick={collapse}\r\n                        />\r\n                    </>\r\n                )\r\n            }\r\n        />\r\n    );\r\n};\r\n","/* istanbul ignore file */\r\n\r\nimport { ICalloutContentStyleProps, ICalloutContentStyles } from '@fluentui/react';\r\nimport { isContrastTheme, isDarkTheme } from '../teams-theme';\r\nimport { teamsBorderRadius } from './constants';\r\n\r\nexport const SEARCH_WELL_FOCUSED_CLASS = 'fabric-search-well-callout-focus';\r\n\r\nexport const getSearchWellStyles =\r\n    (themeName: string) =>\r\n    (props: ICalloutContentStyleProps): Partial<ICalloutContentStyles> => {\r\n        const TEXT_COLOR = props.theme.palette.black;\r\n        let HOVER_COLOR = props.theme.palette.black;\r\n        let KEYBOARD_FOCUS_TEXT_COLOR = props.theme.palette.black;\r\n        let HOVER_BACKGROUND_COLOR = props.theme.palette.neutralLight;\r\n        let FOCUS_BACKGROUND_COLOR = props.theme.palette.neutralQuaternaryAlt;\r\n        let ACTIVE_BACKGROUND_COLOR = props.theme.palette.neutralLight;\r\n        let FOCUS_VISIBLE_BORDER = `1px solid ${KEYBOARD_FOCUS_TEXT_COLOR}`;\r\n        let FOCUS_VISIBLE_BACKGROUND_COLOR = 'transparent';\r\n\r\n        if (isDarkTheme(themeName)) {\r\n            HOVER_COLOR = props.theme.palette.black;\r\n            HOVER_BACKGROUND_COLOR = props.theme.palette.neutralQuaternary;\r\n            FOCUS_BACKGROUND_COLOR = props.theme.palette.neutralTertiaryAlt;\r\n            ACTIVE_BACKGROUND_COLOR = props.theme.palette.neutralQuaternary;\r\n        }\r\n\r\n        if (isContrastTheme(themeName)) {\r\n            HOVER_COLOR = props.theme.palette.white;\r\n            HOVER_BACKGROUND_COLOR = props.theme.palette.themeDark;\r\n            FOCUS_BACKGROUND_COLOR = props.theme.palette.themeDark;\r\n            ACTIVE_BACKGROUND_COLOR = props.theme.palette.themeDark;\r\n            KEYBOARD_FOCUS_TEXT_COLOR = props.theme.palette.white;\r\n            FOCUS_VISIBLE_BORDER = 'none';\r\n            FOCUS_VISIBLE_BACKGROUND_COLOR = props.theme.palette.themeDark;\r\n        }\r\n\r\n        const hoverStyles = {\r\n            background: HOVER_BACKGROUND_COLOR,\r\n            color: HOVER_COLOR,\r\n            boxShadow: 'none',\r\n            selectors: {\r\n                '.icons-default-fill': {\r\n                    fill: HOVER_COLOR,\r\n                },\r\n                '.ms-Persona-primaryText': {\r\n                    color: HOVER_COLOR,\r\n                },\r\n                '.ms-Persona-secondaryText': {\r\n                    color: HOVER_COLOR,\r\n                },\r\n                '.ms-Button-label': {\r\n                    color: HOVER_COLOR,\r\n                },\r\n            },\r\n        };\r\n\r\n        const focusActiveStyles = {\r\n            background: FOCUS_BACKGROUND_COLOR,\r\n            color: HOVER_COLOR,\r\n            boxShadow: 'none',\r\n            selectors: {\r\n                '.icons-default-fill': {\r\n                    fill: HOVER_COLOR,\r\n                },\r\n                '.ms-Persona-primaryText': {\r\n                    color: HOVER_COLOR,\r\n                },\r\n                '.ms-Persona-secondaryText': {\r\n                    color: HOVER_COLOR,\r\n                },\r\n                '.ms-Button-label': {\r\n                    color: HOVER_COLOR,\r\n                },\r\n            },\r\n        };\r\n        return {\r\n            root: {\r\n                selectors: {\r\n                    '.ms-Button': {\r\n                        padding: '0 13px 0 13px',\r\n                        color: TEXT_COLOR,\r\n                    },\r\n                    '.icons-default-fill': {\r\n                        fill: TEXT_COLOR,\r\n                    },\r\n                },\r\n            },\r\n            container: {\r\n                selectors: {\r\n                    '.ms-Callout': {\r\n                        minWidth: '444px',\r\n                    },\r\n                    '.ms-Persona-primaryText, .ms-Persona, .ms-Persona-secondaryText': {\r\n                        color: 'inherit',\r\n                    },\r\n                },\r\n            },\r\n            calloutMain: {\r\n                selectors: {\r\n                    \"[data-icon-name='chevronMedRightIcon']\": {\r\n                        marginRight: '-5px',\r\n                    },\r\n                    '.ms-Button': {\r\n                        selectors: {\r\n                            ':hover': {\r\n                                '.icons-unfilled': {\r\n                                    display: 'none',\r\n                                },\r\n                                '.icons-filled': {\r\n                                    display: 'block',\r\n                                },\r\n                                ...hoverStyles,\r\n                            },\r\n                            ':active': {\r\n                                ...focusActiveStyles,\r\n                                backgroundColor: ACTIVE_BACKGROUND_COLOR,\r\n                            },\r\n                        },\r\n                    },\r\n                    [`button.${SEARCH_WELL_FOCUSED_CLASS}`]: {\r\n                        ...focusActiveStyles,\r\n                        selectors: {\r\n                            ':hover': {\r\n                                backgroundColor: ACTIVE_BACKGROUND_COLOR,\r\n                            },\r\n                        },\r\n                    },\r\n                    ':global(.ms-Fabric--isFocusVisible) button.fabric-search-well-callout-focus': {\r\n                        backgroundColor: FOCUS_VISIBLE_BACKGROUND_COLOR,\r\n                        border: FOCUS_VISIBLE_BORDER,\r\n                        borderRadius: teamsBorderRadius,\r\n                    },\r\n                    '.ms-GroupedList-group .ms-List-page button:hover': {\r\n                        color: props.theme.palette.white,\r\n                    },\r\n                },\r\n            },\r\n        } as Partial<ICalloutContentStyles>;\r\n    };\r\n","export * from './components';\r\nexport { CustomizedMention, Hack } from './extensions';\r\nexport * from './types';\r\n","import { Extension } from '@tiptap/core';\r\n\r\ndeclare module '@tiptap/core' {\r\n    interface Commands<ReturnType> {\r\n        fontSize: {\r\n            /**\r\n             * Set the fontSize\r\n             */\r\n            setFontSize: (fontSize: string) => ReturnType;\r\n\r\n            /**\r\n             * Unset the fontSize\r\n             */\r\n            unsetFontSize: () => ReturnType;\r\n        };\r\n    }\r\n}\r\n\r\nexport interface FontSizeOptions {\r\n    types: string[];\r\n}\r\n\r\nexport const FontSize = Extension.create<FontSizeOptions>({\r\n    name: 'fontSize',\r\n\r\n    addOptions() {\r\n        return {\r\n            types: ['textStyle'],\r\n        };\r\n    },\r\n\r\n    addGlobalAttributes() {\r\n        return [\r\n            {\r\n                types: this.options.types,\r\n                attributes: {\r\n                    fontSize: {\r\n                        default: null,\r\n                        parseHTML: element => element.style.fontSize?.replace(/['\"]+/g, ''),\r\n                        renderHTML: attributes => {\r\n                            if (!attributes.fontSize) return {};\r\n                            return { style: `font-size: ${attributes.fontSize}` };\r\n                        },\r\n                    },\r\n                },\r\n            },\r\n        ];\r\n    },\r\n\r\n    addCommands() {\r\n        return {\r\n            setFontSize:\r\n                fontSize =>\r\n                ({ chain }) =>\r\n                    chain().setMark('textStyle', { fontSize }).run(),\r\n            unsetFontSize:\r\n                () =>\r\n                ({ chain }) =>\r\n                    chain().setMark('textStyle', { fontSize: null }).removeEmptyTextStyle().run(),\r\n        };\r\n    },\r\n});\r\n","import { isContrastTheme, makeStyles } from '@addressbook/components-fluentui-teams-theme';\r\n\r\nexport const useColorMenuItemStyles = makeStyles(theme => ({\r\n    root: {\r\n        display: 'block',\r\n        width: '16px',\r\n        height: '16px',\r\n        padding: 0,\r\n\r\n        border: 'none',\r\n        borderRadius: '4px',\r\n\r\n        cursor: 'pointer',\r\n    },\r\n    color: {\r\n        boxShadow: 'rgba(0, 0, 0, 0.1) 0px 0px 2px, rgba(0, 0, 0, 0.15) 0px 2px 4px',\r\n        ':hover': {\r\n            borderStyle: 'solid',\r\n            borderWidth: '1px',\r\n            borderColor: theme.palette.neutralDark,\r\n        },\r\n    },\r\n    text: {\r\n        height: '24px',\r\n        width: '100%',\r\n        '.ms-ContextualMenu-item:has(&)': {\r\n            flex: '100%',\r\n        },\r\n\r\n        color: isContrastTheme(theme.name) ? theme.palette.black : theme.palette.neutralPrimary,\r\n        backgroundColor: theme.palette.white,\r\n\r\n        borderStyle: 'solid',\r\n        borderWidth: '1px',\r\n        borderColor: isContrastTheme(theme.name) ? theme.palette.black : theme.palette.neutralTertiary,\r\n\r\n        ':hover': {\r\n            color: isContrastTheme(theme.name) ? theme.palette.white : undefined,\r\n            backgroundColor: isContrastTheme(theme.name) ? theme.palette.accent : theme.palette.neutralLighterAlt,\r\n        },\r\n    },\r\n}));\r\n","export * from './InsertLink';\r\nexport * from './InsertLink.dialog';\r\nexport * from './InsertLink.menu';\r\n","export * from './RichTextField';\r\nexport * from './RichTextField.types';\r\n","import { isContrastTheme, makeStyles } from '@addressbook/components-fluentui-teams-theme';\r\n\r\nconst SeparatorWidth = 1;\r\nconst RibbonButtonGap = 4;\r\n\r\nexport const useRibbonStyles = makeStyles(theme => ({\r\n    leadingButton: {\r\n        position: 'relative',\r\n        '.ms-OverflowSet-item:not(:first-child) &::before': {\r\n            content: '\"\"',\r\n            backgroundColor: isContrastTheme(theme.name) ? theme.palette.black : theme.palette.neutralTertiaryAlt,\r\n            position: 'absolute',\r\n            width: `${SeparatorWidth}px`,\r\n            insetBlock: '25%',\r\n            insetInlineStart: `-${(RibbonButtonGap + SeparatorWidth) / 2}px`,\r\n        },\r\n    },\r\n}));\r\n\r\nexport const useRibbonCommandBarStyles = makeStyles(theme => ({\r\n    root: {\r\n        ':first-child': {\r\n            paddingTop: '8px',\r\n        },\r\n        ':last-child': {\r\n            paddingBottom: '8px',\r\n        },\r\n        height: '32px',\r\n        paddingInline: '12px',\r\n        border: 'none',\r\n        '.ms-OverflowSet': {\r\n            gap: `${RibbonButtonGap}px`,\r\n        },\r\n        '.ms-Button': {\r\n            color: theme.palette.black,\r\n            border: 'none',\r\n            margin: 0,\r\n            padding: '0 8px',\r\n            borderRadius: '4px',\r\n            '.ms-Icon': {\r\n                height: '16px',\r\n                width: '16px',\r\n                margin: 0,\r\n                padding: 0,\r\n                color: 'inherit !important',\r\n                svg: {\r\n                    margin: 0,\r\n                    fill: 'currentColor !important',\r\n                },\r\n            },\r\n            svg: {\r\n                display: 'block',\r\n                height: '100%',\r\n                width: '100%',\r\n            },\r\n        },\r\n        '.ms-Button.is-checked': {\r\n            color: isContrastTheme(theme.name) ? theme.palette.themeDark : theme.palette.accent,\r\n            backgroundColor: isContrastTheme(theme.name) ? undefined : theme.palette.neutralQuaternary,\r\n        },\r\n        '.ms-Button:hover': {\r\n            '@media (hover: hover)': {\r\n                color: isContrastTheme(theme.name) ? theme.palette.white : theme.palette.accent,\r\n                backgroundColor: isContrastTheme(theme.name) ? theme.palette.accent : undefined,\r\n            },\r\n        },\r\n        '.ms-Button:hover:not(.is-checked)': {\r\n            '@media (hover: none)': {\r\n                color: theme.palette.black,\r\n            },\r\n        },\r\n        '.ms-Button:not(.ms-CommandBar-overflowButton) .ms-Button-menuIcon': {\r\n            display: 'none',\r\n        },\r\n    },\r\n}));\r\n","/*\r\n *  Copyright © Microsoft Corporation. All rights reserved.\r\n */\r\n\r\nimport { ISuggestionsStyleProps, ITheme, ISuggestionsStyles } from '@fluentui/react';\r\n\r\nexport function getSuggestionsStyles(themeName: string, _theme: ITheme) {\r\n    return (props: ISuggestionsStyleProps): Partial<ISuggestionsStyles> => {\r\n        const { theme } = props;\r\n        const { palette } = theme;\r\n\r\n        const selectedColor = {\r\n            default: `${palette.black} !important`,\r\n            dark: `${palette.black} !important`,\r\n            contrast: `${palette.white} !important`,\r\n        }[themeName];\r\n\r\n        const selectedBackground = {\r\n            default: palette.neutralLighter,\r\n            dark: palette.neutralLighter,\r\n            contrast: palette.themeSecondary,\r\n        }[themeName];\r\n\r\n        const customizedStyles = {\r\n            background: selectedBackground,\r\n            selectors: {\r\n                '.ms-Persona-details': {\r\n                    selectors: {\r\n                        div: {\r\n                            color: selectedColor,\r\n                        },\r\n                    },\r\n                },\r\n            },\r\n        };\r\n\r\n        const styles: ISuggestionsStyles = {\r\n            root: {},\r\n            noSuggestions: {\r\n                color: palette.black,\r\n            },\r\n            suggestionsContainer: {\r\n                selectors: {\r\n                    '.ms-Suggestions-item': {\r\n                        height: '4.0em',\r\n                        paddingBottom: '0',\r\n                        marginBottom: '0',\r\n                    },\r\n                    '.ms-Suggestions-item .ms-Suggestions-itemButton:hover': {\r\n                        ...customizedStyles,\r\n                    },\r\n                    '.ms-Suggestions-item .ms-Suggestions-itemButton.is-suggested': {\r\n                        ...customizedStyles,\r\n                    },\r\n                },\r\n            },\r\n            title: {},\r\n            forceResolveButton: {},\r\n            searchForMoreButton: {},\r\n            suggestionsAvailable: {},\r\n            subComponentStyles: {\r\n                spinner: {},\r\n            },\r\n        };\r\n        return styles;\r\n    };\r\n}\r\n","import { JSONContent, mergeAttributes, Node } from '@tiptap/core';\r\nimport { Fragment } from '@tiptap/pm/model';\r\nimport { Plugin } from '@tiptap/pm/state';\r\nimport { ReactNodeViewRenderer } from '@tiptap/react';\r\nimport {\r\n    createFileByBlob,\r\n    dataTransferIncludesFiles,\r\n    decodeDataUrl,\r\n    extractFilesFromDataTransfer,\r\n    getExtensionByMime,\r\n    getMimeByDataUrl,\r\n    isImageMime,\r\n    joinFileName,\r\n    normalizeFileName,\r\n    splitFileName,\r\n    uuid,\r\n} from '@addressbook/utilities-core';\r\nimport { defaultRichTextFieldStrings, defaultRichTextFileStorageService } from '../../utils';\r\nimport { NodeRenderHTMLProps } from '../types';\r\nimport { FileSessions } from './sessions';\r\nimport { FileOptions } from './types';\r\nimport { FileNodeView } from './view';\r\n\r\ndeclare module '@tiptap/core' {\r\n    interface Commands<ReturnType> {\r\n        file: {\r\n            /**\r\n             * Insert a file.\r\n             *\r\n             * @param file - The file to insert.\r\n             */\r\n            insertFile: (file: File) => ReturnType;\r\n\r\n            /**\r\n             * Insert files.\r\n             *\r\n             * @param files - The files to insert.\r\n             */\r\n            insertFiles: (files: File[]) => ReturnType;\r\n        };\r\n    }\r\n}\r\n\r\n/**\r\n * The file extension.\r\n */\r\nexport const File = Node.create<FileOptions, FileSessions>({\r\n    name: 'file',\r\n    content: 'text?',\r\n    group: 'inline',\r\n    inline: true,\r\n    atom: true,\r\n    selectable: true,\r\n    draggable: true,\r\n    defining: true,\r\n\r\n    addOptions() {\r\n        return {\r\n            fileStorageService: defaultRichTextFileStorageService,\r\n            strings: defaultRichTextFieldStrings,\r\n            defaultMime: 'application/octet-stream',\r\n            HTMLAttributes: {\r\n                target: '_blank',\r\n                rel: 'noopener noreferrer',\r\n            },\r\n        };\r\n    },\r\n\r\n    addStorage() {\r\n        return new FileSessions(this.options.fileStorageService);\r\n    },\r\n\r\n    addAttributes() {\r\n        return {\r\n            href: {\r\n                default: null,\r\n            },\r\n            target: {\r\n                default: this.options.HTMLAttributes.target,\r\n            },\r\n            rel: {\r\n                default: this.options.HTMLAttributes.rel,\r\n            },\r\n            mime: {\r\n                default: this.options.defaultMime,\r\n                parseHTML: element => element.getAttribute(`data-${this.name}-mime`) || null,\r\n                renderHTML: attributes => (attributes.mime ? { [`data-${this.name}-mime`]: attributes.mime } : {}),\r\n            },\r\n            error: {\r\n                default: null,\r\n                parseHTML: element => (element.getAttribute(`data-${this.name}-error`) ? true : null),\r\n                renderHTML: attributes => (attributes.error ? { [`data-${this.name}-error`]: attributes.error } : {}),\r\n            },\r\n            key: {\r\n                rendered: false,\r\n            },\r\n        };\r\n    },\r\n\r\n    parseHTML() {\r\n        const getFileNameByImage = (image: HTMLImageElement): string => {\r\n            const name = image.alt || image.title || this.options.strings.defaultImageFileStem;\r\n            const mime = getMimeByDataUrl(image.src);\r\n            const extension = mime && getExtensionByMime(mime);\r\n\r\n            const normalizedName = normalizeFileName(name);\r\n            const nameParts = splitFileName(normalizedName);\r\n            const ensuredNameParts =\r\n                !extension || nameParts.extension === extension\r\n                    ? nameParts\r\n                    : { stem: joinFileName(nameParts), extension };\r\n\r\n            return joinFileName(ensuredNameParts);\r\n        };\r\n\r\n        return [\r\n            {\r\n                tag: `a[data-type=\"${this.name}\"]`,\r\n                priority: 100,\r\n                getAttrs: element => {\r\n                    const anchor = element as HTMLAnchorElement;\r\n\r\n                    // anchor.href is not suitable here because it is resolved to an absolute URL, even if the href is\r\n                    // empty or a fragment. We need the original href value.\r\n                    const url = anchor.getAttribute('href');\r\n                    if (!url) return false;\r\n\r\n                    const mime = anchor.getAttribute(`data-${this.name}-mime`);\r\n                    if (!mime) return false;\r\n\r\n                    const key = uuid();\r\n                    if (isImageMime(mime)) {\r\n                        this.storage.download(key, url);\r\n                    } else {\r\n                        this.storage.thumbnail(key, url);\r\n                    }\r\n                    return { key };\r\n                },\r\n            },\r\n            {\r\n                tag: 'img[src^=\"data:\"]',\r\n                priority: 100,\r\n                getAttrs: element => {\r\n                    const image = element as HTMLImageElement;\r\n                    const blob = decodeDataUrl(image.src);\r\n                    if (!blob) return false;\r\n\r\n                    const mime = getMimeByDataUrl(image.src);\r\n\r\n                    const key = uuid();\r\n                    this.storage.upload(key, createFileByBlob(blob, getFileNameByImage(image)));\r\n                    return { mime, key };\r\n                },\r\n                getContent: (node, schema) => Fragment.from(schema.text(getFileNameByImage(node as HTMLImageElement))),\r\n            },\r\n        ];\r\n    },\r\n\r\n    renderHTML({ HTMLAttributes }: NodeRenderHTMLProps) {\r\n        return ['a', mergeAttributes({ 'data-type': this.name }, this.options.HTMLAttributes, HTMLAttributes), 0];\r\n    },\r\n\r\n    addNodeView() {\r\n        return ReactNodeViewRenderer(FileNodeView);\r\n    },\r\n\r\n    addCommands() {\r\n        return {\r\n            insertFile:\r\n                file =>\r\n                ({ commands }) =>\r\n                    commands.insertFiles([file]),\r\n            insertFiles:\r\n                files =>\r\n                ({ commands, editor }) => {\r\n                    // Map files to JSON content\r\n                    const content: JSONContent[] = files.map(file => {\r\n                        const mime = file.type || this.options.defaultMime;\r\n\r\n                        const key = uuid();\r\n                        this.storage.upload(key, file);\r\n                        return {\r\n                            type: this.name,\r\n                            attrs: { mime, key },\r\n                            content: [{ type: 'text', text: file.name }],\r\n                        };\r\n                    });\r\n\r\n                    // Wrap content in a paragraph if grouping with other file nodes\r\n                    const { $from, $to } = editor.state.selection;\r\n                    const grouping =\r\n                        ($from.nodeBefore && $from.nodeBefore.type.name === this.name) ||\r\n                        ($to.nodeAfter && $to.nodeAfter.type.name === this.name);\r\n                    const wrappedContent = grouping ? content : { type: 'paragraph', content };\r\n\r\n                    return commands.insertContent(wrappedContent);\r\n                },\r\n        };\r\n    },\r\n\r\n    addProseMirrorPlugins() {\r\n        const consumeDataTransfer = (data: DataTransfer | null): boolean | void => {\r\n            if (!data || !dataTransferIncludesFiles(data) || data.types.length > 1) return;\r\n            const files = extractFilesFromDataTransfer(data);\r\n            return files.length > 0 && this.editor.chain().insertFiles(files).focus().run();\r\n        };\r\n\r\n        return [\r\n            new Plugin({\r\n                props: {\r\n                    handleDrop: (_, event) => consumeDataTransfer(event.dataTransfer),\r\n                    handlePaste: (_, event) => consumeDataTransfer(event.clipboardData),\r\n                },\r\n            }),\r\n        ];\r\n    },\r\n});\r\n","import { ChoiceGroup, IChoiceGroupOption, TextField } from '@fluentui/react';\r\nimport React from 'react';\r\nimport { ChoiceAppearance, ChoiceEntry, FormContext, FormEntry, FormMode, FormQuestionType } from '../../types';\r\nimport {\r\n    useChoiceChange,\r\n    useChoiceGroupOptionStyles,\r\n    useChoiceGroupStyles,\r\n    useChosenAndOther,\r\n    useOtherFieldStyles,\r\n    useShuffled,\r\n} from '../../utilities';\r\nimport { BaseDescriptor, FieldComponentTypeFactory } from './BaseDescriptor';\r\n\r\nconst defaultOptions = {\r\n    otherPlaceholder: 'Other',\r\n    choiceAriaLabel: (title: string, choice: string) => `${title}: ${choice}`,\r\n};\r\n\r\nexport type RadioChoiceDescriptorOptions = Partial<typeof defaultOptions>;\r\n\r\nconst makeFieldComponent: FieldComponentTypeFactory<\r\n    RadioChoiceDescriptorOptions & typeof defaultOptions,\r\n    ChoiceEntry\r\n> =\r\n    ({ otherPlaceholder, choiceAriaLabel }) =>\r\n    ({ entry, onEntryChange, showPlaceholder, delegatedProps }) => {\r\n        const { question, answer } = entry;\r\n        const { choices, shuffle, allowOther } = question;\r\n\r\n        const shuffledChoices = useShuffled({ array: choices, enabled: shuffle && !delegatedProps.readOnly });\r\n        const onChange = useChoiceChange(entry, onEntryChange);\r\n        const { chosen, otherKey, otherValue, otherSelected, otherFieldRef } = useChosenAndOther(\r\n            choices,\r\n            answer.content\r\n        );\r\n\r\n        const choiceGroupStyles = useChoiceGroupStyles();\r\n        const choiceGroupOptionStyles = useChoiceGroupOptionStyles();\r\n        const otherFieldStyles = useOtherFieldStyles();\r\n\r\n        const options = shuffledChoices.map<IChoiceGroupOption>(choice => ({\r\n            key: choice,\r\n            text: choice,\r\n            styles: choiceGroupOptionStyles,\r\n            ariaLabel: choiceAriaLabel(question.title ?? '', choice),\r\n        }));\r\n\r\n        if (allowOther) {\r\n            options.push({\r\n                key: otherKey,\r\n                text: otherValue ?? '',\r\n                styles: choiceGroupOptionStyles,\r\n                onRenderLabel: choiceGroupProps => (\r\n                    <TextField\r\n                        componentRef={otherFieldRef}\r\n                        value={choiceGroupProps?.text}\r\n                        onChange={onChange && ((_, newValue) => onChange([], newValue))}\r\n                        placeholder={showPlaceholder ? otherPlaceholder : undefined}\r\n                        readOnly={delegatedProps.readOnly}\r\n                        invalid={otherSelected && delegatedProps.invalid}\r\n                        id={choiceGroupProps?.labelId}\r\n                        className='ms-ChoiceFieldLabel'\r\n                        styles={otherFieldStyles}\r\n                    />\r\n                ),\r\n                ariaLabel: choiceAriaLabel(question.title ?? '', otherValue ?? otherPlaceholder),\r\n            });\r\n        }\r\n\r\n        return (\r\n            <ChoiceGroup\r\n                {...delegatedProps}\r\n                selectedKey={otherSelected ? otherKey : chosen[0] ?? null}\r\n                onChange={\r\n                    onChange &&\r\n                    ((_, option) => {\r\n                        if (!option) return;\r\n\r\n                        if (option.key === otherKey) {\r\n                            otherFieldRef.current?.focus();\r\n                            onChange([], '');\r\n                        } else {\r\n                            onChange([option.key]);\r\n                        }\r\n                    })\r\n                }\r\n                options={options}\r\n                role='radiogroup'\r\n                styles={choiceGroupStyles}\r\n            />\r\n        );\r\n    };\r\n\r\n/**\r\n * The descriptor that renders a group of radio buttons for choice entries with radio appearance.\r\n */\r\nexport class RadioChoiceDescriptor extends BaseDescriptor<ChoiceEntry> {\r\n    protected readonly FieldComponent;\r\n\r\n    constructor(options?: RadioChoiceDescriptorOptions) {\r\n        super();\r\n        this.FieldComponent = makeFieldComponent({ ...defaultOptions, ...options });\r\n    }\r\n\r\n    /**\r\n     * Tests whether the entry is a choice entry with radio appearance, and the form is not in viewing mode.\r\n     *\r\n     * @param entry The entry to test.\r\n     * @param context The context.\r\n     * @returns Passes the test or not.\r\n     */\r\n    test(entry: FormEntry, context: FormContext): entry is ChoiceEntry {\r\n        return (\r\n            entry.question.type === FormQuestionType.Choice &&\r\n            entry.question.appearance === ChoiceAppearance.Radio &&\r\n            context.mode !== FormMode.Viewing\r\n        );\r\n    }\r\n}\r\n","/* istanbul ignore file */\r\n\r\nimport { ComponentsStyles, ITheme } from '@fluentui/theme';\r\nimport { themeNames } from '../teams-palette';\r\nimport { getActionButtonStyles } from './styles/action-button.styles';\r\nimport { getBreadcrumbStyles } from './styles/breadcrumb.styles';\r\nimport { getCalloutContentStyles } from './styles/callout.styles';\r\nimport { getCheckboxStyles } from './styles/checkbox.styles';\r\nimport { getChoiceGroupOptionStyles } from './styles/choice-group-option.styles';\r\nimport { getComboBoxStyles } from './styles/combo-box.styles';\r\nimport { getCommandBarButtonStyles } from './styles/command-bar-button.styles';\r\nimport { getCommandBarStyles } from './styles/command-bar.styles';\r\nimport { getCompoundButtonStyles } from './styles/compound-button.styles';\r\nimport { getContextualMenuStyles } from './styles/contextual-menu.styles';\r\nimport { getDatePickerStyles } from './styles/date-picker.styles';\r\nimport { getDefaultButtonStyles } from './styles/default-button.styles';\r\nimport { getCheckStyles, getDetailsListStyles, getDetailsRowStyles } from './styles/details-list.styles';\r\nimport { getDialogContentStyles, getDialogFooterStyles } from './styles/dialog.styles';\r\nimport { getDocumentCardStyles } from './styles/document-card.styles';\r\nimport { getDropdownStyles } from './styles/dropdown.styles';\r\nimport { getIconButtonStyles } from './styles/icon-button.styles';\r\nimport { getIconStyles } from './styles/icon.styles';\r\nimport { LabelStyles } from './styles/label.styles';\r\nimport { getMessageBarStyles } from './styles/message-bar.styles';\r\nimport { getModalStyles } from './styles/modal.styles';\r\nimport { getPanelStyles } from './styles/panel.styles';\r\nimport { getPeopePickerStyles } from './styles/people-picker.styles';\r\nimport { getPersonaCoinStyles, getPersonaStyles } from './styles/persona.styles';\r\nimport { PivotStyles } from './styles/pivot.styles';\r\nimport { getPrimaryButtonStyles } from './styles/primary-button.styles';\r\nimport { getScrollablePaneStyles } from './styles/scrollable-pane.styles';\r\nimport { getSearchBoxStyles } from './styles/search-box.styles';\r\nimport { getSearchWellStyles } from './styles/search-well.styles';\r\nimport { getShimmerStyles } from './styles/shimmer.styles';\r\nimport { getSuggestionsStyles } from './styles/suggestion.styles';\r\nimport { getTeachingBubbleStyles } from './styles/teaching-bubble.styles';\r\nimport { getTextFieldStyles } from './styles/text-field.styles';\r\nimport { getToggleStyles } from './styles/toggle.styles';\r\nimport { getTooltipHostStyles } from './styles/tooltip-host.styles';\r\nimport { getTooltipStyles } from './styles/tooltip.styles';\r\n\r\nexport function getTeamStyles(themeName: themeNames, theme: ITheme, isMobile?: boolean): ComponentsStyles {\r\n    return {\r\n        ActionButton: {\r\n            styles: getActionButtonStyles(themeName, theme),\r\n        },\r\n        Breadcrumb: {\r\n            styles: getBreadcrumbStyles(themeName, theme),\r\n        },\r\n        CalloutContent: {\r\n            styles: getCalloutContentStyles(themeName, theme),\r\n        },\r\n        Check: {\r\n            styles: getCheckStyles(themeName, theme),\r\n        },\r\n        Checkbox: {\r\n            styles: getCheckboxStyles(themeName, theme),\r\n        },\r\n        ChoiceGroupOption: {\r\n            styles: getChoiceGroupOptionStyles(themeName, theme),\r\n        },\r\n        ComboBox: {\r\n            styles: getComboBoxStyles(themeName, theme),\r\n        },\r\n        CommandBar: {\r\n            styles: getCommandBarStyles(themeName, theme),\r\n        },\r\n        CommandBarButton: {\r\n            styles: getCommandBarButtonStyles(themeName, theme),\r\n        },\r\n        CompoundButton: {\r\n            styles: getCompoundButtonStyles(themeName, theme),\r\n        },\r\n        ContextualMenu: {\r\n            styles: getContextualMenuStyles(themeName, theme),\r\n        },\r\n        DatePicker: {\r\n            styles: getDatePickerStyles(themeName, theme),\r\n        },\r\n        DefaultButton: {\r\n            styles: getDefaultButtonStyles(themeName, theme),\r\n        },\r\n        DetailsList: {\r\n            styles: getDetailsListStyles(themeName, theme),\r\n        },\r\n        DetailsRow: {\r\n            styles: getDetailsRowStyles(themeName, theme),\r\n        },\r\n        DialogContent: {\r\n            styles: getDialogContentStyles(themeName, theme),\r\n        },\r\n        DialogFooter: {\r\n            styles: getDialogFooterStyles(themeName, theme),\r\n        },\r\n        DocumentCard: {\r\n            styles: getDocumentCardStyles(themeName, theme),\r\n        },\r\n        Dropdown: {\r\n            styles: getDropdownStyles(themeName, theme),\r\n        },\r\n        Icon: {\r\n            styles: getIconStyles,\r\n        },\r\n        IconButton: {\r\n            styles: getIconButtonStyles(themeName, theme),\r\n        },\r\n        Label: {\r\n            styles: LabelStyles,\r\n        },\r\n        MessageBar: {\r\n            styles: getMessageBarStyles(themeName, theme),\r\n        },\r\n        Modal: {\r\n            styles: getModalStyles(themeName, theme, isMobile),\r\n        },\r\n        NormalPeoplePicker: {\r\n            styles: getPeopePickerStyles(themeName, theme),\r\n        },\r\n        Panel: {\r\n            styles: getPanelStyles(themeName, theme),\r\n        },\r\n        Persona: {\r\n            styles: getPersonaStyles(themeName, theme),\r\n        },\r\n        PersonaCoin: {\r\n            styles: getPersonaCoinStyles(themeName, theme),\r\n        },\r\n        Pivot: {\r\n            styles: PivotStyles,\r\n        },\r\n        PrimaryButton: {\r\n            styles: getPrimaryButtonStyles(themeName, theme),\r\n        },\r\n        ScrollablePane: {\r\n            styles: getScrollablePaneStyles(themeName, theme),\r\n        },\r\n        SearchBox: {\r\n            styles: getSearchBoxStyles(themeName, theme),\r\n        },\r\n        SearchWellCallout: {\r\n            styles: getSearchWellStyles(themeName),\r\n        },\r\n        Shimmer: {\r\n            styles: getShimmerStyles(themeName, theme),\r\n        },\r\n        Suggestions: {\r\n            styles: getSuggestionsStyles(themeName, theme),\r\n        },\r\n        TeachingBubble: {\r\n            styles: getTeachingBubbleStyles(themeName, theme),\r\n        },\r\n        TextField: {\r\n            styles: getTextFieldStyles(themeName, theme),\r\n        },\r\n        Toggle: {\r\n            styles: getToggleStyles(themeName),\r\n        },\r\n        Tooltip: {\r\n            styles: getTooltipStyles(themeName, theme),\r\n        },\r\n        TooltipHost: {\r\n            styles: getTooltipHostStyles(),\r\n        },\r\n    };\r\n}\r\n","import { ITooltipHostStyles } from '@fluentui/react';\r\n\r\nexport function getTooltipHostStyles(): Partial<ITooltipHostStyles> {\r\n    return {\r\n        root: {\r\n            // make icons properly aligned\r\n            '& > i': {\r\n                margin: '4px 4px 0',\r\n            },\r\n        },\r\n    };\r\n}\r\n","/* istanbul ignore file */\r\n\r\nimport { ICalloutContentStyleProps, ICalloutContentStyles, ITheme, IStyleFunctionOrObject } from '@fluentui/react';\r\nimport { ShadowLevels } from '../teams-shadow-levels';\r\nimport { isContrastTheme, isDarkTheme } from '../teams-theme';\r\nimport { teamsBorderRadius } from './constants';\r\n\r\nexport function getCalloutContentStyles(\r\n    themeName: string,\r\n    _theme: ITheme\r\n): IStyleFunctionOrObject<ICalloutContentStyleProps, ICalloutContentStyles> {\r\n    return (props: ICalloutContentStyleProps) => {\r\n        const { theme } = props;\r\n        const { palette } = theme;\r\n\r\n        const TEXT_COLOR = palette.black;\r\n\r\n        const styles = {\r\n            root: {\r\n                borderRadius: teamsBorderRadius,\r\n                boxShadow: ShadowLevels.shadowLevel3,\r\n                background: palette.white,\r\n                borderWidth: '1px',\r\n                borderStyle: 'solid',\r\n                borderColor: palette.neutralTertiaryAlt,\r\n                color: TEXT_COLOR,\r\n                selectors: {\r\n                    '.ms-Spinner': {\r\n                        padding: '32px',\r\n                    },\r\n                    '.ms-CalloutExample-title': {\r\n                        color: 'inherit',\r\n                    },\r\n                    '.ms-CalloutExample-subText': {\r\n                        color: 'inherit',\r\n                    },\r\n                    \"[class*='menuItemIconContainer']\": {\r\n                        marginLeft: '0',\r\n                        marginRight: '12px',\r\n                    },\r\n                },\r\n            },\r\n            beakCurtain: {\r\n                borderRadius: teamsBorderRadius,\r\n            },\r\n            beak: {\r\n                background: palette.white,\r\n            },\r\n            callout: {\r\n                borderRadius: teamsBorderRadius,\r\n            },\r\n            calloutMain: {\r\n                borderRadius: teamsBorderRadius,\r\n                background: palette.white,\r\n            },\r\n        };\r\n\r\n        // Dark theme overrides\r\n        if (isDarkTheme(themeName)) {\r\n            styles.root.boxShadow = ShadowLevels.shadowLevel3Dark;\r\n            styles.root.borderColor = palette.white;\r\n            styles.root.background = palette.neutralLight;\r\n            styles.beak.background = palette.neutralLight;\r\n            styles.calloutMain.background = palette.neutralLight;\r\n        }\r\n\r\n        // Contrast theme overrides\r\n        if (isContrastTheme(themeName)) {\r\n            styles.root.boxShadow = 'none';\r\n            styles.root.borderColor = palette.black;\r\n            styles.root.background = palette.white;\r\n        }\r\n        return styles;\r\n    };\r\n}\r\n","export * from './default';\r\nexport * from './LengthValidator';\r\nexport * from './NumberValidator';\r\nexport * from './RequiredValidator';\r\nexport * from './RichTextValidator';\r\n","import { Spinner, SpinnerSize, TooltipHost } from '@fluentui/react';\r\nimport { useBlobObjectUrl } from '@addressbook/utilities-hooks';\r\nimport React from 'react';\r\nimport { useFallbackViewStyles } from './styles';\r\n\r\nexport interface FallbackViewProps extends React.PropsWithChildren<React.AnchorHTMLAttributes<HTMLAnchorElement>> {\r\n    thumbnail?: Blob;\r\n    loading?: boolean;\r\n}\r\n\r\nexport const FallbackView: React.FC<FallbackViewProps> = ({ thumbnail, loading, children, ...props }) => {\r\n    const targetRef = React.useRef<HTMLAnchorElement>(null);\r\n    const thumbnailUrl = useBlobObjectUrl(thumbnail);\r\n\r\n    const styles = useFallbackViewStyles();\r\n    return (\r\n        // Justification: the props are spread to the anchor element\r\n        // eslint-disable-next-line react/jsx-no-target-blank\r\n        <a ref={targetRef} {...props}>\r\n            {loading && <Spinner className={styles.spinner} size={SpinnerSize.xSmall} />}\r\n            {thumbnailUrl ? <TooltipHost content={<img src={thumbnailUrl} />}>{children}</TooltipHost> : children}\r\n        </a>\r\n    );\r\n};\r\n","import { LengthValidator } from './LengthValidator';\r\nimport { NumberValidator } from './NumberValidator';\r\nimport { RequiredValidator } from './RequiredValidator';\r\nimport { RichTextValidator } from './RichTextValidator';\r\n\r\nexport const defaultValidators = [\r\n    new LengthValidator(),\r\n    new RequiredValidator(),\r\n    new NumberValidator(),\r\n    new RichTextValidator(),\r\n];\r\n","/* istanbul ignore file */\r\n\r\nimport { IIconStyles } from '@fluentui/react';\r\n\r\nexport function getIconStyles(): Partial<IIconStyles> {\r\n    return {\r\n        root: {\r\n            width: '1em',\r\n            height: '1em',\r\n            img: {\r\n                display: 'block',\r\n                width: '100%',\r\n                height: '100%',\r\n                lineHeight: '100%',\r\n                objectFit: 'contain',\r\n            },\r\n        },\r\n    };\r\n}\r\n","import { AnyExtension } from '@tiptap/core';\r\nimport { RichTextFieldStrings } from '../types';\r\nimport { defaultRichTextFieldStrings } from '../utils';\r\n\r\n/**\r\n * Get the compact by an extension.\r\n *\r\n * @param extension The extension.\r\n * @returns The compact.\r\n */\r\nexport function getCompactByExtension(extension: AnyExtension): boolean | undefined {\r\n    const compact = extension.options.compact;\r\n    return typeof compact === 'boolean' ? compact : undefined;\r\n}\r\n\r\n/**\r\n * Get the strings by an extension.\r\n *\r\n * @param extension The extension.\r\n * @returns The strings.\r\n */\r\nexport function getStringsByExtension(extension: AnyExtension): RichTextFieldStrings {\r\n    const strings = extension.options.strings;\r\n    return typeof strings === 'object' ? (strings as RichTextFieldStrings) : defaultRichTextFieldStrings;\r\n}\r\n","export * from './PreviewingDecorator';\r\n","/* istanbul ignore file */\r\n\r\nimport { IScrollablePaneStyles, ITheme } from '@fluentui/react';\r\n\r\nexport function getScrollablePaneStyles(_themeName: string, _theme: ITheme) {\r\n    return (): Partial<IScrollablePaneStyles> => {\r\n        const styles = {\r\n            root: {\r\n                fontFamily: 'inherit',\r\n            },\r\n        };\r\n\r\n        return styles;\r\n    };\r\n}\r\n","/* istanbul ignore file */\r\n\r\nimport { ITooltipStyleProps, ITheme, IStyleFunctionOrObject, ITooltipStyles } from '@fluentui/react';\r\nimport { isContrastTheme, isDarkTheme } from '../teams-theme';\r\nimport { teamsBorderRadius } from './constants';\r\n\r\nexport function getTooltipStyles(\r\n    themeName: string,\r\n    _theme: ITheme\r\n): IStyleFunctionOrObject<ITooltipStyleProps, ITooltipStyles> {\r\n    return (props: ITooltipStyleProps) => {\r\n        const { theme } = props;\r\n        const { palette } = theme;\r\n\r\n        const styles = {\r\n            root: {\r\n                selectors: {\r\n                    '.ms-Callout-beak': {\r\n                        backgroundColor: palette.white,\r\n                        borderBottomRightRadius: teamsBorderRadius,\r\n                    },\r\n                },\r\n            },\r\n            content: {\r\n                backgroundColor: palette.white,\r\n                color: palette.black,\r\n            },\r\n        };\r\n\r\n        // Dark theme overrides\r\n        if (isDarkTheme(themeName)) {\r\n            styles.content.backgroundColor = palette.white;\r\n            styles.content.color = palette.black;\r\n        }\r\n\r\n        // Contrast theme overrides\r\n        if (isContrastTheme(themeName)) {\r\n            styles.content.backgroundColor = palette.white;\r\n            styles.content.color = palette.black;\r\n        }\r\n        return styles;\r\n    };\r\n}\r\n","import { mergeStyles } from '@fluentui/react';\r\nimport React from 'react';\r\nimport { FieldProps } from '../../../abstractions';\r\nimport { FormContext, FormEntry, FormFeature } from '../../types';\r\nimport { useActive } from '../../utilities';\r\nimport { PreviewingDecorator } from '../PreviewingDecorator';\r\nimport { ActiveDesigningDecorator } from './DesigningDecorator.active';\r\nimport { useDesigningDecoratorStyles } from './DesigningDecorator.styles';\r\n\r\nexport function DesigningDecorator<CoercedEntry extends FormEntry>(\r\n    props: React.PropsWithChildren<FieldProps<FormEntry, FormContext, FormFeature, CoercedEntry>>\r\n): JSX.Element {\r\n    const { entry, onEntryChange, feature } = props;\r\n    const { strings } = feature;\r\n\r\n    const active = entry.active ?? false;\r\n    const setActive = React.useCallback(\r\n        (value: boolean) => {\r\n            const newEntry = { ...entry };\r\n            newEntry.active = value;\r\n            if (!newEntry.active) delete newEntry.active;\r\n            onEntryChange?.(newEntry);\r\n        },\r\n        [entry, onEntryChange]\r\n    );\r\n\r\n    const hint = React.useMemo(() => strings.questionHint(entry.question, active), [active, entry.question, strings]);\r\n\r\n    const ref = useActive<HTMLDivElement>({ active, setActive });\r\n\r\n    const Component = active ? ActiveDesigningDecorator : PreviewingDecorator;\r\n    const styles = useDesigningDecoratorStyles();\r\n    return (\r\n        <div ref={ref} className={mergeStyles(styles.root, !active && styles.inactive)} tabIndex={0} aria-label={hint}>\r\n            <Component {...props} />\r\n        </div>\r\n    );\r\n}\r\n","/* istanbul ignore file */\r\n\r\nimport { IButtonStyles, ITheme } from '@fluentui/react';\r\nimport { teamsBorderRadius } from './constants';\r\n\r\nexport function getActionButtonStyles(themeName: string, theme: ITheme): Partial<IButtonStyles> {\r\n    return {\r\n        root: {\r\n            color: theme.palette.neutralDark,\r\n            // Work around for fluentui button focus outline not showing in iOS Safari.\r\n            ':focus-visible, .ms-Fabric--isFocusVisible &:focus': {\r\n                '::after': {\r\n                    content: '\"\"',\r\n                    position: 'absolute',\r\n                    inset: '2px',\r\n                    outline: `1px solid ${theme.palette.black}`,\r\n                    borderRadius: teamsBorderRadius,\r\n                },\r\n            },\r\n        },\r\n    };\r\n}\r\n","/* istanbul ignore file */\r\n\r\nimport {\r\n    IPersonaCoinStyleProps,\r\n    IPersonaCoinStyles,\r\n    IPersonaStyleProps,\r\n    IPersonaStyles,\r\n    IStyleFunctionOrObject,\r\n    ITheme,\r\n} from '@fluentui/react';\r\nimport { FontSizes } from '../teams-sizes';\r\nexport function getPersonaStyles(\r\n    _themeName: string,\r\n    theme: ITheme\r\n): IStyleFunctionOrObject<IPersonaStyleProps, IPersonaStyles> {\r\n    return (_props: IPersonaStyleProps) => {\r\n        return {\r\n            root: {\r\n                height: 'auto',\r\n            },\r\n            details: {\r\n                width: 'auto',\r\n                flex: '1 1 0',\r\n            },\r\n            primaryText: {\r\n                height: 'auto',\r\n                lineHeight: 'auto',\r\n                fontSize: FontSizes.size14,\r\n                color: theme.palette.black,\r\n            },\r\n            secondaryText: {\r\n                height: 'auto',\r\n                lineHeight: 'auto',\r\n                fontSize: FontSizes.size14,\r\n                color: theme.palette.neutralDark,\r\n            },\r\n        };\r\n    };\r\n}\r\n\r\nexport function getPersonaCoinStyles(\r\n    _themeName: string,\r\n    _theme: ITheme\r\n): IStyleFunctionOrObject<IPersonaCoinStyleProps, IPersonaCoinStyles> {\r\n    return (_props: IPersonaCoinStyleProps) => {\r\n        return {\r\n            initials: {\r\n                alignItems: 'center',\r\n                display: 'flex',\r\n                justifyContent: 'center',\r\n            },\r\n        };\r\n    };\r\n}\r\n","import { FormEntry, FormQuestionType, Validation, ValidationFailure, Validator } from '../../types';\r\nimport { hasErrorFiles, hasUploadingFiles, isHtmlEmpty, createValidationSuccess } from '../../utilities';\r\n\r\nexport interface RichTextValidatorOptions {\r\n    requiredErrorMessage?: string;\r\n    filesErrorMessage?: string;\r\n}\r\n\r\nconst defaultRequiredErrorMessage = 'This field is required';\r\nconst defaultFilesErrorMessage = 'Something went wrong while uploading files';\r\n\r\n/**\r\n * A validator that checks rich text answers.\r\n */\r\nexport class RichTextValidator implements Validator<FormEntry> {\r\n    private requiredErrorMessage: string;\r\n    private filesErrorMessage: string;\r\n\r\n    /**\r\n     * Creates a rich text validator.\r\n     *\r\n     * @param options.requiredErrorMessage The error message to display when the answer is empty.\r\n     * @param options.filesErrorMessage The error message to display when there are files with errors.\r\n     * @returns A required validator.\r\n     */\r\n    constructor({\r\n        requiredErrorMessage = defaultRequiredErrorMessage,\r\n        filesErrorMessage = defaultFilesErrorMessage,\r\n    }: RichTextValidatorOptions = {}) {\r\n        this.requiredErrorMessage = requiredErrorMessage;\r\n        this.filesErrorMessage = filesErrorMessage;\r\n    }\r\n\r\n    validate({ question, answer }: FormEntry): Validation {\r\n        if (question.type !== FormQuestionType.RichText) {\r\n            return createValidationSuccess();\r\n        }\r\n\r\n        const content = (answer.content ?? '') as string;\r\n        const dom = new DOMParser().parseFromString(content, 'text/html');\r\n\r\n        // Check for required.\r\n        if (question.required && isHtmlEmpty(dom)) {\r\n            return this.createValidationFailure(this.requiredErrorMessage);\r\n        }\r\n\r\n        // Check for error files.\r\n        if (hasErrorFiles(dom)) {\r\n            return this.createValidationFailure(this.filesErrorMessage);\r\n        }\r\n\r\n        // Check for uploading files.\r\n        if (hasUploadingFiles(dom)) {\r\n            return this.createValidationFailure();\r\n        }\r\n\r\n        return createValidationSuccess();\r\n    }\r\n\r\n    private createValidationFailure(errorMessage?: string): ValidationFailure {\r\n        return { valid: false, errorMessage };\r\n    }\r\n}\r\n","/* istanbul ignore file */\r\n\r\nimport { IDocumentCardStyles, ITheme } from '@fluentui/react';\r\nimport { ContrastColors } from '../teams-colors';\r\nimport { ShadowLevels } from '../teams-shadow-levels';\r\nimport { FontSizes } from '../teams-sizes';\r\nimport { isContrastTheme, isDarkTheme } from '../teams-theme';\r\nimport { teamsBorderRadius } from './constants';\r\n\r\nexport function getDocumentCardStyles(themeName: string, theme: ITheme): Partial<IDocumentCardStyles> {\r\n    let BOX_SHADOW = ShadowLevels.shadowLevel1;\r\n    let BORDER_COLOR = theme.palette.neutralQuaternary;\r\n\r\n    if (isDarkTheme(themeName)) {\r\n        BOX_SHADOW = ShadowLevels.shadowLevel1Dark;\r\n    }\r\n    if (isContrastTheme(themeName)) {\r\n        BORDER_COLOR = ContrastColors.appBlack;\r\n    }\r\n    const styles: Partial<IDocumentCardStyles> = {\r\n        root: {\r\n            borderRadius: teamsBorderRadius,\r\n            backgroundColor: theme.palette.neutralLighterAlt,\r\n            borderColor: BORDER_COLOR,\r\n            borderStyle: 'solid',\r\n            borderWidth: '1px',\r\n            boxShadow: BOX_SHADOW,\r\n            selectors: {\r\n                ':hover': {\r\n                    backgroundColor: theme.palette.neutralQuaternary,\r\n                },\r\n                ':hover::after': {\r\n                    display: 'none',\r\n                },\r\n                ':focus': {\r\n                    borderColor: theme.palette.black,\r\n                },\r\n                '.ms-DocumentCardTitle': {\r\n                    color: theme.palette.black,\r\n                    fontSize: FontSizes.size14,\r\n                    height: FontSizes.size20,\r\n                    lineHeight: FontSizes.size20,\r\n                },\r\n            },\r\n        },\r\n    };\r\n    return styles;\r\n}\r\n","export * from './RichTextField';\r\n","import { CheckboxChoiceDescriptor } from './CheckboxChoiceDescriptor';\r\nimport { DateTimeDescriptor } from './DateTimeDescriptor';\r\nimport { DropdownChoiceDescriptor } from './DropdownChoiceDescriptor';\r\nimport { FallbackViewingDescriptor } from './FallbackViewingDescriptor';\r\nimport { RadioChoiceDescriptor } from './RadioChoiceDescriptor';\r\nimport { RichTextDescriptor } from './RichTextDescriptor';\r\nimport { TextDescriptor } from './TextDescriptor';\r\n\r\nexport const defaultDescriptors = [\r\n    new TextDescriptor(),\r\n    new RichTextDescriptor(),\r\n    new RadioChoiceDescriptor(),\r\n    new DropdownChoiceDescriptor(),\r\n    new CheckboxChoiceDescriptor(),\r\n    new DateTimeDescriptor(),\r\n    new FallbackViewingDescriptor(),\r\n];\r\n","/* istanbul ignore file */\r\n\r\nimport { IComboBoxStyles, IRawStyle, ITheme } from '@fluentui/react';\r\nimport { ContrastColors } from '../teams-colors';\r\nimport { FontSizes } from '../teams-sizes';\r\nimport { isContrastTheme, isDarkTheme } from '../teams-theme';\r\nimport { teamsBorderRadius } from './constants';\r\n\r\nexport function getComboBoxStyles(themeName: string, theme: ITheme): Partial<IComboBoxStyles> {\r\n    let ROOT_BACKGROUND_COLOR = theme.palette.neutralLight;\r\n    let FIELD_GROUP_OPACITY = 0.36;\r\n\r\n    const TEXT_COLOR = theme.palette.black;\r\n    let HOVER_COLOR = theme.palette.black;\r\n    const OPTIONS_TEXT_COLOR = theme.palette.neutralDark;\r\n    let HOVER_BACKGROUND_COLOR = theme.palette.neutralLight;\r\n    let FOCUS_BACKGROUND_COLOR = theme.palette.neutralTertiaryAlt;\r\n    let IS_CHECKED_BACKGROUND_COLOR = theme.palette.neutralQuaternaryAlt;\r\n    let KEYBOARD_FOCUS_TEXT_COLOR = theme.palette.black;\r\n    let ICON_FILL_COLOR = theme.palette.neutralPrimaryAlt;\r\n\r\n    let FIELD_GROUP_BORDER_WIDTH = '0 0 2px 0';\r\n    let FIELD_GROUP_BORDER_WIDTH_ACTIVE = FIELD_GROUP_BORDER_WIDTH;\r\n    let FIELD_GROUP_BORDER_COLOR = 'transparent';\r\n    let FIELD_GROUP_BORDER_BOTTOM_COLOR_ACTIVE = theme.palette.themePrimary;\r\n    let FIELD_GROUP_BORDER_COLOR_DISABLED = 'transparent';\r\n    let FIELD_COLOR_PLACEHOLDER_DISABLED = theme.palette.neutralDark;\r\n\r\n    let PLACEHOLDER_COLOR = theme.palette.neutralDark;\r\n    let PLACEHOLDER_ACTIVE_COLOR = theme.palette.neutralTertiary;\r\n\r\n    let FOCUS_VISIBLE_BORDER = theme.palette.white;\r\n    let FOCUS_VISIBLE_OUTLINE = `1px solid ${theme.palette.black}`;\r\n    let FOCUS_VISIBLE_BACKGROUND_COLOR = 'transparent';\r\n\r\n    if (isDarkTheme(themeName)) {\r\n        ROOT_BACKGROUND_COLOR = theme.palette.white;\r\n        HOVER_COLOR = theme.palette.black;\r\n        HOVER_BACKGROUND_COLOR = theme.palette.neutralQuaternary;\r\n        FOCUS_BACKGROUND_COLOR = theme.palette.neutralTertiary;\r\n        IS_CHECKED_BACKGROUND_COLOR = theme.palette.neutralTertiaryAlt;\r\n\r\n        PLACEHOLDER_COLOR = theme.palette.neutralDark;\r\n        PLACEHOLDER_ACTIVE_COLOR = theme.palette.neutralSecondary;\r\n\r\n        FIELD_COLOR_PLACEHOLDER_DISABLED = theme.palette.neutralPrimary;\r\n    }\r\n\r\n    if (isContrastTheme(themeName)) {\r\n        ROOT_BACKGROUND_COLOR = theme.palette.white;\r\n\r\n        FOCUS_BACKGROUND_COLOR = theme.palette.themeDark;\r\n        IS_CHECKED_BACKGROUND_COLOR = theme.palette.themePrimary;\r\n        KEYBOARD_FOCUS_TEXT_COLOR = theme.palette.white;\r\n        ICON_FILL_COLOR = theme.palette.neutralSecondary;\r\n\r\n        FIELD_GROUP_OPACITY = 1;\r\n        FIELD_GROUP_BORDER_WIDTH_ACTIVE = '1px 1px 2px 1px';\r\n        FIELD_GROUP_BORDER_WIDTH = '1px 1px 1px 1px';\r\n        FIELD_GROUP_BORDER_COLOR = theme.palette.black;\r\n        FIELD_GROUP_BORDER_BOTTOM_COLOR_ACTIVE = theme.palette.themeDark;\r\n        FIELD_GROUP_BORDER_WIDTH_ACTIVE = '1px 1px 2px 1px';\r\n        FIELD_GROUP_BORDER_COLOR_DISABLED = ContrastColors.appGreenContrast;\r\n        FIELD_COLOR_PLACEHOLDER_DISABLED = ContrastColors.appGreenContrast;\r\n\r\n        PLACEHOLDER_COLOR = theme.palette.black;\r\n        PLACEHOLDER_ACTIVE_COLOR = theme.palette.black;\r\n\r\n        FOCUS_VISIBLE_BORDER = 'transparent';\r\n        FOCUS_VISIBLE_OUTLINE = 'none';\r\n        FOCUS_VISIBLE_BACKGROUND_COLOR = theme.palette.themeDark;\r\n    }\r\n\r\n    const isActive = {\r\n        borderWidth: FIELD_GROUP_BORDER_WIDTH_ACTIVE,\r\n        borderColor: FIELD_GROUP_BORDER_COLOR,\r\n        borderBottomColor: FIELD_GROUP_BORDER_BOTTOM_COLOR_ACTIVE,\r\n        borderBottomRightRadius: teamsBorderRadius,\r\n        borderBottomLeftRadius: teamsBorderRadius,\r\n    };\r\n\r\n    const styles = {\r\n        divider: {\r\n            margin: '4px 0',\r\n            height: '2px',\r\n            backgroundColor: theme.palette.neutralLight,\r\n            border: 'none',\r\n        },\r\n        root: {\r\n            borderRadius: teamsBorderRadius,\r\n            paddingLeft: '12px',\r\n            borderWidth: FIELD_GROUP_BORDER_WIDTH,\r\n            borderStyle: 'solid',\r\n            borderColor: FIELD_GROUP_BORDER_COLOR,\r\n            backgroundColor: ROOT_BACKGROUND_COLOR,\r\n            color: TEXT_COLOR,\r\n            minWidth: 'auto',\r\n            paddingTop: '1px',\r\n            overflow: 'hidden',\r\n            selectors: {\r\n                '::after': {\r\n                    display: 'none',\r\n                },\r\n                '&.is-open': {\r\n                    ...isActive,\r\n                },\r\n                '.ms-Button--icon': {\r\n                    width: '34px',\r\n                    backgroundColor: 'transparent',\r\n                    position: 'absolute',\r\n                    right: '-1px',\r\n                    selectors: {\r\n                        ':hover': {\r\n                            color: 'inherit',\r\n                            backgroundColor: 'transparent',\r\n                        },\r\n                    },\r\n                },\r\n                '.ms-Button-icon': {\r\n                    color: theme.palette.neutralPrimary,\r\n                    fontSize: FontSizes.size12,\r\n                    fontWeight: 'bold',\r\n                    position: 'relative',\r\n                    top: '2px',\r\n                    selectors: {\r\n                        '.icons-default-fill': {\r\n                            fill: ICON_FILL_COLOR,\r\n                        },\r\n                    },\r\n                },\r\n            },\r\n        },\r\n        rootError: {\r\n            borderBottomRightRadius: teamsBorderRadius,\r\n            borderBottomLeftRadius: teamsBorderRadius,\r\n            borderWidth: FIELD_GROUP_BORDER_WIDTH_ACTIVE,\r\n        },\r\n        input: {\r\n            backgroundColor: 'transparent',\r\n            height: '30px',\r\n            lineHeight: '30px',\r\n            color: TEXT_COLOR,\r\n            selectors: {\r\n                '::placeholder': { color: PLACEHOLDER_COLOR },\r\n                ':-ms-input-placeholder': { color: PLACEHOLDER_COLOR },\r\n            },\r\n        },\r\n        inputDisabled: {\r\n            color: TEXT_COLOR,\r\n        },\r\n        rootPressed: {\r\n            ...isActive,\r\n        },\r\n        rootFocused: {\r\n            ...isActive,\r\n            selectors: {\r\n                input: {\r\n                    selectors: {\r\n                        '::placeholder': { color: PLACEHOLDER_ACTIVE_COLOR },\r\n                        ':-ms-input-placeholder': { color: PLACEHOLDER_ACTIVE_COLOR },\r\n                    },\r\n                },\r\n            },\r\n        },\r\n        rootHovered: {\r\n            borderColor: FIELD_GROUP_BORDER_COLOR,\r\n\r\n            selectors: {\r\n                '.ms-Button': {\r\n                    backgroundColor: 'transparent',\r\n                },\r\n                '.ms-ComboBox-Input': {\r\n                    color: 'inherit',\r\n                },\r\n            },\r\n        },\r\n        rootDisabled: {\r\n            opacity: FIELD_GROUP_OPACITY,\r\n            borderColor: FIELD_GROUP_BORDER_COLOR_DISABLED,\r\n            selectors: {\r\n                input: {\r\n                    color: FIELD_COLOR_PLACEHOLDER_DISABLED,\r\n                },\r\n                '.ms-Button-icon': {\r\n                    color: FIELD_COLOR_PLACEHOLDER_DISABLED,\r\n                },\r\n            },\r\n        },\r\n        callout: {\r\n            selectors: {\r\n                '.ms-Callout-main': {\r\n                    paddingTop: '8px',\r\n                    paddingBottom: '8px',\r\n                },\r\n                '.is-checked': {\r\n                    backgroundColor: IS_CHECKED_BACKGROUND_COLOR,\r\n                    color: KEYBOARD_FOCUS_TEXT_COLOR,\r\n                },\r\n                '.ms-Fabric--isFocusVisible &': {\r\n                    selectors: {\r\n                        '.is-checked': {\r\n                            backgroundColor: FOCUS_VISIBLE_BACKGROUND_COLOR,\r\n                            selectors: {\r\n                                ':after': {\r\n                                    borderColor: FOCUS_VISIBLE_BORDER,\r\n                                    outline: FOCUS_VISIBLE_OUTLINE,\r\n                                },\r\n                            },\r\n                        },\r\n                    },\r\n                },\r\n            },\r\n        },\r\n        header: {\r\n            padding: '0 8px',\r\n            color: theme.palette.neutralDark,\r\n        },\r\n        optionsContainer: {\r\n            selectors: {\r\n                '.ms-Button': {\r\n                    padding: '4px 16px',\r\n                    minHeight: '32px',\r\n                    height: '32px',\r\n                    whiteSpace: 'noWrap',\r\n                    backgroundColor: 'transparent',\r\n                    color: OPTIONS_TEXT_COLOR,\r\n                    selectors: {\r\n                        ':hover': {\r\n                            backgroundColor: HOVER_BACKGROUND_COLOR,\r\n                            color: HOVER_COLOR,\r\n                        },\r\n                        ':focus': {\r\n                            backgroundColor: FOCUS_BACKGROUND_COLOR,\r\n                            color: HOVER_COLOR,\r\n                        },\r\n                        ':active': {\r\n                            backgroundColor: FOCUS_BACKGROUND_COLOR,\r\n                            color: HOVER_COLOR,\r\n                        },\r\n                        ':hover:active': {\r\n                            backgroundColor: `${FOCUS_BACKGROUND_COLOR} !important`,\r\n                        },\r\n                    },\r\n                },\r\n                '.ms-ComboBox-optionText': {\r\n                    overflow: 'visible',\r\n                },\r\n                '.ms-Checkbox-text': {\r\n                    color: 'inherit',\r\n                },\r\n                '.ms-Checkbox:hover': {\r\n                    selectors: {\r\n                        '.ms-Checkbox-text': {\r\n                            color: 'inherit',\r\n                            selectors: {\r\n                                ':hover': {\r\n                                    color: 'inherit',\r\n                                },\r\n                            },\r\n                        },\r\n                    },\r\n                },\r\n                '.is-disabled': {\r\n                    color: theme.palette.neutralTertiary,\r\n                },\r\n            },\r\n        },\r\n    } as Partial<IComboBoxStyles>;\r\n\r\n    // Dark theme overrides\r\n    if (isDarkTheme(themeName)) {\r\n        (styles.divider as IRawStyle).backgroundColor = theme.palette.white;\r\n\r\n        ((styles.root as Required<IRawStyle>).selectors['.ms-Button-icon'] as IRawStyle).color = theme.palette.black;\r\n\r\n        ((styles.optionsContainer as Required<IRawStyle>).selectors['.ms-Checkbox-text'] as IRawStyle).color =\r\n            theme.palette.neutralDark;\r\n        (\r\n            ((styles.optionsContainer as Required<IRawStyle>).selectors['.ms-Checkbox:hover'] as Required<IRawStyle>)\r\n                .selectors['.ms-Checkbox-text'] as IRawStyle\r\n        ).color = theme.palette.neutralDark;\r\n        (\r\n            (\r\n                (\r\n                    (styles.optionsContainer as Required<IRawStyle>).selectors[\r\n                        '.ms-Checkbox:hover'\r\n                    ] as Required<IRawStyle>\r\n                ).selectors['.ms-Checkbox-text'] as Required<IRawStyle>\r\n            ).selectors[':hover'] as IRawStyle\r\n        ).color = theme.palette.neutralDark;\r\n    }\r\n\r\n    // Contrast theme overrides\r\n    if (isContrastTheme(themeName)) {\r\n        (styles.divider as IRawStyle).backgroundColor = theme.palette.black;\r\n\r\n        ((styles.root as Required<IRawStyle>).selectors['.ms-Button-icon'] as IRawStyle).color = theme.palette.black;\r\n\r\n        ((styles.optionsContainer as Required<IRawStyle>).selectors['.ms-Checkbox-text'] as IRawStyle).color =\r\n            theme.palette.black;\r\n\r\n        (\r\n            ((styles.optionsContainer as Required<IRawStyle>).selectors['.ms-Checkbox:hover'] as Required<IRawStyle>)\r\n                .selectors['.ms-Checkbox-text'] as IRawStyle\r\n        ).color = theme.palette.black;\r\n        (\r\n            (\r\n                (\r\n                    (styles.optionsContainer as Required<IRawStyle>).selectors[\r\n                        '.ms-Checkbox:hover'\r\n                    ] as Required<IRawStyle>\r\n                ).selectors['.ms-Checkbox-text'] as Required<IRawStyle>\r\n            ).selectors[':hover'] as IRawStyle\r\n        ).color = theme.palette.black;\r\n\r\n        (\r\n            ((styles.optionsContainer as Required<IRawStyle>).selectors['.ms-Button'] as Required<IRawStyle>).selectors[\r\n                ':hover'\r\n            ] as IRawStyle\r\n        ).color = theme.palette.white;\r\n        (\r\n            ((styles.optionsContainer as Required<IRawStyle>).selectors['.ms-Button'] as Required<IRawStyle>).selectors[\r\n                ':focus'\r\n            ] as IRawStyle\r\n        ).color = theme.palette.white;\r\n        (\r\n            ((styles.optionsContainer as Required<IRawStyle>).selectors['.ms-Button'] as Required<IRawStyle>).selectors[\r\n                ':active'\r\n            ] as IRawStyle\r\n        ).color = theme.palette.white;\r\n\r\n        (\r\n            ((styles.optionsContainer as Required<IRawStyle>).selectors['.ms-Button'] as Required<IRawStyle>).selectors[\r\n                ':hover'\r\n            ] as IRawStyle\r\n        ).backgroundColor = theme.palette.themeDark;\r\n        (\r\n            ((styles.optionsContainer as Required<IRawStyle>).selectors['.ms-Button'] as Required<IRawStyle>).selectors[\r\n                ':focus'\r\n            ] as IRawStyle\r\n        ).backgroundColor = theme.palette.themeDark;\r\n        (\r\n            ((styles.optionsContainer as Required<IRawStyle>).selectors['.ms-Button'] as Required<IRawStyle>).selectors[\r\n                ':active'\r\n            ] as IRawStyle\r\n        ).backgroundColor = theme.palette.themeDark;\r\n        (\r\n            ((styles.optionsContainer as Required<IRawStyle>).selectors['.ms-Button'] as Required<IRawStyle>).selectors[\r\n                ':hover:active'\r\n            ] as IRawStyle\r\n        ).backgroundColor = `${theme.palette.themeDark} !important`;\r\n\r\n        ((styles.optionsContainer as Required<IRawStyle>).selectors['.is-disabled'] as IRawStyle).color =\r\n            ContrastColors.appGreenContrast;\r\n    }\r\n\r\n    return styles;\r\n}\r\n","import { mergeStyles } from '@fluentui/react';\r\nimport React from 'react';\r\nimport { Form } from '../abstractions';\r\nimport { defaultFormFeature, FormContext, FormEntry, FormFeature, validateEntries } from '../implementations';\r\nimport { useFormFacadeStyles } from './FormFacade.styles';\r\n\r\n/**\r\n * The ref for the form facade, providing access to the form functionalities.\r\n */\r\nexport interface FormFacadeRef {\r\n    /**\r\n     * Validate the form.\r\n     *\r\n     * @param quietly Whether to suppress the error messages.\r\n     */\r\n    validate: (quietly?: boolean) => void;\r\n}\r\n\r\n/**\r\n * The props for the form facade.\r\n */\r\nexport interface FormFacadeProps extends React.HTMLAttributes<HTMLDivElement> {\r\n    /**\r\n     * The context for the form.\r\n     */\r\n    context: FormContext;\r\n\r\n    /**\r\n     * The callback to be invoked when the context changes.\r\n     */\r\n    onContextChange?: (context: FormContext) => void;\r\n\r\n    /**\r\n     * The feature for the form.\r\n     */\r\n    feature?: Partial<FormFeature>;\r\n}\r\n\r\n/**\r\n * The form facade component that renders a form with default feature in a single column layout.\r\n */\r\nexport const FormFacade = React.forwardRef<FormFacadeRef, FormFacadeProps>(\r\n    ({ context, onContextChange, feature, className, ...props }, ref) => {\r\n        const featureInternal = React.useMemo(() => ({ ...defaultFormFeature, ...feature }), [feature]);\r\n\r\n        // Populate the ref.\r\n        React.useImperativeHandle(\r\n            ref,\r\n            () => ({\r\n                validate: quietly => {\r\n                    const newEntries = validateEntries(context.entries, featureInternal.validators, quietly);\r\n                    onContextChange?.({ ...context, entries: newEntries });\r\n                },\r\n            }),\r\n            [context, onContextChange, featureInternal.validators]\r\n        );\r\n\r\n        const styles = useFormFacadeStyles();\r\n\r\n        return (\r\n            <div className={mergeStyles(styles.root, className)} {...props}>\r\n                <Form<FormEntry, FormContext, FormFeature>\r\n                    context={context}\r\n                    onContextChange={onContextChange}\r\n                    feature={featureInternal}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n);\r\n","import { mergeStyles } from '@fluentui/react';\r\nimport React from 'react';\r\nimport { useColorMenuItemStyles } from './ColorMenuItem.styles';\r\n\r\nexport interface ColorMenuItemProps {\r\n    text: string;\r\n    color?: string;\r\n    onClick?: () => void;\r\n}\r\n\r\nexport const ColorMenuItem: React.FC<ColorMenuItemProps> = ({ text, color, onClick }) => {\r\n    const styles = useColorMenuItemStyles();\r\n\r\n    return (\r\n        <button\r\n            className={mergeStyles(styles.root, color ? styles.color : styles.text)}\r\n            style={{ backgroundColor: color }}\r\n            onClick={onClick}\r\n            title={text}>\r\n            {!color && text}\r\n        </button>\r\n    );\r\n};\r\n","export * from './DesigningDecorator';\r\n","export * from './PrimarySettings';\r\n","import { Dialog } from '@fluentui/react';\r\nimport React from 'react';\r\nimport { InsertLink, InsertLinkProps, Link } from './InsertLink';\r\nimport { useInsertLinkDialogStyles } from './InsertLink.styles';\r\n\r\nexport type InsertLinkDialogProps = InsertLinkProps;\r\n\r\nexport const InsertLinkDialog: React.FC<InsertLinkDialogProps> = ({\r\n    initialLink,\r\n    onConfirm,\r\n    onCancel,\r\n    normalizeUrl,\r\n    strings,\r\n}) => {\r\n    const [link, setLink] = React.useState<Link>();\r\n    const [hidden, setHidden] = React.useState(false);\r\n    const dismiss = React.useCallback(() => setHidden(true), []);\r\n\r\n    const confirm = React.useCallback(\r\n        (link: Link) => {\r\n            setLink(link);\r\n            dismiss();\r\n        },\r\n        [dismiss]\r\n    );\r\n\r\n    const cancel = React.useCallback(() => {\r\n        setLink(undefined);\r\n        dismiss();\r\n    }, [dismiss]);\r\n\r\n    const commit = React.useCallback(() => (link ? onConfirm?.(link) : onCancel?.()), [link, onConfirm, onCancel]);\r\n\r\n    const styles = useInsertLinkDialogStyles();\r\n    return (\r\n        <Dialog\r\n            hidden={hidden}\r\n            dialogContentProps={{ title: strings.insertLinkTitle }}\r\n            modalProps={{ className: styles.root, onDismiss: cancel, onDismissed: commit }}>\r\n            <InsertLink\r\n                initialLink={initialLink}\r\n                onConfirm={confirm}\r\n                onCancel={cancel}\r\n                normalizeUrl={normalizeUrl}\r\n                strings={strings}\r\n            />\r\n        </Dialog>\r\n    );\r\n};\r\n","import { isContrastTheme, makeStyles } from '@addressbook/components-fluentui-teams-theme';\r\n\r\nexport const useChoiceSettingsStyles = makeStyles(theme => ({\r\n    root: {\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        gap: '8px',\r\n        paddingInlineStart: '8px',\r\n    },\r\n    choiceRow: {\r\n        display: 'flex',\r\n        flexDirection: 'row',\r\n        alignItems: 'center',\r\n        gap: '4px',\r\n        '> .ms-TextField': {\r\n            flexBasis: '400px',\r\n            marginInline: '8px',\r\n        },\r\n    },\r\n    hidden: {\r\n        visibility: 'hidden',\r\n    },\r\n    actionRow: {\r\n        display: 'flex',\r\n        flexDirection: 'row',\r\n        alignItems: 'center',\r\n        gap: '8px 24px',\r\n        flexWrap: 'wrap',\r\n        '> .ms-Button': {\r\n            height: '28px',\r\n            padding: 0,\r\n        },\r\n    },\r\n    decorator: {\r\n        flexShrink: 0,\r\n        height: '16px',\r\n        width: '16px',\r\n        margin: '4px',\r\n        boxSizing: 'border-box',\r\n        border: `1px solid ${isContrastTheme(theme.name) ? theme.palette.black : theme.palette.neutralTertiary}`,\r\n    },\r\n    checkbox: {\r\n        borderRadius: '2px',\r\n    },\r\n    radio: {\r\n        borderRadius: '50%',\r\n    },\r\n}));\r\n","import { FontSizes, isContrastTheme, isDefaultTheme, makeStyles } from '@addressbook/components-fluentui-teams-theme';\r\n\r\nexport const useFileNodeViewStyles = makeStyles(theme => ({\r\n    root: {\r\n        borderRadius: '4px',\r\n        overflow: 'hidden',\r\n        '&.selected a': {\r\n            textDecorationStyle: 'double',\r\n        },\r\n    },\r\n    error: {\r\n        borderColor: theme.palette.redDark,\r\n        '[data-node-view-content]': {\r\n            color: theme.palette.redDark,\r\n        },\r\n        a: {\r\n            textDecoration: 'line-through',\r\n        },\r\n    },\r\n    image: {\r\n        display: 'inline-flex',\r\n        maxWidth: '100%',\r\n        boxShadow: theme.effects.elevation4,\r\n        margin: '2px',\r\n        borderWidth: '1px',\r\n        borderStyle: 'solid',\r\n        borderColor: isContrastTheme(theme.name) ? theme.palette.black : 'transparent',\r\n        '&.selected': {\r\n            borderColor: isContrastTheme(theme.name) ? theme.palette.accent : theme.palette.black,\r\n        },\r\n    },\r\n}));\r\n\r\nexport const useImageViewStyles = makeStyles({\r\n    root: {\r\n        width: 'fit-content',\r\n        maxWidth: '100%',\r\n        height: '100%',\r\n    },\r\n    embedded: {\r\n        cursor: 'pointer',\r\n    },\r\n    hidden: {\r\n        display: 'none',\r\n    },\r\n});\r\n\r\nexport const useEmbeddedImageContentStyles = makeStyles(theme => ({\r\n    root: {\r\n        position: 'relative',\r\n        maxWidth: '100%',\r\n    },\r\n    image: {\r\n        display: 'block',\r\n        objectFit: 'contain',\r\n        width: '100%',\r\n        height: '100%',\r\n    },\r\n    mask: {\r\n        position: 'absolute',\r\n        inset: 0,\r\n        backgroundColor: isDefaultTheme(theme.name) ? 'rgba(0, 0, 0, 0.4)' : 'rgba(0, 0, 0, 0.5)',\r\n    },\r\n    error: {\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        alignItems: 'center',\r\n        justifyContent: 'center',\r\n        padding: '24px',\r\n        gap: '12px',\r\n    },\r\n    buttons: {\r\n        display: 'flex',\r\n        gap: '12px',\r\n        '.ms-Button': {\r\n            minWidth: '32px',\r\n            padding: 0,\r\n        },\r\n    },\r\n    icon: {\r\n        flex: 1,\r\n        fontSize: '48px',\r\n    },\r\n}));\r\n\r\nexport const useFullscreenImageContentStyles = makeStyles({\r\n    root: {\r\n        height: '100vh',\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        alignItems: 'stretch',\r\n        backgroundColor: 'rgba(0, 0, 0, 0.9)',\r\n    },\r\n    header: {\r\n        display: 'flex',\r\n        flexShrink: 0,\r\n        alignItems: 'center',\r\n        justifyContent: 'space-between',\r\n        padding: '16px 24px',\r\n        gap: '16px',\r\n    },\r\n    name: {\r\n        fontSize: FontSizes.size16,\r\n        color: 'white',\r\n        overflow: 'hidden',\r\n        textOverflow: 'ellipsis',\r\n        whiteSpace: 'nowrap',\r\n    },\r\n    controls: {\r\n        display: 'flex',\r\n        gap: '8px',\r\n    },\r\n    button: {\r\n        color: 'white',\r\n    },\r\n    main: {\r\n        flex: 1,\r\n    },\r\n    wrapper: {\r\n        width: 'unset !important',\r\n        height: 'unset !important',\r\n    },\r\n    image: {\r\n        display: 'block',\r\n    },\r\n    message: {\r\n        fontSize: FontSizes.size16,\r\n        color: 'white',\r\n        textAlign: 'center',\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        alignItems: 'center',\r\n        justifyContent: 'center',\r\n        padding: '24px',\r\n    },\r\n});\r\n\r\nexport const useFallbackViewStyles = makeStyles({\r\n    spinner: {\r\n        display: 'inline-flex',\r\n        margin: '0 4px',\r\n    },\r\n});\r\n","/* istanbul ignore file */\r\n\r\nimport { IStyleFunctionOrObject, IPivotStyleProps, IPivotStyles, FontWeights } from '@fluentui/react';\r\nimport { isContrastTheme } from '../teams-theme';\r\n\r\nexport const PivotStyles: IStyleFunctionOrObject<IPivotStyleProps, IPivotStyles> = ({ theme, linkFormat }) => {\r\n    const rootIsTabs = linkFormat === 'tabs';\r\n\r\n    const LINK_SELECTED_COLOR = theme.palette.black;\r\n    const LINK_COLOR = isContrastTheme(theme.name) ? theme.palette.themeDark : theme.palette.neutralPrimary;\r\n\r\n    const commonStyles = {\r\n        height: 60,\r\n        lineHeight: 60,\r\n        paddingTop: 4,\r\n        marginRight: 0,\r\n        // Work around for fluentui button focus outline not showing in iOS Safari.\r\n        ':focus-visible, .ms-Fabric--isFocusVisible &:focus': {\r\n            outline: `1px auto ${theme.palette.black}`,\r\n        },\r\n        '::after': { display: 'none' },\r\n    };\r\n    const styles = {\r\n        link: [\r\n            commonStyles,\r\n            !rootIsTabs && {\r\n                fontWeight: FontWeights.regular,\r\n                color: LINK_COLOR,\r\n                '-webkit-tap-highlight-color': 'transparent',\r\n                selectors: {\r\n                    ':hover': {\r\n                        color: LINK_COLOR,\r\n                        backgroundColor: 'transparent',\r\n                        selectors: {\r\n                            ':before': {\r\n                                backgroundColor: theme.palette.themeTertiary,\r\n                                height: '3px',\r\n                            },\r\n                        },\r\n                    },\r\n                    ':active': {\r\n                        backgroundColor: 'transparent',\r\n                    },\r\n                },\r\n            },\r\n        ],\r\n        linkIsSelected: [\r\n            commonStyles,\r\n            !rootIsTabs && {\r\n                color: LINK_SELECTED_COLOR,\r\n                fontWeight: FontWeights.semibold,\r\n                selectors: {\r\n                    ':hover': {\r\n                        color: LINK_SELECTED_COLOR,\r\n                        backgroundColor: 'transparent',\r\n                        selectors: {\r\n                            ':before': {\r\n                                left: '8px',\r\n                                right: '8px',\r\n                            },\r\n                        },\r\n                    },\r\n                    ':active': {\r\n                        color: LINK_SELECTED_COLOR,\r\n                        backgroundColor: 'transparent',\r\n                    },\r\n                    ':before': {\r\n                        border: 'none',\r\n                        height: '3px',\r\n                        backgroundColor: theme.palette.themePrimary,\r\n                        transition: 'none',\r\n                    },\r\n                },\r\n            },\r\n        ],\r\n    };\r\n\r\n    return styles;\r\n};\r\n","import { CommandBar, ICommandBarItemProps } from '@fluentui/react';\r\nimport { isDefined } from '@addressbook/utilities-core';\r\nimport { useRenderings } from '@addressbook/utilities-hooks';\r\nimport React from 'react';\r\nimport { compactRibbonItemGroups, defaultRibbonItemGroups, getItemProps } from './RichTextRibbon.items';\r\nimport { useRibbonCommandBarStyles, useRibbonStyles } from './RichTextRibbon.styles';\r\nimport { RichTextRibbonProps } from './RichTextRibbon.types';\r\n\r\n/**\r\n * The ribbon component for the rich text editor.\r\n */\r\nexport const RichTextRibbon: React.FC<RichTextRibbonProps> = ({ editor, compact, callbacks = {}, strings }) => {\r\n    const styles = useRibbonStyles();\r\n    const commandBarStyles = useRibbonCommandBarStyles();\r\n    const { renderings, render, unrender } = useRenderings();\r\n\r\n    if (!editor) return null;\r\n\r\n    const ribbonItemGroups = compact ? compactRibbonItemGroups : defaultRibbonItemGroups;\r\n    const ribbonItemParams = { editor, compact, callbacks, strings, render, unrender };\r\n    const items: ICommandBarItemProps[] = ribbonItemGroups.flatMap(ribbonItemGroup => {\r\n        const group = ribbonItemGroup.map(ribbonItem => getItemProps(ribbonItem, ribbonItemParams)).filter(isDefined);\r\n        if (group.length) group[0].className = styles.leadingButton;\r\n        return group;\r\n    });\r\n\r\n    return (\r\n        <div>\r\n            <CommandBar styles={commandBarStyles} items={items} />\r\n            {renderings}\r\n        </div>\r\n    );\r\n};\r\n","/* istanbul ignore file */\r\n\r\nimport { IShimmerStyles, IShimmerStyleProps, ITheme } from '@fluentui/react';\r\nimport { isContrastTheme, isDefaultTheme } from '../teams-theme';\r\n\r\nexport function getShimmerStyles(themeName: string, _theme: ITheme) {\r\n    return (props: IShimmerStyleProps): Partial<IShimmerStyles> => {\r\n        const { theme } = props;\r\n        const { palette } = theme;\r\n\r\n        let SHIMMER_WRAPPER_PRIMARY_BACKGROUND = palette.neutralTertiaryAlt;\r\n        let SHIMMER_WRAPPER_SECONDARY_BACKGROUND = palette.neutralTertiary;\r\n        let SHIMMER_ROOT_BACKGROUND = palette.neutralLight;\r\n\r\n        if (isDefaultTheme(themeName)) {\r\n            SHIMMER_ROOT_BACKGROUND = palette.white;\r\n        }\r\n\r\n        if (isContrastTheme(themeName)) {\r\n            SHIMMER_WRAPPER_PRIMARY_BACKGROUND = palette.black;\r\n            SHIMMER_WRAPPER_SECONDARY_BACKGROUND = palette.white;\r\n        }\r\n\r\n        const styles = {\r\n            root: {\r\n                selectors: {\r\n                    '.ms-ShimmerGap-root': {\r\n                        borderColor: SHIMMER_ROOT_BACKGROUND,\r\n                        background: SHIMMER_ROOT_BACKGROUND,\r\n                    },\r\n                    '.ms-ShimmerLine-root': {\r\n                        borderColor: SHIMMER_ROOT_BACKGROUND,\r\n                        selectors: {\r\n                            svg: {\r\n                                fill: SHIMMER_ROOT_BACKGROUND,\r\n                            },\r\n                        },\r\n                    },\r\n                    '.ms-ShimmerCircle-root': {\r\n                        borderColor: SHIMMER_ROOT_BACKGROUND,\r\n                        selectors: {\r\n                            svg: {\r\n                                fill: SHIMMER_ROOT_BACKGROUND,\r\n                            },\r\n                        },\r\n                    },\r\n                },\r\n            },\r\n            shimmerGradient: {\r\n                background: `linear-gradient(to right, ${SHIMMER_WRAPPER_PRIMARY_BACKGROUND} 0%, ${SHIMMER_WRAPPER_SECONDARY_BACKGROUND} 50%, ${SHIMMER_WRAPPER_PRIMARY_BACKGROUND} 100%) 0px 0px / 90% 100% no-repeat ${SHIMMER_WRAPPER_PRIMARY_BACKGROUND}`,\r\n            },\r\n            shimmerWrapper: {\r\n                background: SHIMMER_WRAPPER_PRIMARY_BACKGROUND,\r\n            },\r\n        } as Partial<IShimmerStyles>;\r\n\r\n        return styles;\r\n    };\r\n}\r\n","import { MotionAnimations } from '@fluentui/react';\r\nimport { FontSizes, makeStyles } from '@addressbook/components-fluentui-teams-theme';\r\n\r\nexport const useRenderingFieldStyles = makeStyles(theme => ({\r\n    headerContainer: {\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        gap: '4px',\r\n        marginBottom: '8px',\r\n    },\r\n    labelContainer: {\r\n        display: 'flex',\r\n        flexDirection: 'row',\r\n        alignItems: 'center',\r\n    },\r\n    label: {\r\n        fontSize: FontSizes.size14,\r\n        color: theme.palette.neutralDark,\r\n        fontWeight: 600,\r\n        wordBreak: 'break-word',\r\n    },\r\n    requiredLabel: {\r\n        '::after': {\r\n            content: '\"*\"',\r\n            color: theme.palette.redDark,\r\n            marginInline: '4px',\r\n        },\r\n    },\r\n    description: {\r\n        fontSize: FontSizes.size12,\r\n        color: theme.palette.neutralSecondary,\r\n        wordBreak: 'break-word',\r\n    },\r\n    errorMessage: {\r\n        fontSize: FontSizes.size12,\r\n        color: theme.palette.redDark,\r\n        paddingInline: '12px',\r\n        marginTop: '4px',\r\n        wordBreak: 'break-word',\r\n        animation: `${MotionAnimations.fadeIn}, ${MotionAnimations.slideDownIn}`,\r\n    },\r\n}));\r\n","import { Extension } from '@tiptap/core';\r\n\r\ndeclare module '@tiptap/core' {\r\n    interface Commands<ReturnType> {\r\n        misc: {\r\n            /**\r\n             * Focus the editor after a number of frames to avoid focus being stolen by other elements, for example the\r\n             * ribbon.\r\n             *\r\n             * @param frames Number of frames to wait before focusing the editor, defaults to 0.\r\n             * @param args Arguments to pass to the `focus` command.\r\n             */\r\n            focusLater: (frames?: number, ...args: Parameters<Commands['focus']['focus']>) => ReturnType;\r\n        };\r\n    }\r\n}\r\n\r\nexport const Misc = Extension.create({\r\n    name: 'misc',\r\n\r\n    addCommands() {\r\n        return {\r\n            focusLater:\r\n                (frames = 0, ...args) =>\r\n                ({ commands }) => {\r\n                    schedule(frames, () => commands.focus(...args));\r\n                    return true;\r\n                },\r\n        };\r\n    },\r\n});\r\n\r\nfunction schedule(frames: number, callback: () => void): void {\r\n    if (frames <= 0) {\r\n        callback();\r\n        return;\r\n    }\r\n\r\n    requestAnimationFrame(() => schedule(frames - 1, callback));\r\n}\r\n","/* istanbul ignore file */\r\n\r\nexport const teamsBorderRadius = '4px';\r\n","export * from './ChoiceSettings';\r\n","import React from 'react';\r\nimport { Descriptor, FieldProps } from '../../../abstractions';\r\nimport { FieldComponentType, RenderingField } from '../../components';\r\nimport { FormContext, FormEntry, FormFeature } from '../../types';\r\n\r\n/**\r\n * The base descriptor that provides the common logic for all descriptors, such as validation.\r\n * Any inherited descriptor must implement the `test` method and `FieldComponent` property.\r\n */\r\nexport abstract class BaseDescriptor<CoercedEntry extends FormEntry>\r\n    implements Descriptor<FormEntry, FormContext, FormFeature, CoercedEntry>\r\n{\r\n    /**\r\n     * The component that renders the field, which can be either a class component or a function component.\r\n     * No entry validation is needed in this component, as it is handled by the base descriptor.\r\n     */\r\n    protected abstract readonly FieldComponent: FieldComponentType<CoercedEntry>;\r\n\r\n    /**\r\n     * Tests whether the entry is the type that the descriptor can handle.\r\n     *\r\n     * @param entry The entry to test.\r\n     * @param context The form context.\r\n     * @returns Passes the test or not.\r\n     */\r\n    abstract test(entry: FormEntry, context: FormContext): entry is CoercedEntry;\r\n\r\n    /**\r\n     * Renders the field with some common logic, such as validation and designing tools.\r\n     *\r\n     * @param props The props to render the field.\r\n     * @returns The rendered field.\r\n     */\r\n    render(props: FieldProps<FormEntry, FormContext, FormFeature, CoercedEntry>): JSX.Element {\r\n        return <RenderingField {...props} Component={this.FieldComponent} />;\r\n    }\r\n}\r\n\r\nexport type FieldComponentTypeFactory<Options, CoercedEntry extends FormEntry> = (\r\n    options: Options\r\n) => FieldComponentType<CoercedEntry>;\r\n","import { FormEntry, FormQuestionType, Validation, ValidationFailure, Validator } from '../../types';\r\nimport { createValidationSuccess } from '../../utilities';\r\n\r\n/**\r\n * A function that returns the max length of the answer content.\r\n *\r\n * @param type The type of the question.\r\n * @returns The max length of the answer content.\r\n */\r\nexport type MaxLength = (type: FormQuestionType) => number;\r\n\r\n/**\r\n * A function that returns the error message the given max length.\r\n *\r\n * @param maxLength The max length of the answer content.\r\n * @param type The type of the question.\r\n * @returns The error message.\r\n */\r\nexport type ErrorMessageByMaxLength = (maxLength: number, type: FormQuestionType) => string;\r\n\r\nexport interface LengthValidatorOptions {\r\n    maxLength?: MaxLength;\r\n    errorMessageByMaxLength?: ErrorMessageByMaxLength;\r\n}\r\n\r\nconst defaultMaxLength: MaxLength = () => 10000;\r\nconst defaultErrorMessageByMaxLength: ErrorMessageByMaxLength = maxLength =>\r\n    `Please enter less than ${maxLength} characters`;\r\n\r\n/**\r\n * A validator that checks if the answer not exceeds the max length.\r\n * If the answer content is not a string, this validator will always pass.\r\n * Otherwise, this validator will fail if the answer content exceeds the max length, and prevent the change.\r\n */\r\nexport class LengthValidator implements Validator<FormEntry> {\r\n    private maxLength: MaxLength;\r\n    private errorMessageByMaxLength: ErrorMessageByMaxLength;\r\n\r\n    /**\r\n     * Creates a length validator.\r\n     *\r\n     * @param options.maxLength The max length of the answer content.\r\n     * @param options.errorMessageByMaxLength The error message if the answer content exceeds the max length.\r\n     * @returns A length validator.\r\n     */\r\n    constructor({\r\n        maxLength = defaultMaxLength,\r\n        errorMessageByMaxLength = defaultErrorMessageByMaxLength,\r\n    }: LengthValidatorOptions = {}) {\r\n        this.maxLength = maxLength;\r\n        this.errorMessageByMaxLength = errorMessageByMaxLength;\r\n    }\r\n\r\n    validate({ question, answer }: FormEntry): Validation {\r\n        const content = answer.content;\r\n\r\n        // Check for undefined.\r\n        if (content === undefined) {\r\n            return createValidationSuccess();\r\n        }\r\n\r\n        const type = question.type;\r\n        const maxLength = this.maxLength(type);\r\n\r\n        // Check for string.\r\n        if (typeof content === 'string') {\r\n            const length = content.length;\r\n            return length <= maxLength ? createValidationSuccess() : this.createValidationFailure(maxLength, type);\r\n        }\r\n\r\n        // Check for choice answer.\r\n        if (typeof content === 'object' && 'chosen' in content) {\r\n            const length = content.chosen.reduce((l, c) => l + c.length, 0) + (content.other?.length ?? 0);\r\n            return length <= maxLength ? createValidationSuccess() : this.createValidationFailure(maxLength, type);\r\n        }\r\n\r\n        return createValidationSuccess();\r\n    }\r\n\r\n    private createValidationFailure(maxLength: number, type: FormQuestionType): ValidationFailure {\r\n        const errorMessage = this.errorMessageByMaxLength(maxLength, type);\r\n        return { valid: false, errorMessage, preventChange: true };\r\n    }\r\n}\r\n","export * from './InsertTable';\r\n","export * from './DesigningDecorator';\r\nexport * from './DesigningTrailingActions';\r\nexport * from './RenderingField';\r\n","import { FontSizes, isContrastTheme, makeStyles } from '@addressbook/components-fluentui-teams-theme';\r\nimport React from 'react';\r\nimport { FormContext, FormEntry, FormMode } from '../../types';\r\nimport { BaseDescriptor, FieldComponentTypeFactory } from './BaseDescriptor';\r\n\r\nconst defaultOptions = {\r\n    formatList: (value: string[]): string => value.join('\\n'),\r\n    formatDate: (value: Date): string => value.toDateString(),\r\n};\r\n\r\nconst useFallbackViewingStyles = makeStyles(theme => ({\r\n    root: {\r\n        cursor: 'text',\r\n        whiteSpace: 'pre-wrap',\r\n        overflowWrap: 'break-word',\r\n        fontSize: FontSizes.size14,\r\n        color: theme.palette.black,\r\n        backgroundColor: isContrastTheme(theme.name) ? theme.palette.white : theme.palette.neutralLighter,\r\n        padding: '6px 12px',\r\n        borderRadius: '4px',\r\n        borderWidth: '1px',\r\n        borderStyle: 'solid',\r\n        borderColor: isContrastTheme(theme.name) ? theme.palette.black : 'transparent',\r\n        lineHeight: FontSizes.size18,\r\n        minHeight: FontSizes.size18,\r\n    },\r\n}));\r\n\r\n/**\r\n * The options for the fallback viewing descriptor.\r\n */\r\nexport type FallbackViewingDescriptorOptions = Partial<typeof defaultOptions>;\r\n\r\nconst makeFieldComponent: FieldComponentTypeFactory<\r\n    FallbackViewingDescriptorOptions & typeof defaultOptions,\r\n    FormEntry\r\n> =\r\n    ({ formatList, formatDate }) =>\r\n    ({ entry, delegatedProps }) => {\r\n        const { answer } = entry;\r\n\r\n        const viewingContent = React.useMemo<string>(() => {\r\n            const content = answer.content;\r\n            if (content === undefined) {\r\n                return '';\r\n            }\r\n\r\n            if (typeof content === 'string') {\r\n                return content;\r\n            }\r\n\r\n            if ('chosen' in content) {\r\n                const list = content.other ? [...content.chosen, content.other] : content.chosen;\r\n                return formatList(list);\r\n            }\r\n\r\n            if (content instanceof Date) {\r\n                return formatDate(content);\r\n            }\r\n\r\n            const exhaustiveCheck: never = content;\r\n            throw new Error(`Unhandled content type: ${exhaustiveCheck}`);\r\n        }, [answer]);\r\n\r\n        const styles = useFallbackViewingStyles();\r\n        return (\r\n            <div {...delegatedProps} className={styles.root} role='textbox' tabIndex={-1}>\r\n                {viewingContent}\r\n            </div>\r\n        );\r\n    };\r\n\r\n/**\r\n * The fallback descriptor that renders a text field in viewing mode, for all entries.\r\n */\r\nexport class FallbackViewingDescriptor extends BaseDescriptor<FormEntry> {\r\n    protected readonly FieldComponent;\r\n\r\n    constructor(options: FallbackViewingDescriptorOptions = {}) {\r\n        super();\r\n        this.FieldComponent = makeFieldComponent({ ...defaultOptions, ...options });\r\n    }\r\n\r\n    /**\r\n     * Tests whether the form is in viewing mode.\r\n     *\r\n     * @param _ Unused.\r\n     * @param context The context.\r\n     * @returns Passes the test or not.\r\n     */\r\n    test(_: FormEntry, context: FormContext): _ is FormEntry {\r\n        return context.mode === FormMode.Viewing;\r\n    }\r\n}\r\n","import { ContrastColors, FontSizes, isContrastTheme, makeStyles } from '@addressbook/components-fluentui-teams-theme';\r\n\r\nexport const useMockedFieldStyles = makeStyles(theme => ({\r\n    root: {\r\n        color: isContrastTheme(theme.name) ? theme.palette.black : theme.palette.neutralTertiary,\r\n        boxSizing: 'border-box',\r\n        borderWidth: '1px',\r\n        borderStyle: 'solid',\r\n        borderColor: isContrastTheme(theme.name) ? ContrastColors.appGreenContrast : theme.palette.neutralTertiaryAlt,\r\n        borderRadius: '4px',\r\n\r\n        pointerEvents: 'none',\r\n        userSelect: 'none',\r\n    },\r\n    ribbon: {\r\n        display: 'flex',\r\n        flexDirection: 'row',\r\n        alignItems: 'center',\r\n        height: FontSizes.size32,\r\n        gap: '8px',\r\n        padding: '7px 11px 1px',\r\n        '> *': {\r\n            padding: '0 8px',\r\n        },\r\n    },\r\n    input: {\r\n        display: 'flex',\r\n        flexDirection: 'row',\r\n        alignItems: 'center',\r\n        justifyContent: 'space-between',\r\n        padding: '5px 12px',\r\n        fontSize: FontSizes.size14,\r\n        fontWeight: '400',\r\n        lineHeight: FontSizes.size20,\r\n    },\r\n    multiline: {\r\n        height: '96px',\r\n    },\r\n    icon: {\r\n        fontSize: FontSizes.size16,\r\n    },\r\n}));\r\n","export enum FormQuestionType {\r\n    Text,\r\n    RichText,\r\n    Choice,\r\n    DateTime,\r\n}\r\n\r\nexport interface BaseFormQuestion<Type extends FormQuestionType> {\r\n    type: Type;\r\n    id: string;\r\n    familyId?: string;\r\n    eTag?: string;\r\n    order: number;\r\n    title?: string;\r\n    rtTitle?: string;\r\n    subtitle?: string;\r\n    rtSubtitle?: string;\r\n    required?: boolean;\r\n    tooltip?: string;\r\n    placeholder?: string;\r\n}\r\n\r\nexport interface BaseFormAnswer<Content> {\r\n    eTag?: string;\r\n    content?: Content;\r\n}\r\n\r\nexport interface BaseFormEntry<Question, Answer> {\r\n    question: Question;\r\n    answer: Answer;\r\n    active?: boolean;\r\n    invalid?: boolean;\r\n    errorMessage?: string;\r\n}\r\n","/* istanbul ignore file */\r\n\r\nimport {\r\n    IContextualMenuItemStyleProps,\r\n    IContextualMenuItemStyles,\r\n    IContextualMenuStyleProps,\r\n    IContextualMenuStyles,\r\n    IStyleFunctionOrObject,\r\n    ITheme,\r\n} from '@fluentui/react';\r\nimport { ContrastColors } from '../teams-colors';\r\nimport { ShadowLevels } from '../teams-shadow-levels';\r\nimport { FontSizes } from '../teams-sizes';\r\nimport { isContrastTheme, isDarkTheme } from '../teams-theme';\r\n\r\nexport function getContextualMenuStyles(\r\n    themeName: string,\r\n    _theme: ITheme\r\n): IStyleFunctionOrObject<IContextualMenuStyleProps, IContextualMenuStyles> {\r\n    return (props: IContextualMenuStyleProps): Partial<IContextualMenuStyles> => {\r\n        const { theme } = props;\r\n        const { palette } = theme;\r\n        const CONTEXTUAL_MENU_ITEM_HEIGHT = 32;\r\n\r\n        const iconStyles = {\r\n            maxHeight: CONTEXTUAL_MENU_ITEM_HEIGHT,\r\n            fontSize: FontSizes.size20,\r\n            width: FontSizes.size20,\r\n            margin: '0 8px 0 0',\r\n            color: palette.neutralDark,\r\n        };\r\n\r\n        const TEXT_COLOR = palette.neutralDark;\r\n        let TEXT_COLOR_HOVER_ACTIVE = palette.black;\r\n        let BACKGROUND_COLOR_HOVER = palette.neutralLight;\r\n        let BACKGROUND_COLOR_ACTIVE = palette.neutralTertiaryAlt;\r\n        let BACKGROUND_FOCUS_COLOR = 'transparent';\r\n        let FOCUS_AFTER = {};\r\n        let CONTRAST_FOCUS_HOVER = {};\r\n\r\n        const hoverActiveStyles = (textColor: string, background_color: string) =>\r\n            ({\r\n                color: textColor,\r\n                backgroundColor: background_color,\r\n            } as const);\r\n\r\n        if (isDarkTheme(themeName)) {\r\n            BACKGROUND_COLOR_HOVER = palette.neutralQuaternary;\r\n            BACKGROUND_COLOR_ACTIVE = palette.neutralTertiary;\r\n        }\r\n        if (isContrastTheme(themeName)) {\r\n            TEXT_COLOR_HOVER_ACTIVE = palette.themeDarker;\r\n            BACKGROUND_COLOR_HOVER = palette.themeDark;\r\n            BACKGROUND_COLOR_ACTIVE = palette.themeDark;\r\n            BACKGROUND_FOCUS_COLOR = palette.themeDark;\r\n            FOCUS_AFTER = {\r\n                ':after': {\r\n                    display: 'none',\r\n                },\r\n            };\r\n            CONTRAST_FOCUS_HOVER = {\r\n                '&:focus': {\r\n                    ...hoverActiveStyles(TEXT_COLOR_HOVER_ACTIVE, BACKGROUND_COLOR_HOVER),\r\n                },\r\n                '&:focus:hover': {\r\n                    ...hoverActiveStyles(TEXT_COLOR_HOVER_ACTIVE, BACKGROUND_COLOR_HOVER),\r\n                },\r\n            };\r\n        }\r\n\r\n        const isFocusVisible = {\r\n            '.ms-Fabric--isFocusVisible &': {\r\n                selectors: {\r\n                    ':hover': {\r\n                        backgroundColor: BACKGROUND_FOCUS_COLOR,\r\n                    },\r\n                    ':focus': {\r\n                        backgroundColor: BACKGROUND_FOCUS_COLOR,\r\n                        selectors: {\r\n                            ':after': {\r\n                                borderColor: palette.white,\r\n                                outline: `1px solid ${palette.black}`,\r\n                            },\r\n                        },\r\n                    },\r\n                    ':focus:hover': {\r\n                        backgroundColor: BACKGROUND_FOCUS_COLOR,\r\n                    },\r\n                    ...FOCUS_AFTER,\r\n                },\r\n            },\r\n        };\r\n\r\n        const commonStyles = {\r\n            color: TEXT_COLOR,\r\n            backgroundColor: 'transparent',\r\n            selectors: {\r\n                '.ms-ContextualMenu-icon, .ms-ContextualMenu-submenuIcon, .ms-ContextualMenu-secondaryText, .ms-ContextualMenu-checkmarkIcon, .ms-ContextualMenu-checkmarkIcon':\r\n                    {\r\n                        color: 'inherit',\r\n                        backgroundColor: 'transparent',\r\n                    },\r\n                svg: {\r\n                    fill: 'currentColor',\r\n                },\r\n                '.icons-default-fill': {\r\n                    fill: 'currentColor',\r\n                },\r\n                '.ms-ContextualMenu-link': {\r\n                    selectors: {\r\n                        '&:hover': {\r\n                            ...hoverActiveStyles(TEXT_COLOR_HOVER_ACTIVE, BACKGROUND_COLOR_HOVER),\r\n                        },\r\n                        '&:active': {\r\n                            ...hoverActiveStyles(TEXT_COLOR_HOVER_ACTIVE, BACKGROUND_COLOR_ACTIVE),\r\n                        },\r\n                        ...isFocusVisible,\r\n                        ...CONTRAST_FOCUS_HOVER,\r\n                    },\r\n                },\r\n            },\r\n            ':hover .ms-ContextualMenu-icon': {\r\n                color: 'inherit',\r\n            },\r\n        };\r\n\r\n        const styles = {\r\n            subComponentStyles: {\r\n                callout: {\r\n                    root: {\r\n                        boxShadow: ShadowLevels.shadowLevel3,\r\n                        zIndex: 999,\r\n                        selectors: {\r\n                            '.ms-ContextualMenu': {\r\n                                backgroundColor: 'transparent',\r\n                            },\r\n                            '.ms-ContextualMenu-link, .ms-ContextualMenu-header': {\r\n                                padding: '0 16px',\r\n                            },\r\n                            '.ms-ContextualMenu-itemText': {\r\n                                margin: '0 16px 0 0',\r\n                            },\r\n                            '.ms-ContextualMenu-checkmarkIcon': {\r\n                                width: '14px',\r\n                            },\r\n                            '.ms-ContextualMenu-submenuIcon': {\r\n                                width: '14px',\r\n                            },\r\n                            '.ms-ContextualMenu-header': {\r\n                                fontSize: FontSizes.size14,\r\n                            },\r\n                        },\r\n                    },\r\n                    calloutMain: {\r\n                        paddingTop: '8px',\r\n                        paddingBottom: '8px',\r\n                    },\r\n                },\r\n\r\n                menuItem: (itemStyleProps: IContextualMenuItemStyleProps): Partial<IContextualMenuItemStyles> => {\r\n                    const { disabled, expanded, primaryDisabled, checked } = itemStyleProps;\r\n                    let THEME_LIGHT = palette.neutralQuaternary;\r\n                    let NEUTRAL_TERTIARY = palette.neutralTertiary;\r\n                    let NEUTRAL_PRIMARY = palette.neutralPrimary;\r\n                    let NEUTRAL_DARK = palette.neutralDark;\r\n                    let NEUTRAL_DARK_WHITE = palette.neutralDark;\r\n                    let NEUTRAL_QUATERNARY_ALT = palette.neutralTertiaryAlt;\r\n\r\n                    // Dark theme overrides\r\n                    if (isDarkTheme(themeName)) {\r\n                        NEUTRAL_QUATERNARY_ALT = palette.white;\r\n                        THEME_LIGHT = palette.neutralTertiaryAlt;\r\n                    }\r\n\r\n                    // Contrast theme overrides\r\n                    if (isContrastTheme(themeName)) {\r\n                        THEME_LIGHT = palette.themePrimary;\r\n                        NEUTRAL_TERTIARY = ContrastColors.appGreenContrast;\r\n                        NEUTRAL_PRIMARY = palette.black;\r\n                        NEUTRAL_DARK = palette.neutralDark;\r\n                        NEUTRAL_DARK_WHITE = palette.white;\r\n                        NEUTRAL_QUATERNARY_ALT = palette.black;\r\n                    }\r\n\r\n                    const menuStyles = {\r\n                        divider: {\r\n                            margin: '8px 0',\r\n                            height: '1px',\r\n                            backgroundColor: NEUTRAL_QUATERNARY_ALT,\r\n                        },\r\n                        root: [\r\n                            {\r\n                                height: CONTEXTUAL_MENU_ITEM_HEIGHT,\r\n                                lineHeight: CONTEXTUAL_MENU_ITEM_HEIGHT,\r\n                                color: palette.neutralDark,\r\n                                // High contrast styles https://github.com/microsoft/fluentui/issues/30069\r\n                                '@media (forced-colors: active)': {\r\n                                    ':hover, :focus, :focus:hover': {\r\n                                        forcedColorAdjust: 'none',\r\n                                    },\r\n                                },\r\n                            },\r\n                            !disabled && {\r\n                                ...commonStyles,\r\n                            },\r\n                            expanded && {\r\n                                ...hoverActiveStyles(TEXT_COLOR_HOVER_ACTIVE, THEME_LIGHT),\r\n                                selectors: {\r\n                                    ':hover': {\r\n                                        backgroundColor: BACKGROUND_COLOR_ACTIVE,\r\n                                    },\r\n                                },\r\n                            },\r\n                            disabled && {\r\n                                color: NEUTRAL_TERTIARY,\r\n                            },\r\n                        ],\r\n                        splitPrimary: [\r\n                            {\r\n                                height: CONTEXTUAL_MENU_ITEM_HEIGHT,\r\n                                lineHeight: CONTEXTUAL_MENU_ITEM_HEIGHT,\r\n                                padding: '0 16px',\r\n                                color: NEUTRAL_DARK,\r\n                                selectors: {\r\n                                    '&:hover ~ button': {\r\n                                        backgroundColor: `${THEME_LIGHT} !important`,\r\n                                        color: NEUTRAL_DARK_WHITE,\r\n                                        selectors: {\r\n                                            '.ms-ContextualMenu-submenuIcon': {\r\n                                                color: NEUTRAL_DARK_WHITE,\r\n                                            },\r\n                                        },\r\n                                    },\r\n                                },\r\n                            },\r\n                            !(disabled || primaryDisabled) &&\r\n                                !checked && {\r\n                                    ...commonStyles,\r\n                                },\r\n                            (disabled || primaryDisabled) && {\r\n                                color: NEUTRAL_TERTIARY,\r\n                                selectors: {\r\n                                    '.ms-ContextualMenu-icon': {\r\n                                        color: NEUTRAL_TERTIARY,\r\n                                    },\r\n                                },\r\n                            },\r\n                            checked && {\r\n                                selectors: {\r\n                                    '.ms-ContextualMenu-checkmarkIcon': {\r\n                                        color: NEUTRAL_PRIMARY,\r\n                                    },\r\n                                },\r\n                            },\r\n                        ],\r\n                        splitMenu: [\r\n                            {\r\n                                height: CONTEXTUAL_MENU_ITEM_HEIGHT,\r\n                                lineHeight: CONTEXTUAL_MENU_ITEM_HEIGHT,\r\n                                width: CONTEXTUAL_MENU_ITEM_HEIGHT, // to match the numbers from the default styles\r\n                                ...commonStyles,\r\n                            },\r\n                            expanded && {\r\n                                ...hoverActiveStyles(TEXT_COLOR_HOVER_ACTIVE, THEME_LIGHT),\r\n                                selectors: {\r\n                                    ':hover': {\r\n                                        backgroundColor: BACKGROUND_COLOR_ACTIVE,\r\n                                    },\r\n                                },\r\n                            },\r\n                        ],\r\n                        icon: [{ ...iconStyles }, disabled && { color: NEUTRAL_TERTIARY }],\r\n                        checkmarkIcon: [{ ...iconStyles }],\r\n\r\n                        splitContainer: [\r\n                            {\r\n                                height: CONTEXTUAL_MENU_ITEM_HEIGHT,\r\n                                backgroundColor: 'transparent !important',\r\n                                selectors: {\r\n                                    button: {\r\n                                        selectors: {\r\n                                            '.ms-ContextualMenu-submenuIcon': {\r\n                                                margin: 0,\r\n                                            },\r\n                                        },\r\n                                    },\r\n                                },\r\n                            },\r\n                            !(disabled || primaryDisabled) &&\r\n                                !checked && {\r\n                                    selectors: { ...isFocusVisible },\r\n                                },\r\n                            disabled && { color: NEUTRAL_TERTIARY },\r\n                        ],\r\n                        subMenuIcon: [\r\n                            {\r\n                                height: CONTEXTUAL_MENU_ITEM_HEIGHT,\r\n                                lineHeight: CONTEXTUAL_MENU_ITEM_HEIGHT,\r\n                                fontSize: FontSizes.size12,\r\n                                color: NEUTRAL_DARK,\r\n                            },\r\n                            expanded && {\r\n                                ...hoverActiveStyles(TEXT_COLOR_HOVER_ACTIVE, THEME_LIGHT),\r\n                                selectors: {\r\n                                    ':hover': {\r\n                                        backgroundColor: BACKGROUND_COLOR_ACTIVE,\r\n                                    },\r\n                                },\r\n                            },\r\n                            disabled && { color: NEUTRAL_TERTIARY },\r\n                        ],\r\n                    } as Partial<IContextualMenuItemStyles>;\r\n                    return menuStyles;\r\n                },\r\n            },\r\n        };\r\n\r\n        // Dark theme overrides\r\n        if (isDarkTheme(themeName)) {\r\n            styles.subComponentStyles.callout.root.boxShadow = ShadowLevels.shadowLevel3Dark;\r\n        }\r\n\r\n        // Contrast theme overrides\r\n        if (isContrastTheme(themeName)) {\r\n            styles.subComponentStyles.callout.root.boxShadow = 'none';\r\n        }\r\n        return styles;\r\n    };\r\n}\r\n","import { Label, mergeStyles } from '@fluentui/react';\r\nimport { useId } from '@fluentui/react-hooks';\r\nimport { EditorOptions, Extensions } from '@tiptap/core';\r\nimport { Placeholder } from '@tiptap/extension-placeholder';\r\nimport { EditorContent, useEditor } from '@tiptap/react';\r\nimport React, { forwardRef } from 'react';\r\nimport { Defaults, File } from '../../extensions';\r\nimport { defaultRichTextFieldStrings } from '../../utils';\r\nimport { RichTextRibbon } from '../RichTextRibbon';\r\nimport { useRichTextFieldStyles } from './RichTextField.styles';\r\nimport { RibbonPosition, RichTextFieldProps } from './RichTextField.types';\r\n\r\nexport const RichTextField = forwardRef<HTMLDivElement, RichTextFieldProps>(\r\n    (\r\n        {\r\n            value,\r\n            onChange,\r\n            errorMessage,\r\n            label,\r\n            description,\r\n            required,\r\n            placeholder,\r\n            prefix,\r\n            readOnly,\r\n            invalid,\r\n            compact,\r\n            ribbonPosition = RibbonPosition.Top,\r\n            focusable = true,\r\n            callbacks,\r\n            fileStorageService,\r\n            additionalExtensions,\r\n            strings,\r\n            className,\r\n            rootClassName,\r\n            containerClassName,\r\n            children,\r\n            'aria-required': ariaRequired,\r\n            'aria-placeholder': ariaPlaceholder,\r\n            'aria-readonly': ariaReadonly,\r\n            'aria-labelledby': externalLabelId,\r\n            'aria-describedby': externalDescriptionId,\r\n            ...props\r\n        },\r\n        ref\r\n    ) => {\r\n        const stringsInternal = React.useMemo(() => ({ ...defaultRichTextFieldStrings, ...strings }), [strings]);\r\n\r\n        const valueRef = React.useRef(value);\r\n        valueRef.current = value;\r\n\r\n        const onChangeRef = React.useRef(onChange);\r\n        onChangeRef.current = onChange;\r\n\r\n        const uncontrolledValueRef = React.useRef(value);\r\n\r\n        // Prevent calling onChange when the html is not changed, since we catch any possible content updates from\r\n        // `UpdateContentPlugin`, which could be noisy.\r\n        const onUpdate = React.useCallback<EditorOptions['onUpdate']>(event => {\r\n            const html = event.editor.getHTML();\r\n            if (valueRef.current === html) return;\r\n            onChangeRef.current?.(html);\r\n            uncontrolledValueRef.current = html;\r\n        }, []);\r\n\r\n        const internalLabelId = useId('label');\r\n        const internalDescriptionId = useId('description');\r\n        const internalErrorMessageId = useId('errormessage');\r\n\r\n        // Prefix is used to add a data attribute to the editor container, which can be used for styling, to dynamically\r\n        // add a prefix to the content. This is useful for example when the editor is used to render replies in comments.\r\n        // Tiptap does not provide a way to directly access the contenteditable element, so we have to pass these attributes\r\n        // to support accessibility. The contenteditable element is not a native input, so it must have a role of textbox.\r\n        // Error message is handled separately, because it can change without the editor content changing, and we want to\r\n        // avoid unnecessary re-renders.\r\n        const composedArialRequired = required || ariaRequired;\r\n        const composedAriaPlaceholder = placeholder || ariaPlaceholder;\r\n        const composedAriaReadonly = readOnly || ariaReadonly;\r\n        const composedLabelId = externalLabelId || (label && internalLabelId);\r\n        const composedDescriptionId = externalDescriptionId || (description && internalDescriptionId);\r\n        const editorProps = React.useMemo<EditorOptions['editorProps']>(\r\n            () => ({\r\n                attributes: {\r\n                    ...(prefix && { 'data-prefix': prefix }),\r\n                    role: 'textbox',\r\n                    'aria-multiline': 'true',\r\n                    ...(composedArialRequired && { 'aria-required': 'true' }),\r\n                    ...(composedAriaPlaceholder && { 'aria-placeholder': composedAriaPlaceholder }),\r\n                    ...(composedAriaReadonly && { 'aria-readonly': 'true' }),\r\n                    ...(composedLabelId && { 'aria-labelledby': composedLabelId }),\r\n                    ...(composedDescriptionId && { 'aria-describedby': composedDescriptionId }),\r\n                },\r\n            }),\r\n            [\r\n                prefix,\r\n                composedArialRequired,\r\n                composedAriaPlaceholder,\r\n                composedAriaReadonly,\r\n                composedLabelId,\r\n                composedDescriptionId,\r\n            ]\r\n        );\r\n\r\n        const extensions = React.useMemo<Extensions>(\r\n            () => [\r\n                Defaults,\r\n                Placeholder.configure({ placeholder }),\r\n                ...(fileStorageService\r\n                    ? [File.configure({ fileStorageService, compact, strings: stringsInternal })]\r\n                    : []),\r\n                ...(additionalExtensions ?? []),\r\n            ],\r\n            [additionalExtensions, compact, fileStorageService, placeholder, stringsInternal]\r\n        );\r\n\r\n        const editor = useEditor(\r\n            {\r\n                parseOptions: { preserveWhitespace: 'full' },\r\n                editorProps,\r\n                extensions,\r\n                editable: !readOnly,\r\n                content: value,\r\n                onUpdate,\r\n            },\r\n            [editorProps, extensions, readOnly]\r\n        );\r\n\r\n        // Because Tiptap handles its own changes, and does not allow preventing edits,\r\n        // we have to settle for a hybrid between controlled and uncontrolled mode.\r\n        // It can't prevent the change, but will still override the content whenever value differs from current state.\r\n        // Like https://www.npmjs.com/package/react-quill#user-content-controlled-mode-caveats\r\n        React.useEffect(() => {\r\n            if (!editor || uncontrolledValueRef.current === value) return;\r\n\r\n            // Workaround for \"flushSync was called from inside a lifecycle method. React cannot flush when React is\r\n            // already rendering. Consider moving this call to a scheduler task or micro task.\"\r\n            // See https://github.com/ueberdosis/tiptap/issues/3764\r\n            queueMicrotask(() => {\r\n                if (uncontrolledValueRef.current === value) return;\r\n                editor.commands.setContent(value);\r\n            });\r\n        }, [editor, value]);\r\n\r\n        const styles = useRichTextFieldStyles();\r\n        return (\r\n            <div ref={ref} className={rootClassName}>\r\n                {label && (\r\n                    <Label id={internalLabelId} required={required}>\r\n                        {label}\r\n                    </Label>\r\n                )}\r\n                {description && (\r\n                    <div id={internalDescriptionId} className={styles.description}>\r\n                        {description}\r\n                    </div>\r\n                )}\r\n                <div\r\n                    className={mergeStyles(\r\n                        'ms-RichTextField',\r\n                        styles.editorContainer,\r\n                        errorMessage || invalid ? styles.error : focusable && styles.focusable,\r\n                        containerClassName\r\n                    )}>\r\n                    {ribbonPosition === RibbonPosition.Top && (\r\n                        <RichTextRibbon\r\n                            editor={editor}\r\n                            compact={compact}\r\n                            callbacks={callbacks}\r\n                            strings={stringsInternal}\r\n                        />\r\n                    )}\r\n                    {children}\r\n                    <EditorContent\r\n                        editor={editor}\r\n                        className={mergeStyles(styles.editor, className)}\r\n                        aria-errormessage={errorMessage ? internalErrorMessageId : undefined}\r\n                        aria-invalid={!!errorMessage || invalid}\r\n                        {...props}\r\n                    />\r\n                    {ribbonPosition === RibbonPosition.Bottom && (\r\n                        <RichTextRibbon\r\n                            editor={editor}\r\n                            compact={compact}\r\n                            callbacks={callbacks}\r\n                            strings={stringsInternal}\r\n                        />\r\n                    )}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n);\r\n","import { BaseFormEntry, Validation, ValidationFailure, ValidationSuccess, Validator } from '../types';\r\n\r\n/**\r\n * Creates a successful validation.\r\n *\r\n * @returns The successful validation.\r\n */\r\nexport function createValidationSuccess(): ValidationSuccess {\r\n    return { valid: true };\r\n}\r\n\r\n/**\r\n * Merges multiple validations into a single validation.\r\n * If any of the validations fail, the merged validation will fail.\r\n * The error message of the merged validation will be the first error message found.\r\n * If any of the validations prevent change, the merged validation will prevent change.\r\n *\r\n * @param validations The validations to merge.\r\n * @returns The merged validation.\r\n */\r\nexport function mergeValidations(validations: Validation[]): Validation {\r\n    const failures = validations.filter((result): result is ValidationFailure => !result.valid);\r\n\r\n    if (failures.length === 0) {\r\n        return { valid: true };\r\n    }\r\n\r\n    return {\r\n        valid: false,\r\n        errorMessage: failures.find(result => result.errorMessage)?.errorMessage,\r\n        preventChange: failures.some(result => result.preventChange),\r\n    };\r\n}\r\n\r\n/**\r\n * Validates a single entry and returns a new entry with the validation result.\r\n *\r\n * @param entry The entry to validate.\r\n * @param validators The validators to use.\r\n * @param quietly If true, the entry's error message will not be set.\r\n * @returns The validated entry.\r\n */\r\nexport function validateEntry<Question, Answer, Entry extends BaseFormEntry<Question, Answer>>(\r\n    entry: Entry,\r\n    validators: Validator<Entry>[],\r\n    quietly?: boolean\r\n): Entry {\r\n    const validation = mergeValidations(validators.map(validator => validator.validate(entry)));\r\n    const newEntry = { ...entry };\r\n\r\n    newEntry.invalid = !validation.valid;\r\n\r\n    if (validation.valid || !validation.errorMessage || quietly) {\r\n        delete newEntry.errorMessage;\r\n    } else {\r\n        newEntry.errorMessage = validation.errorMessage;\r\n    }\r\n\r\n    return newEntry;\r\n}\r\n\r\n/**\r\n * Validates multiple entries and returns new entries with the validation results.\r\n *\r\n * @param entries The entries to validate.\r\n * @param validators The validators to use.\r\n * @param quietly If true, the entries' error messages will not be set.\r\n * @returns The validated entries.\r\n */\r\nexport function validateEntries<Question, Answer, Entry extends BaseFormEntry<Question, Answer>>(\r\n    entries: Entry[],\r\n    validators: Validator<Entry>[],\r\n    quietly?: boolean\r\n): Entry[] {\r\n    return entries.map(entry => validateEntry(entry, validators, quietly));\r\n}\r\n\r\n/**\r\n * Checks if the dom is visually empty. Empty is defined as no text content and no lists, tables, or images.\r\n *\r\n * @param dom The document to check.\r\n * @returns True if the dom is visually empty, false otherwise.\r\n */\r\nexport function isHtmlEmpty(dom: Document): boolean {\r\n    // If the text content is empty and there are no lists, tables, or images, then it's considered empty.\r\n    return !dom.body.textContent && dom.body.querySelector('ol, ul, table, img') === null;\r\n}\r\n\r\n/**\r\n * Checks if the dom has error files, which have data-type=file and data-file-error.\r\n *\r\n * @param dom The document to check.\r\n * @returns True if the dom has error files, false otherwise.\r\n */\r\nexport function hasErrorFiles(dom: Document): boolean {\r\n    return Boolean(dom.querySelector('a[data-type=file][data-file-error]'));\r\n}\r\n\r\n/**\r\n * Checks if the dom has uploading files, which have data-type=file but no href yet.\r\n *\r\n * @param dom The document to check.\r\n * @returns True if the dom has uploading files, false otherwise.\r\n */\r\nexport function hasUploadingFiles(dom: Document): boolean {\r\n    return Boolean(dom.querySelector('a[data-type=file]:not([href])'));\r\n}\r\n","/* istanbul ignore file */\r\n\r\nimport { ILabelStyleProps, ILabelStyles, ITextFieldStyleProps, ITextFieldStyles, ITheme } from '@fluentui/react';\r\nimport { ContrastColors } from '../teams-colors';\r\nimport { FontSizes } from '../teams-sizes';\r\nimport { isContrastTheme, isDarkTheme } from '../teams-theme';\r\nimport { teamsBorderRadius } from './constants';\r\n\r\nexport function getTextFieldStyles(themeName: string, _theme: ITheme) {\r\n    return (props: ITextFieldStyleProps): Partial<ITextFieldStyles> => {\r\n        const { focused, disabled, hasErrorMessage, multiline, theme } = props;\r\n        const { palette } = theme;\r\n        const FIELD_HEIGHT = '32px';\r\n        const MULTILINE_FIELD_HEIGHT = '94px';\r\n\r\n        let FIELD_GROUP_BACKGROUND_COLOR = palette.neutralLight;\r\n        let FIELD_GROUP_OPACITY = 0.36;\r\n        let FIELD_COLOR = palette.black;\r\n        let FIELD_COLOR_PLACEHOLDER_NOT_DISABLED = palette.neutralDark;\r\n        let FIELD_COLOR_PLACEHOLDER_DISABLED = palette.neutralDark;\r\n        let FIELD_GROUP_BORDER_WIDTH = '0 0 2px 0';\r\n        let FIELD_GROUP_BORDER_COLOR = 'transparent';\r\n        let FIELD_GROUP_BORDER_COLOR_DISABLED = 'transparent';\r\n        let FIELD_GROUP_BORDER_BOTTOM_COLOR_ACTIVE = palette.themePrimary;\r\n        let FIELD_GROUP_BORDER_WIDTH_ACTIVE = FIELD_GROUP_BORDER_WIDTH;\r\n        const ERROR_MESSAGE_COLOR = theme.palette.redDark;\r\n\r\n        // Dark theme overrides\r\n        if (isDarkTheme(themeName)) {\r\n            FIELD_GROUP_BACKGROUND_COLOR = palette.neutralLighter;\r\n            FIELD_COLOR = palette.black;\r\n            FIELD_COLOR_PLACEHOLDER_NOT_DISABLED = palette.neutralDark;\r\n            FIELD_COLOR_PLACEHOLDER_DISABLED = palette.neutralPrimary;\r\n        }\r\n\r\n        // Contrast theme overrides\r\n        if (isContrastTheme(themeName)) {\r\n            FIELD_GROUP_BACKGROUND_COLOR = palette.white;\r\n            FIELD_GROUP_OPACITY = 1;\r\n            FIELD_COLOR = palette.black;\r\n            FIELD_COLOR_PLACEHOLDER_NOT_DISABLED = palette.black;\r\n            FIELD_COLOR_PLACEHOLDER_DISABLED = ContrastColors.appGreenContrast;\r\n            FIELD_GROUP_BORDER_WIDTH = '1px 1px 1px 1px';\r\n            FIELD_GROUP_BORDER_COLOR = palette.black;\r\n            FIELD_GROUP_BORDER_COLOR_DISABLED = ContrastColors.appGreenContrast;\r\n            FIELD_GROUP_BORDER_BOTTOM_COLOR_ACTIVE = palette.themeDark;\r\n            FIELD_GROUP_BORDER_WIDTH_ACTIVE = '1px 1px 2px 1px';\r\n        }\r\n\r\n        const isActiveOpenStyles = {\r\n            selectors: {\r\n                '.ms-TextField-fieldGroup': {\r\n                    borderBottomColor: FIELD_GROUP_BORDER_BOTTOM_COLOR_ACTIVE,\r\n                    borderWidth: FIELD_GROUP_BORDER_WIDTH_ACTIVE,\r\n                    // Need 2px border raidus as the border width is 2px.\r\n                    borderBottomRightRadius: teamsBorderRadius,\r\n                    borderBottomLeftRadius: teamsBorderRadius,\r\n                },\r\n                textarea: {\r\n                    selectors: {\r\n                        '& .ms-TextField-fieldGroup': {\r\n                            height: 'auto',\r\n                        },\r\n                    },\r\n                },\r\n            },\r\n        };\r\n\r\n        const styles = {\r\n            root: {\r\n                selectors: {\r\n                    '.ms-TextField-fieldGroup': {\r\n                        backgroundColor: FIELD_GROUP_BACKGROUND_COLOR,\r\n                    },\r\n                    '&.is-active': { ...isActiveOpenStyles },\r\n                    '.ms-DatePicker.is-open &': { ...isActiveOpenStyles },\r\n                    '&.is-disabled': {\r\n                        selectors: {\r\n                            '.ms-TextField-fieldGroup': {\r\n                                borderColor: FIELD_GROUP_BORDER_COLOR_DISABLED,\r\n                                selectors: {\r\n                                    'input, textarea': {\r\n                                        color: FIELD_COLOR_PLACEHOLDER_DISABLED,\r\n                                    },\r\n                                },\r\n                            },\r\n                        },\r\n                    },\r\n                },\r\n            },\r\n            subComponentStyles: {\r\n                label: getLabelStyles,\r\n            },\r\n            fieldGroup: [\r\n                {\r\n                    borderRadius: teamsBorderRadius,\r\n                    borderWidth: FIELD_GROUP_BORDER_WIDTH,\r\n                    borderStyle: 'Solid',\r\n                    borderColor: FIELD_GROUP_BORDER_COLOR,\r\n                    height: !multiline ? FIELD_HEIGHT : 'auto',\r\n                    selectors: {\r\n                        '::after': {\r\n                            display: 'none',\r\n                        },\r\n                    },\r\n                },\r\n                disabled && {\r\n                    opacity: FIELD_GROUP_OPACITY,\r\n                },\r\n                !focused &&\r\n                    !disabled &&\r\n                    !hasErrorMessage && {\r\n                        selectors: {\r\n                            ':hover': {\r\n                                borderColor: FIELD_GROUP_BORDER_COLOR,\r\n                            },\r\n                        },\r\n                    },\r\n                hasErrorMessage && [\r\n                    {\r\n                        borderColor: FIELD_GROUP_BORDER_COLOR,\r\n                        color: 'red',\r\n                        selectors: {\r\n                            '&:focus, &:hover': {\r\n                                borderColor: FIELD_GROUP_BORDER_COLOR,\r\n                            },\r\n                        },\r\n                    },\r\n                ],\r\n            ],\r\n            field: {\r\n                color: FIELD_COLOR,\r\n                height: !multiline ? FIELD_HEIGHT : MULTILINE_FIELD_HEIGHT,\r\n                padding: !multiline ? '0 12px 2px' : '7px 12px 9px',\r\n                backgroundColor: 'transparent',\r\n                selectors: {\r\n                    '::placeholder': [\r\n                        !disabled && { color: FIELD_COLOR_PLACEHOLDER_NOT_DISABLED },\r\n                        disabled && { color: FIELD_COLOR_PLACEHOLDER_DISABLED },\r\n                    ],\r\n                    ':-ms-input-placeholder': [\r\n                        !disabled && { color: FIELD_COLOR_PLACEHOLDER_NOT_DISABLED },\r\n                        disabled && { color: FIELD_COLOR_PLACEHOLDER_DISABLED },\r\n                    ],\r\n                },\r\n            },\r\n            errorMessage: {\r\n                color: ERROR_MESSAGE_COLOR,\r\n            },\r\n        } as Partial<ITextFieldStyles>;\r\n        return styles;\r\n    };\r\n}\r\n\r\nfunction getLabelStyles(props: ILabelStyleProps): ILabelStyles {\r\n    return {\r\n        root: {\r\n            color: props.theme.palette.neutralDark,\r\n            paddingTop: 0,\r\n            paddingBottom: '6px',\r\n            fontSize: FontSizes.size12,\r\n        },\r\n    };\r\n}\r\n","/* istanbul ignore file */\r\n\r\nimport { IPanelStyles, ITheme, FontWeights, IRawStyle } from '@fluentui/react';\r\nimport { CoreColors, ContrastColors, DarkColors } from '../teams-colors';\r\nimport { isContrastTheme, isDarkTheme } from '../teams-theme';\r\n\r\nexport function getPanelStyles(themeName: string, theme: ITheme): Partial<IPanelStyles> {\r\n    let BUTTON_ICON_HOVER_COLOR = theme.palette.themePrimary;\r\n\r\n    if (isContrastTheme(themeName)) {\r\n        BUTTON_ICON_HOVER_COLOR = theme.palette.themeDark;\r\n    }\r\n    const styles = {\r\n        main: {\r\n            selectors: {\r\n                '&.ms-Panel-main': {\r\n                    borderWidth: 0,\r\n                    borderStyle: 'solid',\r\n                    borderColor: theme.palette.black,\r\n                },\r\n            },\r\n        },\r\n        overlay: {\r\n            backgroundColor: CoreColors.overlayBackground,\r\n        },\r\n        closeButton: {\r\n            color: theme.palette.black,\r\n            selectors: {\r\n                '&:hover': {\r\n                    color: theme.palette.themePrimary,\r\n                    backgroundColor: 'transparent',\r\n                    selectors: {\r\n                        i: {\r\n                            fontWeight: FontWeights.bold,\r\n                        },\r\n                    },\r\n                },\r\n                '&:active': {\r\n                    color: theme.palette.themePrimary,\r\n                    backgroundColor: 'transparent',\r\n                    selectors: {\r\n                        i: {\r\n                            fontWeight: FontWeights.bold,\r\n                        },\r\n                    },\r\n                },\r\n            },\r\n        },\r\n        commands: {\r\n            paddingTop: '10px',\r\n            paddingBottom: '20px',\r\n        },\r\n        content: {\r\n            color: theme.palette.black,\r\n            selectors: {\r\n                '.ms-Button--icon': {\r\n                    selectors: {\r\n                        i: {\r\n                            color: theme.palette.black,\r\n                        },\r\n                        ':hover': {\r\n                            backgroundColor: 'transparent',\r\n                            selectors: {\r\n                                i: {\r\n                                    fontWeight: 'bold',\r\n                                    color: BUTTON_ICON_HOVER_COLOR,\r\n                                },\r\n                            },\r\n                        },\r\n                        ':active': {\r\n                            backgroundColor: 'transparent',\r\n                        },\r\n                    },\r\n                },\r\n            },\r\n        },\r\n        headerText: {\r\n            color: theme.palette.black,\r\n        },\r\n    } as Partial<IPanelStyles>;\r\n\r\n    // Dark theme overrides\r\n    if (isDarkTheme(themeName)) {\r\n        (styles.overlay as IRawStyle).backgroundColor = DarkColors.overlayBackground;\r\n    }\r\n\r\n    // Contrast theme overrides\r\n    if (isContrastTheme(themeName)) {\r\n        (styles.overlay as IRawStyle).backgroundColor = ContrastColors.overlayBackground;\r\n\r\n        ((styles.main as Required<IRawStyle>).selectors['&.ms-Panel-main'] as IRawStyle).borderWidth = '2px';\r\n\r\n        ((styles.closeButton as Required<IRawStyle>).selectors['&:hover'] as IRawStyle).color = theme.palette.themeDark;\r\n        ((styles.closeButton as Required<IRawStyle>).selectors['&:active'] as IRawStyle).color =\r\n            theme.palette.themeDark;\r\n    }\r\n\r\n    return styles;\r\n}\r\n","/* istanbul ignore file */\r\n\r\nimport { IButtonStyles, ITheme, IRawStyle } from '@fluentui/react';\r\nimport { ShadowLevels } from '../teams-shadow-levels';\r\nimport { ContrastColors } from '../teams-colors';\r\nimport { isContrastTheme, isDarkTheme } from '../teams-theme';\r\nimport { teamsBorderRadius } from './constants';\r\n\r\nexport function getPrimaryButtonStyles(themeName: string, theme: ITheme): Partial<IButtonStyles> {\r\n    let iconFillColor = theme.palette.white;\r\n    const buttonBoxShadow = ShadowLevels.shadowLevel1Dark;\r\n    const buttonBorderRadius = teamsBorderRadius;\r\n    const rootColor = theme.palette.themePrimary;\r\n    const textColor = theme.palette.white;\r\n    const rootHoverColor = theme.palette.themeDark;\r\n    const rootPressedCheckedColor = theme.palette.themeDarker;\r\n\r\n    if (isContrastTheme(themeName)) {\r\n        iconFillColor = theme.palette.white;\r\n    }\r\n\r\n    if (isDarkTheme(themeName)) {\r\n        iconFillColor = theme.palette.black;\r\n    }\r\n\r\n    const styles = {\r\n        root: {\r\n            backgroundColor: rootColor,\r\n            color: textColor,\r\n            boxShadow: buttonBoxShadow,\r\n            borderColor: rootColor,\r\n            selectors: {\r\n                'svg, .icons-default-fill': {\r\n                    fill: iconFillColor,\r\n                },\r\n            },\r\n        },\r\n        rootHovered: {\r\n            backgroundColor: rootHoverColor,\r\n            borderColor: rootHoverColor,\r\n            color: textColor,\r\n            selectors: {\r\n                'svg, .icons-default-fill': {\r\n                    fill: iconFillColor,\r\n                },\r\n            },\r\n        },\r\n        rootPressed: {\r\n            backgroundColor: rootPressedCheckedColor,\r\n            borderColor: rootPressedCheckedColor,\r\n            color: textColor,\r\n            selectors: {\r\n                'svg, .icons-default-fill': {\r\n                    fill: iconFillColor,\r\n                },\r\n            },\r\n        },\r\n        rootChecked: {\r\n            backgroundColor: rootPressedCheckedColor,\r\n            borderColor: rootPressedCheckedColor,\r\n            color: textColor,\r\n            selectors: {\r\n                'svg, .icons-default-fill': {\r\n                    fill: iconFillColor,\r\n                },\r\n            },\r\n        },\r\n        rootCheckedHovered: {\r\n            backgroundColor: rootHoverColor,\r\n            borderColor: rootHoverColor,\r\n            color: textColor,\r\n            selectors: {\r\n                'svg, .icons-default-fill': {\r\n                    fill: iconFillColor,\r\n                },\r\n            },\r\n        },\r\n        rootDisabled: {\r\n            backgroundColor: theme.palette.neutralQuaternary,\r\n            borderColor: theme.palette.neutralQuaternary,\r\n            color: theme.palette.neutralTertiary,\r\n            selectors: {\r\n                'svg, .icons-default-fill': {\r\n                    fill: theme.palette.neutralTertiary,\r\n                },\r\n            },\r\n        },\r\n        rootFocused: {\r\n            backgroundColor: rootColor,\r\n            borderColor: rootColor,\r\n            borderRadius: buttonBorderRadius,\r\n            color: textColor,\r\n            selectors: {\r\n                'svg, .icons-default-fill': {\r\n                    fill: iconFillColor,\r\n                },\r\n            },\r\n        },\r\n    } as Partial<IButtonStyles>;\r\n\r\n    // Dark theme overrides\r\n    if (isDarkTheme(themeName)) {\r\n        // Root\r\n        (styles.root as IRawStyle).color = theme.palette.black;\r\n        (styles.root as IRawStyle).backgroundColor = theme.palette.themeTertiary;\r\n        (styles.root as IRawStyle).borderColor = theme.palette.themeTertiary;\r\n\r\n        // Root Hovered\r\n        (styles.rootHovered as IRawStyle).color = theme.palette.black;\r\n        (styles.rootHovered as IRawStyle).backgroundColor = theme.palette.themeSecondary;\r\n        (styles.rootHovered as IRawStyle).borderColor = theme.palette.themeSecondary;\r\n        ((styles.rootHovered as Required<IRawStyle>).selectors['svg, .icons-default-fill'] as IRawStyle).fill =\r\n            theme.palette.black;\r\n\r\n        // Root Checked\r\n        (styles.rootChecked as IRawStyle).color = theme.palette.black;\r\n        (styles.rootChecked as IRawStyle).backgroundColor = theme.palette.themeLight;\r\n        (styles.rootChecked as IRawStyle).borderColor = theme.palette.themeLight;\r\n        ((styles.rootChecked as Required<IRawStyle>).selectors['svg, .icons-default-fill'] as IRawStyle).fill =\r\n            theme.palette.black;\r\n\r\n        // Root Checked Hovered\r\n        (styles.rootCheckedHovered as IRawStyle).color = theme.palette.black;\r\n        (styles.rootCheckedHovered as IRawStyle).backgroundColor = theme.palette.themeSecondary;\r\n        (styles.rootCheckedHovered as IRawStyle).borderColor = theme.palette.themeSecondary;\r\n        ((styles.rootCheckedHovered as Required<IRawStyle>).selectors['svg, .icons-default-fill'] as IRawStyle).fill =\r\n            theme.palette.black;\r\n\r\n        // Root Pressed\r\n        (styles.rootPressed as IRawStyle).color = theme.palette.black;\r\n        (styles.rootPressed as IRawStyle).backgroundColor = theme.palette.themeLight;\r\n        (styles.rootPressed as IRawStyle).borderColor = theme.palette.themeLight;\r\n        ((styles.rootPressed as Required<IRawStyle>).selectors['svg, .icons-default-fill'] as IRawStyle).fill =\r\n            theme.palette.black;\r\n\r\n        // Root Focused\r\n        (styles.rootFocused as IRawStyle).backgroundColor = theme.palette.themeTertiary;\r\n        (styles.rootFocused as IRawStyle).borderColor = theme.palette.themeTertiary;\r\n        (styles.rootFocused as IRawStyle).color = theme.palette.black;\r\n        ((styles.rootFocused as Required<IRawStyle>).selectors['svg, .icons-default-fill'] as IRawStyle).fill =\r\n            theme.palette.black;\r\n\r\n        // Root Disabled\r\n        ((styles.rootDisabled as Required<IRawStyle>).selectors['svg, .icons-default-fill'] as IRawStyle).fill =\r\n            theme.palette.neutralTertiary;\r\n    }\r\n\r\n    // Contrast theme overrides\r\n    if (isContrastTheme(themeName)) {\r\n        // Root\r\n        (styles.root as IRawStyle).color = theme.palette.white;\r\n        (styles.root as IRawStyle).backgroundColor = theme.palette.black;\r\n        (styles.root as IRawStyle).borderColor = theme.palette.black;\r\n\r\n        // Root Hovered\r\n        (styles.rootHovered as IRawStyle).backgroundColor = theme.palette.themeDark;\r\n        (styles.rootHovered as IRawStyle).borderColor = theme.palette.themeDark;\r\n        (styles.rootHovered as IRawStyle).borderWidth = '2px';\r\n\r\n        // Root Pressed\r\n        (styles.rootPressed as IRawStyle).backgroundColor = theme.palette.themeDark;\r\n        (styles.rootPressed as IRawStyle).borderColor = theme.palette.themeDark;\r\n\r\n        // Root Checked\r\n        (styles.rootChecked as IRawStyle).backgroundColor = theme.palette.themePrimary;\r\n        (styles.rootChecked as IRawStyle).borderColor = theme.palette.themePrimary;\r\n\r\n        // Root Checked Hovered\r\n        (styles.rootChecked as IRawStyle).backgroundColor = theme.palette.themeDark;\r\n        (styles.rootChecked as IRawStyle).borderColor = theme.palette.themeDark;\r\n\r\n        // Root Disabled\r\n        (styles.rootDisabled as IRawStyle).color = theme.palette.white;\r\n        (styles.rootDisabled as IRawStyle).backgroundColor = ContrastColors.appGreenContrast;\r\n        (styles.rootDisabled as IRawStyle).borderColor = ContrastColors.appGreenContrast;\r\n        ((styles.rootDisabled as Required<IRawStyle>).selectors['svg, .icons-default-fill'] as IRawStyle).fill =\r\n            theme.palette.white;\r\n\r\n        // Root Focused\r\n        (styles.rootFocused as IRawStyle).backgroundColor = theme.palette.themeDark;\r\n        (styles.rootFocused as IRawStyle).borderColor = theme.palette.themeDark;\r\n    }\r\n    return styles;\r\n}\r\n","import { Icon, mergeStyles } from '@fluentui/react';\r\nimport React from 'react';\r\nimport { FormQuestion, FormStrings, QuestionDisplayType } from '../../../types';\r\nimport { getDisplayType } from '../../../utilities';\r\nimport { QuestionSettingsProps } from '../types';\r\nimport { useMockedFieldStyles } from './MockedField.styles';\r\n\r\nexport type MockedFieldProps = Omit<QuestionSettingsProps, 'onQuestionChange'>;\r\n\r\nexport function MockedField({ question, strings }: MockedFieldProps): JSX.Element | null {\r\n    const styles = useMockedFieldStyles();\r\n\r\n    const { hidden, placeholder, trailingIconName, multiline, ribbonIconNames } = React.useMemo(\r\n        () => getMockedFieldAppearance(question, strings),\r\n        [question, strings]\r\n    );\r\n\r\n    if (hidden) return null;\r\n\r\n    return (\r\n        <div className={mergeStyles(styles.root, multiline && styles.multiline)}>\r\n            {ribbonIconNames && (\r\n                <div className={styles.ribbon}>\r\n                    {ribbonIconNames.map(iconName => (\r\n                        <Icon className={styles.icon} key={iconName} iconName={iconName} />\r\n                    ))}\r\n                </div>\r\n            )}\r\n            <div className={styles.input}>\r\n                <span>{placeholder}</span>\r\n                {trailingIconName && <Icon className={styles.icon} iconName={trailingIconName} />}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\ninterface MockedFieldAppearance {\r\n    hidden?: boolean;\r\n    placeholder?: string;\r\n    trailingIconName?: string;\r\n    multiline?: boolean;\r\n    ribbonIconNames?: string[];\r\n}\r\n\r\nconst hiddenDisplayTypes = [QuestionDisplayType.MultipleChoice, QuestionDisplayType.SingleChoice];\r\nconst multilineDisplayTypes = [QuestionDisplayType.MultilineText, QuestionDisplayType.RichText];\r\nconst displayTypeTrailingIconNames: Partial<Record<QuestionDisplayType, string>> = {\r\n    [QuestionDisplayType.Date]: 'Calendar',\r\n    [QuestionDisplayType.Dropdown]: 'ChevronDown',\r\n};\r\nconst richTextFieldRibbonIconNames = ['Bold', 'Italic', 'Underline', 'Strikethrough', 'More'];\r\n\r\nfunction getMockedFieldAppearance(question: FormQuestion, strings: FormStrings): MockedFieldAppearance {\r\n    const displayType = getDisplayType(question);\r\n    if (hiddenDisplayTypes.includes(displayType)) return { hidden: true };\r\n    return {\r\n        placeholder: strings.questionMockedFieldDefaultPlaceholder(displayType),\r\n        trailingIconName: displayTypeTrailingIconNames[displayType],\r\n        multiline: multilineDisplayTypes.includes(displayType),\r\n        ...(displayType === QuestionDisplayType.RichText && { ribbonIconNames: richTextFieldRibbonIconNames }),\r\n    };\r\n}\r\n","import { Sanitizer } from '../types';\r\n\r\nexport const identitySanitizer: Sanitizer = html => html;\r\n","import { FontSizes, isContrastTheme, makeStyles } from '@addressbook/components-fluentui-teams-theme';\r\n\r\nexport const useRichTextFieldStyles = makeStyles(theme => ({\r\n    editorContainer: {\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        backgroundColor: isContrastTheme(theme.name) ? theme.palette.white : theme.palette.neutralLighter,\r\n        borderRadius: '4px',\r\n        borderWidth: '1px',\r\n        borderStyle: 'solid',\r\n        borderColor: isContrastTheme(theme.name) ? theme.palette.black : 'transparent',\r\n        overflow: 'hidden',\r\n    },\r\n    focusable: {\r\n        borderBottomWidth: isContrastTheme(theme.name) ? undefined : '2px',\r\n        '&:focus-within': {\r\n            borderBottomWidth: '2px',\r\n            borderBottomColor: isContrastTheme(theme.name) ? theme.palette.accent : theme.palette.themePrimary,\r\n        },\r\n    },\r\n    error: {\r\n        borderColor: theme.palette.redDark,\r\n    },\r\n    description: {\r\n        fontSize: FontSizes.size12,\r\n        marginBottom: '8px',\r\n    },\r\n    editor: {\r\n        flexGrow: 1,\r\n        boxSizing: 'border-box',\r\n        overflow: 'auto',\r\n        overflowWrap: 'break-word',\r\n        padding: '6px 12px',\r\n        cursor: 'text',\r\n\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        '.tiptap': {\r\n            // Layout and style the rich text field input area\r\n            flexGrow: 1,\r\n            boxShadow: 'none',\r\n            outline: 'none',\r\n\r\n            // Style the rich text field content\r\n            color: theme.palette.black,\r\n            a: {\r\n                color: theme.palette.themePrimary,\r\n            },\r\n            'p, h1, h2, h3, h4, h5, h6, pre, blockquote': {\r\n                marginBlock: 0,\r\n                padding: 0,\r\n            },\r\n            '[data-type=mention]': {\r\n                color: theme.palette.accent,\r\n            },\r\n\r\n            table: {\r\n                width: '100%',\r\n                tableLayout: 'fixed',\r\n                borderCollapse: 'collapse',\r\n\r\n                td: {\r\n                    border: `1px solid ${theme.palette.neutralSecondary}`,\r\n\r\n                    // Mitigate nested tables overflowing the parent cell\r\n                    overflow: 'auto',\r\n                },\r\n\r\n                th: {\r\n                    textAlign: 'inherit',\r\n                    backgroundColor: theme.palette.neutralLighter,\r\n                    border: `1px solid ${theme.palette.neutralSecondary}`,\r\n                },\r\n\r\n                '.selectedCell': {\r\n                    position: 'relative',\r\n                    ':after': {\r\n                        opacity: 0.2,\r\n                        backgroundColor: theme.palette.neutralSecondary,\r\n                        content: '\"\"',\r\n                        inset: 0,\r\n                        pointerEvents: 'none',\r\n                        position: 'absolute',\r\n                    },\r\n                },\r\n            },\r\n\r\n            // Style the rich text field placeholder\r\n            // An empty editor may contain several empty paragraphs or tables, so we need to ensure it is the only child\r\n            'p.is-editor-empty:first-child:last-child': {\r\n                position: 'relative',\r\n                '::before': {\r\n                    content: 'attr(data-placeholder)',\r\n                    color: isContrastTheme(theme.name) ? theme.palette.black : theme.palette.neutralPrimary,\r\n                    position: 'absolute',\r\n                    inset: 0,\r\n                    overflow: 'hidden',\r\n                    textOverflow: 'ellipsis',\r\n                    whiteSpace: 'nowrap',\r\n                },\r\n            },\r\n        },\r\n\r\n        '.tiptap[data-prefix]': {\r\n            '::before': {\r\n                content: 'attr(data-prefix) \" \"',\r\n                color: isContrastTheme(theme.name) ? theme.palette.black : theme.palette.neutralPrimary,\r\n            },\r\n            '>div:first-child, >p:first-child': {\r\n                display: 'inline',\r\n            },\r\n        },\r\n    },\r\n    errorMessage: {\r\n        color: theme.palette.redDark,\r\n        padding: '4px 12px',\r\n        fontSize: FontSizes.size12,\r\n    },\r\n}));\r\n","import { mergeStyles } from '@fluentui/react';\r\nimport { NodeViewProps } from '@tiptap/core';\r\nimport { NodeViewContent, NodeViewWrapper } from '@tiptap/react';\r\nimport { isImageMime } from '@addressbook/utilities-core';\r\nimport React from 'react';\r\nimport { getCompactByExtension, getStringsByExtension } from '../utils';\r\nimport { defaultFileSession, FileSessions, isValidFileSession } from './sessions';\r\nimport { useFileNodeViewStyles } from './styles';\r\nimport { useDeleteNode, useUpdateAttributes } from './utils';\r\nimport { FallbackView } from './view.fallback';\r\nimport { ImageView } from './view.image';\r\n\r\nexport type FileNodeViewProps = NodeViewProps & {\r\n    node: {\r\n        attrs: FileNodeViewAttributes;\r\n    };\r\n};\r\n\r\ninterface FileNodeViewAttributes {\r\n    href: string | null;\r\n    target: string | null;\r\n    rel: string | null;\r\n    mime: string | null;\r\n    error: true | null;\r\n    key: string;\r\n}\r\n\r\nexport const FileNodeView: React.FC<FileNodeViewProps> = ({ editor, node, selected, extension }) => {\r\n    const strings = React.useMemo(() => getStringsByExtension(extension), [extension]);\r\n    const compact = React.useMemo(() => getCompactByExtension(extension), [extension]);\r\n\r\n    // Prepare variables for the node rendering\r\n    const name = node.textContent;\r\n    const { target, rel, mime, key } = node.attrs;\r\n    const isImage = Boolean(mime && isImageMime(mime));\r\n\r\n    // Prepare functions for node operations\r\n    const updateAttributes = useUpdateAttributes<FileNodeViewAttributes>({ editor, key });\r\n    const deleteNode = useDeleteNode({ editor, key });\r\n\r\n    // Derive the session from the extension storage\r\n    const sessions = extension.storage as FileSessions;\r\n    const [session, setSession] = React.useState(() => sessions.get(key) ?? defaultFileSession);\r\n\r\n    React.useEffect(\r\n        () =>\r\n            sessions.subscribe(key, session => {\r\n                setSession(session);\r\n\r\n                // Workaround for \"flushSync was called from inside a lifecycle method. React cannot flush when React is\r\n                // already rendering. Consider moving this call to a scheduler task or micro task.\"\r\n                // See https://github.com/ueberdosis/tiptap/issues/3764\r\n                queueMicrotask(() =>\r\n                    updateAttributes({ href: session.url ?? null, error: session.error ? true : null }, true)\r\n                );\r\n            }),\r\n        [key, sessions, updateAttributes]\r\n    );\r\n\r\n    // Ensure the session is valid\r\n    React.useEffect(() => {\r\n        if (isValidFileSession(session)) return;\r\n\r\n        // Workaround for \"flushSync was called from inside a lifecycle method. React cannot flush when React is\r\n        // already rendering. Consider moving this call to a scheduler task or micro task.\"\r\n        // See https://github.com/ueberdosis/tiptap/issues/3764\r\n        queueMicrotask(() => deleteNode(true));\r\n    }, [deleteNode, session]);\r\n\r\n    const remove = React.useMemo(\r\n        () => (editor.isEditable ? () => deleteNode() : undefined),\r\n        [deleteNode, editor.isEditable]\r\n    );\r\n\r\n    const styles = useFileNodeViewStyles();\r\n    const content = <NodeViewContent as='span' />;\r\n    return (\r\n        <NodeViewWrapper\r\n            as='span'\r\n            className={mergeStyles(\r\n                styles.root,\r\n                selected && 'selected',\r\n                session.error && styles.error,\r\n                isImage && styles.image\r\n            )}\r\n            data-drag-handle\r\n            contentEditable={false}>\r\n            {isImage ? (\r\n                <ImageView\r\n                    name={name}\r\n                    blob={session.blob}\r\n                    url={session.url}\r\n                    thumbnail={session.thumbnail}\r\n                    imageSize={session.imageSize}\r\n                    loading={session.loading}\r\n                    error={session.error}\r\n                    onRetry={session.retry}\r\n                    onRemove={remove}\r\n                    compact={compact}\r\n                    strings={strings}>\r\n                    {content}\r\n                </ImageView>\r\n            ) : (\r\n                <FallbackView\r\n                    href={session.url}\r\n                    target={target || undefined}\r\n                    rel={rel || undefined}\r\n                    thumbnail={session.thumbnail}\r\n                    loading={session.loading}>\r\n                    {content}\r\n                </FallbackView>\r\n            )}\r\n        </NodeViewWrapper>\r\n    );\r\n};\r\n","import { FocusZone } from '@fluentui/react';\r\nimport React from 'react';\r\nimport { FieldProps } from '../../../abstractions';\r\nimport { FormContext, FormEntry, FormFeature } from '../../types';\r\nimport { usePreviewingDecoratorStyles } from './PreviewingDecorator.styles';\r\n\r\nexport function PreviewingDecorator<CoercedEntry extends FormEntry>({\r\n    children,\r\n}: React.PropsWithChildren<FieldProps<FormEntry, FormContext, FormFeature, CoercedEntry>>): JSX.Element {\r\n    const styles = usePreviewingDecoratorStyles();\r\n\r\n    return (\r\n        <FocusZone className={styles.root} disabled>\r\n            {children}\r\n            <div className={styles.mask} />\r\n        </FocusZone>\r\n    );\r\n}\r\n","import { Checkbox, FocusZone, ICheckboxProps, TextField, mergeStyles } from '@fluentui/react';\r\nimport React from 'react';\r\nimport { ChoiceAppearance, ChoiceEntry, FormContext, FormEntry, FormMode, FormQuestionType } from '../../types';\r\nimport {\r\n    useCheckboxStyles,\r\n    useChoiceChange,\r\n    useChosenAndOther,\r\n    useOtherFieldStyles,\r\n    useShuffled,\r\n} from '../../utilities';\r\nimport { BaseDescriptor, FieldComponentTypeFactory } from './BaseDescriptor';\r\n\r\nconst containerClassName = mergeStyles({\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    gap: '12px',\r\n    paddingInline: '12px',\r\n});\r\n\r\nconst defaultOptions = {\r\n    otherPlaceholder: 'Other',\r\n};\r\n\r\nexport type CheckboxChoiceDescriptorOptions = Partial<typeof defaultOptions>;\r\n\r\nconst makeFieldComponent: FieldComponentTypeFactory<\r\n    CheckboxChoiceDescriptorOptions & typeof defaultOptions,\r\n    ChoiceEntry\r\n> =\r\n    ({ otherPlaceholder }) =>\r\n    ({ entry, onEntryChange, delegatedProps, showPlaceholder }) => {\r\n        const { question, answer } = entry;\r\n        const { choices, shuffle, allowOther } = question;\r\n\r\n        const shuffledChoices = useShuffled({ array: choices, enabled: shuffle && !delegatedProps.readOnly });\r\n        const onChange = useChoiceChange(entry, onEntryChange);\r\n        const { chosen, otherKey, otherValue, otherSelected, otherFieldRef } = useChosenAndOther(\r\n            choices,\r\n            answer.content\r\n        );\r\n\r\n        const keys = allowOther ? [...shuffledChoices, otherKey] : shuffledChoices;\r\n\r\n        const checkboxStyles = useCheckboxStyles();\r\n        const otherFieldStyles = useOtherFieldStyles();\r\n\r\n        const onRenderOtherField: ICheckboxProps['onRenderLabel'] = checkboxProps => (\r\n            <TextField\r\n                componentRef={otherFieldRef}\r\n                value={checkboxProps?.label ?? ''}\r\n                onChange={onChange && ((_, newValue) => onChange(chosen, newValue))}\r\n                placeholder={showPlaceholder ? otherPlaceholder : undefined}\r\n                readOnly={delegatedProps.readOnly}\r\n                invalid={otherSelected && delegatedProps.invalid}\r\n                className='ms-Checkbox-text'\r\n                styles={otherFieldStyles}\r\n            />\r\n        );\r\n\r\n        return (\r\n            <FocusZone {...delegatedProps} className={containerClassName} role='listbox'>\r\n                {keys.map(key => (\r\n                    <Checkbox\r\n                        key={key}\r\n                        label={key === otherKey ? otherValue : key}\r\n                        checked={key === otherKey ? otherSelected : chosen.includes(key)}\r\n                        onChange={\r\n                            onChange &&\r\n                            ((_, checked) => {\r\n                                if (key === otherKey) {\r\n                                    if (checked) otherFieldRef.current?.focus();\r\n                                    onChange(chosen, checked ? '' : undefined);\r\n                                } else {\r\n                                    // Add or remove the choice from the answer, depending on the checked state.\r\n                                    const newChosen = checked ? [...chosen, key] : chosen.filter(c => c !== key);\r\n                                    onChange(newChosen, otherValue);\r\n                                }\r\n                            })\r\n                        }\r\n                        onRenderLabel={key === otherKey ? onRenderOtherField : undefined}\r\n                        inputProps={{ role: 'option' }}\r\n                        styles={checkboxStyles}\r\n                    />\r\n                ))}\r\n            </FocusZone>\r\n        );\r\n    };\r\n\r\n/**\r\n * The descriptor that renders a group of checkboxes for choice entries with checkbox appearance.\r\n */\r\nexport class CheckboxChoiceDescriptor extends BaseDescriptor<ChoiceEntry> {\r\n    protected readonly FieldComponent;\r\n\r\n    constructor(options?: CheckboxChoiceDescriptorOptions) {\r\n        super();\r\n        this.FieldComponent = makeFieldComponent({ ...defaultOptions, ...options });\r\n    }\r\n\r\n    /**\r\n     * Tests whether the entry is a choice entry with checkbox appearance, and the form is not in viewing mode.\r\n     *\r\n     * @param entry The entry to test.\r\n     * @param context The form context.\r\n     * @returns Passes the test or not.\r\n     */\r\n    test(entry: FormEntry, context: FormContext): entry is ChoiceEntry {\r\n        return (\r\n            entry.question.type === FormQuestionType.Choice &&\r\n            entry.question.appearance === ChoiceAppearance.Checkbox &&\r\n            context.mode !== FormMode.Viewing\r\n        );\r\n    }\r\n}\r\n","import { ITheme, ITeachingBubbleStyles } from '@fluentui/react';\r\nimport { FontSizes } from '../teams-sizes';\r\n\r\nexport function getTeachingBubbleStyles(themeName: string, theme: ITheme): Partial<ITeachingBubbleStyles> {\r\n    return {\r\n        subComponentStyles: {\r\n            callout: {\r\n                root: {\r\n                    maxWidth: '280px',\r\n                    boxShadow: '0px 0px 2px rgba(0, 0, 0, 0.12), 0px 4px 8px rgba(0, 0, 0, 0.14)',\r\n                },\r\n                beak: {\r\n                    background: theme.palette.themePrimary,\r\n                    borderRadius: '3px',\r\n                    width: '12px',\r\n                    height: '12px',\r\n                },\r\n                calloutMain: {\r\n                    background: theme.palette.themePrimary,\r\n                },\r\n            },\r\n        },\r\n        content: {\r\n            backgroundColor: theme.palette.themePrimary,\r\n        },\r\n        headline: {\r\n            fontSize: FontSizes.size18,\r\n            fontWeight: '700',\r\n            lineHeight: FontSizes.size24,\r\n        },\r\n        subText: {\r\n            fontSize: FontSizes.size12,\r\n        },\r\n        closeButton: {\r\n            margin: '14px 18px 0px 0px',\r\n            padding: '0px 0px',\r\n            fontSize: '20px',\r\n            height: '20px',\r\n            width: '20px',\r\n            ' i': {\r\n                fontSize: '19px',\r\n                margin: '0px 0px',\r\n                height: '20px',\r\n                lineHeight: '20px',\r\n            },\r\n        },\r\n        body: {\r\n            ':not(:last-child)': { marginBottom: '0px' },\r\n            lineHeight: FontSizes.size16,\r\n        },\r\n        header: {\r\n            ':not(:last-child)': { marginBottom: '12px' },\r\n        },\r\n        bodyContent: {\r\n            padding: '12px 16px',\r\n            lineHeight: FontSizes.size16,\r\n            fontSize: FontSizes.size12,\r\n            fontWeight: '400',\r\n            whiteSpace: 'pre-wrap',\r\n            background: theme.palette.themePrimary,\r\n        },\r\n        secondaryButton: {\r\n            borderColor: theme.palette.themeTertiary,\r\n            '.ms-Button-label': {\r\n                fontWeight: '500',\r\n            },\r\n        },\r\n        footer: {\r\n            marginTop: '12px',\r\n            flexDirection: 'column',\r\n            alignItems: 'stretch',\r\n            '.ms-StackItem': {\r\n                width: '100%',\r\n            },\r\n            '.ms-Button:not(:first-child)': {\r\n                margin: '0px',\r\n            },\r\n        },\r\n    };\r\n}\r\n","export * from './context';\r\nexport * from './entries';\r\nexport * from './feature';\r\n","import { mergeStyles } from '@fluentui/react';\r\nimport { Editor } from '@tiptap/core';\r\nimport { RichTextFieldTableSize } from '../../types';\r\nimport { Link } from '../InsertLink';\r\n\r\nexport function getCurrentLink(editor: Editor): Link {\r\n    const url = editor.isActive('link') ? editor.getAttributes('link').href : '';\r\n    const selection = editor.state.selection;\r\n    const displayText = editor.state.doc.textBetween(selection.from, selection.to);\r\n    return { url, displayText };\r\n}\r\n\r\nexport const maxTableSize: RichTextFieldTableSize = { rows: 6, cols: 6 };\r\n\r\nexport const menuCalloutClassName = mergeStyles({\r\n    '.ms-Callout-main': {\r\n        padding: 0,\r\n    },\r\n    '.ms-ContextualMenu': {\r\n        minWidth: 0,\r\n        width: 'auto',\r\n    },\r\n});\r\n\r\nexport const colorMenuCalloutClassName = mergeStyles(menuCalloutClassName, {\r\n    '.ms-ContextualMenu-list': {\r\n        display: 'flex',\r\n        flexWrap: 'wrap',\r\n        alignItems: 'center',\r\n        justifyContent: 'center',\r\n        gap: '12px',\r\n        padding: '8px',\r\n    },\r\n});\r\n\r\nexport function hasExtensionByName(editor: Editor, name: string): boolean {\r\n    return editor.extensionManager.extensions.some(extension => extension.name === name);\r\n}\r\n","import {\r\n    ICheckboxStyles,\r\n    IChoiceGroupOptionStyles,\r\n    IChoiceGroupStyles,\r\n    IDatePickerStyles,\r\n    IDropdownStyles,\r\n    ITextFieldStyles,\r\n    IToggleStyles,\r\n} from '@fluentui/react';\r\nimport { FontSizes, isContrastTheme, makeStyles } from '@addressbook/components-fluentui-teams-theme';\r\n\r\nexport const useRichTextFieldStyles = makeStyles({\r\n    root: {\r\n        '--min-height': '160px',\r\n    },\r\n    compact: {\r\n        '--min-height': '120px',\r\n    },\r\n    minHeightConstrained: {\r\n        minHeight: 'var(--min-height)',\r\n    },\r\n});\r\n\r\nexport const useTextFieldStyles = makeStyles<Pick<ITextFieldStyles, 'fieldGroup' | 'field' | 'wrapper'>>(theme => ({\r\n    fieldGroup: {\r\n        '.ms-TextField-wrapper &.ms-TextField-fieldGroup': {\r\n            backgroundColor: isContrastTheme(theme.name) ? theme.palette.white : theme.palette.neutralLighter,\r\n            ':has(input)': {\r\n                height: '32px',\r\n            },\r\n            ':has([aria-invalid=true])': {\r\n                borderWidth: '1px',\r\n                borderStyle: 'solid',\r\n                borderColor: theme.palette.redDark,\r\n            },\r\n            '.is-active &:not(:has([aria-invalid=true]))': {\r\n                borderBottomColor: isContrastTheme(theme.name) ? theme.palette.accent : theme.palette.themePrimary,\r\n            },\r\n        },\r\n    },\r\n    field: {\r\n        '::placeholder': {\r\n            color: isContrastTheme(theme.name) ? theme.palette.black : theme.palette.neutralPrimary,\r\n        },\r\n    },\r\n    wrapper: {\r\n        '.ms-Label': {\r\n            fontSize: `${FontSizes.size14} !important`,\r\n            color: theme.palette.neutralDark,\r\n            fontWeight: 600,\r\n            padding: 0,\r\n            paddingBottom: '4px',\r\n        },\r\n    },\r\n}));\r\n\r\nexport const useCheckboxStyles = makeStyles<Pick<ICheckboxStyles, 'root' | 'checkbox' | 'label' | 'text'>>(theme => ({\r\n    root: {\r\n        '&.ms-Checkbox': {\r\n            padding: 0,\r\n        },\r\n    },\r\n    checkbox: {\r\n        marginInlineEnd: '12px',\r\n        borderColor: theme.palette.neutralDark,\r\n    },\r\n    label: {\r\n        minWidth: 0,\r\n    },\r\n    text: {\r\n        marginInlineStart: 0,\r\n        overflowWrap: 'break-word',\r\n        minWidth: 0,\r\n    },\r\n}));\r\n\r\nexport const useChoiceGroupStyles = makeStyles<Pick<IChoiceGroupStyles, 'flexContainer'>>({\r\n    flexContainer: {\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        gap: '12px',\r\n        paddingInline: '12px',\r\n\r\n        // By default the input stretches to the full width of the container and accepts clicks.\r\n        // We want to prevent that and solely rely on the label for the click.\r\n        '.ms-ChoiceField-input': {\r\n            width: 0,\r\n            height: 0,\r\n        },\r\n    },\r\n});\r\n\r\nexport const useChoiceGroupOptionStyles = makeStyles<\r\n    Pick<IChoiceGroupOptionStyles, 'root' | 'choiceFieldWrapper' | 'field'>\r\n>(theme => ({\r\n    root: {\r\n        margin: 0,\r\n        minHeight: '20px',\r\n    },\r\n    choiceFieldWrapper: {\r\n        minWidth: 0,\r\n    },\r\n    field: {\r\n        '&.ms-ChoiceField-field': {\r\n            display: 'block',\r\n            // Make the radio button centered vertically\r\n            '::before, ::after': {\r\n                top: '50%',\r\n                transform: 'translateY(-50%)',\r\n            },\r\n            '::before': {\r\n                width: '16px',\r\n                height: '16px',\r\n                backgroundColor: 'transparent',\r\n            },\r\n            '::after': {\r\n                insetInlineStart: '3px',\r\n                width: '10px',\r\n                height: '10px',\r\n            },\r\n            ':hover': isContrastTheme(theme.name) && {\r\n                '::before': {\r\n                    borderColor: theme.palette.accent,\r\n                },\r\n                '::after': {\r\n                    border: 'none',\r\n                    backgroundColor: theme.palette.accent,\r\n                },\r\n            },\r\n        },\r\n        '.ms-ChoiceFieldLabel': {\r\n            display: 'block',\r\n            paddingInlineStart: '28px',\r\n            overflowWrap: 'break-word',\r\n        },\r\n    },\r\n}));\r\n\r\nexport const useDropdownStyles = makeStyles<Pick<IDropdownStyles, 'dropdown' | 'title' | 'label'>>(theme => ({\r\n    dropdown: {\r\n        backgroundColor: isContrastTheme(theme.name) ? theme.palette.white : theme.palette.neutralLighter,\r\n        '&.ms-Dropdown[aria-invalid=true]': {\r\n            borderWidth: '1px',\r\n            borderStyle: 'solid',\r\n            borderColor: theme.palette.redDark,\r\n        },\r\n        '&.ms-Dropdown:not([aria-invalid=true])': {\r\n            ':focus, .is-open': {\r\n                borderBottomColor: isContrastTheme(theme.name) ? theme.palette.accent : theme.palette.themePrimary,\r\n            },\r\n        },\r\n    },\r\n    title: {\r\n        '&.ms-Dropdown-titleIsPlaceHolder': {\r\n            color: isContrastTheme(theme.name) ? theme.palette.black : theme.palette.neutralPrimary,\r\n        },\r\n    },\r\n    label: {\r\n        '&.ms-Label': {\r\n            fontSize: FontSizes.size14,\r\n            color: theme.palette.neutralDark,\r\n            fontWeight: 600,\r\n            padding: 0,\r\n            paddingBottom: '4px',\r\n        },\r\n    },\r\n}));\r\n\r\nexport const useOtherFieldStyles = makeStyles<Pick<ITextFieldStyles, 'wrapper' | 'fieldGroup' | 'field'>>(theme => ({\r\n    wrapper: {\r\n        marginInlineStart: '-6px',\r\n    },\r\n    fieldGroup: {\r\n        '.ms-TextField-wrapper &.ms-TextField-fieldGroup': {\r\n            backgroundColor: isContrastTheme(theme.name) ? theme.palette.white : theme.palette.neutralLighter,\r\n            ':has([aria-invalid=true])': {\r\n                borderWidth: '1px',\r\n                borderStyle: 'solid',\r\n                borderColor: theme.palette.redDark,\r\n            },\r\n            '.is-active &:not(:has([aria-invalid=true]))': {\r\n                borderBottomColor: isContrastTheme(theme.name) ? theme.palette.accent : theme.palette.themePrimary,\r\n            },\r\n        },\r\n    },\r\n    field: {\r\n        height: '28px',\r\n        paddingInline: '6px',\r\n        '::placeholder': {\r\n            color: isContrastTheme(theme.name) ? theme.palette.black : theme.palette.neutralPrimary,\r\n        },\r\n    },\r\n}));\r\n\r\nexport const useDatePickerStyles = makeStyles<Pick<IDatePickerStyles, 'statusMessage' | 'textField'>>(theme => ({\r\n    statusMessage: {\r\n        display: 'none',\r\n    },\r\n    textField: {\r\n        '&.ms-TextField .ms-TextField-wrapper .ms-TextField-fieldGroup': {\r\n            backgroundColor: isContrastTheme(theme.name) ? theme.palette.white : theme.palette.neutralLighter,\r\n            ':has([aria-invalid=true])': {\r\n                borderWidth: '1px',\r\n                borderStyle: 'solid',\r\n                borderColor: theme.palette.redDark,\r\n            },\r\n            ':not(:has([aria-invalid=true]))': {\r\n                ':focus, .is-open': {\r\n                    borderBottomColor: isContrastTheme(theme.name) ? theme.palette.accent : theme.palette.themePrimary,\r\n                },\r\n            },\r\n            '.ms-TextField-field::placeholder, .ms-TextField-field span': {\r\n                color: isContrastTheme(theme.name) ? theme.palette.black : theme.palette.neutralPrimary,\r\n            },\r\n        },\r\n    },\r\n}));\r\n\r\nexport const useToggleStyles = makeStyles<Pick<IToggleStyles, 'root' | 'label'>>({\r\n    root: {\r\n        margin: 0,\r\n        gap: '12px',\r\n    },\r\n    label: {\r\n        padding: 0,\r\n        margin: 0,\r\n    },\r\n});\r\n\r\nexport const fieldClassNames = '.ms-TextField-fieldGroup, .ms-Dropdown, .ms-RichTextField';\r\n","import { FormConstants } from '../types';\r\n\r\nexport const defaultFormConstants: FormConstants = {\r\n    maxEntries: Infinity,\r\n    maxTitleLength: Infinity,\r\n    maxSubtitleLength: Infinity,\r\n    initialChoices: 2,\r\n    minChoices: 1,\r\n    maxChoices: Infinity,\r\n    maxChoiceLength: Infinity,\r\n};\r\n","import { makeStyles, FontSizes, isContrastTheme } from '@addressbook/components-fluentui-teams-theme';\r\n\r\nexport const useInsertTableStyles = makeStyles(theme => ({\r\n    root: {\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        gap: '8px',\r\n        padding: '16px',\r\n    },\r\n    header: {\r\n        fontSize: FontSizes.size14,\r\n        fontWeight: 600,\r\n    },\r\n    table: {\r\n        display: 'grid',\r\n        gap: '2px',\r\n    },\r\n    cell: {\r\n        width: '16px',\r\n        height: '16px',\r\n        cursor: 'pointer',\r\n        backgroundColor: 'transparent',\r\n        border: `1px solid ${isContrastTheme(theme.name) ? theme.palette.black : theme.palette.neutralPrimary}`,\r\n    },\r\n    selecting: {\r\n        backgroundColor: theme.palette.themePrimary,\r\n    },\r\n}));\r\n","import React from 'react';\r\nimport { FormFragment } from './FormFragment';\r\nimport { BaseFormContext, BaseFormFeature, FormProps } from './types';\r\n\r\n/**\r\n * A form is responsible for rendering the form entries with the given context and feature.\r\n * It uses the comparator to determine the order of the entries and the key extractor to extract a unique key from each\r\n * entry, and find the appropriate descriptor to render the entries.\r\n */\r\nexport function Form<\r\n    Entry,\r\n    Context extends BaseFormContext<Entry>,\r\n    Feature extends BaseFormFeature<Entry, Context, Feature>\r\n>(props: FormProps<Context, Feature>): JSX.Element | null {\r\n    const { context, feature } = props;\r\n    const { entries } = context;\r\n    const { comparator, keyExtractor, trailingRender } = feature;\r\n\r\n    const sortedIndices = React.useMemo(\r\n        () => Array.from(entries.keys()).sort((i, j) => comparator(entries[i], entries[j])),\r\n        [comparator, entries]\r\n    );\r\n\r\n    return (\r\n        <>\r\n            {sortedIndices.map(index => (\r\n                <FormFragment<Entry, Context, Feature> key={keyExtractor(entries[index])} {...props} index={index} />\r\n            ))}\r\n            {trailingRender(props)}\r\n        </>\r\n    );\r\n}\r\n","import { BaseFormFeature } from '../../abstractions';\r\nimport { FormContext } from './context';\r\nimport { FormEntry, FormQuestion, TextNumberRestrictionType, TextNumberRestrictionValueKey } from './entries';\r\n\r\n/**\r\n * The success type of a validation result.\r\n */\r\nexport interface ValidationSuccess {\r\n    valid: true;\r\n}\r\n\r\n/**\r\n * The failure type of a validation result.\r\n */\r\nexport interface ValidationFailure {\r\n    valid: false;\r\n    errorMessage?: string;\r\n    preventChange?: boolean;\r\n}\r\n\r\n/**\r\n * The result of a validation, which can be either a success or a failure.\r\n */\r\nexport type Validation = ValidationSuccess | ValidationFailure;\r\n\r\n/**\r\n * A validator is a function that validates a form entry.\r\n */\r\nexport interface Validator<Entry> {\r\n    validate(entry: Entry): Validation;\r\n}\r\n\r\n/**\r\n * A sanitizer is a function that sanitizes HTML, to ensure the rich text title or subtitle is safe to render.\r\n *\r\n * @param html The HTML to sanitize.\r\n * @returns The sanitized HTML.\r\n */\r\nexport type Sanitizer = (html: string) => string;\r\n\r\n/**\r\n * An ID generator is a function that generates a unique ID, which is used for form questions.\r\n *\r\n * @returns The generated ID.\r\n */\r\nexport type IdGenerator = () => string;\r\n\r\n/**\r\n * An order generator is a function that generates the order of a form question.\r\n *\r\n * @param prevOrder The order of the previous question. Undefined if the question is the first question.\r\n * @param nextOrder The order of the next question. Undefined if the question is the last question.\r\n * @returns The generated order.\r\n */\r\nexport type OrderGenerator = (prevOrder: number | undefined, nextOrder: number | undefined) => number;\r\n\r\nexport enum QuestionAction {\r\n    Add,\r\n    Copy,\r\n    Delete,\r\n    MoveUp,\r\n    MoveDown,\r\n}\r\n\r\nexport enum QuestionDisplayType {\r\n    ShortText,\r\n    MultilineText,\r\n    RichText,\r\n    Number,\r\n    MultipleChoice,\r\n    SingleChoice,\r\n    Dropdown,\r\n    Date,\r\n}\r\n\r\nexport enum ChoiceAction {\r\n    Add,\r\n    AddOther,\r\n    Delete,\r\n    MoveUp,\r\n    MoveDown,\r\n}\r\n\r\n/**\r\n * The strings used in the form, to localize the form.\r\n */\r\nexport interface FormStrings {\r\n    questionHint: (question: FormQuestion, active: boolean) => string;\r\n    questionAction: (action: QuestionAction) => string;\r\n    questionMockedFieldDefaultPlaceholder: (type: QuestionDisplayType) => string;\r\n    questionDisplayTypeOption: (type: QuestionDisplayType) => string;\r\n    questionNewTitle: string;\r\n    questionTitle: string;\r\n    questionSubtitle: string;\r\n    questionRequired: string;\r\n    questionRestriction: string;\r\n    questionShuffle: string;\r\n    choiceAction: (action: ChoiceAction) => string;\r\n    choiceNew: (index: number) => string;\r\n    choiceOther: string;\r\n    choicePlaceholder: string;\r\n    restrictionOption: (type: TextNumberRestrictionType) => string;\r\n    restrictionValuePlaceholder: (key: TextNumberRestrictionValueKey) => string;\r\n}\r\n\r\n/**\r\n * The constants used in the form, which define limits or behaviors of the form.\r\n */\r\nexport interface FormConstants {\r\n    maxEntries: number;\r\n    maxTitleLength: number;\r\n    maxSubtitleLength: number;\r\n    initialChoices: number;\r\n    minChoices: number;\r\n    maxChoices: number;\r\n    maxChoiceLength: number;\r\n}\r\n\r\n/**\r\n * The feature of a form, which is immutable during the lifecycle of the form.\r\n */\r\nexport interface FormFeature extends BaseFormFeature<FormEntry, FormContext, FormFeature> {\r\n    validators: Validator<FormEntry>[];\r\n    sanitizer: Sanitizer;\r\n    idGenerator: IdGenerator;\r\n    orderGenerator: OrderGenerator;\r\n    constants: FormConstants;\r\n    strings: FormStrings;\r\n}\r\n","import { ITextFieldProps, TextField } from '@fluentui/react';\r\nimport { parseFloatStrictly } from '@addressbook/utilities-core';\r\nimport React from 'react';\r\n\r\nexport interface DecimalTextFieldProps\r\n    extends Omit<ITextFieldProps, 'componentRef' | 'value' | 'onChange' | 'inputMode'> {\r\n    value: number;\r\n    onChange: (value: number) => void;\r\n}\r\n\r\n/**\r\n * A text field that only accepts decimal numbers.\r\n */\r\nexport const DecimalTextField: React.FC<DecimalTextFieldProps> = ({ value, onChange, invalid, ...props }) => {\r\n    const [pendingValue, setPendingValue] = React.useState<string>(() => String(value));\r\n    const pendingValueRef = React.useRef(pendingValue);\r\n    pendingValueRef.current = pendingValue;\r\n\r\n    const onChangeRef = React.useRef(onChange);\r\n    onChangeRef.current = onChange;\r\n\r\n    const committedValueRef = React.useRef(value);\r\n    const commit = React.useCallback((pendingValue: string) => {\r\n        const parsedValue = parseFloatStrictly(pendingValue);\r\n        if (isNaN(parsedValue)) return;\r\n        onChangeRef.current(parsedValue);\r\n        committedValueRef.current = parsedValue;\r\n    }, []);\r\n\r\n    React.useEffect(() => {\r\n        if (value === committedValueRef.current) return;\r\n        setPendingValue(String(value));\r\n    }, [value]);\r\n\r\n    const synchronize = React.useCallback((value: number) => {\r\n        const stringValue = String(value);\r\n        if (pendingValueRef.current === stringValue) return;\r\n        setPendingValue(String(value));\r\n    }, []);\r\n\r\n    return (\r\n        <TextField\r\n            {...props}\r\n            value={pendingValue}\r\n            onChange={(_, newValue = '') => {\r\n                setPendingValue(newValue);\r\n                commit(newValue);\r\n            }}\r\n            onBlur={() => synchronize(value)}\r\n            invalid={invalid || isNaN(parseFloatStrictly(pendingValue))}\r\n            inputMode='decimal'\r\n        />\r\n    );\r\n};\r\n","import { Extensions } from '@tiptap/core';\r\nimport React from 'react';\r\nimport { RichTextFieldStrings, RichTextFileStorageService } from '../../types';\r\nimport { RichTextFieldRibbonCallbacks } from '../RichTextRibbon';\r\n\r\nexport enum RibbonPosition {\r\n    None,\r\n    Top,\r\n    Bottom,\r\n}\r\n\r\nexport type RichTextFieldCallbacks = RichTextFieldRibbonCallbacks;\r\n\r\nexport interface RichTextFieldProps extends Omit<React.HTMLAttributes<HTMLDivElement>, 'onChange'> {\r\n    value: string;\r\n    onChange?: (value: string) => void;\r\n    errorMessage?: string;\r\n    label?: string;\r\n    description?: string;\r\n    required?: boolean;\r\n    placeholder?: string;\r\n    prefix?: string;\r\n    readOnly?: boolean;\r\n    invalid?: boolean;\r\n    compact?: boolean;\r\n    ribbonPosition?: RibbonPosition;\r\n    focusable?: boolean;\r\n    callbacks?: RichTextFieldCallbacks;\r\n    fileStorageService?: RichTextFileStorageService;\r\n    additionalExtensions?: Extensions;\r\n    strings?: Partial<RichTextFieldStrings>;\r\n    rootClassName?: string;\r\n    containerClassName?: string;\r\n}\r\n","/* istanbul ignore file */\r\n\r\nimport { IDropdownStyleProps, IDropdownStyles, ITheme } from '@fluentui/react';\r\nimport { ContrastColors, CoreColors, DarkColors } from '../teams-colors';\r\nimport { isContrastTheme, isDarkTheme } from '../teams-theme';\r\nimport { teamsBorderRadius } from './constants';\r\n\r\nexport function getDropdownStyles(themeName: string, _theme: ITheme, background?: string) {\r\n    return (props: IDropdownStyleProps): Partial<IDropdownStyles> => {\r\n        const { theme, disabled, isOpen, hasError, isRenderingPlaceholder } = props;\r\n        if (!theme) {\r\n            throw new Error('theme is undefined or null in base Dropdown getStyles function.');\r\n        }\r\n        const { palette } = theme;\r\n\r\n        let ROOT_BACKGROUND_COLOR = theme.palette.neutralLight;\r\n        let FIELD_GROUP_OPACITY = 0.36;\r\n\r\n        const TEXT_COLOR = theme.palette.black;\r\n        let HOVER_COLOR = theme.palette.black;\r\n        let HOVER_BACKGROUND_COLOR = theme.palette.neutralLight;\r\n        let FOCUS_BACKGROUND_COLOR = theme.palette.neutralTertiaryAlt;\r\n\r\n        const DROPDOWN_ITEM_COLOR = theme.palette.neutralDark;\r\n        let DROPDOWN_ITEM_SELECTED_BACKGROUND_COLOR = theme.palette.neutralQuaternary;\r\n        let DROPDOWN_ITEM_SELECTED_HOVER_BACKGROUND_COLOR = theme.palette.neutralTertiaryAlt;\r\n\r\n        let DROPDOWN_ITEM_SELECTED_HOVER_TEXT_COLOR = theme.palette.black;\r\n\r\n        let FIELD_GROUP_BORDER_WIDTH = '0 0 2px 0';\r\n        let FIELD_GROUP_BORDER_COLOR = 'transparent';\r\n        let CALLOUT_BORDER_COLOR = CoreColors.appBlackAlpha10;\r\n\r\n        let FIELD_GROUP_BORDER_WIDTH_ACTIVE = FIELD_GROUP_BORDER_WIDTH;\r\n        let FIELD_GROUP_BORDER_BOTTOM_COLOR_ACTIVE = theme.palette.themePrimary;\r\n\r\n        let FIELD_GROUP_BORDER_COLOR_DISABLED = 'transparent';\r\n        let FIELD_COLOR_PLACEHOLDER_DISABLED = theme.palette.neutralDark;\r\n\r\n        let FOCUS_VISIBLE_BORDER = theme.palette.white;\r\n        let FOCUS_VISIBLE_OUTLINE = `1px solid ${theme.palette.black}`;\r\n        let FOCUS_VISIBLE_BACKGROUND_COLOR = 'transparent';\r\n\r\n        let ERROR_BORDER_COLOR = CoreColors.appRed;\r\n\r\n        if (isDarkTheme(themeName)) {\r\n            ROOT_BACKGROUND_COLOR = theme.palette.white;\r\n            CALLOUT_BORDER_COLOR = palette.white;\r\n\r\n            HOVER_COLOR = theme.palette.black;\r\n            HOVER_BACKGROUND_COLOR = theme.palette.neutralQuaternary;\r\n            FOCUS_BACKGROUND_COLOR = theme.palette.neutralTertiary;\r\n\r\n            DROPDOWN_ITEM_SELECTED_BACKGROUND_COLOR = theme.palette.neutralTertiaryAlt;\r\n            DROPDOWN_ITEM_SELECTED_HOVER_BACKGROUND_COLOR = theme.palette.neutralTertiary;\r\n\r\n            FIELD_COLOR_PLACEHOLDER_DISABLED = theme.palette.neutralPrimary;\r\n\r\n            ERROR_BORDER_COLOR = DarkColors.appRed;\r\n        }\r\n\r\n        if (isContrastTheme(themeName)) {\r\n            ROOT_BACKGROUND_COLOR = theme.palette.white;\r\n            FIELD_GROUP_OPACITY = 1;\r\n\r\n            HOVER_COLOR = theme.palette.white;\r\n            HOVER_BACKGROUND_COLOR = theme.palette.themeDark;\r\n            FOCUS_BACKGROUND_COLOR = theme.palette.themeDark;\r\n\r\n            DROPDOWN_ITEM_SELECTED_BACKGROUND_COLOR = theme.palette.themePrimary;\r\n            DROPDOWN_ITEM_SELECTED_HOVER_BACKGROUND_COLOR = theme.palette.themeDark;\r\n\r\n            DROPDOWN_ITEM_SELECTED_HOVER_TEXT_COLOR = theme.palette.themeDarker;\r\n\r\n            FIELD_GROUP_BORDER_COLOR = theme.palette.black;\r\n            FIELD_GROUP_BORDER_WIDTH = '1px 1px 1px 1px';\r\n            CALLOUT_BORDER_COLOR = palette.black;\r\n\r\n            FIELD_GROUP_BORDER_WIDTH_ACTIVE = '1px 1px 2px 1px';\r\n            FIELD_GROUP_BORDER_BOTTOM_COLOR_ACTIVE = theme.palette.themeDark;\r\n\r\n            FIELD_GROUP_BORDER_COLOR_DISABLED = ContrastColors.appGreenContrast;\r\n            FIELD_COLOR_PLACEHOLDER_DISABLED = ContrastColors.appGreenContrast;\r\n\r\n            ERROR_BORDER_COLOR = theme.palette.black;\r\n\r\n            FOCUS_VISIBLE_BORDER = 'transparent';\r\n            FOCUS_VISIBLE_OUTLINE = 'none';\r\n            FOCUS_VISIBLE_BACKGROUND_COLOR = theme.palette.themeDark;\r\n        }\r\n\r\n        // If this combobox is on gray background\r\n        if (background === 'gray') {\r\n            ROOT_BACKGROUND_COLOR = theme.palette.white;\r\n        }\r\n\r\n        const isActive = {\r\n            borderWidth: FIELD_GROUP_BORDER_WIDTH_ACTIVE,\r\n            borderColor: FIELD_GROUP_BORDER_COLOR,\r\n            borderBottomColor: FIELD_GROUP_BORDER_BOTTOM_COLOR_ACTIVE,\r\n            borderBottomRightRadius: teamsBorderRadius,\r\n            borderBottomLeftRadius: teamsBorderRadius,\r\n        };\r\n\r\n        const isFocusVisible = {\r\n            '.ms-Fabric--isFocusVisible &': {\r\n                selectors: {\r\n                    ':focus': {\r\n                        backgroundColor: FOCUS_VISIBLE_BACKGROUND_COLOR,\r\n                        selectors: {\r\n                            ':after': {\r\n                                backgroundColor: 'transparent',\r\n                                borderColor: FOCUS_VISIBLE_BORDER,\r\n                                outline: FOCUS_VISIBLE_OUTLINE,\r\n                            },\r\n                        },\r\n                    },\r\n                    ':focus:hover': {\r\n                        backgroundColor: FOCUS_VISIBLE_BACKGROUND_COLOR,\r\n                    },\r\n                },\r\n            },\r\n        };\r\n\r\n        const commonStyles = {\r\n            selectors: {\r\n                '.ms-Dropdown-titleIsPlaceHolder': {\r\n                    color: TEXT_COLOR,\r\n                },\r\n                '.ms-Dropdown-title': {\r\n                    color: TEXT_COLOR,\r\n                },\r\n                '.ms-Dropdown-caretDown': {\r\n                    color: TEXT_COLOR,\r\n                },\r\n            },\r\n        };\r\n\r\n        const styles = {\r\n            callout: {\r\n                border: `1px solid ${CALLOUT_BORDER_COLOR}`,\r\n                selectors: {\r\n                    '.ms-Callout-main': {\r\n                        paddingTop: '8px',\r\n                        paddingBottom: '8px',\r\n                    },\r\n                },\r\n            },\r\n            title: [\r\n                {\r\n                    paddingLeft: '12px',\r\n                    paddingRight: '32px',\r\n                    color: TEXT_COLOR,\r\n                    minWidth: 'auto',\r\n                    border: 'none',\r\n                    height: 30,\r\n                    backgroundColor: 'transparent',\r\n                },\r\n                isRenderingPlaceholder && {\r\n                    color: TEXT_COLOR,\r\n                },\r\n                disabled && {\r\n                    color: FIELD_COLOR_PLACEHOLDER_DISABLED,\r\n                },\r\n            ],\r\n            dropdownItemHeader: {\r\n                padding: '0 8px',\r\n                color: theme.palette.neutralDark,\r\n            },\r\n            dropdownDivider: {\r\n                margin: '4px 0',\r\n                height: '2px',\r\n                backgroundColor: theme.palette.neutralLight,\r\n                border: 'none',\r\n            },\r\n            dropdown: [\r\n                {\r\n                    borderRadius: teamsBorderRadius,\r\n                    borderWidth: FIELD_GROUP_BORDER_WIDTH,\r\n                    borderStyle: 'solid',\r\n                    borderColor: FIELD_GROUP_BORDER_COLOR,\r\n                    backgroundColor: ROOT_BACKGROUND_COLOR,\r\n                    height: 32,\r\n                    boxSizing: 'border-box',\r\n                    color: TEXT_COLOR,\r\n                    selectors: {\r\n                        '::after': {\r\n                            display: 'none',\r\n                        },\r\n                    },\r\n                },\r\n                !disabled && {\r\n                    selectors: {\r\n                        ':hover': {\r\n                            ...commonStyles,\r\n                        },\r\n                        ':active': {\r\n                            ...commonStyles,\r\n                        },\r\n                        ':focus': {\r\n                            ...commonStyles,\r\n                        },\r\n                    },\r\n                },\r\n                isOpen &&\r\n                    !disabled &&\r\n                    !hasError && {\r\n                        ...isActive,\r\n                    },\r\n                !disabled &&\r\n                    !hasError && {\r\n                        selectors: {\r\n                            '.ms-Fabric--isFocusVisible &': {\r\n                                selectors: {\r\n                                    ':focus': {\r\n                                        ...isActive,\r\n                                    },\r\n                                },\r\n                            },\r\n                        },\r\n                    },\r\n                disabled && {\r\n                    opacity: FIELD_GROUP_OPACITY,\r\n                    borderColor: FIELD_GROUP_BORDER_COLOR_DISABLED,\r\n                },\r\n                hasError && {\r\n                    borderColor: ERROR_BORDER_COLOR,\r\n                    borderBottomRightRadius: teamsBorderRadius,\r\n                    borderBottomLeftRadius: teamsBorderRadius,\r\n                    borderWidth: FIELD_GROUP_BORDER_WIDTH,\r\n                },\r\n            ],\r\n            caretDownWrapper: {\r\n                height: 30,\r\n                right: '12px',\r\n                display: 'flex',\r\n                // alignItems: 'center',\r\n            },\r\n            caretDown: [\r\n                {\r\n                    color: TEXT_COLOR,\r\n                },\r\n                disabled && {\r\n                    color: FIELD_COLOR_PLACEHOLDER_DISABLED,\r\n                },\r\n            ],\r\n            dropdownItemDisabled: {\r\n                color: FIELD_COLOR_PLACEHOLDER_DISABLED,\r\n                opacity: FIELD_GROUP_OPACITY,\r\n            },\r\n            dropdownItems: {\r\n                selectors: {\r\n                    '.ms-Checkbox': {\r\n                        selectors: {\r\n                            '& .is-checked': {\r\n                                backgroundColor: 'transparent',\r\n                            },\r\n                            ':hover': {\r\n                                backgroundColor: HOVER_BACKGROUND_COLOR,\r\n                            },\r\n                        },\r\n                    },\r\n                },\r\n            },\r\n            dropdownItem: [\r\n                {\r\n                    color: DROPDOWN_ITEM_COLOR,\r\n                    padding: '4px 16px',\r\n                    minHeight: '32px',\r\n                    height: '32px',\r\n                    selectors: {\r\n                        ':hover': {\r\n                            color: HOVER_COLOR,\r\n                            backgroundColor: HOVER_BACKGROUND_COLOR,\r\n                        },\r\n                        ':focus': {\r\n                            color: HOVER_COLOR,\r\n                            backgroundColor: DROPDOWN_ITEM_SELECTED_BACKGROUND_COLOR,\r\n                        },\r\n                        ':active': {\r\n                            color: HOVER_COLOR,\r\n                            backgroundColor: FOCUS_BACKGROUND_COLOR,\r\n                        },\r\n                        ':hover:focus': {\r\n                            color: HOVER_COLOR,\r\n                            backgroundColor: HOVER_BACKGROUND_COLOR,\r\n                        },\r\n                        ':active:hover': {\r\n                            color: HOVER_COLOR,\r\n                            backgroundColor: FOCUS_BACKGROUND_COLOR,\r\n                        },\r\n                        ...isFocusVisible,\r\n                    },\r\n                },\r\n            ],\r\n            dropdownItemSelected: {\r\n                backgroundColor: DROPDOWN_ITEM_SELECTED_BACKGROUND_COLOR,\r\n                color: HOVER_COLOR,\r\n                padding: '4px 16px',\r\n                minHeight: '3.2px',\r\n                height: '32px',\r\n                selectors: {\r\n                    ...isFocusVisible,\r\n                    ':focus': {\r\n                        backgroundColor: DROPDOWN_ITEM_SELECTED_BACKGROUND_COLOR,\r\n                    },\r\n                    ':hover': {\r\n                        color: HOVER_COLOR,\r\n                        backgroundColor: DROPDOWN_ITEM_SELECTED_HOVER_BACKGROUND_COLOR,\r\n                    },\r\n                    ':focus:hover': {\r\n                        color: HOVER_COLOR,\r\n                        backgroundColor: DROPDOWN_ITEM_SELECTED_HOVER_BACKGROUND_COLOR,\r\n                    },\r\n                    ':hover .ms-Dropdown-optionText': {\r\n                        color: DROPDOWN_ITEM_SELECTED_HOVER_TEXT_COLOR,\r\n                    },\r\n                },\r\n            },\r\n        } as Partial<IDropdownStyles>;\r\n\r\n        return styles;\r\n    };\r\n}\r\n","/* istanbul ignore file */\r\n\r\nimport { IButtonStyles, ITheme, IRawStyle } from '@fluentui/react';\r\nimport { ShadowLevels } from '../teams-shadow-levels';\r\nimport { ContrastColors } from '../teams-colors';\r\nimport { FontSizes } from '../teams-sizes';\r\nimport { isContrastTheme, isDarkTheme } from '../teams-theme';\r\nimport { teamsBorderRadius } from './constants';\r\n\r\nexport function getCompoundButtonStyles(themeName: string, theme: ITheme): Partial<IButtonStyles> {\r\n    const buttonBorderRadius = teamsBorderRadius;\r\n    const rootPrimaryShadow = ShadowLevels.shadowLevel1Dark;\r\n\r\n    // SVG\r\n    let svgFillColor = theme.palette.white;\r\n    let svgBackgroundColor = theme.palette.themePrimary;\r\n    let svgFillColorPrimary = theme.palette.themePrimary;\r\n    const rootSvgBackgroundColor = theme.palette.white;\r\n    let rootHoveredSvgFillColor = theme.palette.white;\r\n    let rootHoveredSvgBackgroundColor = theme.palette.themePrimary;\r\n    let rootHoveredSvgFillColorPrimary = theme.palette.themePrimary;\r\n    let rootDisabledSvgBackgroundColor = theme.palette.neutralTertiary;\r\n    let rootDisabledSvgFillColorPrimary = theme.palette.neutralQuaternary;\r\n\r\n    // Root\r\n    let rootBackgroundColor = theme.palette.white;\r\n    let rootShadow = ShadowLevels.shadowLevel1;\r\n    let rootBorderColor = theme.palette.neutralTertiaryAlt;\r\n    let rootBorderWidth = '1px';\r\n\r\n    // Root Hovered\r\n    let rootHoveredBackgroundColor = theme.palette.neutralQuaternary;\r\n    let rootHoveredBorderColor = theme.palette.neutralTertiary;\r\n    let rootHoveredColor = theme.palette.black;\r\n\r\n    // Root Pressed\r\n    let rootPressedBackgroundColor = theme.palette.neutralTertiaryAlt;\r\n    let rootPressedBorderColor = theme.palette.neutralTertiary;\r\n    let rootPressedColor = theme.palette.black;\r\n\r\n    // Root Disabled\r\n    let rootDisabledBackgroundColor = theme.palette.neutralQuaternary;\r\n    let rootDisabledColor = theme.palette.neutralTertiary;\r\n    let rootDisabledBorderColor = 'transparent';\r\n\r\n    // Root Checked\r\n    let rootCheckedBorderColor = theme.palette.neutralTertiary;\r\n    let rootCheckedColor = theme.palette.black;\r\n\r\n    // Root Primary\r\n    let rootBackgroundColorPrimary = theme.palette.themePrimary;\r\n    let rootBorderColorPrimary = theme.palette.themePrimary;\r\n    let rootColorPrimary = theme.palette.white;\r\n\r\n    // Root Hovered Primary\r\n    let rootHoveredBackgroundColorPrimary = theme.palette.themeDark;\r\n    let rootHoveredBorderColorPrimary = theme.palette.themeDark;\r\n    let rootHoveredColorPrimary = theme.palette.white;\r\n\r\n    // Root Pressed Primary\r\n    let rootPressedBackgroundColorPrimary = theme.palette.themeDarker;\r\n    let rootPressedBorderColorPrimary = theme.palette.themeDarker;\r\n    let rootPressedColorPrimary = theme.palette.white;\r\n\r\n    // Root Disabled Primary\r\n    let rootDisabledBackgroundColorPrimary = theme.palette.neutralQuaternary;\r\n    let rootDisabledBorderColorPrimary = theme.palette.neutralQuaternary;\r\n    let rootDisabledColorPrimary = theme.palette.neutralTertiary;\r\n\r\n    // Root Checked Primary\r\n    let rootCheckedBackgroundColorPrimary = theme.palette.themeDarker;\r\n    let rootCheckedBorderColorPrimary = theme.palette.themeDarker;\r\n    let rootCheckedColorPrimary = theme.palette.white;\r\n\r\n    // Root Checked Hovered Primary\r\n    let rootCheckedHoveredBackgroundColorPrimary = theme.palette.themeDark;\r\n    let rootCheckedHoveredBorderColorPrimary = theme.palette.themeDark;\r\n    let rootCheckedHoveredColorPrimary = theme.palette.white;\r\n\r\n    // Conditional only for contrast theme\r\n    let isFocusVisibleSVG = {};\r\n\r\n    if (isDarkTheme(themeName)) {\r\n        // Root\r\n        rootBackgroundColor = theme.palette.neutralLight;\r\n        rootShadow = ShadowLevels.shadowLevel1Dark;\r\n        rootBorderColor = theme.palette.neutralTertiary;\r\n\r\n        // Root Primary\r\n        rootBackgroundColorPrimary = theme.palette.themeTertiary;\r\n        rootBorderColorPrimary = theme.palette.themeTertiary;\r\n        rootColorPrimary = theme.palette.black;\r\n\r\n        // Root Hovered Primary\r\n        rootHoveredBackgroundColorPrimary = theme.palette.themeSecondary;\r\n        rootHoveredBorderColorPrimary = theme.palette.themeSecondary;\r\n        rootHoveredColorPrimary = theme.palette.black;\r\n\r\n        // Root Pressed Primary\r\n        rootPressedBackgroundColorPrimary = theme.palette.themeLight;\r\n        rootPressedBorderColorPrimary = theme.palette.themeLight;\r\n        rootPressedColorPrimary = theme.palette.black;\r\n\r\n        // Root Checked Primary\r\n        rootCheckedBackgroundColorPrimary = theme.palette.themeLight;\r\n        rootCheckedBorderColorPrimary = theme.palette.themeLight;\r\n        rootCheckedColorPrimary = theme.palette.black;\r\n\r\n        // Root Checked Hovered Primary\r\n        rootCheckedHoveredBackgroundColorPrimary = theme.palette.themeSecondary;\r\n        rootCheckedHoveredBorderColorPrimary = theme.palette.themeSecondary;\r\n        rootCheckedHoveredColorPrimary = theme.palette.black;\r\n    }\r\n\r\n    if (isContrastTheme(themeName)) {\r\n        // SVG\r\n        svgFillColor = theme.palette.white;\r\n        svgFillColorPrimary = theme.palette.black;\r\n        svgBackgroundColor = theme.palette.black;\r\n        rootHoveredSvgFillColor = theme.palette.black;\r\n        rootHoveredSvgBackgroundColor = theme.palette.white;\r\n        rootHoveredSvgFillColorPrimary = theme.palette.black;\r\n        rootDisabledSvgBackgroundColor = ContrastColors.appGreenContrast;\r\n        rootDisabledSvgFillColorPrimary = ContrastColors.appGreenContrast;\r\n\r\n        // Root\r\n        rootBorderWidth = '2px';\r\n\r\n        // Root Hovered\r\n        rootHoveredBackgroundColor = theme.palette.themeDark;\r\n        rootHoveredBorderColor = theme.palette.themeDark;\r\n        rootHoveredColor = theme.palette.white;\r\n\r\n        // Root Pressed\r\n        rootPressedBackgroundColor = theme.palette.themeDark;\r\n        rootPressedBorderColor = theme.palette.themeDark;\r\n        rootPressedColor = theme.palette.white;\r\n\r\n        // Root Disabled\r\n        rootDisabledBackgroundColor = theme.palette.white;\r\n        rootDisabledBorderColor = ContrastColors.appGreenContrast;\r\n        rootDisabledColor = ContrastColors.appGreenContrast;\r\n\r\n        // Root Checked\r\n        rootCheckedBorderColor = theme.palette.black;\r\n        rootCheckedColor = theme.palette.white;\r\n\r\n        // Root Primary\r\n        rootColorPrimary = theme.palette.white;\r\n        rootBackgroundColorPrimary = theme.palette.black;\r\n        rootBorderColorPrimary = theme.palette.black;\r\n\r\n        // Root Hovered Primary\r\n        rootHoveredBackgroundColorPrimary = theme.palette.themeDark;\r\n        rootHoveredBorderColorPrimary = theme.palette.themeDark;\r\n\r\n        // Root Pressed Primary\r\n        rootPressedBackgroundColorPrimary = theme.palette.themeDark;\r\n        rootPressedBorderColorPrimary = theme.palette.themeDark;\r\n\r\n        // Root Disabled Primary\r\n        rootDisabledBackgroundColorPrimary = ContrastColors.appGreenContrast;\r\n        rootDisabledBorderColorPrimary = ContrastColors.appGreenContrast;\r\n        rootDisabledColorPrimary = theme.palette.white;\r\n\r\n        // Root Checked Primary\r\n        rootCheckedBackgroundColorPrimary = theme.palette.themePrimary;\r\n        rootCheckedBorderColorPrimary = theme.palette.themePrimary;\r\n\r\n        // Root Checked Hovered Primary\r\n        rootCheckedBackgroundColorPrimary = theme.palette.themeDark;\r\n        rootCheckedBorderColorPrimary = theme.palette.themeDark;\r\n\r\n        isFocusVisibleSVG = {\r\n            selectors: {\r\n                svg: {\r\n                    background: theme.palette.white,\r\n                    fill: theme.palette.black,\r\n                },\r\n            },\r\n        };\r\n    }\r\n\r\n    const styles = {\r\n        root: {\r\n            borderRadius: buttonBorderRadius,\r\n            boxShadow: rootShadow,\r\n            backgroundColor: rootBackgroundColor,\r\n            borderColor: rootBorderColor,\r\n            borderWidth: rootBorderWidth,\r\n            color: theme.palette.black,\r\n            minHeight: 'auto',\r\n            padding: '12px',\r\n            selectors: {\r\n                '.ms-Button-icon': {\r\n                    color: 'inherit',\r\n                },\r\n                '.icons-default-fill': {\r\n                    fill: 'inherit',\r\n                },\r\n                svg: {\r\n                    width: '32px',\r\n                    height: '32px',\r\n                    padding: '6px',\r\n                    display: 'block',\r\n                    boxSizing: 'content-box',\r\n                    borderRadius: teamsBorderRadius,\r\n                    fill: svgFillColor,\r\n                    background: svgBackgroundColor,\r\n                },\r\n                '.icons-unfilled': {\r\n                    display: 'none',\r\n                },\r\n                '.icons-filled': {\r\n                    display: 'block',\r\n                },\r\n                '.ms-Fabric--isFocusVisible &': {\r\n                    selectors: {\r\n                        ':focus::after': {\r\n                            outline: 'none',\r\n                            borderRadius: buttonBorderRadius,\r\n                            borderColor: theme.palette.white,\r\n                            borderWidth: '1px',\r\n                            borderStyle: 'solid',\r\n                            top: 0,\r\n                            bottom: 0,\r\n                            left: 0,\r\n                            right: 0,\r\n                        },\r\n                        ':focus': {\r\n                            borderColor: theme.palette.black,\r\n                            ...isFocusVisibleSVG,\r\n                        },\r\n                    },\r\n                },\r\n                '&.ms-Button--compoundPrimary': {\r\n                    backgroundColor: rootBackgroundColorPrimary,\r\n                    borderColor: rootBorderColorPrimary,\r\n                    boxShadow: rootPrimaryShadow,\r\n                    color: rootColorPrimary,\r\n                    selectors: {\r\n                        svg: {\r\n                            fill: svgFillColorPrimary,\r\n                            background: rootSvgBackgroundColor,\r\n                        },\r\n                    },\r\n                },\r\n                '.ms-Button-description': {\r\n                    color: 'inherit !important', // important needed to override fabric color style\r\n                },\r\n            },\r\n        },\r\n        rootHovered: {\r\n            selectors: {\r\n                '&.ms-Button--compound:hover': {\r\n                    backgroundColor: rootHoveredBackgroundColor,\r\n                    borderColor: rootHoveredBorderColor,\r\n                    color: rootHoveredColor,\r\n                    selectors: {\r\n                        svg: {\r\n                            fill: rootHoveredSvgFillColor,\r\n                            background: rootHoveredSvgBackgroundColor,\r\n                        },\r\n                    },\r\n                },\r\n                '&.ms-Button--compoundPrimary:hover': {\r\n                    backgroundColor: rootHoveredBackgroundColorPrimary,\r\n                    borderColor: rootHoveredBorderColorPrimary,\r\n                    color: rootHoveredColorPrimary,\r\n                    selectors: {\r\n                        svg: {\r\n                            fill: rootHoveredSvgFillColorPrimary,\r\n                        },\r\n                    },\r\n                },\r\n            },\r\n        },\r\n        rootPressed: {\r\n            boxShadow: 'none',\r\n            selectors: {\r\n                '&.ms-Button--compound:active': {\r\n                    backgroundColor: rootPressedBackgroundColor,\r\n                    borderColor: rootPressedBorderColor,\r\n                    color: rootPressedColor,\r\n                    selectors: {\r\n                        svg: {\r\n                            fill: rootHoveredSvgFillColor,\r\n                            background: rootHoveredSvgBackgroundColor,\r\n                        },\r\n                    },\r\n                },\r\n                '&.ms-Button--compoundPrimary:active': {\r\n                    backgroundColor: rootPressedBackgroundColorPrimary,\r\n                    borderColor: rootPressedBorderColorPrimary,\r\n                    color: rootPressedColorPrimary,\r\n                    selectors: {\r\n                        svg: {\r\n                            fill: rootHoveredSvgFillColorPrimary,\r\n                        },\r\n                    },\r\n                },\r\n            },\r\n        },\r\n        rootDisabled: {\r\n            backgroundColor: rootDisabledBackgroundColor,\r\n            color: rootDisabledColor,\r\n            borderColor: rootDisabledBorderColor,\r\n            boxShadow: 'none',\r\n            selectors: {\r\n                svg: {\r\n                    fill: theme.palette.neutralQuaternary,\r\n                    background: rootDisabledSvgBackgroundColor,\r\n                },\r\n                '&.ms-Button--compoundPrimary.is-disabled': {\r\n                    backgroundColor: rootDisabledBackgroundColorPrimary,\r\n                    borderColor: rootDisabledBorderColorPrimary,\r\n                    color: rootDisabledColorPrimary,\r\n                    boxShadow: 'none',\r\n                    selectors: {\r\n                        svg: {\r\n                            fill: rootDisabledSvgFillColorPrimary,\r\n                            background: theme.palette.neutralTertiary,\r\n                        },\r\n                    },\r\n                },\r\n            },\r\n        },\r\n        rootChecked: {\r\n            backgroundColor: theme.palette.neutralTertiaryAlt,\r\n            borderColor: rootCheckedBorderColor,\r\n            color: rootCheckedColor,\r\n            selectors: {\r\n                '&.ms-Button--compoundPrimary.is-checked': {\r\n                    backgroundColor: rootCheckedBackgroundColorPrimary,\r\n                    borderColor: rootCheckedBorderColorPrimary,\r\n                    color: rootCheckedColorPrimary,\r\n                },\r\n            },\r\n        },\r\n        rootCheckedHovered: {\r\n            selectors: {\r\n                '&.ms-Button--compoundPrimary.is-checked:hover': {\r\n                    backgroundColor: rootCheckedHoveredBackgroundColorPrimary,\r\n                    borderColor: rootCheckedHoveredBorderColorPrimary,\r\n                    color: rootCheckedHoveredColorPrimary,\r\n                },\r\n            },\r\n        },\r\n        rootCheckedDisabled: {\r\n            backgroundColor: rootDisabledBackgroundColor,\r\n            color: rootDisabledColor,\r\n            borderColor: rootDisabledBorderColor,\r\n            boxShadow: 'none',\r\n\r\n            selectors: {\r\n                '&.ms-Button--compoundPrimary.is-checked.is-disabled': {\r\n                    backgroundColor: rootDisabledBackgroundColorPrimary,\r\n                    borderColor: rootDisabledBorderColorPrimary,\r\n                    color: rootDisabledColorPrimary,\r\n                    boxShadow: 'none',\r\n                },\r\n            },\r\n        },\r\n        flexContainer: {\r\n            alignItems: 'center',\r\n        },\r\n        textContainer: {\r\n            flexShrink: '1',\r\n        },\r\n        icon: {\r\n            width: 'auto',\r\n            height: 'auto',\r\n            marginRight: '12px',\r\n        },\r\n        description: {\r\n            color: 'inherit',\r\n            fontSize: FontSizes.size14,\r\n            opacity: 0.84,\r\n        },\r\n    } as Partial<IButtonStyles>;\r\n\r\n    // Contrast theme overrides\r\n    if (isContrastTheme(themeName)) {\r\n        // Root\r\n        (\r\n            ((styles.root as Required<IRawStyle>).selectors['.ms-Fabric--isFocusVisible &'] as Required<IRawStyle>)\r\n                .selectors[':focus'] as IRawStyle\r\n        ).backgroundColor = theme.palette.themeDark;\r\n\r\n        (\r\n            ((styles.root as Required<IRawStyle>).selectors['.ms-Fabric--isFocusVisible &'] as Required<IRawStyle>)\r\n                .selectors[':focus'] as IRawStyle\r\n        ).borderColor = theme.palette.themeDark;\r\n\r\n        (\r\n            ((styles.root as Required<IRawStyle>).selectors['.ms-Fabric--isFocusVisible &'] as Required<IRawStyle>)\r\n                .selectors[':focus'] as IRawStyle\r\n        ).color = theme.palette.white;\r\n\r\n        (\r\n            ((styles.root as Required<IRawStyle>).selectors['.ms-Fabric--isFocusVisible &'] as Required<IRawStyle>)\r\n                .selectors[':focus::after'] as IRawStyle\r\n        ).display = 'none';\r\n    }\r\n\r\n    return styles;\r\n}\r\n","export * from './CollapsibleTextField';\r\n","import { parseFloatStrictly } from '@addressbook/utilities-core';\r\nimport {\r\n    FormEntry,\r\n    FormQuestionType,\r\n    TextNumberRestriction,\r\n    TextNumberRestrictionType,\r\n    Validation,\r\n    ValidationFailure,\r\n    Validator,\r\n} from '../../types';\r\nimport { createValidationSuccess } from '../../utilities';\r\n\r\n/**\r\n * A function that returns the error message by the given restriction.\r\n *\r\n * @param restriction The restriction.\r\n * @returns The error message.\r\n */\r\nexport type ErrorMessageByRestriction = (restriction: TextNumberRestriction) => string;\r\n\r\nexport interface NumberValidatorOptions {\r\n    errorMessageWhenNaN?: string;\r\n    errorMessageByRestriction?: ErrorMessageByRestriction;\r\n}\r\n\r\nconst defaultErrorMessageWhenNaN = 'Please enter a number';\r\nconst defaultErrorMessageByRestriction: ErrorMessageByRestriction = restriction => {\r\n    switch (restriction.type) {\r\n        case TextNumberRestrictionType.GreaterThan:\r\n            return `Please enter a number greater than ${restriction.min}`;\r\n        case TextNumberRestrictionType.GreaterThanOrEqualTo:\r\n            return `Please enter a number greater than or equal to ${restriction.min}`;\r\n        case TextNumberRestrictionType.LessThan:\r\n            return `Please enter a number less than ${restriction.max}`;\r\n        case TextNumberRestrictionType.LessThanOrEqualTo:\r\n            return `Please enter a number less than or equal to ${restriction.max}`;\r\n        case TextNumberRestrictionType.EqualTo:\r\n            return `Please enter a number equal to ${restriction.value}`;\r\n        case TextNumberRestrictionType.NotEqualTo:\r\n            return `Please enter a number not equal to ${restriction.value}`;\r\n        case TextNumberRestrictionType.Between:\r\n            return `Please enter a number between ${restriction.min} and ${restriction.max}`;\r\n        case TextNumberRestrictionType.NotBetween:\r\n            return `Please enter a number not between ${restriction.min} and ${restriction.max}`;\r\n    }\r\n};\r\n\r\nfunction follow(content: number, restriction: TextNumberRestriction): boolean {\r\n    switch (restriction.type) {\r\n        case TextNumberRestrictionType.GreaterThan:\r\n            return content > restriction.min;\r\n        case TextNumberRestrictionType.GreaterThanOrEqualTo:\r\n            return content >= restriction.min;\r\n        case TextNumberRestrictionType.LessThan:\r\n            return content < restriction.max;\r\n        case TextNumberRestrictionType.LessThanOrEqualTo:\r\n            return content <= restriction.max;\r\n        case TextNumberRestrictionType.EqualTo:\r\n            return content === restriction.value;\r\n        case TextNumberRestrictionType.NotEqualTo:\r\n            return content !== restriction.value;\r\n        case TextNumberRestrictionType.Between:\r\n            return content >= restriction.min && content <= restriction.max;\r\n        case TextNumberRestrictionType.NotBetween:\r\n            return content < restriction.min || content > restriction.max;\r\n    }\r\n}\r\n\r\n/**\r\n * A validator that checks if the answer is a number.\r\n * If the question is not a number question, this validator will always pass.\r\n * Otherwise, this validator will fail if the answer is not a number.\r\n */\r\nexport class NumberValidator implements Validator<FormEntry> {\r\n    private errorMessageWhenNaN: string;\r\n    private errorMessageByRestriction: ErrorMessageByRestriction;\r\n\r\n    /**\r\n     * Creates a number validator.\r\n     *\r\n     * @param options.errorMessageWhenNaN The error message if the answer content is not a number.\r\n     * @param options.errorMessageByRestriction The error message if the answer content violates a restriction.\r\n     * @returns A number validator.\r\n     */\r\n    constructor({\r\n        errorMessageWhenNaN = defaultErrorMessageWhenNaN,\r\n        errorMessageByRestriction = defaultErrorMessageByRestriction,\r\n    }: NumberValidatorOptions = {}) {\r\n        this.errorMessageWhenNaN = errorMessageWhenNaN;\r\n        this.errorMessageByRestriction = errorMessageByRestriction;\r\n    }\r\n\r\n    validate({ question, answer }: FormEntry): Validation {\r\n        // Filter out non-number questions, or no answer yet.\r\n        if (question.type !== FormQuestionType.Text || !question.number || !answer.content) {\r\n            return createValidationSuccess();\r\n        }\r\n\r\n        const content = parseFloatStrictly(answer.content as string);\r\n\r\n        // Check for NaN.\r\n        if (isNaN(content)) {\r\n            return this.createValidationFailure(this.errorMessageWhenNaN);\r\n        }\r\n\r\n        // Check for restrictions.\r\n        const restriction = question.restriction;\r\n        if (restriction && !follow(content, restriction)) {\r\n            return this.createValidationFailure(this.errorMessageByRestriction(restriction));\r\n        }\r\n\r\n        return createValidationSuccess();\r\n    }\r\n\r\n    private createValidationFailure(errorMessage: string): ValidationFailure {\r\n        return { valid: false, errorMessage };\r\n    }\r\n}\r\n","export * from './DesigningTrailingActions';\r\n","import { FocusZone, mergeStyles } from '@fluentui/react';\r\nimport React from 'react';\r\nimport { RichTextFieldStrings, RichTextFieldTableSize } from '../../types';\r\nimport { useInsertTableStyles } from './InsertTable.styles';\r\n\r\nexport interface InsertTableProps extends React.HTMLAttributes<HTMLDivElement> {\r\n    maxTableSize: RichTextFieldTableSize;\r\n    onConfirm?: (tableSize: RichTextFieldTableSize) => void;\r\n    strings: Pick<RichTextFieldStrings, 'insertTableTitle'>;\r\n}\r\n\r\nexport const InsertTable: React.FC<InsertTableProps> = ({ maxTableSize, onConfirm, strings, className, ...props }) => {\r\n    const [tableSize, setTableSize] = React.useState<RichTextFieldTableSize>();\r\n    const title = React.useMemo(() => strings.insertTableTitle(tableSize), [strings, tableSize]);\r\n\r\n    const styles = useInsertTableStyles();\r\n    const gridStyle = React.useMemo(\r\n        () => ({ gridTemplate: `repeat(${maxTableSize.rows}, 1fr) / repeat(${maxTableSize.cols}, 1fr)` }),\r\n        [maxTableSize]\r\n    );\r\n\r\n    const gridCells = React.useMemo(\r\n        () =>\r\n            Array.from({ length: maxTableSize.rows }, (_, row) =>\r\n                Array.from({ length: maxTableSize.cols }, (_, col) => (\r\n                    <button\r\n                        key={`${row}-${col}`}\r\n                        className={mergeStyles(\r\n                            styles.cell,\r\n                            tableSize && row < tableSize.rows && col < tableSize.cols && styles.selecting\r\n                        )}\r\n                        onClick={onConfirm && (() => onConfirm(getTableSize(row, col)))}\r\n                        onFocus={() => setTableSize(getTableSize(row, col))}\r\n                        onPointerOver={event => event.currentTarget.focus()}\r\n                    />\r\n                ))\r\n            ),\r\n        [maxTableSize, onConfirm, styles, tableSize]\r\n    );\r\n\r\n    return (\r\n        <div className={mergeStyles(styles.root, className)} {...props}>\r\n            <div className={styles.header} role='alert' aria-live='polite'>\r\n                {title}\r\n            </div>\r\n            <FocusZone className={styles.table} style={gridStyle} role='grid' shouldFocusOnMount>\r\n                {gridCells}\r\n            </FocusZone>\r\n        </div>\r\n    );\r\n};\r\n\r\nfunction getTableSize(row: number, col: number): RichTextFieldTableSize {\r\n    return { rows: row + 1, cols: col + 1 };\r\n}\r\n","export * from './ColorMenuItem';\r\n","import { OrderGenerator } from '../types';\r\n\r\nexport interface HalfOrderGeneratorFactoryOptions {\r\n    minOrder: number;\r\n    maxOrder: number;\r\n}\r\n\r\n/**\r\n * Gets a new half order generator, who generates between two orders that is not equal to either order.\r\n * The new order is the average of the two orders.\r\n * If the previous order is undefined or smaller than the minimum order, the minimum order is used.\r\n * If the next order is undefined or larger than the maximum order, the maximum order is used.\r\n *\r\n * @param options.minOrder The minimum order.\r\n * @param options.maxOrder The maximum order.\r\n * @returns A new order.\r\n * @example halfOrderGeneratorFactory({ minOrder: 0, maxOrder: 100 })(20, 80) // 50\r\n * @example halfOrderGeneratorFactory({ minOrder: 0, maxOrder: 100 })(-100, 200) // 50\r\n * @example halfOrderGeneratorFactory({ minOrder: 0, maxOrder: 100 })(50, undefined) // 75\r\n * @example halfOrderGeneratorFactory({ minOrder: 0, maxOrder: 100 })(undefined, 50) // 25\r\n * @example halfOrderGeneratorFactory({ minOrder: 0, maxOrder: 100 })(undefined, undefined) // 50\r\n */\r\nexport function halfOrderGeneratorFactory({ minOrder, maxOrder }: HalfOrderGeneratorFactoryOptions): OrderGenerator {\r\n    if (minOrder >= maxOrder) throw new Error('minOrder must be smaller than maxOrder');\r\n    return (prevOrder, nextOrder) => {\r\n        const safePrevOrder = Math.max(prevOrder ?? Number.MIN_VALUE, minOrder);\r\n        const safeNextOrder = Math.min(nextOrder ?? Number.MAX_VALUE, maxOrder);\r\n        return (safePrevOrder + safeNextOrder) / 2;\r\n    };\r\n}\r\n\r\nexport const halfOrderGenerator = halfOrderGeneratorFactory({ minOrder: 0, maxOrder: 1_000_000_000 });\r\n","import { PrimaryButton } from '@fluentui/react';\r\nimport React from 'react';\r\nimport { FormProps } from '../../../abstractions';\r\nimport { FormContext, FormFeature, QuestionAction } from '../../types';\r\nimport { addNewFormEntry } from '../../utilities';\r\nimport { useDesigningTrailingActionsStyles } from './DesigningTrailingActions.styles';\r\n\r\nexport function DesigningTrailingActions({\r\n    context,\r\n    onContextChange,\r\n    feature,\r\n}: FormProps<FormContext, FormFeature>): JSX.Element {\r\n    const { entries } = context;\r\n    const { comparator, idGenerator, orderGenerator, constants, strings } = feature;\r\n\r\n    const reachMaxEntries = entries.length >= constants.maxEntries;\r\n\r\n    const addEntry = React.useCallback(() => {\r\n        const trailingEntry = [...entries].sort(comparator).pop();\r\n        const trailingSlotOrder = orderGenerator(trailingEntry?.question.order, undefined);\r\n        const newEntries = addNewFormEntry(entries, { idGenerator, order: trailingSlotOrder, strings });\r\n        onContextChange?.({ ...context, entries: newEntries });\r\n    }, [comparator, context, entries, idGenerator, onContextChange, orderGenerator, strings]);\r\n\r\n    const styles = useDesigningTrailingActionsStyles();\r\n\r\n    return (\r\n        <div className={styles.root}>\r\n            <PrimaryButton\r\n                iconProps={{ iconName: 'Add' }}\r\n                text={strings.questionAction(QuestionAction.Add)}\r\n                onClick={addEntry}\r\n                disabled={reachMaxEntries}\r\n            />\r\n        </div>\r\n    );\r\n}\r\n","/* istanbul ignore file */\r\n\r\nimport { IButtonStyles, ITheme } from '@fluentui/react';\r\nimport { teamsBorderRadius } from './constants';\r\n\r\nexport function getCommandBarButtonStyles(themeName: string, theme: ITheme): Partial<IButtonStyles> {\r\n    return {\r\n        root: {\r\n            // Work around for fluentui button focus outline not showing in iOS Safari.\r\n            ':focus-visible, .ms-Fabric--isFocusVisible &:focus': {\r\n                '::after': {\r\n                    content: '\"\"',\r\n                    position: 'absolute',\r\n                    inset: '2px',\r\n                    outline: `1px solid ${theme.palette.black}`,\r\n                    borderRadius: teamsBorderRadius,\r\n                },\r\n            },\r\n        },\r\n    };\r\n}\r\n","import React from 'react';\r\nimport { RenderFunction } from '../../abstractions';\r\nimport { DesigningTrailingActions } from '../components';\r\nimport { FormContext, FormFeature, FormMode } from '../types';\r\n\r\nexport const defaultTrailingRender: RenderFunction<FormContext, FormFeature> = props => {\r\n    switch (props.context.mode) {\r\n        case FormMode.Designing:\r\n            return <DesigningTrailingActions {...props} />;\r\n        default:\r\n            return null;\r\n    }\r\n};\r\n","import { ITheme } from '@fluentui/theme';\r\nimport { getTeamStyles } from './teams/teams-styles';\r\nimport { themeNames, getPalette } from './teams-palette';\r\n\r\nexport const getTeamsTheme = (themeName: themeNames, isMobile?: boolean): ITheme => {\r\n    const palette = getPalette(themeName);\r\n    palette.components = getTeamStyles(themeName, palette, isMobile);\r\n    return palette;\r\n};\r\n","import { BaseFormAnswer, BaseFormEntry, BaseFormQuestion, FormQuestionType } from './base';\r\n\r\nexport enum ChoiceAppearance {\r\n    Radio,\r\n    Dropdown,\r\n    Checkbox,\r\n}\r\n\r\n/**\r\n * A choice question.\r\n *\r\n * @property choices The choices that the user can choose from.\r\n * @property appearance The appearance of the choices.\r\n * @property shuffle Whether to shuffle the choices.\r\n * @property allowOther Whether to allow the user to enter other value.\r\n */\r\nexport interface ChoiceQuestion extends BaseFormQuestion<FormQuestionType.Choice> {\r\n    choices: string[];\r\n    appearance: ChoiceAppearance;\r\n    shuffle?: boolean;\r\n    allowOther?: boolean;\r\n}\r\n\r\n/**\r\n * The content of a choice answer.\r\n *\r\n * @property chosen The chosen choices.\r\n * @property other The other value that the user entered. Only available if `allowOther` of the question is `true`.\r\n * If the user choose the other option, but did not enter any value, this property will be an empty string.\r\n * If the user did not choose the other option, this property will be `undefined`.\r\n */\r\nexport interface ChoiceAnswerContent {\r\n    chosen: string[];\r\n    other?: string;\r\n}\r\n\r\nexport type ChoiceAnswer = BaseFormAnswer<ChoiceAnswerContent>;\r\n\r\nexport type ChoiceEntry = BaseFormEntry<ChoiceQuestion, ChoiceAnswer>;\r\n","import React from 'react';\r\nimport { InsertLink, InsertLinkProps } from './InsertLink';\r\nimport { useInsertLinkMenuStyles } from './InsertLink.styles';\r\n\r\nexport type InsertLinkMenuProps = InsertLinkProps;\r\n\r\nexport const InsertLinkMenu: React.FC<InsertLinkMenuProps> = ({\r\n    initialLink,\r\n    onConfirm,\r\n    onCancel,\r\n    normalizeUrl,\r\n    strings,\r\n}) => {\r\n    const styles = useInsertLinkMenuStyles();\r\n    return (\r\n        <div className={styles.root}>\r\n            <div className={styles.header} role='heading'>\r\n                {strings.insertLinkTitle}\r\n            </div>\r\n            <InsertLink\r\n                initialLink={initialLink}\r\n                onConfirm={onConfirm}\r\n                onCancel={onCancel}\r\n                normalizeUrl={normalizeUrl}\r\n                strings={strings}\r\n            />\r\n        </div>\r\n    );\r\n};\r\n"],"mappings":";;;;;;;;;;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAOA;AACA;AACA;AACA;AAEA;AAoCA;AAIA;AAAA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAOA;AACA;AACA;AACA;;AAGA;AACA;AACA;AAIA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAKA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAKA;AACA;AAMA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;ACnaA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;;;;;;;;;;;;;;ACFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAcA;;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;;;;;;;;;AASA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;AAMA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;;;;;;;;;;AAUA;AACA;AAMA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AAGA;AACA;AAIA;AACA;AACA;AACA;AAEA;;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;AAQA;AACA;AACA;AACA;;AAIA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;AC3TA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;;;;;;;;;;;;;;ACrFA;AAAA;AAAA;AASA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;ACzEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;ACvBA;AAAA;AAAA;AAAA;AAAA;AACA;;;;;;;;;;;;;;ACDA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AAQA;AAEA;;AAMA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AAOA;AAIA;;AAKA;AAEA;AAIA;AAEA;AAGA;AACA;AAOA;AASA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACzEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAyBA;;AAEA;AACA;AAAA;AAKA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AAIA;AAKA;AACA;AAEA;AACA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAGA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AAEA;AACA;AAIA;AAEA;AACA;AACA;AAGA;AACA;AACA;AAGA;AAKA;AAIA;AAIA;AACA;AACA;AAKA;AAMA;AAQA;AAEA;AACA;AACA;AACA;AAEA;AAOA;;;;;;;;;;;;;;AC1KA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;ACAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAIA;;AAGA;AACA;AAEA;AACA;AAEA;AAAA;AACA;AACA;AACA;AAAA;AAEA;AACA;AAGA;AAEA;AAEA;AAYA;AAEA;;;AAGA;AACA;AAGA;AACA;AACA;AACA;AAEA;;;;;;AAMA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;ACtEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;AChFA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AAEA;AAIA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACrKA;AACA;AACA;AAqBA;AAEA;;AAEA;AACA;AAGA;AAAA;AAFA;AAEA;AAEA;;;;;AAKA;AACA;AACA;AACA;AAEA;;;;;;AAMA;AACA;AACA;AACA;AAKA;AAEA;AACA;AAEA;;;;;AAKA;AACA;AACA;AAAA;AAEA;AACA;AACA;AAEA;;;;;AAKA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AAEA;;;;;AAKA;AACA;AACA;AAAA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAEA;;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAEA;;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AAEA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAEA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAEA;;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAEA;;AAKA;AAAA;AAEA;AACA;AACA;AAKA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;AAMA;AACA;AACA;AACA;;;;;;;;;;;;;;AChOA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;ACRA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;ACCA;AAAA;AAAA;AAMA;AAEA;;;;AAIA;AACA;AAGA;;;;;AAKA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;;;;;;;;;;;;;;ACvDA;AAAA;AAAA;AAqCA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAIA;AAIA;AAIA;AAGA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;ACtGA;AAAA;AAAA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;ACpBA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;ACXA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAOA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAIA;;AAMA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAAA;AAEA;AAEA;AACA;AAEA;AAEA;AAMA;AAIA;AACA;AAGA;AAWA;AAEA;;AAEA;AACA;AAGA;AACA;AACA;AACA;AAEA;;;;;;AAMA;AACA;AACA;AAEA;AACA;AAEA;AACA;;;;;;;;;;;;;;ACrGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;;;;;;;;;;;;;;ACvDA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACXA;AAAA;AAAA;;;;;;;;;;;;;;ACAA;AAAA;AAAA;AAAA;AAAA;AAQA;AACA;AACA;AAEA;AAIA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;;;;;;;;;;;;;;AChIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;ACzDA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;ACRA;AAAA;AAAA;AAsBA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAIA;AAIA;AACA;AACA;;;;;;;;;;;;;;AC7DA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAIA;;;;;;;;;;;;;;AC/CA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;;;;;;;;;;;;;;ACFA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACRA;AAAA;AAAA;AAAA;AACA;AAMA;AACA;AAEA;AACA;AAEA;;;;;;;;;;;AAWA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;;;;;;;;;;;;;;ACtCA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAEA;AAIA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;ACvGA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;ACAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AAEA;AAMA;AACA;AAEA;AAAA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AAEA;AACA;AAGA;AACA;AACA;AACA;AAKA;AAKA;AACA;AACA;AACA;AAEA;AAKA;AACA;AACA;AACA;AAEA;AAKA;AACA;AACA;AACA;AAIA;AAEA;AACA;AACA;AAIA;AACA;AACA;AACA;AAEA;AAMA;AAQA;AACA;AAKA;AACA;AACA;AAEA;AASA;;;;;;;;;;;;;;AC5HA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;ACxCA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AAavLA;AAAA;AAAA;AAAA;AAEA;AACA;AAEA;AAOA;;;;;;;;AAQA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAAA;AAEA;AACA;AAAA;AAEA;AACA;AAAA;AACA;AAEA;AAAA;AACA;AAEA;AACA;AAAA;AAEA;AACA;AAEA;AACA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAEA;AACA;AAAA;AAEA;AACA;AAAA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;;;;;;AAMA;AACA;AACA;AACA;AAEA;;;;;;AAMA;AACA;AACA;AACA;AAAA;AAEA;AACA;AAAA;AAEA;AACA;AAEA;;;;;;;;;;;;;AAaA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;AAIA;AACA;AACA;AACA;;;;;;;;;;;;;;ACpJA;AAAA;AAAA;AAAA;AAGA;;;;AAIA;AACA;AAKA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;;AAEA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AAIA;AACA;AACA;AAAA;AAEA;AACA;;;;;;;;;;;;;;ACzCA;AAAA;AAAA;AAAA;AAGA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAKA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;AC7LA;AAAA;AAAA;AAAA;AAGA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;;;;;;;;;;;;;;ACrFA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;ACAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;ACLA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AAEA;AAGA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAKA;AAIA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAMA;AAIA;AACA;AACA;AAGA;AAAA;AACA;AACA;AACA;AACA;AAQA;;;;;;;;;;;;;;AChEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUA;;;;;;AAMA;AACA;AAIA;AAEA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AAGA;AAIA;;;;;;AAMA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AAGA;AAEA;;;;;;;;AAQA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAOA;;;;;;AAMA;AACA;AACA;AACA;AAAA;AAEA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;;;;;;;;;;;;;;ACvHA;AAAA;AAAA;AAEA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;ACfA;AAAA;AAAA;AAAA;AAAA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACDA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAUA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAAA;AAEA;AACA;AAGA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AAEA;AAcA;AAAA;AAEA;;AAEA;AACA;AAGA;AACA;AACA;AACA;AAEA;;;;;;AAMA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;ACzFA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;ACRA;AAAA;AAAA;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;AC1BA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;AC3BA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAqBA;AACA;AAEA;AACA;AACA;;AACA;AAEA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;AClHA;AAAA;AAAA;AAAA;;AAEA;AAGA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAWA;AACA;AACA;AACA;AAEA;AACA;AACA;AAQA;AAEA;AACA;AAQA;AAEA;AACA;AACA;AAQA;AACA;AAEA;AACA;AAQA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAOA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AASA;AACA;AACA;AAKA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAMA;AAIA;AAEA;AACA;AAEA;AACA;AAQA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;;;;;;;;;;;;;;AC3LA;AAAA;;;;;AAKA;AACA;;;;;;;;;;;;;;ACTA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;;;;;;;;;;;;;;ACFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;ACPA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AAIA;AAOA;AACA;AAEA;;AACA;AACA;AACA;AAIA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;;AAEA;AAAA;AAEA;AAGA;AAKA;AACA;AACA;AACA;AAIA;AAEA;AAMA;AAMA;AAMA;AAMA;AAOA;;;;;;;;;;;;;;ACtGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACpCA;AACA;AACA;AACA;AAeA;AAAA;AASA;AACA;AACA;AAEA;AACA;AAAA;AACA;AACA;AAEA;AAEA;AAAA;AACA;AAIA;AACA;AAEA;AAQA;AAMA;AACA;AACA;AAMA;;;;;;;;;;;;;;ACpEA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;ACAA;AAAA;AAAA;AAGA;;;;;;;;;;;;;;ACHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAEA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAGA;AAMA;AACA;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;ACzWA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;ACAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAUA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAIA;AACA;AACA;AAGA;AAGA;AACA;AAEA;AAGA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;;;;;;;;;;;;;;ACrWA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACVA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;;;;;;;;;;;;;;ACrDA;AAAA;AAAA;AAAA;AAAA;;AAEA;AAGA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAGA;AACA;AAEA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AClLA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAWA;AACA;AACA;;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAAA;AAEA;AACA;AAGA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAmBA;AAAA;AAEA;;AAEA;AACA;AAGA;AACA;AACA;AACA;AAEA;;;;;AAKA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;ACvFA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;ACrDA;AAAA;;;;;;AAMA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAgBA;AAAA;AAgBA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAGA;AAEA;AAEA;AAAA;AAgBA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAKA;AACA;AACA;AAGA;AACA;AACA;AAKA;AAGA;AACA;AACA;AAQA;AAGA;AAOA;AAAA;AAiBA;AAEA;AACA;AAAA;AACA;AAEA;AAKA;AACA;AAGA;AACA;AAUA;AAIA;AACA;AAKA;AAWA;AAQA;AAiBA;AAMA;AAAA;AACA;AACA;AAEA;AAEA;AASA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACtPA;AACA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;;AACA;AACA;AAAA;AACA;AACA;AAAA;AAEA;;AACA;AACA;AAAA;AACA;AACA;AAAA;;;;;;;;;;;;;;AClIA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;ACjDA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAMA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;;;;;;;;;;;;;;AC5GA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAOA;AAEA;AAEA;AAKA;AACA;AACA;AAEA;AAAA;AAEA;AACA;AACA;AACA;AAKA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAMA;AAEA;AAIA;AASA;AAKA;;;;;;;;;;;;;;AC7EA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;ACJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;;;;;;;;;AASA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;AAMA;AACA;AAIA;AAGA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AAGA;AAUA;;;;;;AAMA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAGA;;;;;;;;;;;;;;ACtFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACRA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAQA;AAAA;AAOA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;;AACA;AACA;AACA;AACA;AAEA;AAEA;AAAA;AACA;AAIA;AACA;AACA;AACA;;AAaA;AAEA;AAgBA;AAUA;AACA;AAQA;AAIA;;;;;;;;;;;;;;AC1GA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AAEA;AAEA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAGA;AAIA;AACA;AACA;AAGA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;AC3IA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;;;;;;;;;;;;;;ACFA;AAAA;AAAA;AAsBA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAIA;AAIA;AACA;AACA;;;;;;;;;;;;;;AC7DA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;ACzCA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;;;;;;;;;;;;;;ACFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;;;;;;;;;;;;;ACDA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;AC3EA;AAAA;;AAEA;AAIA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;AClEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAaA;AAEA;AAEA;AAsxNA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAQA;AAEA;AACA;AACA;AACA;AAIA;;AAMA;AACA;AAEA;AACA;AACA;AAKA;AACA;AACA;AAEA;;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AAaA;AACA;AACA;AAEA;AAMA;;AACA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAOA;AAEA;;AAEA;AACA;AAGA;AACA;AACA;AACA;AAEA;;;;;;AAMA;AACA;AACA;AAEA;AACA;AAEA;AACA;;;;;;;;;;;;;;ACtlKA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;ACXA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AAEA;AAIA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;AC1EA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACJA;AACA;AACA;AACA;AAOA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;;;;;;;;;;;;;;ACvBA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;ACVA;AAAA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;AChBA;AAAA;AAAA;AAAA;AAEA;;;;;AAKA;AACA;AACA;AACA;AACA;AAEA;;;;;AAKA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;ACxBA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;ACAA;AAAA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;;;;;;;;;;;;;;ACdA;AAAA;AAAA;AAAA;AAGA;AACA;AAEA;AAIA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;AC1CA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAGA;AACA;AACA;AACA;AAEA;;AAGA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AAIA;AAEA;AAEA;AACA;AACA;AAEA;AAGA;;;;;;;;;;;;;;ACrCA;AAAA;AAAA;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;ACrBA;AAAA;AAAA;AAAA;AAUA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;ACrDA;AAAA;AAAA;AAAA;AACA;AAOA;AACA;AAEA;;AAEA;AACA;AAIA;;;;;;AAMA;AACA;AAIA;AACA;AACA;AAEA;;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;;;;;;;;;;;;;;AC9DA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;AC/CA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;ACAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;AChBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AAKA;AAMA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AAGA;AACA;AAKA;AAQA;AAKA;AAKA;AAMA;AAKA;AAKA;AAKA;AAKA;AACA;AACA;AAEA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACrWA;AACA;AACA;AACA;AACA;AAkCA;;AAEA;AACA;AACA;AACA;AAEA;AACA;AAGA;AACA;AACA;AACA;AACA;AAIA;AAEA;AAEA;AAOA;;;;;;;;;;;;;;ACpEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAQA;AACA;AAEA;AASA;;;;;;;;;;;;;;ACtBA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;ACAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;ACAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAIA;AAOA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAIA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAKA;AASA;;;;;;;;;;;;;;AChDA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;AC/CA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;AC9IA;AAAA;AAAA;AAAA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;;;;;;;;;;;;;;AC9EA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAGA;;AAEA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAEA;AAEA;AACA;AAGA;;;;;;;;;;;;;;AChCA;AAAA;AAAA;AAGA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;AC1DA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;ACzCA;AAAA;AAAA;AAiBA;AACA;AAEA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;;;;;;;;;;;;;;ACvCA;AAAA;AAEA;;;;;;;;;;;;;;ACFA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;ACAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAGA;;;AAGA;AACA;AAkBA;;;;;AAKA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;ACnCA;AAAA;AAAA;AAwBA;AACA;AAGA;;;;AAIA;AACA;AAIA;;;;;;AAMA;AACA;AAIA;AACA;AACA;AAEA;;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;ACnFA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;ACAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;;;;;;;;;;;;;;ACFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAOA;AAMA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAKA;AAEA;;AAEA;AACA;AAGA;AACA;AACA;AACA;AAEA;;;;;;AAMA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;AC7FA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;ACzCA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;ACLA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUA;AACA;AACA;AACA;AAEA;AAIA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAGA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAGA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAUA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAGA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAKA;AAGA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACxUA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AA+BA;AAEA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAUA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAKA;AAKA;AAOA;AAQA;AACA;AAOA;AAWA;;;;;;;;;;;;;;AC3LA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;AAIA;AACA;AACA;AACA;AAEA;;;;;;;;AAQA;AACA;;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;AAOA;AACA;AAKA;AACA;AAEA;AAEA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AAEA;;;;;;;AAOA;AACA;AAKA;AACA;AAEA;;;;;AAKA;AACA;AACA;AACA;AACA;AAEA;;;;;AAKA;AACA;AACA;AACA;AAEA;;;;;AAKA;AACA;AACA;AACA;;;;;;;;;;;;;;AC1GA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;ACnKA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;;;;;;;;;;;;;;AClGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;ACvLA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AAIA;AACA;AAEA;AAKA;AAAA;AAEA;AAEA;AAOA;AACA;AACA;AAIA;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AAMA;;;;;;;;;;;;;;AC3DA;AAAA;;;;;;;;;;;;;;ACFA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;ACtHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAiBA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAGA;AAEA;AACA;AACA;AACA;AAGA;AAIA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAKA;AACA;AACA;AAsCA;;;;;;;;;;;;;;;;;;;;;;;;;;;AClHA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAGA;AAEA;AAGA;AAEA;AAEA;AACA;AAGA;;;;;;;;;;;;;;ACjBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAOA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAIA;AAMA;AACA;AAEA;AACA;AACA;AAKA;AAEA;AACA;AAEA;;AAAA;AAWA;AAEA;AASA;;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AASA;AAEA;;AAEA;AACA;AAGA;AACA;AACA;AACA;AAEA;;;;;;AAMA;AACA;AACA;AAEA;AACA;AAEA;AACA;;;;;;;;;;;;;;AChHA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;AC/EA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;;;;;;;;;;;;;;ACFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;;;;;;;;;;;;;;AC5BA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;;;;;;ACnOA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;ACVA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;AC3BA;AAAA;AAAA;AAAA;AAAA;AACA;AAGA;;;;AAIA;AACA;AAKA;AACA;AACA;AAEA;AAKA;AAEA;AAGA;AAGA;;;;;;;;;;;;;;ACyBA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACjFA;AACA;AACA;AAQA;;AAEA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AAEA;AAKA;AACA;AACA;AAMA;;;;;;;;;;;;;;AChDA;AAAA;AAAA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;ACTA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAGA;AAGA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;ACntZA;AAAA;AAAA;;;;;;;;;;;;;;ACAA;AAAA;AAAA;AAAA;AAAA;AACA;AASA;AAeA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;AAIA;AACA;AAIA;;;;;;AAMA;AACA;AAIA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;;;;;;;;;;;;;;ACrHA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACAA;AACA;AAEA;AAQA;AAAA;AACA;AACA;AAEA;AACA;AAKA;AAmBA;AAEA;AAGA;AAKA;AAEA;AACA;AACA;;;;;;;;;;;;;;ACtDA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;ACOA;AAAA;AAAA;;;;;;;;;;;;;;AAcA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;;;;;;AC/BA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AAEA;AAKA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AAQA;;;;;;;;;;;;;;ACpCA;AAAA;AAAA;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;ACpBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;ACXA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;ACNA;AAAA;AAAA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;ACNA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAIA;AAOA;AACA;AAEA;AAGA;AASA;;;;;A","sourceRoot":""}